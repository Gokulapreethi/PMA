package com.ase;

import android.app.Activity;
import android.app.AlarmManager;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.DownloadManager;
import android.app.PendingIntent;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.content.res.Resources;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Matrix;
import android.graphics.Paint;
import android.graphics.Typeface;
import android.graphics.drawable.ColorDrawable;
import android.location.LocationManager;
import android.media.ExifInterface;
import android.net.ConnectivityManager;
import android.net.NetworkInfo;
import android.net.Uri;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.os.CountDownTimer;
import android.os.Environment;
import android.os.Handler;
import android.provider.MediaStore;
import android.provider.OpenableColumns;
import android.provider.Settings;
import android.support.v7.widget.PopupMenu;
import android.text.Editable;
import android.text.TextUtils;
import android.text.TextWatcher;
import android.util.Base64;
import android.util.Log;
import android.view.GestureDetector;
import android.view.Gravity;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.view.inputmethod.InputMethodManager;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.ArrayAdapter;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.EditText;
import android.widget.GridView;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TableRow;
import android.widget.TextView;
import android.widget.Toast;

import com.ase.Bean.CustomBean;
import com.ase.Bean.Label;
import com.ase.Bean.ListofFileds;
import com.ase.Bean.ProjectDetailsBean;
import com.ase.Bean.SipNotification;
import com.ase.Bean.TaskDetailsBean;
import com.ase.Bean.checkListDetails;
import com.ase.Bean.listofEscalations;
import com.ase.DB.VideoCallDataBase;
import com.ase.DatePicker.CustomTravelPickerActivity;
import com.ase.Forms.FormsListActivity;
import com.ase.Forms.FormsListBean;
import com.ase.RandomNumber.Utility;
import com.ase.sketh.ProjectsFragment;
import com.ase.sketh.SwipeListview;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParser;
import com.google.gson.JsonSyntaxException;
import com.google.gson.reflect.TypeToken;
import com.lowagie.text.Font;
import com.lowagie.text.Phrase;
import com.lowagie.text.pdf.PdfPCell;
import com.lowagie.text.pdf.PdfPTable;

import org.apache.http.NameValuePair;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;
import org.pjsip.pjsua2.Buddy;
import org.pjsip.pjsua2.BuddyConfig;
import org.pjsip.pjsua2.CallOpParam;
import org.pjsip.pjsua2.CallSetting;
import org.pjsip.pjsua2.SendInstantMessageParam;
import org.pjsip.pjsua2.app.CallActivity;
import org.pjsip.pjsua2.app.GroupMemberAccess;
import org.pjsip.pjsua2.app.MainActivity;
import org.pjsip.pjsua2.app.MyBuddy;
import org.pjsip.pjsua2.app.MyCall;

import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.lang.reflect.Type;
import java.net.HttpURLConnection;
import java.net.URL;
import java.nio.charset.Charset;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.TimeZone;
import java.util.Timer;
import java.util.TimerTask;
import java.util.concurrent.TimeUnit;

import Services.ShowOrCancelProgress;
import json.CommunicationBean;
import json.EnumJsonWebservicename;
import json.ListMember;
import json.WebServiceInterface;
import xml.xmlcomposer;
import xml.xmlparser;

import static com.ase.MediaListAdapter.mPlayer;
import static com.ase.MediaListAdapter.onClick;

/**
 * Created by saravanakumar on 7/11/2016.
 */
public class NewTaskConversation extends Activity implements View.OnClickListener, WebServiceInterface, CommonDateTimePicker.DateWatcher, DateTimePicker.DateWatcher {
    private GestureDetector gestureScanner;
    String taskacceptorreject = "None";
    String Leave_taskid;
    public static MediaListAdapter.ViewHolder holder;
    public ArrayList<ConflictCheckBean> checkBeenLeave_List = new ArrayList<ConflictCheckBean>();
    public ArrayList<ConflictCheckBean> conflictobject = new ArrayList<ConflictCheckBean>();
    ArrayList<CustomBean> rhsList = null;
    ArrayList<ListofFileds> lhsList = null;
    ArrayList<listofEscalations> listofEsc = null;
    VideoCallDataBase dataBase;
    ArrayList<String> callmembers = new ArrayList<String>();
    public ArrayList<MultifileUploadBean> multifileUploadBeans = new ArrayList<>();
    public static Typeface normal_type;
    public static MediaListAdapter medialistadapter;
    public static String ss = "video";
    public static boolean isSignalidSame = false, is_date = false, is_tempDate = false, is_ok = false, isResend = false;
    static NewTaskConversation newTaskConversation;
    static ArrayList<TaskDetailsBean> taskList = new ArrayList<>();
    static ArrayList<TaskDetailsBean> datelist = new ArrayList<>();
    static ArrayList<TaskDetailsBean> arrayListforTask;
    public static HashMap<String, MyBuddy> tempvalue = new HashMap<String, MyBuddy>();
    public String strIPath, Location, project_toUsers = "";
    public String Leave_Signal_Id = "";
    public ArrayList<ContactBean> buddyList;
    public String webtaskId, alarmId, tasktime = null, taskUTCtime, issueId;
    String JobCodeNo, ActivityCode;
    LinearLayout icons, linear1;
    Button cancel1, call, photo, video, audio, doc, addTxt, calen_picker, tab_datechangerequest, sketch, update, location, accept, reject, task_approve, task_issue;
    Button remind_me, reassign_note, template_form;
    EditText des;
    boolean escalation = false;
    LinearLayout linearforimage;
    TextView replymessage, replymessagesendername;
    String reply_mime_type;
    ImageView replyimageview, cancelreply, status_job, travel_job;
    private HashMap<String, Bitmap> cacheBitmap;
    RelativeLayout actorrej;
    TableRow assignFromTemplate, addobserverRow, mute_audio, reassign_tr, percentcompletion_tr, View_Task_TR;
    View assignFromTemplateView, addobserverRowView, percentCompletionView, View_Task_View;
    boolean des_click = false, forword_to = false;
    TextView backLayout, taskGiver, updatingtask;
    TextView taskgiver, reminingtime, estimated_timer_tv, cancel, addobservertext, tv_reassign, tv_percompletion, View_Task_Text_View;
    int toUserId, fromId;
    String filePath;
    String queryy;
    String query_5;
    String projectGroup_Mems, OracleParentTaskId;
    String Old_signalId;
    String filter, percentage_value, private_member, project_temp;
    int clickPosition;
    String[] dates;
    String isRemainderRequired;
    String today, startdate, enddate, reminderdate, duration, durationunit, repeatfreq, reminderquote, remindertone, reminderfreq, ch_remarks, date_header, percent = null, final_date = null;
    String strDATE, enDate = null, filepath = null, fileOriginalName = null, fileExt = null;
    int yyyy;
    String addedobserver = "";
    String removedobserver = "";
    int priority;
    int cancelAlarmId;
    String fileName = null, temp_duration = null, duration_unit = null, remquotes_1 = null;
    ImageView addObserver, sendBtn, tagFilter, sendTemplate, mute_icon, savetemplate1, save, barchart, showMy_ID;
    ImageButton Arrow;
    public static ArrayList<String> listOfObservers;
    ArrayList<String> existEscaObsUN, EscaObsUN;
    ArrayList<String> listMembers_2, rejected, project_SipUser, listofProjectMembers, listObservers, escalate_observersId, escalate_observersFLName;
    ArrayList<String> escalate_observers = new ArrayList<>();
    ArrayList<ListMember> listMembers_1;
    ArrayList<String> gridview_text, gridviewtaker_text = new ArrayList<>(), gridviewObserver = new ArrayList<>();
    ArrayList<Integer> gridview_thump, gridviewtaker_thump = new ArrayList<>(), gridviewObserver_thump = new ArrayList<>();
    ArrayList<ContactBean> project_toUser;
    ArrayList<Integer> toUserListOfId;
    ProgressDialog progress;
    public String toUserName, from_UserName, taskReceiver, taskType, taskStatus, projectId, parentTaskId, isParentTask = "N";
    TextView headerName, savetemplate;
    GridView gridview, gridview_taker, gridview_observer;
    boolean check_spinner, isGrp_Percent = false;
    boolean isTaskName = true, isRem_time = false, isTaskAccept = false, accept_task = false, is_mmfile;
    SwipeListview swipeDetector;
    Calendar myCalendar;
    ArrayList<TaskDetailsBean> taskDetailsBeanArrayList1, taskDetailsBeen_1, bean_list;
    public Context context;
    ArrayList<TaskDetailsBean> taskList_1, taskList_3, accept_list;
    ArrayList<TaskDetailsBean> taskList_2, taskList_4, taskList_5, taskList_8, taskList_9, taskList_10, taskList_11, taskList_12;
    String task_No, subType = "normal";
    String taskName, ownerOfTask, category, task_catagory, datepattern;
    boolean tem = false, edit = false;
    boolean template = false, isswipe = false, project = false, note = false, chat = false;
    boolean isNewTemplate = false;
    boolean remove_check = false, isobservationSketchselected, isactionSketchselected, isremarksSketchselected, isobservationtextselected, isactiontextselected, isRemarkstextselected, isSynopsistextselected, isSynopsisSketchselected;
    String percentage = "0";
    String test, groupname, checker, mime_Type, escalation_to_users;
    String type;
    TaskDetailsBean forword_bean, taskObs_Bean;
    ArrayList<TaskDetailsBean> getTaskListforPercentage, getTaskListforPercentage1;
    public GroupMemberAccess groupMemberAccess = new GroupMemberAccess();
    SimpleDateFormat dateFormat;
    String currentDate, projectCurrentStatus;
    CounterClass counter, estimCounter;
    ListView list_all;
    RelativeLayout assign_taskview;
    LinearLayout ll_networkUI = null, bottom_layout, options, updatingtask_layout = null;
    ProgressBar progress_updating;
    RelativeLayout task_accept_layout;
    TextView tv_networkstate = null, head, mute;
    ImageView signature_path, photo_path, tech_signature_path, observation_1, action_taken_1, remarks_complete_1, synopsis_img;
    public static boolean conflict = false;
    boolean arrow = false, isTask_Over = false, istask_issue, isNote = false, isProjectFromOracle, isCustomerSign, isObservation, isActionTaken, isCustomerRemarks, isSynopsis;
    int vie = 0;
    AppSharedpreferences appSharedpreferences;
    public static boolean calender = false;
    private String toas = null, Weekdays, oracleProjectOwner = "";
    private String quotes = "\"";
    private boolean startTimeSet = false, endTimeSet = false;
    private static Handler handler = new Handler();
    boolean check_call = false;
    private TaskDetailsBean common_taskDetailsBean = new TaskDetailsBean();
    private xmlcomposer xmlComposer = null;
    TaskDateUpdate taskDateUpdate;
    Timer timer = null;
    TimerTask timerTask;
    SimpleDateFormat ft;
    private ShowOrCancelProgress progressListener;
    private String proxy_user = "proxyua_highmessaging.com";
    //        private String proxy_user = "proxydev_highmessaging.com";
//    private String proxy_user = "proxyua_highmessaging.org";
    private int taskList_count = 0;
    boolean Scroll = false;
    boolean oncreate_query = false;
    //For Scroll
    ImageView down_icon = null;
    TextView tv_unreadCountScroll = null;
    int show_unreadCount = 0;
    public String[] texts, texts_taker, texts_observer;
    public Integer[] mThumbIds, mThumbIds_taker, mthumbIds_observer;
    // For Reply
    String sender_reply = null;
    ArrayList<String> OracleStatusList;
    boolean ispercentageLocation;

    //Added For ASE
    boolean Start_work;
    boolean hold_work;
    boolean resume_work;
    boolean pause_work;
    boolean restart_work;
    boolean completed_work;
    boolean Self_assign = false;
    boolean isLocation = false;
    boolean isTaskCompleted = false;
    boolean isForOracleProject = false;
    boolean isDivertedON = false;
    boolean isDeassign = false;
    boolean isFromPauseClick = false;
    boolean isOracleStatusList = false;
    boolean istaskCompletebyUser = false;
    ArrayList<String> custom_1MediaList;
    String date_current1 = null;
    Date cur_date = null;
    Date Eod_selectedDate = null;
    private HashMap<Integer, String> statusCompletedFieldValues = new HashMap<Integer, String>();
    String TravelStartdate, TravelEnddate, status_signature, photo_signature, tech_signature, PickDate, travel_endDate, observation_path, Action_Taken_path, customerRemarks_path, synopsis_path;
    String FromTravelStart, FromTravelEnd, ActivityStartdate, ActivityEnddate, TotravelStart, ToTravelEnd, taskCompletedDate, completedate_display;
    String observationStatus, actiontakenStatus, custsignnameStatus, HMReadingStatus, machine_model, machine_serialno, machine_description, machion_make_edit, synopsis_status;
    ArrayList<String> travel_date_details;
    String dir_path = Environment.getExternalStorageDirectory() + "/High Message/downloads/";

    static AlertDialog.Builder alertbox;
    static AlertDialog alertDialog;

    // for location
    LOCTracker loc;
    LocationManager locationManager;
    double latitude_global = 0.0;
    double longitude_global = 0.0;
    private boolean back_preesed = false;

    public static NewTaskConversation getInstance() {
        return newTaskConversation;
    }

    public static boolean isAvailable(Context ctx, Intent intent) {
        final PackageManager mgr = ctx.getPackageManager();
        List<ResolveInfo> list = mgr.queryIntentActivities(intent, PackageManager.MATCH_DEFAULT_ONLY);
        return list.size() > 0;
    }

    public static void clearMediaList(int position) {
        taskList.remove(position);
        if (taskList.size() == 0) {
            taskList.clear();
        }

        handler.post(new Runnable() {
            @Override
            public void run() {
                medialistadapter.notifyDataSetChanged();
                Log.i("NewTaskConversation", "Refresh Handled here 22 ");
            }
        });
    }

    private static byte[] loadFile(File file) throws IOException {
        InputStream is = new FileInputStream(file);
        long length = file.length();
        if (length > Integer.MAX_VALUE) {
            // File is too large
        }
        byte[] bytes = new byte[(int) length];
        int offset = 0;
        int numRead = 0;
        while (offset < bytes.length
                && (numRead = is.read(bytes, offset, bytes.length - offset)) >= 0) {
            offset += numRead;
        }

        if (offset < bytes.length) {
            throw new IOException("Could not completely read file " + file.getName());
        }
        is.close();
        return bytes;
    }

    private static String formatDate(int year, int month, int day) {
        Calendar cal = Calendar.getInstance();
        cal.setTimeInMillis(0);
        cal.set(year, month, day);
        Date date = cal.getTime();
        SimpleDateFormat sdf = new SimpleDateFormat("dd/MMM/yyyy");
        return sdf.format(date);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.task_conversation);
        Log.d("projecthistory", "*************************14 ONcreate");
        ft = new SimpleDateFormat("E yyyy.MM.dd 'at' hh:mm:ss.SSS a zzz");
        Date dn = new Date();
        Log.i("Performance", "onCreate Start NewTaskConversation " + ft.format(dn));
        Appreference.template_page = "NewTaskConversation";
        Appreference.context_table.put("taskcoversation", this);
        Log.d("NewTaskConversation", "oncreate ");
        final Bundle bundle = getIntent().getExtras();
        final boolean is_temp = bundle.getBoolean("is_Template");
        isNewTemplate = bundle.getBoolean("template");
        gestureScanner = new GestureDetector(this, simpleOnGestureListener);
        Appreference.taskId_webservice = true;
        arrayListforTask = new ArrayList<>();
        custom_1MediaList = new ArrayList<>();
        myCalendar = Calendar.getInstance();
        context = this;
        progressListener = Appreference.main_Activity_context;
        datepattern = Appreference.getDeviceDatePattern(context);
        newTaskConversation = this;
        appSharedpreferences = AppSharedpreferences.getInstance(context);
        dataBase = VideoCallDataBase.getDB(context);
        Appreference.createdFormsList.clear();
        xmlComposer = new xmlcomposer();
        try {
            if (Appreference.loginuserdetails != null && Appreference.loginuserdetails.getId() > 0) {
                fromId = Appreference.loginuserdetails.getId();
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "onCreate Appreference.loginuserdetails.getId() Exception : " + e.getMessage(), "WARN", null);
        }
        down_icon = (ImageView) findViewById(R.id.drop_down);
        down_icon.setVisibility(View.GONE);
        tv_unreadCountScroll = (TextView) findViewById(R.id.item_counter);
        tv_unreadCountScroll.setVisibility(View.INVISIBLE);
        ll_networkUI = (LinearLayout) findViewById(R.id.ll_networkstate);
        updatingtask_layout = (LinearLayout) findViewById(R.id.updatingtask_layout);
        progress_updating = (ProgressBar) findViewById(R.id.progress_updating);
        updatingtask = (TextView) findViewById(R.id.updatingtask);
        tv_networkstate = (TextView) findViewById(R.id.tv_networksate);
        backLayout = (TextView) findViewById(R.id.cancel);
        save = (ImageView) findViewById(R.id.submit);
        taskGiver = (TextView) findViewById(R.id.text11);
        taskgiver = (TextView) findViewById(R.id.text12);
        addobserverRowView = (View) findViewById(R.id.addobserverRowView);
        View_Task_View = (View) findViewById(R.id.View_Task_View);
        percentCompletionView = (View) findViewById(R.id.percentcompletionview);
        assignFromTemplateView = (View) findViewById(R.id.assignFromTemplateView);
        assignFromTemplate = (TableRow) findViewById(R.id.assignFromTemplate);
        mute_audio = (TableRow) findViewById(R.id.mute_audio);
        addobserverRow = (TableRow) findViewById(R.id.addobserverRow);
//        reassign_tr = (TableRow) findViewById(R.id.reassign_tr);
        percentcompletion_tr = (TableRow) findViewById(R.id.percent_completion_tr);
        View_Task_TR = (TableRow) findViewById(R.id.View_Task_TR);
        addobservertext = (TextView) findViewById(R.id.addobservertext);
        tv_reassign = (TextView) findViewById(R.id.tv_reassign);
        assign_taskview = (RelativeLayout) findViewById(R.id.assign_taskview);
        tv_percompletion = (TextView) findViewById(R.id.tv_percompletion);
        reminingtime = (TextView) findViewById(R.id.text13);
        estimated_timer_tv = (TextView) findViewById(R.id.estimated_timer);
        status_job = (ImageView) findViewById(R.id.status_job);
        travel_job = (ImageView) findViewById(R.id.travel_job);

        photo = (Button) findViewById(R.id.photo);
        location = (Button) findViewById(R.id.location);
        video = (Button) findViewById(R.id.video);
        audio = (Button) findViewById(R.id.audio);
        call = (Button) findViewById(R.id.call);
        doc = (Button) findViewById(R.id.file);
        sendTemplate = (ImageView) findViewById(R.id.sendtemplate);
        barchart = (ImageView) findViewById(R.id.barchart);
        Arrow = (ImageButton) findViewById(R.id.down);

        addTxt = (Button) findViewById(R.id.txt_addBtn);
        sendBtn = (ImageView) findViewById(R.id.sendBtn);
        calen_picker = (Button) findViewById(R.id.calender_picker);
        remind_me = (Button) findViewById(R.id.remind_me);
        reassign_note = (Button) findViewById(R.id.reassign_note);
        tab_datechangerequest = (Button) findViewById(R.id.date_request);
        sketch = (Button) findViewById(R.id.write);
        update = (Button) findViewById(R.id.updatelevel);
        des = (EditText) findViewById(R.id.textvieww);
        replyimageview = (ImageView) findViewById(R.id.replyimage);
        replymessage = (TextView) findViewById(R.id.replymessage);
        replymessagesendername = (TextView) findViewById(R.id.replymessagesendername);
        linearforimage = (LinearLayout) findViewById(R.id.linearforimage);
        linearforimage.setVisibility(View.GONE);
        cancelreply = (ImageView) findViewById(R.id.cancelreply);
        addObserver = (ImageView) findViewById(R.id.addObserver);
        accept = (Button) findViewById(R.id.accept);
        reject = (Button) findViewById(R.id.reject);
        task_approve = (Button) findViewById(R.id.approve);
        task_issue = (Button) findViewById(R.id.issue);
        template_form = (Button) findViewById(R.id.template_form);
        actorrej = (RelativeLayout) findViewById(R.id.actorrej);
        tagFilter = (ImageView) findViewById(R.id.tagfilter);
        bottom_layout = (LinearLayout) findViewById(R.id.ll_bottom_body);
        task_accept_layout = (RelativeLayout) findViewById(R.id.task_accept_layout);
        head = (TextView) findViewById(R.id.txtView01);
        options = (LinearLayout) findViewById(R.id.options);
        mute = (TextView) findViewById(R.id.mute);
        mute_icon = (ImageView) findViewById(R.id.mute_icon);
        savetemplate = (TextView) findViewById(R.id.savetemplete);
        savetemplate1 = (ImageView) findViewById(R.id.savetemplete1);
        showMy_ID = (ImageView) findViewById(R.id.showMy_ID);
        gridview = (GridView) findViewById(R.id.gridview_giver);
        gridview_taker = (GridView) findViewById(R.id.gridview_taker);
        gridview_observer = (GridView) findViewById(R.id.gridview_observer);
        cacheBitmap = new HashMap<String, Bitmap>();

        gridview.setVisibility(View.GONE);
        gridview_taker.setVisibility(View.GONE);
        gridview_observer.setVisibility(View.GONE);

        icons = (LinearLayout) findViewById(R.id.linear4);
        linear1 = (LinearLayout) findViewById(R.id.linear1);
//        icons.setBackgroundResource(R.drawable.task_editstyle);
        taskDateUpdate = TaskDateUpdate.getInstance();
        InputMethodManager inputMethodManager1 = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
        inputMethodManager1.hideSoftInputFromWindow(des.getWindowToken(), 0);
        listOfObservers = new ArrayList<>();
        listObservers = new ArrayList<>();
        headerName = (TextView) findViewById(R.id.txtView01);
        list_all = (ListView) findViewById(R.id.list_all);
        list_all.setAdapter(medialistadapter);
        swipeDetector = new SwipeListview();
        String conversation_In = "empty";
        OracleStatusList = new ArrayList<String>();

        locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
        loc = new LOCTracker(NewTaskConversation.this);
        if (getIntent() != null) {
            conversation_In = getIntent().getExtras().getString("task");
            oracleProjectOwner = getIntent().getExtras().getString("oracleProjectOwner");
            isProjectFromOracle = getIntent().getBooleanExtra("ProjectFromOracle", false);
//            Log.i("ws123", "oracleProjectOwner===>" + oracleProjectOwner + " logged in by===>" + Appreference.loginuserdetails.getUsername());
        }

        try {
            switch (conversation_In) {

                case "Newtask":
                    Log.i("taskConversation", "New task");
                    setNewTask_StaticVariables();
                    Log.d("taskConversation", "new project history below page 1");
                    Log.d("taskConversation", "after long press toUserId  list item click event " + toUserId);
                    Log.d("taskConversation", "after long press toUserName  list item click event " + toUserName);
                    Log.d("taskConversation", "after long press toUserName  list item click event " + from_UserName);
                    Log.d("taskConversation", "after long press taskReceiver  list item click event " + taskReceiver);
                    Log.d("task", "after long press " + toUserName);
                    isswipe = true;
                    break;
                case "taskhistory":
                    Log.i("taskConversation", "from taskhistory");
                    final TaskDetailsBean intenttaskDetailsBean = (TaskDetailsBean) getIntent().getSerializableExtra("taskHistoryBean");
                    setTaskHistory_StaticVariables(intenttaskDetailsBean);
                    ShowApproveIcon();
                    Log.d("task", "after notify press toUserId  list item click event " + toUserId);
                    Log.d("task", "after notify press toUserName  list item click event " + toUserName);
                    Log.d("task", "after notify press toUserNameemail  list item click event " + from_UserName);
                    Log.d("task", "notify click event task_No  list item click event " + task_No);
                    Log.d("task", "after notify click event webtaskId  list item click event " + webtaskId);
                    Log.d("task", "after notify press ownerOfTask  list item click event " + ownerOfTask);
                    Log.d("task", "after notify press taskReceiver  list item click event " + taskReceiver);
                    Log.d("task", "after notify press taskStatus  list item click event " + taskStatus);
                    isswipe = true;
                    Log.d("task", "task_No  not  auto generate notification item click event " + task_No);
                    Log.d("task", "taskName notification item click event " + taskName);
                    break;
                case "Templateview":
                    Log.i("taskConversation", "from Templateview");
                    final TaskDetailsBean intenttaskDetailsBean_1 = (TaskDetailsBean) getIntent().getSerializableExtra("taskHistoryBean");
                    setTaskHistory_StaticVariables(intenttaskDetailsBean_1);
                    Log.d("task", "after Template task notify press toUserId  list item click event " + toUserId);
                    Log.d("task", "after Template task notify press toUserName  list item click event " + toUserName);
                    Log.d("task", "after Template task notify press from_UserName  list item click event " + from_UserName);
                    Log.d("task", "after Template task notify click event task_No  list item click event " + task_No);
                    Log.d("task", "after Template task notify click event webtaskId  list item click event " + webtaskId);
                    Log.d("task", "after Template task notify press ownerOfTask  list item click event " + ownerOfTask);
                    Log.d("task", "after Template task notify press taskReceiver  list item click event " + taskReceiver);
                    Log.d("task", "after Template task notify press taskStatus  list item click event " + taskStatus);
                    Log.d("task", "task_No  not  auto generate notification item click event " + task_No);
                    Log.d("task", "taskName notification item click event " + taskName);
                    break;
                case "ProjectTemplateview":
                    Log.i("taskConversation", "from ProjectTemplateview");
                    ProjectDetailsBean projectBean = (ProjectDetailsBean) getIntent().getSerializableExtra("projectHistoryBean");
                    task_No = projectBean.getTaskNo();
                    webtaskId = projectBean.getTaskId();
                    taskType = "individual";
                    Log.i("TemplateList", "project templatehistory");
                    if (projectBean.getOwnerOfTask() != null)
                        ownerOfTask = projectBean.getOwnerOfTask();
                    setTemplate_StaticVariables();
                    project_temp = getIntent().getStringExtra("project_Temp");
                    clickPosition = getIntent().getIntExtra("position", 0);
                    Log.i("taskConversation", "project_temp " + project_temp);
                    projectId = projectBean.getId();

                    String quryJob1 = "select oracleProjectId from projectHistory where projectId='" + projectId + "' and taskId= '" + webtaskId + "'";
                    String quryActivity1 = "select oracleTaskId from projectHistory where projectId='" + projectId + "' and taskId= '" + webtaskId + "'";
                    JobCodeNo = VideoCallDataBase.getDB(getApplication()).getProjectParentTaskId(quryJob1);
                    ActivityCode = VideoCallDataBase.getDB(getApplication()).getProjectParentTaskId(quryActivity1);
                    Log.i("newTask", "JobCodeNo==> " + JobCodeNo);
                    Log.i("newTask", "ActivityCode==> " + ActivityCode);
                    if (isProjectFromOracle) {
                        headerName.setText("Job Card No :" + JobCodeNo + "\nActivity Code :" + ActivityCode);
                    } else {
                        headerName.setText(projectBean.getTaskName());
                    }
                    Log.i("taskConversation", "sendTemplate.setVisibility 5 ");
                    options.setClickable(false);
                    taskName = projectBean.getTaskName();
                    reassign_note.setVisibility(View.VISIBLE);
                    project = true;
                    isTaskName = false;
                    Log.d("taskConversation", "new project template history page");
                    break;
                case "Newtemplate":
                    task_No = getFileName();
                    taskType = getIntent().getExtras().getString("type");
                    setTemplate_StaticVariables();
                    headerName.setText("New Template");
                    Log.i("TemplateList", "Newtemplate ");
                    Log.d("taskConversation", "from new template page");
                    break;
                case "NewNotes":
                    task_No = getFileName();
                    taskType = getIntent().getExtras().getString("type");
                    setNote_StaticVariables();
                    toUserId = Appreference.loginuserdetails.getId();
                    toUserName = Appreference.loginuserdetails.getUsername();
                    taskReceiver = Appreference.loginuserdetails.getUsername();
                    headerName.setText("New Note");
                    Log.d("taskConversation", "from new note page");
                    break;
                case "chat":
                    task_No = getFileName();
                    taskType = getIntent().getExtras().getString("type");
                    setChat_StaticVariables();
                    category = "chat";
                    Log.d("taskConversation", "from new chat page");
                    isswipe = true;
                    loadUI("select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "') and customTagVisible = '1';");
                    break;
                case "templatehistory":
                    Log.i("taskConversation", "from templatehistory task");
                    TaskDetailsBean bean = (TaskDetailsBean) getIntent().getSerializableExtra("taskHistoryBean");
                    task_No = bean.getTaskNo();
                    webtaskId = bean.getTaskId();
                    taskType = "individual";
                    setTemplate_StaticVariables();
                    Log.i("TemplateList", "templatehistory ");
                    if (bean.getOwnerOfTask() != null)
                        ownerOfTask = bean.getOwnerOfTask();
                    if (!appSharedpreferences.getBoolean("syncTask" + webtaskId)) {
                        gettaskwebservice();
                        Log.i("taskConversation", "templatehistory - Gettaskwebservice called for taskId is " + webtaskId);
                    } else {
//                        gettaskwebservicewithtimestamp();
                    }
//                    if (isProjectFromOracle) {
//                        headerName.setText("Job Card No :" + JobCodeNo + "\nActivity Code :" + ActivityCode);
//                    } else {
                    headerName.setText(bean.getTaskName());
//                    }
                    assign_taskview.setVisibility(View.GONE);
                    Log.i("taskConversation", "sendTemplate.setVisibility 5 ");
                    options.setClickable(false);
                    taskName = bean.getTaskName();
                    Log.d("taskConversation", "from new template history page");
                    break;
                case "notehistory":
                    Log.i("taskConversation", "from notehistory task");
                    TaskDetailsBean notebean = (TaskDetailsBean) getIntent().getSerializableExtra("noteHistoryBean");
                    task_No = notebean.getTaskNo();
                    webtaskId = notebean.getTaskId();
                    taskType = "individual";
                    setNote_StaticVariables();
                    int counter = 0;
                    if (notebean.getTaskObservers() != null && !notebean.getTaskObservers().equalsIgnoreCase("")) {
                        for (int i = 0; i < notebean.getTaskObservers().length(); i++) {
                            if (notebean.getTaskObservers().charAt(i) == ',') {
                                counter++;
                            }
                            Log.d("project_details", "Task Mem's counter size is == " + counter);
                        }
                        for (int j = 0; j < counter + 1; j++) {
                            String Mem_name = notebean.getTaskObservers().split(",")[j];
                            Log.i("project_details", "Task Mem's and position == " + Mem_name + " " + j);
                            listOfObservers.add(Mem_name);
                        }
                    }
//                    listOfObservers.add(notebean.getTaskObservers());
                    toUserId = VideoCallDataBase.getDB(context).getUserid(notebean.getTaskReceiver());
                    toUserName = notebean.getTaskReceiver();
                    taskReceiver = notebean.getTaskReceiver();
                    listOfObservers.add(taskReceiver);
                    if (notebean.getOwnerOfTask() != null)
                        ownerOfTask = notebean.getOwnerOfTask();
                    if (!appSharedpreferences.getBoolean("syncTask" + webtaskId)) {
                        gettaskwebservice();
                        Log.i("taskConversation", "notehistory - Gettaskwebservice called for taskId is " + webtaskId);
                    } else {
//                        gettaskwebservicewithtimestamp();
                    }
                    headerName.setText(notebean.getTaskName());
                    Log.i("taskConversation", "sendTemplate.setVisibility 6 ");
                    options.setClickable(false);
                    taskName = notebean.getTaskName();
                    Log.d("taskConversation", "from new note history page");
                    Log.i("task", "after project notify press toUserId  list item click event " + toUserId);
                    Log.i("task", "after project notify press toUserName  list item click event " + toUserName);
                    Log.i("task", "after project notify press toUserNameemail  list item click event " + from_UserName);
                    Log.i("task", "notify project click event task_No  list item click event " + task_No);
                    Log.i("task", "after project notify click event webtaskId  list item click event " + webtaskId);
                    Log.i("task", "after project notify press ownerOfTask  list item click event " + ownerOfTask);
                    Log.i("task", "after project notify press taskReceiver  list item click event " + taskReceiver);
                    Log.i("task", "after project notify press taskType  list item click event " + taskType);
                    Log.i("task", "after project notify press taskStatus  list item click event " + taskStatus);
                    Log.d("task", "task_No  not  auto generate notification item click event " + task_No);
                    Log.d("task", "taskName notification item click event " + taskName);
                    break;
                case "chathistory":
                    TaskDetailsBean chatbean = (TaskDetailsBean) getIntent().getSerializableExtra("chatHistoryBean");
                    task_No = chatbean.getTaskNo();
                    webtaskId = chatbean.getTaskId();
                    taskType = chatbean.getTaskType();
                    setChat_StaticVariables(chatbean);
                    if (chatbean.getOwnerOfTask() != null)
                        ownerOfTask = chatbean.getOwnerOfTask();
                    if (!appSharedpreferences.getBoolean("syncTask" + webtaskId)) {
                        gettaskwebservice();
                        Log.i("taskConversation", "chathistory - Gettaskwebservice called for taskId is " + webtaskId);
                    } else {
//                        gettaskwebservicewithtimestamp();
                    }
                    Log.i("taskconversation", "sendTemplate.setVisibility *2 ");
                    options.setClickable(false);
                    category = "chat";
                    taskName = chatbean.getTaskName();
                    Log.d("taskConversation", "from new chat history page");
                    isswipe = true;
                    loadUI("select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "') and customTagVisible = '1';");
                    break;
                case "projectHistory":
                    final ProjectDetailsBean projectDetailsBean = (ProjectDetailsBean) getIntent().getSerializableExtra("projectHistoryBean");
                    clickPosition = getIntent().getIntExtra("position", 0);
                    Log.i("task280317", "after project notify press getTaskObservers " + projectDetailsBean.getTaskObservers());
                    setProjectHistory_StaticVariable(projectDetailsBean);
                    Log.d("projecthistory", "*************************15 after setProjectHistory_StaticVariable");
                    ShowApproveIcon();
                    addObserverForProject(projectDetailsBean);
                    String quryJob = "select oracleProjectId from projectHistory where projectId='" + projectId + "' and taskId= '" + webtaskId + "'";
                    String quryActivity = "select oracleTaskId from projectHistory where projectId='" + projectId + "' and taskId= '" + webtaskId + "'";
                    JobCodeNo = VideoCallDataBase.getDB(getApplication()).getProjectParentTaskId(quryJob);
                    ActivityCode = VideoCallDataBase.getDB(getApplication()).getProjectParentTaskId(quryActivity);
                    Log.i("newTask", "JobCodeNo==> " + JobCodeNo);
                    Log.i("newTask", "ActivityCode==> " + ActivityCode);
                    head.setText("Job Card No :" + JobCodeNo + "\nActivity Code :" + ActivityCode);
                    isswipe = true;
                    Log.i("taskConversation", "from projectHistory task");
                    Log.i("taskConversation", "after project notify press toUserId  list item click event " + toUserId);
                    Log.i("taskConversation", "after project notify press toUserName  list item click event " + toUserName);
                    Log.i("taskConversation", "after project notify press toUserNameemail  list item click event " + from_UserName);
                    Log.i("taskConversation", "notify project click event task_No  list item click event " + task_No);
                    Log.i("taskConversation", "after project notify click event webtaskId  list item click event " + webtaskId);
                    Log.i("taskConversation", "after project notify press ownerOfTask  list item click event " + ownerOfTask);
                    Log.i("taskConversation", "after project notify press taskReceiver  list item click event " + taskReceiver);
                    Log.i("taskConversation", "after project notify press taskType  list item click event " + taskType);
                    Log.i("taskConversation", "after project notify press taskStatus  list item click event " + taskStatus);
                    Log.i("taskConversation", "after projectHistory parentTaskID ent " + OracleParentTaskId);
                    Log.d("taskConversation", "task_No  not  auto generate notification item click event " + task_No);
                    Log.d("taskConversation", "taskName notification item click event " + taskName);
                    break;
                case "newissue":
                    addIssuesEntry();
                    break;
                case "newsubtask":
                    addNewSubTask();
                    break;
                case "newprojectnote":
                    addNewProjectNote();
                    task_No = getFileName();
                    taskType = getIntent().getExtras().getString("type");
                    toUserId = Appreference.loginuserdetails.getId();
                    toUserName = Appreference.loginuserdetails.getUsername();
                    taskReceiver = Appreference.loginuserdetails.getUsername();
                    headerName.setText("New Note");
                    Log.d("taskConversation", "new project note page");
                    Log.d("task", "after notify press toUserId  list item click event @@" + toUserId);
                    Log.d("task", "after notify press toUserName  list item click event @@ " + toUserName);
                    Log.d("task", "after notify press toUserNameemail  list item click event @@ " + from_UserName);
                    Log.d("task", "notify click event task_No  list item click event @@ " + task_No);
                    Log.d("task", "after notify click event webtaskId  list item click event @@ " + webtaskId);
                    Log.d("task", "after notify press ownerOfTask  list item click event @@ " + ownerOfTask);
                    Log.d("task", "after notify press taskReceiver  list item click event @@ " + taskReceiver);
                    Log.d("task", "after notify press taskStatus  list item click event @@ " + taskStatus);
                    Log.d("task", "after notify press projectId  list item click event @@" + projectId);
                    Log.d("task", "after notify press parentTaskId  list item click event @@" + parentTaskId);
                    Log.d("task", "taskName notification item click event @@ " + taskName);
                    Log.d("task", "taskName notification item click event  category @@ " + category);
                    break;
                case "SchedulerReassign":
                    Log.i("taskConversation", "from SchedulerReassign task");
                    final TaskDetailsBean intenttaskDetailsBean1 = (TaskDetailsBean) getIntent().getSerializableExtra("taskHistoryBean");
                    setTaskHistory_StaticVariables(intenttaskDetailsBean1);
                    Log.d("SchedularReAssign", "Task removered user == " + intenttaskDetailsBean1.getTaskReceiver());
                    Log.d("SchedularReAssign", "Task added user == " + intenttaskDetailsBean1.getTaskDescription());
                    submitClickEvent(intenttaskDetailsBean1);
                    intenttaskDetailsBean1.setSubType("normal");
                    intenttaskDetailsBean1.setReminderQuote("");
                    intenttaskDetailsBean1.setServerFileName("");
                    taskReassign(intenttaskDetailsBean1, intenttaskDetailsBean1.getTaskReceiver(), intenttaskDetailsBean1.getTaskDescription(), 2);
                    Log.d("task", "after notify press toUserId  list item click event " + toUserId);
                    Log.d("task", "after notify press toUserName  list item click event " + toUserName);
                    Log.d("task", "after notify press toUserNameemail  list item click event " + from_UserName);
                    Log.d("task", "notify click event task_No  list item click event " + task_No);
                    Log.d("task", "after notify click event webtaskId  list item click event " + webtaskId);
                    Log.d("task", "after notify press ownerOfTask  list item click event " + ownerOfTask);
                    Log.d("task", "after notify press taskReceiver  list item click event " + taskReceiver);
                    Log.d("task", "after notify press taskStatus  list item click event " + taskStatus);
                    Log.d("task", "task_No  not  auto generate notification item click event " + task_No);
                    Log.d("task", "taskName notification item click event " + taskName);
                    break;
                case "SchedulerObserver":
                    Log.i("taskConversation", "from SchedulerObserver task");
                    final TaskDetailsBean taskDetailsBean_1 = (TaskDetailsBean) getIntent().getSerializableExtra("taskHistoryBean");
                    setTaskHistory_StaticVariables(taskDetailsBean_1);
                    Log.d("SchedulerObserver", "Task  == " + taskDetailsBean_1.getTaskReceiver());
                    Log.d("SchedulerObserver", "Task remover == " + taskDetailsBean_1.getTaskDescription());
                    Log.d("SchedulerObserver", "Task projectId == " + taskDetailsBean_1.getProjectId());
                    taskDetailsBean_1.setSubType("normal");
                    taskDetailsBean_1.setReminderQuote("");
                    taskDetailsBean_1.setServerFileName("");
                    escalationObserverList(taskDetailsBean_1);
                    Log.d("task", "after notify press toUserId  list item click event " + toUserId);
                    Log.d("task", "after notify press toUserName  list item click event " + toUserName);
                    Log.d("task", "after notify press toUserNameemail  list item click event " + from_UserName);
                    Log.d("task", "notify click event task_No  list item click event " + task_No);
                    Log.d("task", "after notify click event webtaskId  list item click event " + webtaskId);
                    Log.d("task", "after notify press ownerOfTask  list item click event " + ownerOfTask);
                    Log.d("task", "after notify press taskReceiver  list item click event " + taskReceiver);
                    Log.d("task", "after notify press taskStatus  list item click event " + taskStatus);
                    Log.d("task", "task_No  not  auto generate notification item click event " + task_No);
                    Log.d("task", "taskName notification item click event " + taskName);
                    Log.d("task", "escalate_observers notification item click event " + escalate_observers);
                    break;
                case "SchedulerBuzz":
                    Log.i("taskConversation", "from SchedulerBuzz task");
                    final TaskDetailsBean taskDetailsBean_2 = (TaskDetailsBean) getIntent().getSerializableExtra("taskHistoryBean");
                    setTaskHistory_StaticVariables(taskDetailsBean_2);
                    Log.d("SchedulerBuzz", "TaskReceiver  == " + taskDetailsBean_2.getTaskReceiver());
                    Log.d("SchedulerBuzz", "Task Remark == " + taskDetailsBean_2.getRemark());
                    Log.d("SchedulerBuzz", "Task remover == " + taskDetailsBean_2.getTaskDescription());
                    if (taskDetailsBean_2.getTaskDescription() != null && taskDetailsBean_2.getTaskDescription().contains(",")) {

                    } else {
                        listOfObservers.add(taskDetailsBean_2.getTaskDescription());
                    }
                    taskDetailsBean_2.setTaskDescription(taskDetailsBean_2.getRemark());
                    taskDetailsBean_2.setRemark("");
                    taskDetailsBean_2.setReminderQuote("");
                    taskOverdueMessage(taskDetailsBean_2, "text", taskDetailsBean_2.getTaskStatus(), 1);
                    Log.d("task", "after notify press toUserId  list item click event " + toUserId);
                    Log.d("task", "after notify press toUserName  list item click event " + toUserName);
                    Log.d("task", "after notify press toUserNameemail  list item click event " + from_UserName);
                    Log.d("task", "notify click event task_No  list item click event " + task_No);
                    Log.d("task", "after notify click event webtaskId  list item click event " + webtaskId);
                    Log.d("task", "after notify press ownerOfTask  list item click event " + ownerOfTask);
                    Log.d("task", "after notify press taskReceiver  list item click event " + taskReceiver);
                    Log.d("task", "after notify press taskStatus  list item click event " + taskStatus);
                    Log.d("task", "task_No  not  auto generate notification item click event " + task_No);
                    Log.d("task", "taskName notification item click event " + taskName);
                    Log.d("task", "escalate_observers notification item click event " + escalate_observers);
                    break;
                case "SchedulerAband":
                    Log.i("taskConversation", "from SchedulerAband task");
                    final TaskDetailsBean taskDetailsBean_3 = (TaskDetailsBean) getIntent().getSerializableExtra("taskHistoryBean");
                    setTaskHistory_StaticVariables(taskDetailsBean_3);
                    Log.d("SchedulerAband", "TaskReceiver  == " + taskDetailsBean_3.getTaskReceiver());
                    Log.d("SchedulerAband", "Task Remark == " + taskDetailsBean_3.getRemark());
                    Log.d("SchedulerAband", "Task remover == " + taskDetailsBean_3.getTaskDescription());
                    taskDetailsBean_3.setRemark("");
                    taskDetailsBean_3.setReminderQuote("");
                    taskDetailsBean_3.setFromUserName(Appreference.loginuserdetails.getUsername());
                    taskDetailsBean_3.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                    taskDetailsBean_3.setToUserName(toUserName);
                    taskDetailsBean_3.setToUserId(String.valueOf(toUserId));
                    taskDetailsBean_3.setSubType("normal");
                    Log.d("task", "after notify press toUserId  list item click event " + toUserId);
                    Log.d("task", "after notify press toUserName  list item click event " + toUserName);
                    Log.d("task", "after notify press toUserNameemail  list item click event " + from_UserName);
                    Log.d("task", "notify click event task_No  list item click event " + task_No);
                    Log.d("task", "after notify click event webtaskId  list item click event " + webtaskId);
                    Log.d("task", "after notify press ownerOfTask  list item click event " + ownerOfTask);
                    Log.d("task", "after notify press taskReceiver  list item click event " + taskReceiver);
                    Log.d("task", "after notify press taskStatus  list item click event " + taskStatus);
                    Log.d("task", "task_No  not  auto generate notification item click event " + task_No);
                    Log.d("task", "taskName notification item click event " + taskName);
                    Log.d("task", "escalate_observers notification item click event " + escalate_observers);
                    break;
                default:
                    break;

            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "Inside to taskconversation Exception " + e.getMessage(), "WARN", null);
        } catch (Resources.NotFoundException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "Inside to taskconversation Exception " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "Inside to taskconversation Exception " + e.getMessage(), "WARN", null);
        }

        Log.i("groupMemberAccess", "toUserId " + toUserId);
        downLoadcustom1();

        cancelreply.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                linearforimage.setVisibility(View.GONE);
            }
        });
        Log.i("ws123", "oracleProjectOwner===>" + oracleProjectOwner);
        String qury = "select oracleProjectId from projectHistory where projectId='" + projectId + "' and taskId= '" + webtaskId + "'";
        String qury_1 = "select oracleTaskId from projectHistory where projectId='" + projectId + "' and taskId= '" + webtaskId + "'";
        JobCodeNo = VideoCallDataBase.getDB(getApplication()).getProjectParentTaskId(qury);
        ActivityCode = VideoCallDataBase.getDB(getApplication()).getProjectParentTaskId(qury_1);
        Log.i("newTask", "JobCodeNo==> " + JobCodeNo);
        Log.i("newTask", "ActivityCode==> " + ActivityCode);

        try {
            String query = "select status from projectStatus where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "'";
            int disable_by_current_status = VideoCallDataBase.getDB(context).getCurrentStatus(query);
            if (disable_by_current_status == 5)
                isTaskCompleted = true;
            if (disable_by_current_status == 1 || disable_by_current_status == 3) {
                Appreference.isEstimTimerStarted = false;
                getLabelForEstimTimer(disable_by_current_status);
                ShowHoldOrPauseTimerDisplay();
            } else if (disable_by_current_status != 1 || disable_by_current_status != 3 || disable_by_current_status != 8) {
                Appreference.isEstimTimerStarted = true;
                String taskQuery = "select * from taskDetailsInfo where projectId='" + projectId + "'and taskId= '" + webtaskId + "' and estimCompletion='1'";
                int getEstimatedTimerCompleted = VideoCallDataBase.getDB(context).getCountForTravelEntry(taskQuery);
                if (getEstimatedTimerCompleted == 0) {
                    ShowEstimTimerDisplay();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
         /*Code Added for GroupAdmin-Observer Start*/
        try {
            String GroupAdmin_observer = getGroupAdmin_observer_DB();
            Log.i("onCreate", "is project  $$ " + project);
            if (project) {
                if (taskStatus != null && !taskStatus.equalsIgnoreCase("null") && (taskStatus.equalsIgnoreCase("draft") || taskStatus.equalsIgnoreCase("Unassigned"))) {
                    if ((Appreference.loginuserdetails != null && Appreference.loginuserdetails.getRoleId() != null
                            && Appreference.loginuserdetails.getRoleId().equalsIgnoreCase("2")
                            && isProjectFromOracle && !oracleProjectOwner.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) &&
                            (GroupAdmin_observer != null && !GroupAdmin_observer.contains(Appreference.loginuserdetails.getUsername()))) {
                        assign_taskview.setVisibility(View.GONE);
                    } else {
                        assign_taskview.setVisibility(View.VISIBLE);
                    }
                    status_job.setVisibility(View.GONE);
                    travel_job.setVisibility(View.GONE);
                } else {
                    assign_taskview.setVisibility(View.GONE);
                }
            }
            if (taskStatus != null && (!taskStatus.equalsIgnoreCase("draft") && !taskStatus.equalsIgnoreCase("template") && !taskStatus.equalsIgnoreCase("Unassigned"))) {
                assign_taskview.setVisibility(View.GONE);
            } else if (isProjectFromOracle && oracleProjectOwner.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) ||
                    (GroupAdmin_observer != null && GroupAdmin_observer.contains(Appreference.loginuserdetails.getUsername()))) {
                assign_taskview.setVisibility(View.VISIBLE);
                tv_reassign.setText("Assign Task");
            } else if (isProjectFromOracle && !oracleProjectOwner.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                if (Appreference.loginuserdetails != null && Appreference.loginuserdetails.getRoleId() != null
                        && Appreference.loginuserdetails.getRoleId().equalsIgnoreCase("2")) {
                    assign_taskview.setVisibility(View.GONE);
                } else {
                    assign_taskview.setVisibility(View.VISIBLE);
                }
                tv_reassign.setText("Assign to me");
                Self_assign = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
         /*Code Added for GroupAdmin-Observer End*/
        if (isProjectFromOracle && (oracleProjectOwner != null && !oracleProjectOwner.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())
                && (Appreference.loginuserdetails != null && Appreference.loginuserdetails.getRoleId() != null
                && !Appreference.loginuserdetails.getRoleId().equalsIgnoreCase("2")))) {
            if (!isTaskCompleted && !template) {
                Log.i("desc123", "is template=======> $$ " + template);
                status_job.setVisibility(View.VISIBLE);
                travel_job.setVisibility(View.VISIBLE);
            } else if (isTaskCompleted) {
                status_job.setVisibility(View.GONE);
                travel_job.setVisibility(View.GONE);
                sendBtn.setEnabled(false);
            }
        } else if (isProjectFromOracle && (oracleProjectOwner != null && oracleProjectOwner.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()))) {
            if (!isTaskCompleted && !template) {
                Log.i("desc123", "is template=======> ## " + template);
                status_job.setVisibility(View.VISIBLE);
            } else if (isTaskCompleted) {
                status_job.setVisibility(View.GONE);
                sendBtn.setEnabled(false);
            }
             /*added for GroupAdmin observer start*/
        } else if (isProjectFromOracle && (Appreference.loginuserdetails != null && Appreference.loginuserdetails.getRoleId() != null
                && Appreference.loginuserdetails.getRoleId().equalsIgnoreCase("2"))) {
            /*added for GroupAdmin observer*/
            if (taskStatus != null && (!taskStatus.equalsIgnoreCase("draft") && !taskStatus.equalsIgnoreCase("template") && !taskStatus.equalsIgnoreCase("Unassigned"))) {
                status_job.setVisibility(View.VISIBLE);
            }
        }
        /*added for GroupAdmin observerm end*/

        if (taskStatus != null && (taskStatus.equalsIgnoreCase("Completed") || taskStatus.equalsIgnoreCase("Complete"))) {
            handler.post(new Runnable() {
                @Override
                public void run() {
                    assign_taskview.setVisibility(View.GONE);
                    status_job.setVisibility(View.GONE);
                    travel_job.setVisibility(View.GONE);
                }
            });
        }
        String Query = "Select * from projectHistory where projectId ='" + projectId + "' and taskId = '" + webtaskId + "'";
        TaskDetailsBean MonthlyJobBean = VideoCallDataBase.getDB(context).getDetails_to_complete_project(Query);

        if (MonthlyJobBean.getIsActiveStatus() != null && MonthlyJobBean.getIsActiveStatus().equalsIgnoreCase("1") && !MonthlyJobBean.getIsActiveStatus().equalsIgnoreCase("null")) {
            status_job.setVisibility(View.INVISIBLE);
        }

        status_job.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                showStatusPopupWindow(v);
            }
        });

        travel_job.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                String query = "select status from projectStatus where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "'";
                int current_status = VideoCallDataBase.getDB(context).getCurrentStatus(query);

                String Query = "Select * from projectHistory where projectId ='" + projectId + "' and taskId = '" + webtaskId + "'";
                TaskDetailsBean MonthlyJobBean = VideoCallDataBase.getDB(context).getDetails_to_complete_project(Query);
                Log.i("monthly123", "MonthlyJobBean===>" + MonthlyJobBean.getIsActiveStatus());
                Log.i("monthly123", "current_status===>" + current_status);
                if (current_status == -1 || current_status == 8) {
//                    travel_job.setEnabled(false);
                    if (MonthlyJobBean.getIsActiveStatus() != null) {
                        showtravelTimePopup(v);
                    } else {
                        showToast("The task has not yet started...");
                    }
                } else if (current_status == 1 || current_status == 3) {
                    showToast("you are not allowed when you are Hold/Pause the task..");
                } else {
                    Log.i("Location", "canGetLocation ## ==> " + loc.canGetLocation());
                    if (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)) {
                        Log.i("Location", "Latitude ## ==> " + loc.getLatitude() + " Longitude " + loc.getLongitude());
                        travel_job.setEnabled(true);
                        showtravelTimePopup(v);
                    } else {
                        showSettingsAlert("Unable to get current location. Change permissions ");
                    }
                }
            }

        });
        Arrow.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (isNetworkAvailable()) {
                    if (!arrow) {
                        Log.i("Arrow", "visible item 0 ");
                        InputMethodManager imm = (InputMethodManager) newTaskConversation.getSystemService(Activity.INPUT_METHOD_SERVICE);
                        //Find the currently focused view, so we can grab the correct window token from it.
                        View view = newTaskConversation.getCurrentFocus();
                        //If no view currently has focus, create a new one, just so we can grab a window token from it
                        if (view == null) {
                            view = new View(newTaskConversation);
                        }
                        imm.hideSoftInputFromWindow(view.getWindowToken(), 0);
                        Arrow.setImageResource(R.drawable.ic_more_filled_50);


                        if (ownerOfTask != null && ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                            gridview.setVisibility(View.VISIBLE);
                        } else if (taskReceiver != null && (taskReceiver.contains(Appreference.loginuserdetails.getUsername()) || taskType.equalsIgnoreCase("group"))) {
                            if (taskType.equalsIgnoreCase("group")) {
                                if (project) {
                                    String groupname_query = "select taskObservers from projectHistory where taskId='" + webtaskId + "'";
                                    String group_name = VideoCallDataBase.getDB(context).getProjectParentTaskId(groupname_query);
                                    if (group_name != null && group_name.contains(Appreference.loginuserdetails.getUsername())) {
                                        gridview_observer.setVisibility(View.VISIBLE);
                                    } else {
                                        gridview_taker.setVisibility(View.VISIBLE);
                                    }
                                } else {
                                    String groupname_query = "select taskObservers from taskHistoryInfo where taskId='" + webtaskId + "'";
                                    String group_name = VideoCallDataBase.getDB(context).getProjectParentTaskId(groupname_query);
                                    if (group_name != null && group_name.contains(Appreference.loginuserdetails.getUsername())) {
                                        gridview_observer.setVisibility(View.VISIBLE);
                                    } else {
                                        gridview_taker.setVisibility(View.VISIBLE);
                                    }
                                }
                            } else {
                                gridview_taker.setVisibility(View.VISIBLE);
                            }
                        } else {
                            gridview_observer.setVisibility(View.VISIBLE);
                        }
                        arrow = true;
                    } else {
                        Log.i("Arrow", "nonvisible item 0 ");
                        Arrow.setImageResource(R.drawable.ic_more_filled_50);
                        gridview.setVisibility(View.GONE);
                        gridview_taker.setVisibility(View.GONE);
                        gridview_observer.setVisibility(View.GONE);
                        icons.setVisibility(View.VISIBLE);
                        arrow = false;
                    }
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            list_all.setSelection(list_all.getAdapter().getCount() - 1);
                        }
                    });
                } else {
                    Toast.makeText(NewTaskConversation.this, "Check your internet connection", Toast.LENGTH_SHORT).show();
                }
            }
        });
        gridview.setOnItemClickListener(
                new AdapterView.OnItemClickListener() {
                    @Override
                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                        Log.i("gridview", "Position" + position);
                        try {
                            String selected_text = texts[position];
                            Log.i("gridview", "Position selected_text  " + selected_text);
                            switch (selected_text) {
                                case "Private":
                                    try {
                                        if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause")) {
                                            if (subType != null && subType.equalsIgnoreCase("private")) {
                                                private_member = null;
                                                subType = "normal";
                                                des.setHint("");
                                                getTaskObservers();
                                                getGroupTaskMembers();
                                                icons.setBackgroundColor(getResources().getColor(R.color.white));
                                                linear1.setBackgroundColor(getResources().getColor(R.color.white));
                                                Toast.makeText(NewTaskConversation.this, "Private message disabled", Toast.LENGTH_SHORT).show();
                                            } else {
//                                                                        des.setHint("private message");
//                                                                        subType = "private";
//                                                                        icons.setBackgroundColor(getResources().getColor(R.color.grey));
//                                                                        linear1.setBackgroundColor(getResources().getColor(R.color.grey));
//                                                                        Toast.makeText(NewTaskConversation.this, "Private message enabled", Toast.LENGTH_SHORT).show();
                                                Log.i("gridview", "listOfObservers  " + listOfObservers.size() + " name " + listOfObservers);
                                                String Observers = "", Qurey;
                                                if (project) {
                                                    Qurey = "select taskObservers from projectHistory where taskId='" + webtaskId + "'";
                                                } else {
                                                    Qurey = "select taskObservers from taskHistoryInfo where taskId='" + webtaskId + "'";
                                                }
                                                Log.i("gridview", "listOfObservers  " + Observers + " name " + Qurey);
                                                Observers = VideoCallDataBase.getDB(context).getProjectParentTaskId(Qurey);
                                                if ((taskType != null && taskType.equalsIgnoreCase("Group"))) {
                                                    des.setHint("private message");
                                                    subType = "private";
                                                    icons.setBackgroundColor(getResources().getColor(R.color.grey));
                                                    linear1.setBackgroundColor(getResources().getColor(R.color.grey));
                                                    Toast.makeText(NewTaskConversation.this, "Private message enabled", Toast.LENGTH_SHORT).show();
                                                    Intent intent = new Intent(NewTaskConversation.this, GroupPercentageStatus.class);
                                                    intent.putExtra("taskid", webtaskId);
                                                    intent.putExtra("groupId", String.valueOf(toUserId));
                                                    intent.putExtra("subtype", "private");
                                                    intent.putExtra("ownerOfTask", ownerOfTask);
                                                    if (project) {
                                                        intent.putExtra("isProject", "yes");
                                                        intent.putExtra("isreceiver", false);
                                                    } else {
                                                        intent.putExtra("isProject", "no");
                                                    }
                                                    startActivityForResult(intent, 999);
                                                } else if (Observers != null && Observers.length() > 0) {
                                                    des.setHint("private message");
                                                    subType = "private";
                                                    icons.setBackgroundColor(getResources().getColor(R.color.grey));
                                                    linear1.setBackgroundColor(getResources().getColor(R.color.grey));
                                                    Toast.makeText(NewTaskConversation.this, "Private message enabled", Toast.LENGTH_SHORT).show();
                                                    Log.i("private_message", "values " + listOfObservers.size() + "Name " + listOfObservers);
                                                    Intent intent = new Intent(NewTaskConversation.this, GroupPercentageStatus.class);
                                                    intent.putExtra("taskid", webtaskId);
                                                    intent.putExtra("taskType", taskType);
                                                    intent.putExtra("subtype", "private");
                                                    intent.putExtra("ownerOfTask", ownerOfTask);
                                                    if (project) {
                                                        intent.putExtra("isProject", "yes");
                                                        intent.putExtra("isreceiver", false);
                                                    } else {
                                                        intent.putExtra("isProject", "no");
                                                    }
                                                    startActivityForResult(intent, 999);
                                                } else if (!ownerOfTask.equalsIgnoreCase(taskReceiver)) {
                                                    des.setHint("private message");
                                                    subType = "private";
                                                    icons.setBackgroundColor(getResources().getColor(R.color.grey));
                                                    linear1.setBackgroundColor(getResources().getColor(R.color.grey));
                                                    Toast.makeText(NewTaskConversation.this, "Private message enabled", Toast.LENGTH_SHORT).show();
                                                    private_member = VideoCallDataBase.getDB(context).getName(toUserName);
                                                } else {
                                                    Toast.makeText(context, "Unable to sent  Private Message for ME task", Toast.LENGTH_SHORT).show();
                                                }
                                            }
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                            Toast.makeText(context, "Unable to sent  Private Message task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                            Toast.makeText(context, "Unable to sent  Private Message task is in pause state ", Toast.LENGTH_SHORT).show();
                                        }
                                        gridview.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Resources.NotFoundException e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation gridview Private click ", "Exception " + e.getMessage(), "WARN", null);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation gridview Private click ", "Exception " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Priority":
                                    if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause")) {
                                        if (ownerOfTask != null && ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                            Priority();
                                        }
                                    } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                        Toast.makeText(context, "Unable to set  Priority for task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                    } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                        Toast.makeText(context, "Unable to set  Priority for task is in pause state ", Toast.LENGTH_SHORT).show();
                                    }
                                    gridview.setVisibility(View.GONE);
                                    icons.setVisibility(View.VISIBLE);
                                    arrow = false;
                                    break;

                                case "Escalations":
                                    try {
                                        if (!isTaskName) {
                                            if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause") && !taskStatus.equalsIgnoreCase("rejected")) {
                                                showprogressforpriority("Loading Escalation Entry");
                                                List<NameValuePair> tagNameValuePairs = new ArrayList<NameValuePair>();
                                                Appreference.jsonRequestSender.getlistCustomHeaderTags(EnumJsonWebservicename.listCustomHeaderTags, tagNameValuePairs, NewTaskConversation.this);
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                                Toast.makeText(context, "Unable to set  Escalations task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                                Toast.makeText(context, "Unable to set  Escalations task is in pause state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("rejected")) {
                                                Toast.makeText(context, "Unable to set  Escalations task is in rejected state ", Toast.LENGTH_SHORT).show();
                                            }
                                        } else {
                                            showToast("Please Enter TaskDescription and Make a NewTask ");
                                        }
                                        gridview.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView Escalations Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Scheduled Call":
                                    try {
                                        if (!isTaskName) {
                                            if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause") && !taskStatus.equalsIgnoreCase("rejected")) {
                                                Log.i("scheduled", "listofobserver " + listOfObservers.size());
                                                Log.i("scheduled", "listofobserver " + ownerOfTask);
                                                Log.i("scheduled", "listofobserver " + taskReceiver);
                                                if (!ownerOfTask.equalsIgnoreCase(taskReceiver) || listOfObservers.size() > 1) {
                                                    showprogressforpriority("Loading Scheduled calls");
                                                    List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
                                                    nameValuePairs.add(new BasicNameValuePair("taskId", webtaskId));
                                                    Appreference.jsonRequestSender.getCustomTag(EnumJsonWebservicename.getCustomTag, nameValuePairs, NewTaskConversation.this);
                                                } else {
                                                    showToast("You are not able to set scheduled call");
                                                }
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                                Toast.makeText(context, "Unable to set Scheduled Call task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                                Toast.makeText(context, "Unable to set Scheduled Call task is in pause state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("rejected")) {
                                                Toast.makeText(context, "Unable to set Scheduled Call task is in rejected state ", Toast.LENGTH_SHORT).show();
                                            }
                                        } else {
                                            showToast("Please Enter TaskDescription and Make a NewTask ");
                                        }
                                        gridview.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView Scheduled Call Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Audio":
                                    try {
                                        Intent i = new Intent(NewTaskConversation.this, AudioRecorder.class);
                                        i.putExtra("task", "audio");
                                        startActivityForResult(i, 333);
                                        gridview.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView Audio Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Photo":
                                    multimediaImage("image");
                                    gridview.setVisibility(View.GONE);
                                    icons.setVisibility(View.VISIBLE);
                                    arrow = false;
                                    break;

                                case "Sketch":
                                    try {
                                        Intent i = new Intent(getApplicationContext(), HandSketchActivity2.class);
                                        startActivityForResult(i, 423);
                                        gridview.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView sketch Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Video":
                                    multimediaImage("video");
                                    gridview.setVisibility(View.GONE);
                                    icons.setVisibility(View.VISIBLE);
                                    arrow = false;
                                    break;

                                case "File":
                                    try {
                                        Intent file_intent = new Intent(NewTaskConversation.this, FilePicker.class);
                                        startActivityForResult(file_intent, 55);
                                        gridview.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView File Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Dates":
                                    try {
                                        if (taskStatus != null && !taskStatus.equalsIgnoreCase("Closed") && !taskStatus.equalsIgnoreCase("Completed")) {
//                                                                if (taskStatus != null && !taskStatus.equalsIgnoreCase("closed") ) {
                                            if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause") && !taskStatus.equalsIgnoreCase("rejected")) {
                                                if (template && !note) {
                                                    Intent intent = new Intent(NewTaskConversation.this, TaskDateUpdate.class);
                                                    intent.putExtra("template", "success");
                                                    intent.putExtra("taskId", webtaskId);
                                                    intent.putExtra("taskType", "template");
                                                    intent.putExtra("toUserIdConflict", String.valueOf(toUserId));
                                                    NewTaskConversation.this.startActivityForResult(intent, 666);
                                                } else if (note) {
                                                    Intent intent = new Intent(NewTaskConversation.this, NoteDateUpdate.class);
                                                    intent.putExtra("taskId", webtaskId);
                                                    intent.putExtra("taskType", "note");
                                                    intent.putExtra("from", "taskconversation");
                                                    NewTaskConversation.this.startActivityForResult(intent, 555);
                                                } else {
                                                    Intent intent = new Intent(NewTaskConversation.this, TaskDateUpdate.class);
                                                    intent.putExtra("template", "failure");
                                                    intent.putExtra("taskId", webtaskId);
                                                    intent.putExtra("taskType", taskType);
                                                    if (projectId != null) {
                                                        intent.putExtra("projectId", projectId);
                                                    }
                                                    intent.putExtra("toUserIdConflict", String.valueOf(toUserId));
                                                    NewTaskConversation.this.startActivityForResult(intent, 336);
                                                }

                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                                Toast.makeText(context, "Unable to set Date task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                                Toast.makeText(context, "Unable to set Date task is in pause state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("rejected")) {
                                                Toast.makeText(context, "Unable to set Date task is in rejected state ", Toast.LENGTH_SHORT).show();
                                            }
                                        } else {
                                            Toast.makeText(context, "This " + category + " is already Closed ", Toast.LENGTH_SHORT).show();
                                        }
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView Date Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    gridview.setVisibility(View.GONE);
                                    icons.setVisibility(View.VISIBLE);
                                    arrow = false;
                                    break;

                                case "Completion":
                                    try {
                                        if (taskStatus != null && !taskStatus.equalsIgnoreCase("Closed")) {
                                            if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause") && !taskStatus.equalsIgnoreCase("rejected") && (!taskStatus.equalsIgnoreCase("assigned") || taskType.equalsIgnoreCase("group") || isProjectFromOracle)) {
                                                int a;
                                                if (taskType != null && taskType.equalsIgnoreCase("group")) {
                                                    String percent_sender = VideoCallDataBase.getDB(context).getlastCompletedParcentagesender(webtaskId);
                                                    Log.i("GroupPercentageClick", " groupname 21 " + percent_sender);
                                                    if (percent_sender != null && percent_sender.equalsIgnoreCase(ownerOfTask)) {
                                                        a = Integer.parseInt(VideoCallDataBase.getDB(context).getlastCompletedParcentage(webtaskId));
                                                    } else {
                                                        a = VideoCallDataBase.getDB(context).GroupPercentageChecker(groupname, webtaskId, ownerOfTask);
                                                    }
                                                    percentage = String.valueOf(a);
                                                } else {
                                                    a = VideoCallDataBase.getDB(context).percentagechecker(webtaskId);
                                                    percentage = String.valueOf(a);
                                                }
                                                Log.i("completion123", "IsProjectFrom Oracle====> " + isProjectFromOracle);
                                                Intent intent = new Intent(NewTaskConversation.this, UpdateTaskActivity.class);
                                                intent.putExtra("username", toUserName);
                                                intent.putExtra("Str", "conversation");
                                                intent.putExtra("level", percentage);
                                                intent.putExtra("taskType", taskType);
                                                intent.putExtra("toUserId", String.valueOf(toUserId));
                                                intent.putExtra("ownerOfTask", ownerOfTask);
                                                intent.putExtra("category", category);
                                                if (isProjectFromOracle)
                                                    intent.putExtra("ProjectFromOracle", true);
                                                startActivityForResult(intent, 210);

                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                                Toast.makeText(context, "Unable to change percentage task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                                Toast.makeText(context, "Unable to sent percentage task is in pause state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("rejected")) {
                                                Toast.makeText(context, "Unable to sent percentage task is in rejected state ", Toast.LENGTH_SHORT).show();
                                            } else {
                                                Toast.makeText(context, "Task not accepted", Toast.LENGTH_SHORT).show();
                                            }
                                        } else {
                                            Toast.makeText(context, "This " + category + " is already Closed ", Toast.LENGTH_SHORT).show();
                                        }
                                        gridview.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (NumberFormatException e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView Percentage Exception : " + e.getMessage(), "WARN", null);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView Percentage Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Call":
                                    try {
                                        multimediaImage("call");
                                        gridview.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView Call Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Add Observer":
                                    try {
                                        if (webtaskId == null) {
                                            Toast.makeText(NewTaskConversation.this, "Please Create the Task ", Toast.LENGTH_SHORT).show();
                                        } else {
                                            if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause") && !taskStatus.equalsIgnoreCase("rejected")) {
                                                addObserverClickEvent();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                                Toast.makeText(context, "Unable to Add Observer task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                                Toast.makeText(context, "Unable to Add Observer task is in pause state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("rejected")) {
                                                Toast.makeText(context, "Unable to Add Observer task is in Rejected state ", Toast.LENGTH_SHORT).show();
                                            }
//                                    addObserverClickEvent();
                                        }
                                        gridview.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView Addobserver Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Chat":
                                    try {
                                        if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause")) {
                                            if (subType != null && subType.equalsIgnoreCase("private")) {
                                                subType = "normal";
                                                des.setHint("");
                                                icons.setBackgroundColor(getResources().getColor(R.color.white));
                                                linear1.setBackgroundColor(getResources().getColor(R.color.white));
                                                Toast.makeText(NewTaskConversation.this, "Private message disabled", Toast.LENGTH_SHORT).show();
                                            } else if (subType != null && subType.equalsIgnoreCase("taskDescription")) {
                                                subType = "normal";
                                                des.setHint("");
                                                icons.setBackgroundColor(getResources().getColor(R.color.white));
                                                linear1.setBackgroundColor(getResources().getColor(R.color.white));
                                                Toast.makeText(NewTaskConversation.this, "Task Description message disabled", Toast.LENGTH_SHORT).show();
                                            }
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                            Toast.makeText(context, "Unable to change chat task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                            Toast.makeText(context, "Unable to  change chat task is in pause state ", Toast.LENGTH_SHORT).show();
                                        }
                                        gridview.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Resources.NotFoundException e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView chat Exception : " + e.getMessage(), "WARN", null);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView chat Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Task Description":
                                    try {
                                        if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause")) {
                                            if (subType != null && subType.equalsIgnoreCase("taskDescription")) {
                                                subType = "normal";
                                                des.setHint("");
                                                icons.setBackgroundColor(getResources().getColor(R.color.white));
                                                linear1.setBackgroundColor(getResources().getColor(R.color.white));
                                                Toast.makeText(NewTaskConversation.this, "Task Description message disabled", Toast.LENGTH_SHORT).show();
                                            } else {
                                                subType = "taskDescription";
                                                des.setHint("Task Description");
                                                icons.setBackgroundColor(getResources().getColor(R.color.lgyellow));
                                                linear1.setBackgroundColor(getResources().getColor(R.color.lgyellow));
                                                Toast.makeText(NewTaskConversation.this, "Task description message enabled", Toast.LENGTH_SHORT).show();
                                            }
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                            Toast.makeText(context, "Unable to sent Description Message task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                            Toast.makeText(context, "Unable to sent Description Message task is in pause state ", Toast.LENGTH_SHORT).show();
                                        }
                                        gridview.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Resources.NotFoundException e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView TaskDescription Exception : " + e.getMessage(), "WARN", null);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView TaskDescription Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Forms":
                                    try {
                                        if (!isTaskName) {
                                            if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause")) {
                                                Intent formintent = new Intent(NewTaskConversation.this, FormsListActivity.class);
                                                formintent.putExtra("FormsList", new ArrayList<FormsListBean>());
                                                formintent.putExtra("TaskId", webtaskId);
                                                formintent.putExtra("webformcheck", "false");
                                                formintent.putExtra("isTemplate", "No");
                                                formintent.putExtra("UserList", listOfObservers);
                                                formintent.putExtra("TaskBean", beanValue());
                                                startActivity(formintent);
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                                Toast.makeText(context, "Unable to set Forms task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                                Toast.makeText(context, "Unable to set Forms task is in pause state ", Toast.LENGTH_SHORT).show();
                                            }
                                        } else {
                                            showToast("Please Enter TaskDescription and Make a NewTask ");
                                        }
                                        arrow = false;
                                        gridview.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView Forms Exception :" + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Reassign":
                                    try {
                                        if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause")) {
                                            addTaskReassignClickEvent();
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                            Toast.makeText(context, "Unable to Reassign task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                            Toast.makeText(context, "Unable to Reassign task is in pause state ", Toast.LENGTH_SHORT).show();
                                        }
                                        gridview.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView Reassign Exception :" + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Reminder Responses":
                                    try {
                                        if (webtaskId != null) {
                                            if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause")) {
                                                Intent reminderintent = new Intent(NewTaskConversation.this, Reminder_Responses.class);
                                                reminderintent.putExtra("taskId", webtaskId);
                                                reminderintent.putExtra("taskType", taskType);
                                                startActivity(reminderintent);
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                                Toast.makeText(context, "Unable to View Reminder Responses task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                                Toast.makeText(context, "Unable to View Reminder Responses task is in pause state ", Toast.LENGTH_SHORT).show();
                                            }
                                        } else {
                                            showToast("Please Create Task to view Reminder Response ");
                                        }
                                        gridview.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView ReminderResponce Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "RemindMe":
                                    try {
                                        if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause") && !taskStatus.equalsIgnoreCase("rejected")) {
                                            Intent note_intent = new Intent(NewTaskConversation.this, NoteDateUpdate.class);
                                            note_intent.putExtra("taskId", webtaskId);
                                            note_intent.putExtra("taskType", "note");
                                            NewTaskConversation.this.startActivityForResult(note_intent, 555);
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                            Toast.makeText(context, "Unable to set  RemindMe task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                            Toast.makeText(context, "Unable to set  RemindMe task is in pause state ", Toast.LENGTH_SHORT).show();
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("rejected")) {
                                            Toast.makeText(context, "Unable to set  RemindMe task is in rejected state ", Toast.LENGTH_SHORT).show();
                                        }
                                        gridview.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView Exception RemindMe : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "MoreFields":
                                    try {
                                        if (!isTaskName) {
                                            if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause") && !taskStatus.equalsIgnoreCase("rejected")) {
                                                showprogressforpriority("Loading MoreFields");
                                                List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
                                                nameValuePairs.add(new BasicNameValuePair("taskId", webtaskId));
                                                Appreference.jsonRequestSender.getCustomTag(EnumJsonWebservicename.getRequestType, nameValuePairs, NewTaskConversation.this);
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                                Toast.makeText(context, "Unable to set  MoreFields task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                                Toast.makeText(context, "Unable to set  MoreFields task is in pause state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("rejected")) {
                                                Toast.makeText(context, "Unable to set  MoreFields task is in rejected state ", Toast.LENGTH_SHORT).show();
                                            }
                                        } else {
                                            showToast("Please Enter TaskDescription and Make a NewTask ");
                                        }
                                        gridview.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView MoreFields Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "ViewTask":
                                    try {
                                        if (webtaskId != null) {
                                            if (!project) {
                                                String issue_Parent_id = dataBase.getProjectParentTaskId("select parentTaskId from taskHistoryInfo where taskId='" + webtaskId + "'");
                                                ArrayList<TaskDetailsBean> taskDetailsBean;
                                                taskDetailsBean = VideoCallDataBase.getDB(context).getTaskHistoryInfo("select * from taskHistoryInfo where taskId='" + issue_Parent_id + "'");
                                                if (taskDetailsBean.size() > 0) {
                                                    TaskDetailsBean taskBean = taskDetailsBean.get(0);
                                                    Intent intent = new Intent(getApplicationContext(), NewTaskConversation.class);
                                                    intent.putExtra("task", "taskhistory");
                                                    intent.putExtra("taskHistoryBean", taskBean);
                                                    intent.putExtra("catagory", taskBean.getCatagory());
                                                    Log.i("Task1", "groupname" + groupname);
                                                    intent.putExtra("groupname", groupname);
                                                    Log.i("task", "taskId is == " + taskBean.getTaskId());
                                                    startActivity(intent);
                                                }
                                            } else {
                                                String issue_Parent_id = dataBase.getProjectParentTaskId("select issueParentId from projectHistory where taskId='" + webtaskId + "'");
                                                ArrayList<ProjectDetailsBean> taskDetailsBean;
                                                taskDetailsBean = VideoCallDataBase.getDB(context).getProjectHistory("select * from projectHistory where taskId='" + issue_Parent_id + "'");
                                                Log.i("View_Task", " issue_Parent_id == 2 " + issue_Parent_id + "  taskDetailsBean size == " + taskDetailsBean.size());
                                                if (taskDetailsBean.size() > 0) {
                                                    ProjectDetailsBean taskBean = taskDetailsBean.get(0);
                                                    for (ProjectDetailsBean taskDetailsBean1 : taskDetailsBean) {
                                                        Log.i("View_Task", "  taskDetailsBean size ==  for Loop " + taskDetailsBean1.getTaskId());
                                                    }
                                                    Log.i("View_Task", " issue_Parent_id == 3 " + issue_Parent_id + "  taskDetailsBean size == " + taskBean.getTaskId());
                                                    if (taskBean.getTaskType() != null && taskBean.getTaskType().equalsIgnoreCase("individual")) {
                                                        if (taskBean.getTaskReceiver().equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) || taskBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) || taskBean.getTaskObservers().contains(Appreference.loginuserdetails.getUsername())) {
                                                            Intent intent = new Intent(context, NewTaskConversation.class);
                                                            intent.putExtra("task", "projectHistory");
                                                            intent.putExtra("projectHistoryBean", taskBean);
                                                            startActivity(intent);
                                                        } else {
                                                            Toast.makeText(getApplicationContext(), "You are not in individual project subtask", Toast.LENGTH_SHORT).show();
                                                        }
                                                    } else if (taskBean.getTaskType() != null && taskBean.getTaskType().equalsIgnoreCase("Group")) {
                                                        Log.i("ListMembers", "projectDetailsBean.getTaskMemberList() " + taskBean.getTaskMemberList());
                                                        if ((taskBean.getTaskMemberList() != null && taskBean.getTaskMemberList().contains(Appreference.loginuserdetails.getUsername())) || (taskBean.getOwnerOfTask() != null && taskBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) || (taskBean.getTaskObservers() != null && taskBean.getTaskObservers().contains(Appreference.loginuserdetails.getUsername()))) {
                                                            Intent intent = new Intent(context, NewTaskConversation.class);
                                                            intent.putExtra("task", "projectHistory");
                                                            intent.putExtra("projectHistoryBean", taskBean);
                                                            startActivity(intent);
                                                        } else {
                                                            Toast.makeText(getApplicationContext(), "You are not in group project task", Toast.LENGTH_SHORT).show();
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            showToast("Please Enter TaskDescription and Make a NewTask ");
                                        }
                                        gridview.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView ViewTask Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;
                                case "Custom1":
                                    try {
                                        final TaskDetailsBean detailsBean;
                                        String Querystatus = "Select * from projectStatus where projectId ='" + projectId + "' and taskId = '" + webtaskId + "'";
                                        detailsBean = VideoCallDataBase.getDB(context).getStatusCompletedProjectDetails(Querystatus);
                                        showCustom1PopUp(detailsBean);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "GridView Custom1 Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                            Appreference.printLog("NewTaskConversation", "Gridview owner click Exception : " + e.getMessage(), "WARN", null);
                        }
                    }
                }

        );

        gridview_taker.setOnItemClickListener(
                new AdapterView.OnItemClickListener() {
                    @Override
                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                        Log.i("gridview", "Position" + position);
                        try {
                            String selected_text = texts_taker[position];
                            switch (selected_text) {
                                case "Private":
                                    try {
                                        if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause")) {
                                            if (subType != null && subType.equalsIgnoreCase("private")) {
                                                private_member = null;
                                                subType = "normal";
                                                des.setHint("");
                                                getTaskObservers();
                                                getGroupTaskMembers();
                                                icons.setBackgroundColor(getResources().getColor(R.color.white));
                                                linear1.setBackgroundColor(getResources().getColor(R.color.white));
                                                Toast.makeText(NewTaskConversation.this, "Private message disabled", Toast.LENGTH_SHORT).show();
                                            } else {
                                                des.setHint("private message");
                                                subType = "private";
                                                icons.setBackgroundColor(getResources().getColor(R.color.grey));
                                                linear1.setBackgroundColor(getResources().getColor(R.color.grey));
                                                Toast.makeText(NewTaskConversation.this, "Private message enabled", Toast.LENGTH_SHORT).show();
                                                String Observers = "", Qurey;
                                                if (project) {
                                                    Qurey = "select taskObservers from projectHistory where taskId='" + webtaskId + "'";
                                                } else {
                                                    Qurey = "select taskObservers from taskHistoryInfo where taskId='" + webtaskId + "'";
                                                }
                                                Log.i("gridview", "listOfObservers  " + Observers + " name " + Qurey);
                                                Observers = VideoCallDataBase.getDB(context).getProjectParentTaskId(Qurey);
                                                if ((taskType != null && taskType.equalsIgnoreCase("Group"))) {
                                                    Intent intent = new Intent(NewTaskConversation.this, GroupPercentageStatus.class);
                                                    intent.putExtra("taskid", webtaskId);
                                                    intent.putExtra("groupId", String.valueOf(toUserId));
                                                    intent.putExtra("subtype", "private");
                                                    intent.putExtra("ownerOfTask", ownerOfTask);
                                                    if (project) {
                                                        intent.putExtra("isProject", "yes");
                                                        intent.putExtra("isreceiver", true);
                                                    } else {
                                                        intent.putExtra("isProject", "no");
                                                    }
                                                    startActivityForResult(intent, 999);
                                                } else if (Observers != null && Observers.length() > 0) {
                                                    Log.i("private_message", "values " + listOfObservers.size() + "Name " + listOfObservers);
                                                    Intent intent = new Intent(NewTaskConversation.this, GroupPercentageStatus.class);
                                                    intent.putExtra("taskid", webtaskId);
                                                    intent.putExtra("taskType", taskType);
                                                    intent.putExtra("subtype", "private");
                                                    intent.putExtra("ownerOfTask", ownerOfTask);
                                                    if (project) {
                                                        intent.putExtra("isProject", "yes");
                                                        intent.putExtra("isreceiver", true);
                                                    } else {
                                                        intent.putExtra("isProject", "no");
                                                    }
                                                    startActivityForResult(intent, 999);
                                                } else {
                                                    private_member = VideoCallDataBase.getDB(context).getName(toUserName);
                                                }
                                            }
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                            Toast.makeText(context, "Unable to sent  Private Message task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                            Toast.makeText(context, "Unable to sent  Private Message task is in pause state ", Toast.LENGTH_SHORT).show();
                                        }
                                        gridview_taker.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Resources.NotFoundException e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "Gridview_taker Private Exception : " + e.getMessage(), "WARN", null);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "Gridview_taker Private Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Chat":
                                    try {
                                        if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause")) {
                                            if (subType != null && subType.equalsIgnoreCase("private")) {
                                                subType = "normal";
                                                des.setHint("");
                                                icons.setBackgroundColor(getResources().getColor(R.color.white));
                                                linear1.setBackgroundColor(getResources().getColor(R.color.white));
                                                Toast.makeText(NewTaskConversation.this, "Private message disabled", Toast.LENGTH_SHORT).show();
                                            } else if (subType != null && subType.equalsIgnoreCase("taskDescription")) {
                                                subType = "normal";
                                                des.setHint("");
                                                icons.setBackgroundColor(getResources().getColor(R.color.white));
                                                linear1.setBackgroundColor(getResources().getColor(R.color.white));
                                                Toast.makeText(NewTaskConversation.this, "Task Description message disabled", Toast.LENGTH_SHORT).show();
                                            }
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                            Toast.makeText(context, "Unable to change Chat task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                            Toast.makeText(context, "Unable to change Chat task is in pause state ", Toast.LENGTH_SHORT).show();
                                        }
                                        gridview_taker.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Resources.NotFoundException e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "Gridview_taker chat Exception : " + e.getMessage(), "WARN", null);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "Gridview_taker chat Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Leave":
                                    try {
                                        if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") /*&& !taskStatus.equalsIgnoreCase("assigned")*/ && !taskStatus.equalsIgnoreCase("pause")) {
                                            if (!Appreference.loginuserdetails.getUsername().equalsIgnoreCase(ownerOfTask) || Appreference.loginuserdetails.getUsername().equalsIgnoreCase(taskReceiver)) {
                                                Intent intent1 = new Intent(NewTaskConversation.this, Leave_Request_dateSent.class);
                                                intent1.putExtra("Taskid", webtaskId);
                                                intent1.putExtra("ToUserName", ownerOfTask);
                                                startActivityForResult(intent1, 222);
                                            }
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("assigned")) {
                                            Toast.makeText(context, "Unable to sent Leave Request task is in assigned state ", Toast.LENGTH_SHORT).show();
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                            Toast.makeText(context, "Unable to sent Leave Request task is in pause state ", Toast.LENGTH_SHORT).show();
                                        } else {
                                            Toast.makeText(context, "Unable to sent Leave Request task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                        }
                                        gridview_taker.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "Gridview_taker Leave Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Scheduled Call":
                                    try {
                                        if (!isTaskName) {
                                            if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause") && !taskStatus.equalsIgnoreCase("rejected")) {
                                                showprogressforpriority("Loading Scheduled calls");
                                                List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
                                                nameValuePairs.add(new BasicNameValuePair("taskId", webtaskId));
                                                Appreference.jsonRequestSender.getCustomTag(EnumJsonWebservicename.getCustomTag, nameValuePairs, NewTaskConversation.this);
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                                Toast.makeText(context, "Unable to set Scheduled Call task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                                Toast.makeText(context, "Unable to set Scheduled Call task is in pause state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("rejected")) {
                                                Toast.makeText(context, "Unable to set Scheduled Call task is in rejected state ", Toast.LENGTH_SHORT).show();
                                            }
                                        } else {
                                            showToast("Please Enter TaskDescription and Make a NewTask ");
                                        }
                                        gridview_taker.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "Gridview_taker Scheduledcall Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Audio":
                                    try {
                                        Intent i = new Intent(NewTaskConversation.this, AudioRecorder.class);
                                        i.putExtra("task", "audio");
                                        startActivityForResult(i, 333);
                                        gridview_taker.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "Gridview_taker Audio Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Photo":
                                    multimediaImage("image");
                                    gridview_taker.setVisibility(View.GONE);
                                    icons.setVisibility(View.VISIBLE);
                                    arrow = false;
                                    break;

                                case "Sketch":
                                    try {
                                        Intent i = new Intent(getApplicationContext(), HandSketchActivity2.class);
                                        startActivityForResult(i, 423);
                                        gridview_taker.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "Gridview_taker Sketch Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Video":
                                    multimediaImage("video");
                                    gridview_taker.setVisibility(View.GONE);
                                    icons.setVisibility(View.VISIBLE);
                                    arrow = false;
                                    break;

                                case "File":
                                    try {
                                        Intent intent_file = new Intent(NewTaskConversation.this, FilePicker.class);
                                        startActivityForResult(intent_file, 55);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "Gridview_taker File Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    gridview_taker.setVisibility(View.GONE);
                                    icons.setVisibility(View.VISIBLE);
                                    arrow = false;
                                    break;

                                case "Completion":
                                    try {

                                        if (taskStatus != null && !taskStatus.equalsIgnoreCase("Closed")) {
                                            Log.i("completion123", "taskStatus====>" + taskStatus);
                                            if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause") && !taskStatus.equalsIgnoreCase("rejected") && (!taskStatus.equalsIgnoreCase("assigned") || taskType.equalsIgnoreCase("group") || isProjectFromOracle)) {
                                                int a;
                                                if (taskType != null && taskType.equalsIgnoreCase("group")) {
                                                    String percent_sender = VideoCallDataBase.getDB(context).getlastCompletedParcentagesender(webtaskId);
                                                    Log.i("GroupPercentageClick", " groupname 11 " + percent_sender);
                                                    if (percent_sender != null && percent_sender.equalsIgnoreCase(ownerOfTask)) {
                                                        a = Integer.parseInt(VideoCallDataBase.getDB(context).getlastCompletedParcentage(webtaskId));
                                                    } else {
                                                        a = VideoCallDataBase.getDB(context).GroupPercentageChecker(groupname, webtaskId, ownerOfTask);
                                                    }
                                                    percentage = String.valueOf(a);
                                                } else {
                                                    a = VideoCallDataBase.getDB(context).percentagechecker(webtaskId);
                                                    percentage = String.valueOf(a);
                                                }
                                                String query = "select status from projectStatus where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "'";
                                                int current_status = VideoCallDataBase.getDB(context).getCurrentStatus(query);
                                                Log.i("completion123", "CurrentSttaus====>" + current_status);
                                                Log.i("completion123", "IsProjectFrom Oracle====>" + isProjectFromOracle);
                                                if (isProjectFromOracle && current_status == -1) {
                                                    showToast("You have not yet started the task");
                                                } else if (isProjectFromOracle && current_status == 1) {
                                                    showToast("When task is in hold % should not been send ");
                                                } else if (isProjectFromOracle && current_status == 3) {
                                                    showToast("When task is in pause % should not been send ");
                                                } else if (isProjectFromOracle && current_status == 5) {
                                                    showToast("Task is already Completed ");
                                                } else {
                                                    Intent intent = new Intent(NewTaskConversation.this, UpdateTaskActivity.class);
                                                    intent.putExtra("username", toUserName);
                                                    intent.putExtra("Str", "conversation");
                                                    intent.putExtra("level", percentage);
                                                    intent.putExtra("taskType", taskType);
                                                    intent.putExtra("toUserId", String.valueOf(toUserId));
                                                    intent.putExtra("ownerOfTask", ownerOfTask);
                                                    intent.putExtra("category", category);
                                                    if (isProjectFromOracle)
                                                        intent.putExtra("ProjectFromOracle", true);
                                                    startActivityForResult(intent, 210);
                                                }
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                                Toast.makeText(context, "Unable to change  percentage task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                                Toast.makeText(context, "Unable to change  percentage task is in pause state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("rejected")) {
                                                Toast.makeText(context, "Unable to change  percentage task is in rejected state ", Toast.LENGTH_SHORT).show();
                                            } else {
                                                Toast.makeText(context, "Task not accepted", Toast.LENGTH_SHORT).show();
                                            }
                                        } else {
                                            Toast.makeText(context, "This " + category + " is already Closed ", Toast.LENGTH_SHORT).show();
                                        }
                                        gridview_taker.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                        break;
                                    } catch (NumberFormatException e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "Gridview_taker percentage Exception : " + e.getMessage(), "WARN", null);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "Gridview_taker percentage Exception : " + e.getMessage(), "WARN", null);
                                    }

                                case "Call":
                                    try {
                                        multimediaImage("call");
                                        gridview_taker.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "Gridview_taker Call Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "Forms":
                                    try {
                                        if (!isTaskName) {
                                            if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause")) {
                                                Intent formintent = new Intent(NewTaskConversation.this, FormsListActivity.class);
                                                formintent.putExtra("FormsList", new ArrayList<FormsListBean>());
                                                formintent.putExtra("TaskId", webtaskId);
                                                formintent.putExtra("webformcheck", "false");
                                                formintent.putExtra("isTemplate", "No");
                                                formintent.putExtra("TaskBean", beanValue());
                                                formintent.putExtra("UserList", listOfObservers);
                                                startActivity(formintent);
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                                Toast.makeText(context, "Unable to set Forms task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                                Toast.makeText(context, "Unable to set Forms task is in pause state ", Toast.LENGTH_SHORT).show();
                                            }
                                        } else {
                                            showToast("Please Enter TaskDescription and Make a NewTask ");
                                        }
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "Gridview_taker Forms Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    gridview_taker.setVisibility(View.GONE);
                                    icons.setVisibility(View.VISIBLE);
                                    arrow = false;
                                    break;

                                case "Reminder Responses":
                                    try {
                                        if (webtaskId != null) {
                                            if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause")) {
                                                Intent reminderintent = new Intent(NewTaskConversation.this, Reminder_Responses.class);
                                                reminderintent.putExtra("taskId", webtaskId);
                                                reminderintent.putExtra("taskType", taskType);
                                                startActivity(reminderintent);
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                                Toast.makeText(context, "Unable to View Reminder Responses task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                                Toast.makeText(context, "Unable to View Reminder Responses task is in pause state ", Toast.LENGTH_SHORT).show();
                                            }
                                        } else {
                                            showToast("Please Create Task to view Reminder Response ");
                                        }
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "Gridview_taker ReminderResponce Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    gridview_taker.setVisibility(View.GONE);
                                    icons.setVisibility(View.VISIBLE);
                                    arrow = false;
                                    break;

                                case "MoreFields":
                                    try {
                                        if (!isTaskName) {
                                            if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause") && !taskStatus.equalsIgnoreCase("rejected")) {
                                                showprogressforpriority("Loading MoreFields");
                                                List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
                                                nameValuePairs.add(new BasicNameValuePair("taskId", webtaskId));
                                                Appreference.jsonRequestSender.getCustomTag(EnumJsonWebservicename.getRequestType, nameValuePairs, NewTaskConversation.this);
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                                Toast.makeText(context, "Unable to set MoreFields task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                                Toast.makeText(context, "Unable to set MoreFields task is in pause state ", Toast.LENGTH_SHORT).show();
                                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("rejetced")) {
                                                Toast.makeText(context, "Unable to set MoreFields task is in rejetced state ", Toast.LENGTH_SHORT).show();
                                            }
                                        } else {
                                            showToast("Please Enter TaskDescription and Make a NewTask");
                                        }
                                        gridview_taker.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "Gridview_taker MoreFields Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;

                                case "ViewTask":
                                    try {
                                        if (webtaskId != null) {
                                            if (!project) {
                                                String issue_Parent_id = dataBase.getProjectParentTaskId("select parentTaskId from taskHistoryInfo where taskId='" + webtaskId + "'");
                                                ArrayList<TaskDetailsBean> taskDetailsBean;
                                                taskDetailsBean = VideoCallDataBase.getDB(context).getTaskHistoryInfo("select * from taskHistoryInfo where taskId='" + issue_Parent_id + "'");
                                                if (taskDetailsBean.size() > 0) {
                                                    TaskDetailsBean taskBean = taskDetailsBean.get(0);
                                                    Intent intent1 = new Intent(getApplicationContext(), NewTaskConversation.class);
                                                    intent1.putExtra("task", "taskhistory");
                                                    intent1.putExtra("taskHistoryBean", taskBean);
                                                    intent1.putExtra("catagory", taskBean.getCatagory());
                                                    Log.i("Task1", "groupname" + groupname);
                                                    intent1.putExtra("groupname", groupname);
                                                    Log.i("task", "taskId is == " + taskBean.getTaskId());
                                                    startActivity(intent1);
                                                }
                                            } else {
                                                String issue_Parent_id = dataBase.getProjectParentTaskId("select issueParentId from projectHistory where taskId='" + webtaskId + "'");
                                                ArrayList<ProjectDetailsBean> taskDetailsBean;
                                                taskDetailsBean = VideoCallDataBase.getDB(context).getProjectHistory("select * from projectHistory where taskId='" + issue_Parent_id + "'");
                                                Log.i("View_Task", " issue_Parent_id == 2 " + issue_Parent_id + "  taskDetailsBean size == " + taskDetailsBean.size());
                                                if (taskDetailsBean.size() > 0) {
                                                    ProjectDetailsBean taskBean = taskDetailsBean.get(0);
                                                    for (ProjectDetailsBean taskDetailsBean1 : taskDetailsBean) {
                                                        Log.i("View_Task", "  taskDetailsBean size ==  for Loop " + taskDetailsBean1.getTaskId());
                                                    }
                                                    if (taskBean.getTaskType() != null && taskBean.getTaskType().equalsIgnoreCase("individual")) {
                                                        if (taskBean.getTaskReceiver().equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) || taskBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) || taskBean.getTaskObservers().contains(Appreference.loginuserdetails.getUsername())) {
                                                            Intent intent1 = new Intent(context, NewTaskConversation.class);
                                                            intent1.putExtra("task", "projectHistory");
                                                            intent1.putExtra("projectHistoryBean", taskBean);
                                                            startActivity(intent1);
                                                        } else {
                                                            Toast.makeText(getApplicationContext(), "You are not in individual project subtask", Toast.LENGTH_SHORT).show();
                                                        }
                                                    } else if (taskBean.getTaskType() != null && taskBean.getTaskType().equalsIgnoreCase("Group")) {
                                                        if ((taskBean.getTaskMemberList() != null && taskBean.getTaskMemberList().contains(Appreference.loginuserdetails.getUsername())) || (taskBean.getOwnerOfTask() != null && taskBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) || (taskBean.getTaskObservers() != null && taskBean.getTaskObservers().contains(Appreference.loginuserdetails.getUsername()))) {
                                                            Intent intent2 = new Intent(context, NewTaskConversation.class);
                                                            intent2.putExtra("task", "projectHistory");
                                                            intent2.putExtra("projectHistoryBean", taskBean);
                                                            startActivity(intent2);
                                                        } else {
                                                            Toast.makeText(getApplicationContext(), "You are not in group project task", Toast.LENGTH_SHORT).show();
                                                        }
                                                    }
                                                }
                                            }
                                        } else {
                                            showToast("Please Enter TaskDescription and Make a NewTask ");
                                        }
                                        gridview_taker.setVisibility(View.GONE);
                                        icons.setVisibility(View.VISIBLE);
                                        arrow = false;
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "Gridview_taker ViewTask Exception : " + e.getMessage(), "WARN", null);
                                    }
                                    break;
                                case "Custom1":
                                    try {
                                        final TaskDetailsBean detailsBean;
                                        String Querystatus = "Select * from projectStatus where projectId ='" + projectId + "' and taskId = '" + webtaskId + "'";
                                        detailsBean = VideoCallDataBase.getDB(context).getStatusCompletedProjectDetails(Querystatus);
                                        showCustom1PopUp(detailsBean);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "Gridview_taker Custom1 Exception " + e.getMessage(), "WARN", null);
                                    }
                                    break;
                            }
                        } catch (NumberFormatException e) {
                            e.printStackTrace();
                            Appreference.printLog("NewTaskConversation Griddview_taker click", "Exception " + e.getMessage(), "WARN", null);
                        } catch (Exception e) {
                            e.printStackTrace();
                            Appreference.printLog("NewTaskConversation Griddview_taker click", "Exception " + e.getMessage(), "WARN", null);
                        }
                    }
                }

        );

        gridview_observer.setOnItemClickListener(
                new AdapterView.OnItemClickListener() {
                    @Override
                    public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
                        Log.i("gridview", "Position" + position);
                        String selected_text = texts_observer[position];
                        switch (selected_text) {
                            case "Private":
                                try {
                                    if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause")) {
                                        if (subType != null && subType.equalsIgnoreCase("private")) {
                                            private_member = null;
                                            subType = "normal";
                                            des.setHint("");
                                            getTaskObservers();
                                            getGroupTaskMembers();
                                            icons.setBackgroundColor(getResources().getColor(R.color.white));
                                            linear1.setBackgroundColor(getResources().getColor(R.color.white));
                                            Toast.makeText(NewTaskConversation.this, "Private message disabled", Toast.LENGTH_SHORT).show();
                                        } else {
                                            des.setHint("private message");
                                            subType = "private";
                                            icons.setBackgroundColor(getResources().getColor(R.color.grey));
                                            linear1.setBackgroundColor(getResources().getColor(R.color.grey));
                                            Toast.makeText(NewTaskConversation.this, "Private message enabled", Toast.LENGTH_SHORT).show();
                                            String Observers = "", Qurey;
                                            if (project) {
                                                Qurey = "select taskObservers from projectHistory where taskId='" + webtaskId + "'";
                                            } else {
                                                Qurey = "select taskObservers from taskHistoryInfo where taskId='" + webtaskId + "'";
                                            }
                                            Log.i("gridview", "listOfObservers  " + Observers + " name " + Qurey);
                                            Observers = VideoCallDataBase.getDB(context).getProjectParentTaskId(Qurey);
                                            if ((taskType != null && taskType.equalsIgnoreCase("Group"))) {
                                                Intent intent = new Intent(NewTaskConversation.this, GroupPercentageStatus.class);
                                                intent.putExtra("taskid", webtaskId);
                                                intent.putExtra("groupId", String.valueOf(toUserId));
                                                intent.putExtra("subtype", "private");
                                                intent.putExtra("ownerOfTask", ownerOfTask);
                                                if (project) {
                                                    intent.putExtra("isProject", "yes");
                                                    intent.putExtra("isreceiver", true);
                                                } else {
                                                    intent.putExtra("isProject", "no");
                                                }
                                                startActivityForResult(intent, 999);
                                            } else if (Observers != null && Observers.length() > 0) {
                                                Log.i("private_message", "values " + listOfObservers.size() + "Name " + listOfObservers);
                                                Intent intent = new Intent(NewTaskConversation.this, GroupPercentageStatus.class);
                                                intent.putExtra("taskid", webtaskId);
                                                intent.putExtra("taskType", taskType);
                                                intent.putExtra("subtype", "private");
                                                intent.putExtra("ownerOfTask", ownerOfTask);
                                                if (project) {
                                                    intent.putExtra("isProject", "yes");
                                                    intent.putExtra("isreceiver", true);
                                                } else {
                                                    intent.putExtra("isProject", "no");
                                                }
                                                startActivityForResult(intent, 999);
                                            } else {
                                                private_member = VideoCallDataBase.getDB(context).getName(toUserName);
                                            }
                                        }
                                    } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                        Toast.makeText(context, "Unable to sent  Private Message task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                    } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                        Toast.makeText(context, "Unable to sent  Private Message task is in pause state ", Toast.LENGTH_SHORT).show();
                                    }
                                } catch (Resources.NotFoundException e) {
                                    e.printStackTrace();
                                    Appreference.printLog("NewTaskConversation Griddview_observer private", "Exception " + e.getMessage(), "WARN", null);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    Appreference.printLog("NewTaskConversation Griddview_observer private", "Exception " + e.getMessage(), "WARN", null);
                                }
                                gridview_observer.setVisibility(View.GONE);
                                icons.setVisibility(View.VISIBLE);
                                arrow = false;
                                break;

                            case "Chat":
                                try {
                                    if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause")) {
                                        if (subType != null && subType.equalsIgnoreCase("private")) {
                                            subType = "normal";
                                            des.setHint("");
                                            icons.setBackgroundColor(getResources().getColor(R.color.white));
                                            linear1.setBackgroundColor(getResources().getColor(R.color.white));
                                            Toast.makeText(NewTaskConversation.this, "Private message disabled", Toast.LENGTH_SHORT).show();
                                        } else if (subType != null && subType.equalsIgnoreCase("taskDescription")) {
                                            subType = "normal";
                                            des.setHint("");
                                            icons.setBackgroundColor(getResources().getColor(R.color.white));
                                            linear1.setBackgroundColor(getResources().getColor(R.color.white));
                                            Toast.makeText(NewTaskConversation.this, "Task Description message disabled", Toast.LENGTH_SHORT).show();
                                        }
                                    } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                        Toast.makeText(context, "Unable to change  Chat Message task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                    } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                        Toast.makeText(context, "Unable to change Chat Message task is in pause state ", Toast.LENGTH_SHORT).show();
                                    }
                                    gridview_observer.setVisibility(View.GONE);
                                    icons.setVisibility(View.VISIBLE);
                                    arrow = false;
                                } catch (Resources.NotFoundException e) {
                                    e.printStackTrace();
                                    Appreference.printLog("NewTaskConversation", "Griddview_observer chat Exception : " + e.getMessage(), "WARN", null);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    Appreference.printLog("NewTaskConversation", "Griddview_observer chat Exception : " + e.getMessage(), "WARN", null);
                                }
                                break;

                            case "Scheduled":
                                try {
                                    if (!isTaskName) {
                                        if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause") && !taskStatus.equalsIgnoreCase("rejected")) {
                                            showprogressforpriority("Loading Scheduled calls");
                                            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
                                            nameValuePairs.add(new BasicNameValuePair("taskId", webtaskId));
                                            Appreference.jsonRequestSender.getCustomTag(EnumJsonWebservicename.getCustomTag, nameValuePairs, NewTaskConversation.this);
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                            Toast.makeText(context, "Unable to set Scheduled call task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                            Toast.makeText(context, "Unable to set Scheduled call task is in pause state ", Toast.LENGTH_SHORT).show();
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("rejected")) {
                                            Toast.makeText(context, "Unable to set Scheduled call task is in rejected state ", Toast.LENGTH_SHORT).show();
                                        }
                                    } else {
                                        showToast("Please Enter TaskDescription and Make a NewTask ");
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    Appreference.printLog("NewTaskConversation", "Griddview_observer ScheduledCall Exception : " + e.getMessage(), "WARN", null);
                                }
                                gridview_observer.setVisibility(View.GONE);
                                icons.setVisibility(View.VISIBLE);
                                arrow = false;
                                break;

                            case "Audio":
                                try {
                                    Intent i = new Intent(NewTaskConversation.this, AudioRecorder.class);
                                    i.putExtra("task", "audio");
                                    startActivityForResult(i, 333);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    Appreference.printLog("NewTaskConversation", "Griddview_observer Audio Exception : " + e.getMessage(), "WARN", null);
                                }
                                gridview_observer.setVisibility(View.GONE);
                                icons.setVisibility(View.VISIBLE);
                                arrow = false;
                                break;

                            case "Photo":
                                multimediaImage("image");
                                gridview_observer.setVisibility(View.GONE);
                                icons.setVisibility(View.VISIBLE);
                                arrow = false;
                                break;

                            case "Sketch":
                                try {
                                    Intent i = new Intent(getApplicationContext(), HandSketchActivity2.class);
                                    startActivityForResult(i, 423);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    Appreference.printLog("NewTaskConversation", "Griddview_observer Sketch Exception : " + e.getMessage(), "WARN", null);
                                }
                                gridview_observer.setVisibility(View.GONE);
                                icons.setVisibility(View.VISIBLE);
                                arrow = false;
                                break;

                            case "Video":
                                multimediaImage("video");
                                gridview_observer.setVisibility(View.GONE);
                                icons.setVisibility(View.VISIBLE);
                                arrow = false;
                                break;

                            case "File":
                                try {
                                    Intent intent_file = new Intent(NewTaskConversation.this, FilePicker.class);
                                    startActivityForResult(intent_file, 55);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    Appreference.printLog("NewTaskConversation", "Griddview_observer File Exception : " + e.getMessage(), "WARN", null);
                                }
                                gridview_observer.setVisibility(View.GONE);
                                icons.setVisibility(View.VISIBLE);
                                arrow = false;
                                break;

                            case "Call":
                                try {
                                    multimediaImage("call");
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    Appreference.printLog("NewTaskConversation", "Griddview_observer Call Exception : " + e.getMessage(), "WARN", null);
                                }
                                gridview.setVisibility(View.GONE);
                                icons.setVisibility(View.VISIBLE);
                                arrow = false;
                                break;

                            case "Forms":
                                try {
                                    if (!isTaskName) {
                                        if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause")) {
                                            Intent formintent = new Intent(NewTaskConversation.this, FormsListActivity.class);
                                            formintent.putExtra("FormsList", new ArrayList<FormsListBean>());
                                            formintent.putExtra("TaskId", webtaskId);
                                            formintent.putExtra("webformcheck", "false");
                                            formintent.putExtra("isTemplate", "No");
                                            formintent.putExtra("TaskBean", beanValue());
                                            formintent.putExtra("UserList", listOfObservers);
                                            startActivity(formintent);
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                            Toast.makeText(context, "Unable to set Forms task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                            Toast.makeText(context, "Unable to set Forms task is in pause state ", Toast.LENGTH_SHORT).show();
                                        }
                                    } else {
                                        showToast("Please Enter TaskDescription and Make a NewTask ");
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    Appreference.printLog("NewTaskConversation", "Griddview_observer Forms Exception : " + e.getMessage(), "WARN", null);
                                }
                                gridview_observer.setVisibility(View.GONE);
                                icons.setVisibility(View.VISIBLE);
                                arrow = false;
                                break;

                            case "Reminder Responses":
                                try {
                                    if (webtaskId != null) {
                                        if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause")) {
                                            Intent reminderintent = new Intent(NewTaskConversation.this, Reminder_Responses.class);
                                            reminderintent.putExtra("taskId", webtaskId);
                                            reminderintent.putExtra("taskType", taskType);
                                            startActivity(reminderintent);
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                            Toast.makeText(context, "Unable to View Reminder Responses task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                            Toast.makeText(context, "Unable to View Reminder Responses task is in pause state ", Toast.LENGTH_SHORT).show();
                                        }
                                    } else {
                                        showToast("Please Create Task to view Reminder Response ");
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    Appreference.printLog("NewTaskConversation", "Griddview_observer ReminderRespnce Exception : " + e.getMessage(), "WARN", null);
                                }
                                gridview_observer.setVisibility(View.GONE);
                                icons.setVisibility(View.VISIBLE);
                                arrow = false;
                                break;

                            case "MoreFields":
                                try {
                                    if (!isTaskName) {
                                        if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause") && !taskStatus.equalsIgnoreCase("rejected")) {
                                            showprogressforpriority("Loading MoreFields");
                                            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
                                            nameValuePairs.add(new BasicNameValuePair("taskId", webtaskId));
                                            Appreference.jsonRequestSender.getCustomTag(EnumJsonWebservicename.getRequestType, nameValuePairs, NewTaskConversation.this);
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                            Toast.makeText(context, "Unable to set MoreFields task is in abandoned state ", Toast.LENGTH_SHORT).show();
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                            Toast.makeText(context, "Unable to set MoreFields task is in pause state ", Toast.LENGTH_SHORT).show();
                                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("rejected")) {
                                            Toast.makeText(context, "Unable to set MoreFields task is in rejected state ", Toast.LENGTH_SHORT).show();
                                        }
                                    } else {
                                        showToast("Please Enter TaskDescription and Make a NewTask ");
                                    }
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    Appreference.printLog("NewTaskConversation", "Griddview_observer MoreFields Exception : " + e.getMessage(), "WARN", null);
                                }
                                gridview_observer.setVisibility(View.GONE);
                                icons.setVisibility(View.VISIBLE);
                                arrow = false;
                                break;

                            case "ViewTask":
                                try {
                                    if (webtaskId != null) {
                                        if (!project) {
                                            String issue_Parent_id = dataBase.getProjectParentTaskId("select parentTaskId from taskHistoryInfo where taskId='" + webtaskId + "'");
                                            ArrayList<TaskDetailsBean> taskDetailsBean;
                                            taskDetailsBean = VideoCallDataBase.getDB(context).getTaskHistoryInfo("select * from taskHistoryInfo where taskId='" + issue_Parent_id + "'");
                                            if (taskDetailsBean.size() > 0) {
                                                TaskDetailsBean taskBean = taskDetailsBean.get(0);
                                                Intent intent = new Intent(getApplicationContext(), NewTaskConversation.class);
                                                intent.putExtra("task", "taskhistory");
                                                intent.putExtra("taskHistoryBean", taskBean);
                                                intent.putExtra("catagory", taskBean.getCatagory());
                                                Log.i("Task1", "groupname" + groupname);
                                                intent.putExtra("groupname", groupname);
                                                Log.i("task", "taskId is == " + taskBean.getTaskId());
                                                startActivity(intent);
                                            }
                                        } else {
                                            String issue_Parent_id = dataBase.getProjectParentTaskId("select issueParentId from projectHistory where taskId='" + webtaskId + "'");
                                            ArrayList<ProjectDetailsBean> taskDetailsBean;
                                            taskDetailsBean = VideoCallDataBase.getDB(context).getProjectHistory("select * from projectHistory where taskId='" + issue_Parent_id + "'");
                                            Log.i("View_Task", " issue_Parent_id == 2 " + issue_Parent_id + "  taskDetailsBean size == " + taskDetailsBean.size());
                                            if (taskDetailsBean.size() > 0) {
                                                ProjectDetailsBean taskBean = taskDetailsBean.get(0);
                                                for (ProjectDetailsBean taskDetailsBean1 : taskDetailsBean) {
                                                    Log.i("View_Task", "  taskDetailsBean size ==  for Loop " + taskDetailsBean1.getTaskId());
                                                }
                                                if (taskBean.getTaskType() != null && taskBean.getTaskType().equalsIgnoreCase("individual")) {
                                                    if (taskBean.getTaskReceiver().equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) || taskBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) || taskBean.getTaskObservers().contains(Appreference.loginuserdetails.getUsername())) {
                                                        Intent intent = new Intent(context, NewTaskConversation.class);
                                                        intent.putExtra("task", "projectHistory");
                                                        intent.putExtra("projectHistoryBean", taskBean);
                                                        startActivity(intent);
                                                    } else {
                                                        Toast.makeText(getApplicationContext(), "You are not in individual project subtask", Toast.LENGTH_SHORT).show();
                                                    }
                                                } else if (taskBean.getTaskType() != null && taskBean.getTaskType().equalsIgnoreCase("Group")) {
                                                    if ((taskBean.getTaskMemberList() != null && taskBean.getTaskMemberList().contains(Appreference.loginuserdetails.getUsername())) || (taskBean.getOwnerOfTask() != null && taskBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) || (taskBean.getTaskObservers() != null && taskBean.getTaskObservers().contains(Appreference.loginuserdetails.getUsername()))) {
                                                        Intent intent = new Intent(context, NewTaskConversation.class);
                                                        intent.putExtra("task", "projectHistory");
                                                        intent.putExtra("projectHistoryBean", taskBean);
                                                        startActivity(intent);
                                                    } else {
                                                        Toast.makeText(getApplicationContext(), "You are not in group project task", Toast.LENGTH_SHORT).show();
                                                    }
                                                }
                                            }
                                        }
                                    } else {
                                        showToast("Please Enter TaskDescription and Make a NewTask ");
                                    }
                                    gridview_observer.setVisibility(View.GONE);
                                    icons.setVisibility(View.VISIBLE);
                                    arrow = false;
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    Appreference.printLog("NewTaskConversation", "Griddview_observer ViewTask Exception : " + e.getMessage(), "WARN", null);
                                }
                                break;
                        }
                    }
                }

        );

        if (template) {
            savetemplate.setVisibility(View.INVISIBLE);
            Log.e("Template", "value");
        }
        savetemplate.setOnClickListener(
                new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        try {
                            if (!tem) {
                                options.setVisibility(View.GONE);
                                save.setVisibility(View.GONE);
                                icons.setVisibility(View.GONE);
                                addObserver.setVisibility(View.GONE);
                                Log.i("taskconversation", "sendTemplate.setVisibility *4 ");
                                sendTemplate.setVisibility(View.GONE);
                                barchart.setVisibility(View.GONE);
                                Log.i("barchat", "visibility * ");
                                savetemplate1.setVisibility(View.VISIBLE);
                                linear1.setVisibility(View.GONE);
                                tem = true;
                                Appreference.temconvert = true;
                                Toast.makeText(context, "Tap on conversation to add to template", Toast.LENGTH_SHORT).show();
                                String tem_qry = null;
                                tem_qry = "select * from taskDetailsInfo where  (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "') and (mimeType !='date') and (taskDescription NOT LIKE '%Completed Percentage%') and (taskStatus !='reminder');";
                                Log.i("tagFilter", tem_qry);
                                taskList_4 = VideoCallDataBase.getDB(context).getTaskHistory(tem_qry);
                                taskList.clear();
                                taskList.addAll(taskList_4);
                                Log.i("Template", "taskList" + taskList.size());
                                if (taskList.size() <= 0)
                                    Toast.makeText(NewTaskConversation.this, "There is NO Conversation to convert template", Toast.LENGTH_SHORT).show();
                                Log.i("tagFilter", "size for date " + taskList.size());
                                refresh();
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                            Appreference.printLog("NewTaskConversation", "Savetemplate clickListener Exception : " + e.getMessage(), "WARN", null);
                        }
                    }
                });
        showMy_ID.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    final Dialog dialog = new Dialog(NewTaskConversation.this);
                    dialog.setContentView(R.layout.project_task_id);
                    dialog.setTitle(taskName);
                    TextView project_id_show = (TextView) dialog.findViewById(R.id.project_id_show);
                    TextView task_id_show = (TextView) dialog.findViewById(R.id.task_id_show);
                    Button dialogButtonOK = (Button) dialog.findViewById(R.id.dialogButtonOK);
                    project_id_show.setText(projectId);
                    task_id_show.setText(webtaskId);
                    dialogButtonOK.setOnClickListener(new View.OnClickListener() {
                        @Override
                        public void onClick(View v) {
                            dialog.dismiss();
                        }
                    });
                    dialog.show();
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "ShowMyId clickListener Exception : " + e.getMessage(), "WARN", null);
                }
            }
        });
        savetemplate1.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    Intent intent = new Intent(getApplicationContext(), TemplateView.class);
                    intent.putExtra("media", taskList);
                    startActivityForResult(intent, 456);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "savetemplate1 clickListener Exception : " + e.getMessage(), "WARN", null);
                }
            }
        });

        accept.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            taskacceptorreject = "accepted";
                            accepttask();
                            if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                                showprogress();
                            }
                        }
                    });
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "accept clickListener Exception : " + e.getMessage(), "WARN", null);
                }
            }
        });
        reject.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            taskacceptorreject = "rejected";
                            rejecttask();
                            if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                                showprogress();
                            }
                        }
                    });
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "reject clickListener Exception : " + e.getMessage(), "WARN", null);
                }
            }
        });

        task_issue.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    finish();
                    handler.postDelayed(new Runnable() {

                        @Override
                        public void run() {
                            Log.i("issue", "inside handler " + toUserId);
                            Intent intent = new Intent(getApplicationContext(), NewTaskConversation.class);
                            if (project) {
                                intent.putExtra("project", "true");
                                intent.putExtra("projectid", projectId);
                            } else {
                                intent.putExtra("project", "false");
                            }
                            intent.putExtra("toUserId", toUserId);
                            intent.putExtra("parentId", webtaskId);
                            intent.putExtra("userName", ownerOfTask);
                            intent.putExtra("toUserName", toUserName);
                            intent.putExtra("task", "newissue");
                            intent.putExtra("type", taskType);
                            startActivity(intent);
                        }
                    }, 1000);
                    istask_issue = true;
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "task_issue clickListener Exception : " + e.getMessage(), "WARN", null);
                }
            }
        });


        task_approve.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            saveNote();
                        }
                    });
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "task_approve clickListener Exception : " + e.getMessage(), "WARN", null);
                }
            }
        });

        addobservertext.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    if (webtaskId == null) {
                        Toast.makeText(NewTaskConversation.this, "Please Create the Task ", Toast.LENGTH_SHORT).show();
                    } else {
                        vie = 0;
                        options.setVisibility(View.GONE);
                        addObserverClickEvent();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "addobservertext clickListener Exception : " + e.getMessage(), "WARN", null);
                }

            }
        });
        addObserver.setOnClickListener(this);

        tagFilter.setOnClickListener(this);

        dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        currentDate = dateFormat.format(new Date());

        head.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    if (!isProjectFromOracle) {
                        if (!template && !note || template && isProjectFromOracle) {
                            if (vie == 0) {
                                if (isProjectFromOracle && (listOfObservers != null && listOfObservers.size() > 0) && !oracleProjectOwner.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()))
                                    options.setVisibility(View.GONE);//taker
                                else {
                                    //Giver
                                    Log.i("ws123", "taker MemberList size====>" + listOfObservers.size());
                                    Log.i("ws123", "taker MemberList ====>" + listOfObservers);
                                    if (listOfObservers.size() == 0)
                                        options.setVisibility(View.VISIBLE);
                                }
                                /*if tasktype is individual*/
                                if (taskType != null && !taskType.equalsIgnoreCase("Group")) {
                                    if (!isProjectFromOracle && ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                        addobserverRowView.setVisibility(View.VISIBLE);
                                        assignFromTemplateView.setVisibility(View.VISIBLE);
                                        assignFromTemplate.setVisibility(View.VISIBLE);
                                        addobserverRow.setVisibility(View.VISIBLE);
                                        mute_audio.setVisibility(View.GONE);
                                        percentCompletionView.setVisibility(View.VISIBLE);
                                        percentcompletion_tr.setVisibility(View.VISIBLE);
                                        if (task_catagory != null && task_catagory.equalsIgnoreCase("issue")) {
                                            View_Task_TR.setVisibility(View.VISIBLE);
                                            View_Task_View.setVisibility(View.VISIBLE);
                                        }
                                    } else if (!isProjectFromOracle && taskReceiver.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                        addobserverRowView.setVisibility(View.GONE);
                                        tv_reassign.setVisibility(View.GONE);
                                        tv_percompletion.setVisibility(View.GONE);
                                        assignFromTemplateView.setVisibility(View.VISIBLE);
                                        assignFromTemplate.setVisibility(View.VISIBLE);
                                        addobserverRow.setVisibility(View.GONE);
                                        percentCompletionView.setVisibility(View.GONE);
                                        percentcompletion_tr.setVisibility(View.GONE);
                                        mute_audio.setVisibility(View.GONE);
                                        if (task_catagory != null && task_catagory.equalsIgnoreCase("issue")) {
                                            View_Task_TR.setVisibility(View.VISIBLE);
                                            View_Task_View.setVisibility(View.VISIBLE);
                                        }
                                    } else {
                                        options.setVisibility(View.VISIBLE);
                                        addobserverRowView.setVisibility(View.GONE);
                                        assignFromTemplateView.setVisibility(View.GONE);
                                        assignFromTemplate.setVisibility(View.GONE);
                                        addobserverRow.setVisibility(View.GONE);
                                        mute_audio.setVisibility(View.GONE);
                                        percentCompletionView.setVisibility(View.GONE);
                                        percentcompletion_tr.setVisibility(View.GONE);
                                        if (task_catagory != null && task_catagory.equalsIgnoreCase("issue")) {
                                            View_Task_TR.setVisibility(View.VISIBLE);
                                            View_Task_View.setVisibility(View.VISIBLE);
                                        }
                                    }
                                } else {                         /*if tasktype is Group ==>Giver side*/
                                    if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) && !isProjectFromOracle) {
                                        addobserverRowView.setVisibility(View.VISIBLE);
                                        assignFromTemplateView.setVisibility(View.VISIBLE);
                                        assignFromTemplate.setVisibility(View.VISIBLE);
                                        addobserverRow.setVisibility(View.VISIBLE);
                                        percentCompletionView.setVisibility(View.VISIBLE);
                                        percentcompletion_tr.setVisibility(View.VISIBLE);
                                        mute_audio.setVisibility(View.GONE);
                                        if (task_catagory != null && task_catagory.equalsIgnoreCase("issue")) {
                                            View_Task_TR.setVisibility(View.VISIBLE);
                                            View_Task_View.setVisibility(View.VISIBLE);
                                        }
                                    } else {
                                          /*if tasktype is Group ==>taker side*/
                                        addobserverRowView.setVisibility(View.GONE);
                                        assignFromTemplateView.setVisibility(View.VISIBLE);
                                        assignFromTemplate.setVisibility(View.VISIBLE);
                                        addobserverRow.setVisibility(View.GONE);
                                        mute_audio.setVisibility(View.GONE);
                                        percentCompletionView.setVisibility(View.GONE);
                                        percentcompletion_tr.setVisibility(View.GONE);
                                        if (task_catagory != null && task_catagory.equalsIgnoreCase("issue")) {
                                            View_Task_TR.setVisibility(View.VISIBLE);
                                            View_Task_View.setVisibility(View.VISIBLE);
                                        }
                                    }
                                }
                                if ((taskType != null && taskType.equalsIgnoreCase("Group") && groupMemberAccess.getReassignTask() != null && groupMemberAccess.getReassignTask().contains("0"))) {
                                    reassign_tr.setVisibility(View.GONE);
                                    Log.i("groupMemberAccess", "getReassignTask " + groupMemberAccess.getReassignTask());
                                }
                                if ((taskType != null && taskType.equalsIgnoreCase("Group") && groupMemberAccess.getAddObserver() != null && groupMemberAccess.getAddObserver().contains("0"))) {
                                    addobserverRow.setVisibility(View.GONE);
                                    addobserverRowView.setVisibility(View.GONE);
                                    //                            Log.i("groupMemberAccess", "getAddObserver 2 " + groupMemberAccess.getAddObserver());
                                }
                                if ((taskType != null && taskType.equalsIgnoreCase("Group") && groupMemberAccess.getTemplateExistingTask() != null && groupMemberAccess.getTemplateExistingTask().contains("0"))) {
                                    assignFromTemplate.setVisibility(View.GONE);
                                    assignFromTemplateView.setVisibility(View.GONE);
                                    Log.i("groupMemberAccess", "getTemplateExistingTask " + groupMemberAccess.getTemplateExistingTask());
                                }
                                vie = 1;
                            } else {
                                options.setVisibility(View.GONE);
                                vie = 0;
                            }
                        }
                    } else {
                        Intent intent = new Intent(NewTaskConversation.this, ListFullTaskName.class);
                        intent.putExtra("t_projectId", projectId);
                        intent.putExtra("t_taskId", webtaskId);
                        startActivity(intent);

                    /*LayoutInflater inflater = getLayoutInflater();
                    View alertLayout = inflater.inflate(R.layout.list_task_description, null);
                    AlertDialog.Builder alert = new AlertDialog.Builder(context);
                    TextView my_taskName=(TextView) alertLayout.findViewById(R.id.my_taskName);
                    alert.setTitle("TASK NAME");
                    // this is set the view from XML inside AlertDialog
                    alert.setView(alertLayout);
                    // disallow cancel of AlertDialog on click of back button and outside touch
                    alert.setCancelable(false);
                    String Query = "Select * from projectHistory where projectId ='" + projectId + "' and taskId = '" + webtaskId + "'";
                    TaskDetailsBean taskBean = VideoCallDataBase.getDB(context).getDetails_to_complete_project(Query);
                    my_taskName.setText(taskBean.getTaskName());
                    alert.setPositiveButton("cancel", new DialogInterface.OnClickListener() {
                        @Override
                        public void onClick(DialogInterface taskdialog, int which) {
                            taskdialog.dismiss();
                        }
                    });

                        AlertDialog dialog = alert.create();
                        dialog.show();*/
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "head clickListener Exception : " + e.getMessage(), "WARN", null);
                }
            }
        });


        assign_taskview.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (isNetworkAvailable()) {
                    try {
                        if (!Self_assign)
                            addTaskReassignClickEvent();
                        else {
                            selfassign_webservice();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "assign_taskview clickListener Exception : " + e.getMessage(), "WARN", null);
                    }
                } else {
                    Toast.makeText(NewTaskConversation.this, "Check your internet connection", Toast.LENGTH_SHORT).show();
                }
            }
        });
        View_Task_TR.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    if (webtaskId != null) {
                        if (!project) {
                            String issue_Parent_id = dataBase.getProjectParentTaskId("select parentTaskId from taskHistoryInfo where taskId='" + webtaskId + "'");
                            ArrayList<TaskDetailsBean> taskDetailsBean = new ArrayList<TaskDetailsBean>();
                            taskDetailsBean = VideoCallDataBase.getDB(context).getTaskHistoryInfo("select * from taskHistoryInfo where taskId='" + issue_Parent_id + "'");
                            Log.i("View_Task", " issue_Parent_id == 1 " + issue_Parent_id + "  taskDetailsBean size == " + taskDetailsBean.size());
                            if (taskDetailsBean.size() > 0) {
                                TaskDetailsBean taskBean = taskDetailsBean.get(0);
                                Intent intent = new Intent(getApplicationContext(), NewTaskConversation.class);
                                intent.putExtra("task", "taskhistory");
                                intent.putExtra("taskHistoryBean", taskBean);
                                intent.putExtra("catagory", taskBean.getCatagory());
                                Log.i("Task1", "groupname" + groupname);
                                intent.putExtra("groupname", groupname);
                                Log.i("task", "taskId is == " + taskBean.getTaskId());
                                startActivity(intent);
//                                finish();
                            }
                        } else {
                            String issue_Parent_id = dataBase.getProjectParentTaskId("select issueParentId from projectHistory where taskId='" + webtaskId + "'");
                            ArrayList<ProjectDetailsBean> taskDetailsBean = new ArrayList<ProjectDetailsBean>();
                            taskDetailsBean = VideoCallDataBase.getDB(context).getProjectHistory("select * from projectHistory where taskId='" + issue_Parent_id + "'");
                            Log.i("View_Task", " issue_Parent_id == 2 " + issue_Parent_id + "  taskDetailsBean size == " + taskDetailsBean.size());
                            if (taskDetailsBean.size() > 0) {
                                ProjectDetailsBean taskBean = taskDetailsBean.get(0);
                                for (ProjectDetailsBean taskDetailsBean1 : taskDetailsBean) {
                                    Log.i("View_Task", "  taskDetailsBean size ==  for Loop " + taskDetailsBean1.getTaskId());
                                }
                                Log.i("View_Task", " issue_Parent_id == 3 " + issue_Parent_id + "  taskDetailsBean size == " + taskBean.getTaskId());
                                if (taskBean.getTaskType() != null && taskBean.getTaskType().equalsIgnoreCase("individual")) {
                                    if (taskBean.getTaskReceiver().equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) || taskBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) || taskBean.getTaskObservers().contains(Appreference.loginuserdetails.getUsername())) {
                                        Intent intent = new Intent(context, NewTaskConversation.class);
                                        intent.putExtra("task", "projectHistory");
                                        intent.putExtra("projectHistoryBean", taskBean);
                                        startActivity(intent);
                                    } else {
                                        Toast.makeText(getApplicationContext(), "You are not in individual project subtask", Toast.LENGTH_SHORT).show();
                                    }
                                } else if (taskBean.getTaskType() != null && taskBean.getTaskType().equalsIgnoreCase("Group")) {
                                    Log.i("ListMembers", "projectDetailsBean.getTaskMemberList() " + taskBean.getTaskMemberList());
                                    if ((taskBean.getTaskMemberList() != null && taskBean.getTaskMemberList().contains(Appreference.loginuserdetails.getUsername())) || (taskBean.getOwnerOfTask() != null && taskBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) || (taskBean.getTaskObservers() != null && taskBean.getTaskObservers().contains(Appreference.loginuserdetails.getUsername()))) {
                                        Intent intent = new Intent(context, NewTaskConversation.class);
                                        intent.putExtra("task", "projectHistory");
                                        intent.putExtra("projectHistoryBean", taskBean);
                                        startActivity(intent);
                                    } else {
                                        Toast.makeText(getApplicationContext(), "You are not in group project task", Toast.LENGTH_SHORT).show();
                                    }
                                }
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "View_Task_TR clickListener  Exception : " + e.getMessage(), "WARN", null);
                }

            }
        });
        tv_percompletion.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    if (taskType.equalsIgnoreCase("Group")) {
                        if (!Appreference.context_table.containsKey("grouppercentagestatus") && webtaskId != null) {
                            Intent intent = new Intent(NewTaskConversation.this, GroupPercentageStatus.class);
                            intent.putExtra("taskid", webtaskId);
                            Log.i("project_details", "Group toUserId " + toUserId);
                            intent.putExtra("groupId", String.valueOf(toUserId));
                            intent.putExtra("subtype", "normal");
                            if (project) {
                                intent.putExtra("isProject", "yes");
                                intent.putExtra("isreceiver", false);
                            } else {
                                intent.putExtra("isProject", "no");
                            }
                            Log.i("normal message", "chatusers for normal ");
                            startActivity(intent);
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "tv_percompletion clickListener  Exception : " + e.getMessage(), "WARN", null);
                }
            }
        });

        mute.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    if (mute.getText().equals("Mute User")) {
                        mute.setText("UnMute User");
                        mute_icon.setBackgroundResource(R.drawable.normal_audio);
                        vie = 0;
                        options.setVisibility(View.GONE);
                        appSharedpreferences.saveBoolean(webtaskId, true);
                    } else {
                        mute.setText("Mute User");
                        mute_icon.setBackgroundResource(R.drawable.mute_audio);
                        options.setVisibility(View.GONE);
                        appSharedpreferences.saveBoolean(webtaskId, false);
                        vie = 0;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "mute clickListener  Exception : " + e.getMessage(), "WARN", null);
                }
            }
        });
        barchart.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    Intent intent = new Intent(NewTaskConversation.this, PerformanceMetrics.class);
                    intent.putExtra("tempid", webtaskId);
                    startActivity(intent);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "barchat clickListener  Exception : " + e.getMessage(), "WARN", null);
                }
            }
        });
        sendTemplate.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                Log.i("template", "template save clicked");
//                if ((taskType != null && taskType.equalsIgnoreCase("Group") && groupMemberAccess.getChangeTaskName() != null && groupMemberAccess.getChangeTaskName().contains("1")) || (taskType != null && taskType.equalsIgnoreCase("individual") || project)) {
                try {
                    if (list_all.getAdapter().getCount() > 0) {
                        final Dialog dialog1 = new Dialog(context);
                        dialog1.requestWindowFeature(Window.FEATURE_NO_TITLE);
                        dialog1.setContentView(R.layout.dialogxml);
                        TextView header = (TextView) dialog1.findViewById(R.id.template_header);
                        TextView yes = (TextView) dialog1.findViewById(R.id.save);
                        TextView no = (TextView) dialog1.findViewById(R.id.no);
                        final EditText name = (EditText) dialog1.findViewById(R.id.name);
                        if (!template && !note) {
                            header.setText("Enter Text to change name ");
                        } else if (template) {
                            if (!note) {
                                header.setText("Set the Template Name ");
                            } else {
                                header.setText("Set the Note Name ");
                            }
                        }
                        name.setGravity(View.TEXT_ALIGNMENT_CENTER);
                        name.addTextChangedListener(new TextWatcher() {
                            @Override
                            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
                            }

                            @Override
                            public void onTextChanged(CharSequence s, int start, int before, int count) {
                            }

                            @Override
                            public void afterTextChanged(Editable s) {
                                name.setError(null);
                            }
                        });

                        yes.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                if (name.getText().toString().equalsIgnoreCase("") || name.getText().toString().equalsIgnoreCase(" ")) {
                                    name.setError("Enter valid name");
                                } else {
                                    Log.i("template", "task name setting " + name.getText().toString());
                                    head.setText(name.getText().toString());
                                    VideoCallDataBase.getDB(context).templateNameUpdate(name.getText().toString(), webtaskId);
                                    taskName = name.getText().toString();
                                    if (!template && !note) {
                                        String sig_id = Utility.getSessionID();
                                        TaskDetailsBean chatbean = new TaskDetailsBean();
                                        chatbean.setTaskName(taskName);
                                        chatbean.setDuration("");
                                        chatbean.setDurationUnit("");
                                        chatbean.setTimeFrequency("");
                                        remindertone = "";
                                        reminderquote = "";
                                        dateTemplateWebService(chatbean);
                                        if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                                            PercentageWebService("text", "Task Name is Changed", "", sig_id, 0);
                                        } else {
                                            sendMessage("Task Name is Changed", null, "text", null, "", sig_id, null);
                                        }
                                    }
                                    dialog1.dismiss();
                                    Log.i("onKeyDown", "sendtemplate yes  ");
                                    Intent intent = new Intent();
                                    setResult(RESULT_OK, intent);
                                }

                            }
                        });
                        no.setOnClickListener(new View.OnClickListener() {
                            @Override
                            public void onClick(View v) {
                                dialog1.dismiss();
                            }
                        });
                        dialog1.show();
                    } else {
                        if (!template && !note) {
                            showToast("Create the Task to Change Task Name");
                        } else if (template) {
                            if (!note) {
                                showToast("Create the Template to Change Template Name");
                            } else {
                                showToast("Create the Note to Change Note Name");
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendTemplate clickListener  Exception : " + e.getMessage(), "WARN", null);
                }
               /* } else {
                    Toast.makeText(context, "Access Denied for ChangeTaskName", Toast.LENGTH_SHORT).show();
                }*/
            }
        });


        backLayout.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    ProjectHistory projectHistory = (ProjectHistory) Appreference.context_table.get("projecthistory");
                    if (projectHistory != null)
                        projectHistory.setProgressBarInvisible();
                    Appreference.webview_refresh = true;
                    InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
                    inputMethodManager.hideSoftInputFromWindow(des.getWindowToken(), 0);
                    Log.i("onKeyDown", "back layout  ");
                    Intent intent = new Intent();
                    setResult(RESULT_OK, intent);
                    finish();
                    overridePendingTransition(R.anim.left_to_right, R.anim.right_to_left);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "backLayout clickListener  Exception : " + e.getMessage(), "WARN", null);
                }
            }
        });
        update.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    if (isNetworkAvailable()) {
                        if (taskStatus != null && !taskStatus.equalsIgnoreCase("Closed") && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("rejected") && (!taskStatus.equalsIgnoreCase("assigned") || taskType.equalsIgnoreCase("group") || isProjectFromOracle)) {
                            boolean takerCheck = false;
                            taskList_9 = new ArrayList<>();
                            taskList_10 = new ArrayList<>();
                            if (webtaskId != null && !taskType.equalsIgnoreCase("Group") && (!project)) {
                                if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                    taskList_9 = VideoCallDataBase.getDB(context).getTaskHistory("select * from taskDetailsInfo where taskId='" + webtaskId + "' and taskDescription = '" + category + " Accepted' order by id desc");
                                    taskList_10 = VideoCallDataBase.getDB(context).getTaskHistory("select * from taskDetailsInfo where taskId='" + webtaskId + "' and mimeType = 'date' order by id desc");
                                    Log.i("percents", "taskpercent giver size is " + taskList_9.size() + " " + taskList_10.size());
                                } else if (!ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                    taskList_9 = VideoCallDataBase.getDB(context).getTaskHistory("select * from taskDetailsInfo where taskId='" + webtaskId + "' and taskDescription = '" + category + " Accepted' order by id desc");
                                    if (taskStatus.equalsIgnoreCase("assigned") && taskList_9.size() == 0) {
                                        showToast("Please Accept Your Task");
                                        takerCheck = true;
                                    } else {
                                        taskList_9 = VideoCallDataBase.getDB(context).getTaskHistory("select * from taskDetailsInfo where taskId='" + webtaskId + "' and taskDescription = '" + category + " Accepted' order by id desc");
                                        taskList_10 = VideoCallDataBase.getDB(context).getTaskHistory("select * from taskDetailsInfo where taskId='" + webtaskId + "' and mimeType = 'date' order by id desc");
                                        Log.i("percents", "taskpercent taker size is " + taskList_9.size() + " " + taskList_10.size());
                                    }
                                }
                            }
                            if ((taskList_9.size() > 0 || taskList_10.size() > 0) || taskType.equalsIgnoreCase("Group") || project) {
                                int a;
                                if (taskType != null && taskType.equalsIgnoreCase("Group")) {
                                    if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                        if (!project) {
                                            String percent_sender = VideoCallDataBase.getDB(context).getlastCompletedParcentagesender(webtaskId);
                                            Log.i("GroupPercentageClick", " groupname 31 " + percent_sender);
                                            if (percent_sender != null && percent_sender.equalsIgnoreCase(ownerOfTask)) {
                                                a = Integer.parseInt(VideoCallDataBase.getDB(context).getlastCompletedParcentage(webtaskId));
                                            } else {
                                                a = VideoCallDataBase.getDB(context).GroupPercentageChecker(groupname, webtaskId, ownerOfTask);
                                            }
                                            Log.i("percentage", "Inside task if " + a);
                                            percentage = String.valueOf(a);
                                        } else {
                                            a = VideoCallDataBase.getDB(context).ProjectGroupPercentageChecker(listOfObservers, webtaskId, ownerOfTask);
                                            Log.i("percentage", "Inside project if " + a);
                                            percentage = String.valueOf(a);
                                        }
                                    } else {
                                        int percent_1 = VideoCallDataBase.getDB(context).groupPercentageStatus(Appreference.loginuserdetails.getUsername(), webtaskId);
                                        Log.i("percentage", "Inside else " + percent_1);
                                        percentage = String.valueOf(percent_1);
                                    }
                                } else {
                                    a = VideoCallDataBase.getDB(context).percentagechecker(webtaskId);
                                    Log.i("Task1", "percentage" + percentage);
                                    percentage = String.valueOf(a);
                                }
                            }
                            if (note) {
                                int percent_1 = VideoCallDataBase.getDB(context).groupPercentageStatus(Appreference.loginuserdetails.getUsername(), webtaskId);
                                Log.i("percentage", "Inside note else " + percent_1);
                                percentage = String.valueOf(percent_1);
                            }
                            String query = "select status from projectStatus where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "'";
                            int current_status = VideoCallDataBase.getDB(context).getCurrentStatus(query);
                            Log.i("completion123", "CurrentSttaus====> $$ " + current_status);
                            Log.i("completion123", "IsProjectFrom Oracle====> $$ " + isProjectFromOracle);
                            if (isProjectFromOracle && current_status == -1) {
                                showToast("You have not yet started the task");
                            } else if (isProjectFromOracle && current_status == 1) {
                                showToast("When task is in hold % should not been send ");
                            } else if (isProjectFromOracle && current_status == 3) {
                                showToast("When task is in pause % should not been send ");
                            } else if (isProjectFromOracle && current_status == 5) {
                                showToast("Task is already Completed ");
                            } else if ((!isTaskName && !takerCheck) || isProjectFromOracle) {
                                Intent intent = new Intent(NewTaskConversation.this, UpdateTaskActivity.class);
                                intent.putExtra("username", toUserName);
                                intent.putExtra("Str", "conversation");
                                intent.putExtra("level", percentage);
                                intent.putExtra("taskType", taskType);
                                intent.putExtra("toUserId", String.valueOf(toUserId));
                                intent.putExtra("ownerOfTask", ownerOfTask);
                                intent.putExtra("category", category);
                                if (isProjectFromOracle)
                                    intent.putExtra("ProjectFromOracle", true);
                                startActivityForResult(intent, 210);
                            }
                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                            Toast.makeText(context, "Unable to sent the percentage task is in abandoned state ", Toast.LENGTH_SHORT).show();
                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("Closed")) {
                            Toast.makeText(context, "This " + category + " is already Closed ", Toast.LENGTH_SHORT).show();
                        } else if (taskStatus != null && taskStatus.equalsIgnoreCase("rejected")) {
                            Toast.makeText(context, "Unable to sent the percentage task is in rejected state ", Toast.LENGTH_SHORT).show();
                        } else if (isTaskName) {
                            Toast.makeText(context, "Please Enter TaskDescription and Make a NewTask", Toast.LENGTH_SHORT).show();
                        } else {
                            Toast.makeText(context, "Task not accepted", Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        Toast.makeText(NewTaskConversation.this, "Check your internet connection", Toast.LENGTH_SHORT).show();
                    }
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "update clickListener  Exception : " + e.getMessage(), "WARN", null);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "update clickListener  Exception : " + e.getMessage(), "WARN", null);
                }
            }
        });
        sketch.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                try {
                    Intent i = new Intent(getApplicationContext(), HandSketchActivity2.class);
                    startActivityForResult(i, 423);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sketch clickListener  Exception : " + e.getMessage(), "WARN", null);
                }

            }
        });
        try {
            des.setOnTouchListener(new View.OnTouchListener() {
                @Override
                public boolean onTouch(View v, MotionEvent event) {
                    try {
                        gridview.setVisibility(View.GONE);
                        gridview_taker.setVisibility(View.GONE);
                        Arrow.setImageResource(R.drawable.ic_more_filled_50);
                        arrow = false;
                        Log.i("Arrow", " if true 1 ");
                        Log.i("Arrow", "nonvisible item 1 ");
                        icons.setVisibility(View.VISIBLE);
                        handler.postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                Log.i("NewTaskConversation", "inside des setOnTouchListen");
                                list_all.setSelection(list_all.getAdapter().getCount() - 1);
                            }
                        }, 500);
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "des.setOnTouchListener  Exception : " + e.getMessage(), "WARN", null);
                    }
                    return false;
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "Edittext clicklistener Exception " + e.getMessage(), "WARN", null);
        }
        list_all = (ListView) findViewById(R.id.list_all);
        list_all.setAdapter(medialistadapter);
        swipeDetector = new SwipeListview();
        buddyList = VideoCallDataBase.getDB(context).getContact(Appreference.loginuserdetails.getUsername());
        ArrayList<String> list2 = new ArrayList<String>();
        list2.add(0, "Please Select");
        if (buddyList != null && buddyList.size() > 0) {
            for (ContactBean a : buddyList) {
                list2.add(a.getFirstname() + " " + a.getLastname());
            }
        }
        addTxt.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    if (isNetworkAvailable()) {
                        Log.i("text", "length --->" + des.getText().toString().length());
                        if (webtaskId != null) {
                            if (des.getText().toString().trim().length() > 0) {
                                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                                String dateTime = dateFormat.format(new Date());
                                dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                                String dateforrow = dateFormat.format(new Date());
                                tasktime = dateTime;
                                tasktime = tasktime.split(" ")[1];
                                Log.i("task", "tasktime" + tasktime);
                                Log.i("UTC", "sendMessage utc time" + dateforrow);
                                taskUTCtime = dateforrow;
                                final TaskDetailsBean chatBean = new TaskDetailsBean();
                                chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                                chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                                chatBean.setSelect(false);
                                chatBean.setToUserName(toUserName);
                                chatBean.setToUserId(String.valueOf(toUserId));
                                chatBean.setTaskDescription(des.getText().toString());
                                chatBean.setSignalid(Utility.getSessionID());
                                chatBean.setTaskNo(task_No);
                                chatBean.setCatagory(category);
                                chatBean.setIssueId(issueId);
                                chatBean.setParentId(getFileName());
                                chatBean.setTaskPriority("Medium");
                                if (template) {
                                    if (note) {
                                        chatBean.setTaskStatus("note");
                                    } else if (chat) {
                                        chatBean.setTaskStatus("chat");
                                    } else {
                                        chatBean.setTaskStatus("draft");
                                    }
                                    chatBean.setCustomTagVisible(true);
                                } else
                                    chatBean.setTaskStatus(taskStatus);
                                Log.i("Accept", "value 12" + chatBean.getTaskStatus());
                                chatBean.setIsRemainderRequired("");
                                chatBean.setCompletedPercentage("0");
                                chatBean.setPlannedStartDateTime("");
                                chatBean.setPlannedEndDateTime("");
                                chatBean.setRemainderFrequency("");
                                chatBean.setCustomTagVisible(true);
                                chatBean.setTaskUTCDateTime(dateforrow);
                                chatBean.setDateTime(dateTime);
                                if (chatBean.getTaskDescription() != null && (chatBean.getTaskDescription().contains("www.") || chatBean.getTaskDescription().contains("https:") || chatBean.getTaskDescription().contains("http:"))) {
                                    chatBean.setMimeType("url");
                                } else {
                                    chatBean.setMimeType("text");
                                }
                                if (project) {
                                    chatBean.setProjectId(projectId);
                                    if (projectGroup_Mems != null) {
                                        chatBean.setGroupTaskMembers(projectGroup_Mems);
                                    }
                                }
                                chatBean.setOwnerOfTask(ownerOfTask);
                                chatBean.setCustomTagVisible(true);
                                chatBean.setTaskType(taskType);
                                chatBean.setSendStatus("1");    // send status 0 is send 1 is unsend
                                chatBean.setTaskId(webtaskId);
                                chatBean.setTasktime(tasktime);
                                chatBean.setTaskUTCTime(taskUTCtime);
                                chatBean.setTaskReceiver(taskReceiver);
                                if (subType != null && subType.equalsIgnoreCase("private")) {
                                    chatBean.setSubType(subType);
                                    chatBean.setPrivate_Member(private_member);
                                    if (taskType != null && !taskType.equalsIgnoreCase("Group")) {
                                        listOfObservers.clear();
                                        listObservers.clear();
                                        if (!listOfObservers.contains(toUserName))
                                            listOfObservers.add(toUserName);
                                        listObservers.add(toUserName);
                                    }
                                } else if (subType != null && subType.equalsIgnoreCase("taskDescription")) {
                                    chatBean.setSubType(subType);
                                    chatBean.setTaskRequestType(subType);
                                } else {
                                    chatBean.setSubType(subType);
                                }
                                if (isTaskName) {
                                    chatBean.setMsg_status(0);
                                    chatBean.setSendStatus("0");
                                    chatBean.setTaskName(des.getText().toString());
                                } else {
                                    chatBean.setMsg_status(1);
                                    chatBean.setTaskName(taskName);
                                }

                                if (isTaskName) {
                                    taskName = des.getText().toString();
                                    ownerOfTask = Appreference.loginuserdetails.getUsername();
                                    taskIdWebservice(chatBean);
                                } else {
                                    if (project) {
                                        VideoCallDataBase.getDB(context).update_Project_history(chatBean);
                                    } else {
                                        if (!chat) {
                                            dataBase.insertORupdate_Task_history(chatBean);
                                            dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                                        }
                                    }
                                    dataBase.insertORupdate_Task_history(chatBean);
                                    if (chatBean.isCustomTagVisible()) {
                                        taskList.add(chatBean);
                                    }
                                    refresh();
                                }
                                handler.post(new Runnable() {
                                    @Override
                                    public void run() {
                                        list_all.setSelection(list_all.getAdapter().getCount() - 1);
                                        des.setText("");
                                    }
                                });
                            }
                        } else {
                            Toast.makeText(context, "Please create the task to add draft message ", Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        Toast.makeText(NewTaskConversation.this, "Check your internet connection", Toast.LENGTH_SHORT).show();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "addTxt clicklistener Exception " + e.getMessage(), "WARN", null);
                }
            }
        });


        sendBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (isProjectFromOracle) {
                    String query = "select status from projectStatus where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "'";
                    int disable_by_current_status = VideoCallDataBase.getDB(context).getCurrentStatus(query);
                    if (disable_by_current_status == 5)
                        Toast.makeText(context, "You cannot send text for Completed Task", Toast.LENGTH_SHORT).show();
                }
                TaskDetailsBean task = new TaskDetailsBean();
                Log.i("task", "isTaskName 2 " + isTaskName);
                update.setEnabled(true);
                Log.i("task", "isTaskName 0 " + isTaskName);
                try {
                    Log.i("text", "length ---->" + des.getText().toString().length());
                    if (des.getText().toString().trim().length() > 0) {
                        String sig_id = Utility.getSessionID();
                        if (!isTaskName && (subType != null && !subType.equalsIgnoreCase("private"))) {
                            Log.i("task", "isTaskName 00 " + isTaskName);
                            Log.i("taskconversation", "!istaskName ");
                            if (des.getText().toString().trim().length() > 1000) {
                                Log.i("task", "isTaskName 1 " + isTaskName);
                                Log.i("taskconversation", "!istaskName >1000 ");
                                try {
                                    String path = getFileName();
                                    String fpath = Environment.getExternalStorageDirectory() + "/High Message/downloads/";
                                    File file = new File(fpath);
                                    String filepath = Environment.getExternalStorageDirectory() + "/High Message/downloads/" + path + ".txt";
                                    File files = new File(filepath);
                                    // If file does not exists, then create it
                                    if (!file.exists()) {
                                        file.mkdirs();
                                        files.createNewFile();
                                        FileWriter fw = new FileWriter(files.getAbsoluteFile());
                                        BufferedWriter bw = new BufferedWriter(fw);
                                        bw.write(des.getText().toString());
                                        bw.close();
                                    } else {
                                        FileWriter fw = new FileWriter(files.getAbsoluteFile());
                                        BufferedWriter bw = new BufferedWriter(fw);
                                        bw.write(des.getText().toString());
                                        bw.close();
                                        PercentageWebService("textfile", filepath, "txt", sig_id, 0);

                                    }
                                    Log.i("textfile", "Sucess" + fpath);

                                } catch (IOException e) {
                                    e.printStackTrace();
                                    Appreference.printLog("NewTaskConversation", "senbutton clicklistener Exception " + e.getMessage(), "WARN", null);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    Appreference.printLog("NewTaskConversation", "senbutton clicklistener Exception " + e.getMessage(), "WARN", null);
                                }
                            } else {
                                Log.i("task", "isTaskName 2 " + isTaskName);
                                Log.i("taskconversation", "!istaskName <1000 ");
                                if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                                    if (!edit)
                                        PercentageWebService("text", des.getText().toString(), "", sig_id, 0);
                                    else {
                                        forword_bean.setTaskDescription(des.getText().toString());
                                        forword_bean.setCatagory(category);
                                        for (int i = 0; i < taskList.size(); i++) {
                                            if (taskList.get(i).getSignalid() != null && forword_bean.getSignalid() != null &&
                                                    taskList.get(i).getSignalid().equalsIgnoreCase(forword_bean.getSignalid())) {
                                                taskList.get(i).setTaskDescription(des.getText().toString());
                                            }
                                        }
                                        refresh();
                                        VideoCallDataBase.getDB(context).updateEditText(forword_bean);
                                        //                                        forword_bean.setSignalid(sig_id);
                                        ArrayList<String> touserlist = new ArrayList<>();
                                        touserlist.addAll(listOfObservers);
                                        String xml = composeChatXML(forword_bean);
                                        sendMultiInstantMessage(xml, touserlist, 0);
                                        edit = false;
                                    }

                                    Log.i("taskconversation", "proxy disable");
                                } else {
                                    sendMessage(des.getText().toString(), null, "text", null, "", sig_id, null);
                                    Log.i("taskconversation", "proxy enable ");
                                }
                            }
                            Log.i("task", "isTaskName 1 " + isTaskName);
                        } else {
                            Log.i("taskConversation", "private * 7 ");
                            if (des.getText().toString().trim().length() < 100) {
                                Log.i("taskConversation", "private * 8 ");
                                sendMessage(des.getText().toString().trim(), null, "text", null, "", sig_id, null);
                                Log.i("taskconversation", "private <100  ");
                            } else {
                                Log.i("taskConversation", "private * 9 ");
                                //                                Toast.makeText(getApplicationContext(), "Please enter max of 100 characters", Toast.LENGTH_SHORT).show();
                                Log.i("taskconversation", "private else ");
                                AlertDialog alertDialog = new AlertDialog.Builder(NewTaskConversation.this).create();
                                alertDialog.setTitle("Warning");
                                alertDialog.setCancelable(false);
                                alertDialog.setMessage("Please enter max of 100 characters");
                                alertDialog.setButton(AlertDialog.BUTTON_NEUTRAL, "OK",
                                        new DialogInterface.OnClickListener() {
                                            public void onClick(DialogInterface dialog, int which) {
                                                dialog.dismiss();
                                            }
                                        });
                                alertDialog.show();
                            }
                        }
                        Log.d("task", "task");
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                list_all.setSelection(list_all.getAdapter().getCount() - 1);
                                des.setText("");
                            }
                        });
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendbtn clicklistener Exception " + e.getMessage(), "WARN", null);
                }
            }
        });
        call.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    if (isNetworkAvailable()) {
                        multimediaImage("call");
                    } else {
                        Toast.makeText(NewTaskConversation.this, "Check your internet connection", Toast.LENGTH_SHORT).show();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "Call clicklistener Exception " + e.getMessage(), "WARN", null);
                }
            }
        });
        photo.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {

                try {
                    multimediaImage("image");
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "photo clicklistener Exception : " + e.getMessage(), "WARN", null);
                }

            }
        });
        location.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (isNetworkAvailable()) {
                    try {
                        Intent intent = new Intent(NewTaskConversation.this, LocationFind.class);
                        startActivityForResult(intent, 888);
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "Location clicklistener Exception : " + e.getMessage(), "WARN", null);
                    }
                } else {
                    Toast.makeText(NewTaskConversation.this, "Check your internet connection", Toast.LENGTH_SHORT).show();
                }
            }
        });
        video.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    multimediaImage("video");
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "Video clicklistener Exception : " + e.getMessage(), "WARN", null);
                }
            }
        });
        doc.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (isNetworkAvailable()) {
                    try {
                        Intent i = new Intent(NewTaskConversation.this, FilePicker.class);
                        startActivityForResult(i, 55);
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "document clicklistener Exception : " + e.getMessage(), "WARN", null);
                    }
                } else {
                    Toast.makeText(NewTaskConversation.this, "Check your internet connection", Toast.LENGTH_SHORT).show();
                }

            }
        });
        remind_me.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    if (isNetworkAvailable()) {
                        Log.i("remind_me", " note side");
                        Intent intent = new Intent(NewTaskConversation.this, NoteDateUpdate.class);
                        intent.putExtra("taskId", webtaskId);
                        intent.putExtra("taskType", "note");
                        NewTaskConversation.this.startActivityForResult(intent, 555);
                    } else {
                        Toast.makeText(NewTaskConversation.this, "Check your internet connection", Toast.LENGTH_SHORT).show();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "remind_me clicklistener Exception : " + e.getMessage(), "WARN", null);
                }

            }
        });
        reassign_note.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    if (isNetworkAvailable()) {
                        if (project_temp != null && !project_temp.equalsIgnoreCase("ProjectTemplate")) {
                            isNote = true;
                        }
                        addTaskReassignClickEvent();
                    } else {
                        Toast.makeText(NewTaskConversation.this, "Check your internet connection", Toast.LENGTH_SHORT).show();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "reassign_note clicklistener Exception : " + e.getMessage(), "WARN", null);
                }

            }
        });
        calen_picker.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (isNetworkAvailable()) {
                    try {
                        Log.i("datepicker", "outer side");
                        if (taskStatus != null && !taskStatus.equalsIgnoreCase("Closed") && !taskStatus.equalsIgnoreCase("Completed")) {
                            if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause") && !taskStatus.equalsIgnoreCase("rejected")) {
                                if (template && !note) {
                                    Log.i("datepicker", "template side");
                                    Intent intent = new Intent(NewTaskConversation.this, TaskDateUpdate.class);
                                    intent.putExtra("template", "success");
                                    intent.putExtra("taskStatus", taskStatus);
                                    intent.putExtra("taskId", webtaskId);
                                    ArrayList<TaskDetailsBean> temp_bean = VideoCallDataBase.getDB(context).getTaskHistory("select * from taskDetailsInfo where taskId='" + webtaskId + "' and mimeType='date' and taskStatus='draft' order by id DESC");
                                    if (temp_bean.size() > 0) {
                                        TaskDetailsBean taskDetailsBean = temp_bean.get(0);
                                        intent.putExtra("duration", taskDetailsBean.getDuration());
                                        intent.putExtra("durationUnit", taskDetailsBean.getDurationUnit());
                                        intent.putExtra("timefreq", taskDetailsBean.getTimeFrequency());
                                    }
                                    intent.putExtra("taskType", "template");
                                    intent.putExtra("toUserIdConflict", String.valueOf(toUserId));
                                    NewTaskConversation.this.startActivityForResult(intent, 666);
                                } else if (note) {
                                    Log.i("datepicker", "note side");
                                    Intent intent = new Intent(NewTaskConversation.this, NoteDateUpdate.class);
                                    //                                intent.putExtra("template", "success");
                                    intent.putExtra("taskId", webtaskId);
                                    intent.putExtra("taskType", "note");
                                    //                                intent.putExtra("toUserIdConflict", String.valueOf(toUserId));
                                    NewTaskConversation.this.startActivityForResult(intent, 555);
                                } else {
                                    Log.i("datepicker", "date side");
                                    isTaskAccept = true;
                                    Intent intent = new Intent(NewTaskConversation.this, TaskDateUpdate.class);
                                    intent.putExtra("template", "failure");
                                    intent.putExtra("taskId", webtaskId);
                                    intent.putExtra("taskType", taskType);
                                    intent.putExtra("taskStatus", taskStatus);
                                    intent.putExtra("toUserIdConflict", String.valueOf(toUserId));
                                    if (projectId != null) {
                                        intent.putExtra("projectId", projectId);
                                    }
                                    NewTaskConversation.this.startActivityForResult(intent, 336);
                                }
                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                Toast.makeText(context, "Unable to sent Date task is in abandoned state ", Toast.LENGTH_SHORT).show();
                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                Toast.makeText(context, "Unable to sent Date task is in pause state ", Toast.LENGTH_SHORT).show();
                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("rejected")) {
                                Toast.makeText(context, "Unable to sent Date task is in rejected state ", Toast.LENGTH_SHORT).show();
                            }
                        } else {
                            Toast.makeText(context, "This " + category + " is already Closed ", Toast.LENGTH_SHORT).show();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "calenderpicker clicklistener Exception : " + e.getMessage(), "WARN", null);
                    }
                } else {
                    Toast.makeText(NewTaskConversation.this, "Check your internet connection", Toast.LENGTH_SHORT).show();
                }
            }
        });

        tab_datechangerequest.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (isNetworkAvailable()) {
                    try {
                        if (taskStatus != null && !taskStatus.equalsIgnoreCase("Closed") && !taskStatus.equalsIgnoreCase("Completed")) {
                            if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("pause") && !taskStatus.equalsIgnoreCase("rejected")) {
                                if ((taskType != null && taskType.equalsIgnoreCase("Group") && groupMemberAccess != null && groupMemberAccess.getRespondDateChange() != null && groupMemberAccess.getRespondDateChange().contains("1")) || (taskType != null && taskType.equalsIgnoreCase("individual") || project)) {
                                    taskList_5 = new ArrayList<>();
                                    if (taskType != null && taskType.equalsIgnoreCase("Group")) {
                                        queryy = "select * from taskDetailsInfo where (fromUserId='" + toUserId + "' or toUserId='" + toUserId + "') and loginuser='" + Appreference.loginuserdetails.getEmail() + "'and taskId='" + webtaskId + "' and mimeType='date' and (requestStatus='approved' or requestStatus='assigned') order by id desc";
                                    } else {
                                        queryy = "select * from taskDetailsInfo where (fromUserName='" + from_UserName + "' or toUserName='" + from_UserName + "') and loginuser='" + Appreference.loginuserdetails.getEmail() + "'and taskId='" + webtaskId + "' and mimeType='date' and (requestStatus='approved' or requestStatus='assigned') order by id desc";
                                    }
                                    Log.i("task", "Final date from task giver " + queryy);
                                    taskList_5 = VideoCallDataBase.getDB(context).getTaskHistory(queryy);
                                    Log.i("task", "Final date from task giver " + taskList_5.size());
                                    if (taskList_5.size() > 0) {
                                        TaskDetailsBean taskDetailsBean = taskList_5.get(0);
                                        Log.i("task", "Final date from task giver " + taskDetailsBean.getTimeFrequency());
                                        Log.i("task", "Final date from task giver " + taskDetailsBean.getIsRemainderRequired());
                                        Intent intent = new Intent(NewTaskConversation.this, TaskTakerDateRequest.class);
                                        intent.putExtra("startdate", taskDetailsBean.getPlannedStartDateTime());
                                        intent.putExtra("enddate", taskDetailsBean.getPlannedEndDateTime());
                                        intent.putExtra("reminderdate", taskDetailsBean.getRemainderFrequency());
                                        intent.putExtra("reminderfreq", taskDetailsBean.getTimeFrequency());
                                        intent.putExtra("reminderquotes", taskDetailsBean.getReminderQuote());
                                        intent.putExtra("isRemainderRequired", taskDetailsBean.getIsRemainderRequired());
                                        intent.putExtra("username", taskDetailsBean.getFromUserName());
                                        intent.putExtra("taskStatus", taskDetailsBean.getTaskStatus());
                                        intent.putExtra("taskType", taskDetailsBean.getTaskType());
                                        intent.putExtra("toUserId", taskDetailsBean.getToUserId());
                                        intent.putExtra("ownerOfTask", taskDetailsBean.getOwnerOfTask());
                                        intent.putExtra("taskId", taskDetailsBean.getTaskId());
                                        if (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase(null) && !taskDetailsBean.getProjectId().equalsIgnoreCase("null") && !taskDetailsBean.getProjectId().equalsIgnoreCase("")) {
                                            intent.putExtra("projectId", taskDetailsBean.getProjectId());
                                        }
                                        date_header = "requested";
                                        startActivityForResult(intent, 337);
                                    }
                                } else {
                                    Toast.makeText(context, "Access Deniedfor DateChangeRequest", Toast.LENGTH_SHORT).show();
                                }
                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("abandoned")) {
                                Toast.makeText(context, "Unable to sent the Date task is in abandoned state ", Toast.LENGTH_SHORT).show();
                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("pause")) {
                                Toast.makeText(context, "Unable to sent the Date task is in pause state ", Toast.LENGTH_SHORT).show();
                            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("rejected")) {
                                Toast.makeText(context, "Unable to sent the Date task is in rejected state ", Toast.LENGTH_SHORT).show();
                            }
                        } else {
                            Toast.makeText(context, "This " + category + " is already Closed ", Toast.LENGTH_SHORT).show();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "tab_datechangerequest clickListener Exception : " + e.getMessage(), "WARN", null);
                    }
                } else {
                    Toast.makeText(NewTaskConversation.this, "Check your internet connection", Toast.LENGTH_SHORT).show();
                }
            }
        });
        list_all.setOnScrollListener(new AbsListView.OnScrollListener() {
            @Override
            public void onScrollStateChanged(AbsListView view, int scrollState) {
                Log.i("scrolllist", "scrollState count-->" + scrollState);
            }

            @Override
            public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
                try {
                    Log.i("scrolllist", "firstVisibleItem count-->" + firstVisibleItem);
                    Log.i("scrolllist", "visibleItemCount count-->" + visibleItemCount);
                    Log.i("scrolllist", "totalItemCount count-->" + totalItemCount);
                    int lastIndexInScreen = visibleItemCount + firstVisibleItem;
                    if (lastIndexInScreen < totalItemCount - 2) {
                        down_icon.setVisibility(View.VISIBLE);
                    } else if (lastIndexInScreen == totalItemCount) {
                        down_icon.setVisibility(View.GONE);
                        tv_unreadCountScroll.setVisibility(View.INVISIBLE);
                        show_unreadCount = 0;
                    }
                    if (!project && (!template || chat)) {
                        Log.i("lazyloadtaskcv", "scroll count-->" + taskList_count);
                        if (taskList_count != 0 && taskList_count >= 10) {
                            Scroll = true;
                        } else if (taskList_count != 0 && taskList_count < 10) {
                            Scroll = true;
                        } else
                            Scroll = taskList_count != 0 && taskList_count < 10;
                        if (firstVisibleItem == 0 && medialistadapter != null && Scroll) {
                            final int currentPosition = list_all.getFirstVisiblePosition();
                            getTaskConversationListFromDBWhenScroll(taskList_count);
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    medialistadapter.notifyDataSetChanged();
                                }
                            });
                            Log.i("lazyloadtaskcv", "current position--->" + currentPosition);
                            Log.i("lazyloadtaskcv", "on scroll taskList_count--->" + taskList_count);

                            if (currentPosition == 0 && taskList_count != 0 && taskList_count >= 10) {
                                list_all.setSelectionFromTop(currentPosition + 10, 0);
                            } else if (currentPosition == 0 && taskList_count == 0) {
                                list_all.setSelection(0);
                                list_all.setSelectionFromTop(0, 0);
                            }
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "listview scroll listener Exception : " + e.getMessage(), "WARN", null);
                }
            }
        });

        template_form.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (isNetworkAvailable()) {
                    try {
                        if (!isTaskName) {
                            Intent formintent = new Intent(NewTaskConversation.this, FormsListActivity.class);
                            formintent.putExtra("FormsList", new ArrayList<FormsListBean>());
                            formintent.putExtra("TaskId", webtaskId);
                            formintent.putExtra("webformcheck", "false");
                            formintent.putExtra("isTemplate", "Yes");
                            formintent.putExtra("UserList", listOfObservers);
                            formintent.putExtra("TaskBean", beanValue());
                            Log.i("TemplateList", "template_form.setOnClickListener 2 " + webtaskId);
                            Log.i("TemplateList", "template_form.setOnClickListener 2 " + listOfObservers);
                            Log.i("TemplateList", "template_form.setOnClickListener 2 " + beanValue());
                            startActivity(formintent);
                        } else {
                            showToast("Please Enter TaskDescription and Make a NewTask ");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "template_form clickListener Exception : " + e.getMessage(), "WARN", null);
                    }
                } else {
                    Toast.makeText(NewTaskConversation.this, "Check your internet connection", Toast.LENGTH_SHORT).show();
                }

            }
        });

        audio.setOnClickListener(new View.OnClickListener() {
                                     @Override
                                     public void onClick(View v) {

                                         try {
                                             handler.post(new Runnable() {
                                                 @Override
                                                 public void run() {
                                                     medialistadapter.stopPlayback();
                                                 }
                                             });
                                             try {
                                                 Intent i = new Intent(NewTaskConversation.this, AudioRecorder.class);
                                                 i.putExtra("task", "audio");
                                                 startActivityForResult(i, 333);
                                             } catch (Exception e) {
                                                 e.printStackTrace();
                                                 Appreference.printLog("NewTaskConversation", "audio clicklistener Exception : " + e.getMessage(), "WARN", null);
                                             }
                                         } catch (Exception e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "audio clicklistener Exception : " + e.getMessage(), "WARN", null);
                                         }

                                     }
                                 }

        );

        save.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (isNetworkAvailable()) {
                    try {
                        Log.d("task", "save");
                        String query = "select * from taskDetailsInfo where (fromUserName='" + from_UserName + "' or toUserName='" + from_UserName + "') and loginuser='" + Appreference.loginuserdetails.getEmail() + "'and taskId='" + webtaskId + "' and  sendStatus='1'";
                        ArrayList<TaskDetailsBean> unsendtaskList = VideoCallDataBase.getDB(context).getTaskHistory(query);
                        Log.d("task", "un send list count " + unsendtaskList.size());
                        for (TaskDetailsBean taskDetailsBean : unsendtaskList) {
                            Log.d("task", taskDetailsBean.getFromUserId());
                            Log.d("task", taskDetailsBean.getToUserId());
                            Log.d("task", taskDetailsBean.getTaskDescription());
                            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                            String dateforrow = dateFormat.format(new Date());
                            SimpleDateFormat dateFormatt = new SimpleDateFormat("dd/MM/yyyy hh:mm:ss a");
                            tasktime = dateFormatt.format(new Date());
                            tasktime = tasktime.split(" ")[1] + " " + tasktime.split(" ")[2];
                            final TaskDetailsBean chatBean = new TaskDetailsBean();
                            chatBean.setFromUserId(String.valueOf(taskDetailsBean.getFromUserId()));
                            chatBean.setFromUserName(taskDetailsBean.getFromUserName());
                            chatBean.setSelect(taskDetailsBean.isSelected());
                            chatBean.setToUserName(taskDetailsBean.getToUserName());
                            chatBean.setToUserId(taskDetailsBean.getToUserId());
                            chatBean.setTaskName(taskName);
                            chatBean.setTaskDescription(taskDetailsBean.getTaskDescription());
                            chatBean.setTaskNo(taskDetailsBean.getTaskNo());
                            chatBean.setCatagory(category);
                            chatBean.setIssueId(taskDetailsBean.getIssueId());
                            chatBean.setParentId(taskDetailsBean.getParentId());
                            chatBean.setTaskPriority(taskDetailsBean.getTaskPriority());
                            chatBean.setIsRemainderRequired("");
                            chatBean.setCompletedPercentage(taskDetailsBean.getCompletedPercentage());
                            chatBean.setPlannedStartDateTime("");
                            chatBean.setPlannedEndDateTime("");
                            chatBean.setRemainderFrequency("");
                            chatBean.setSignalid(taskDetailsBean.getSignalid());
                            chatBean.setDateTime(dateforrow);
                            chatBean.setSendStatus("0");
                            chatBean.setMimeType(taskDetailsBean.getMimeType());
                            chatBean.setOwnerOfTask(taskDetailsBean.getOwnerOfTask());
                            chatBean.setTaskType(taskDetailsBean.getTaskType());
                            chatBean.setTaskId(taskDetailsBean.getTaskId());
                            chatBean.setTasktime(tasktime);
                            chatBean.setTaskStatus(taskStatus);
                            chatBean.setTaskReceiver(taskReceiver);
                            chatBean.setDateTime(taskDetailsBean.getDateTime());
                            chatBean.setOwnerOfTask(ownerOfTask);
                            if (project)
                                chatBean.setProjectId(projectId);
                            String xml = composeChatXML(chatBean);
                            sendMultiInstantMessage(xml, listOfObservers, 1); //if proxy need to set 0
                            Log.d("TaskObserver", "TaskObserver list size is == " + listOfObservers.size());
                            VideoCallDataBase.getDB(context).update_Task_history(chatBean);
                            taskDetailsBean.setSendStatus("0");
                        }
                        taskList.clear();
                        int row_count = VideoCallDataBase.getDB(context).getTaskHistoryRowCount("select * from taskDetailsInfo where  (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "') ;");
                        boolean countAboveten = false;
                        if (row_count != 0 && row_count >= 10) {
                            row_count = row_count - 10;
                            taskList_count = row_count;
                            countAboveten = true;
                        } else if (row_count < 10) {
                            taskList_count = 0;
                        } else {
                            row_count = 0;
                            taskList_count = 0;
                        }
                        Log.i("lazyloadtaskcv", "save button db count--->" + row_count);
                        Log.i("lazyloadtaskcv", "save button taskList_count--->" + taskList_count);
                        String query1;
                        if (row_count == 0 && !countAboveten) {
                            query1 = "select * from taskDetailsInfo where  (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "') ;";
                        } else if (row_count < 10 && !countAboveten) {
                            query1 = "select * from taskDetailsInfo where  (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "') order by dateTime ASC LIMIT " + row_count + " OFFSET 0";
                        } else {
                            query1 = "select * from taskDetailsInfo where  (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "') order by dateTime ASC LIMIT 10 OFFSET " + row_count + "";
                        }
                        loadUI(query1);
                        refresh();
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "save clickListener Exception : " + e.getMessage(), "WARN", null);
                    }
                } else {
                    Toast.makeText(NewTaskConversation.this, "Check your internet connection", Toast.LENGTH_SHORT).show();
                }

            }
        });
        int row_count = VideoCallDataBase.getDB(context).getTaskHistoryRowCount("select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "')   and customTagVisible = '1';");
        Log.i("lazyloadtaskcv", "oncreate conversation page row_count-->" + row_count);
        String query_1 = null;
        if (project) {
            if (note) {
                query_1 = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "') and (projectId='" + projectId + "') and customTagVisible = '1';";
            } else if (template) {
                query_1 = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskStatus!='note') and (taskId='" + webtaskId + "') and (projectId='" + projectId + "') and customTagVisible = '1';";
            } else {
                query_1 = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskStatus!='note' and taskStatus!='draft') and (taskId='" + webtaskId + "') and (projectId='" + projectId + "') and customTagVisible = '1';";
            }

        } else if (template) {
            if (note) {
                query_1 = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "') and customTagVisible = '1';";
            } else if (chat) {
                query_1 = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "') and customTagVisible = '1';";
            } else {
                query_1 = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskStatus='draft') and (taskId='" + webtaskId + "') and customTagVisible = '1';";
            }
        } else {
           /* boolean countAboveten = false;
            if (row_count != 0 && row_count >= 10) {
                row_count = row_count - 10;
                taskList_count = row_count;
                countAboveten = true;
            } else if (row_count < 10) {
                taskList_count = 0;
            } else {
                row_count = 0;
                taskList_count = 0;
            }
            Log.i("lazyloadtaskcv", "oncreate db count--->" + row_count);
            Log.i("lazyloadtaskcv", "buddyOrgroup_count--->" + taskList_count);
            if (row_count == 0 && !countAboveten) {
                query_1 = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "')   and customTagVisible = '1';";
            } else if (row_count < 10 && !countAboveten) {
                query_1 = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "')   and customTagVisible = '1' order by dateTime ASC LIMIT " + row_count + " OFFSET 0";
            } else {
                query_1 = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "')   and customTagVisible = '1' order by dateTime ASC LIMIT 10 OFFSET " + row_count + "";

            }*/
        }
        Log.d("task", "query " + query_1);
        if (!isswipe) {
            try {
                Log.i("listswipe", "oncreate method");
                groupMemberAccess = VideoCallDataBase.getDB(context).getMemberAccessList(String.valueOf(toUserId));
                gridAccess();
                loadUI(query_1);
            } catch (Exception e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "save isswipe Exception : " + e.getMessage(), "WARN", null);
            }
        }

        Date dn1 = new Date();
        Log.i("Performance", "onCreate NewTaskConversation 2" + ft.format(dn1));
        down_icon.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                try {
                    Log.i("downicon", "donw icon Click");
                    if (list_all != null) {
                        Log.i("downicon", "donw icon Click list_all!=null");
                        list_all.setSelection(list_all.getAdapter().getCount() - 1);
                        show_unreadCount = 0;
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "save down_icon Exception : " + e.getMessage(), "WARN", null);
                }
            }
        });
    }

    private void downLoadcustom1() {
        try {
            final TaskDetailsBean detailsBean;
            String Querystatus = "Select * from projectStatus where projectId ='" + projectId + "' and taskId = '" + webtaskId + "'";
            detailsBean = VideoCallDataBase.getDB(context).getStatusCompletedProjectDetails(Querystatus);
            Log.i("downLoadcustom1", "getObservation ==> " + detailsBean.getObservation());
            Log.i("downLoadcustom1", "getActionTaken ==> " + detailsBean.getActionTaken());
            Log.i("downLoadcustom1", "getRemark ==> " + detailsBean.getRemark());
            if (detailsBean.getObservation() != null && !detailsBean.getObservation().equalsIgnoreCase("") && detailsBean.getObservation().contains(".jpg")) {
                File cus_observation = new File(detailsBean.getObservation());
                if (cus_observation.exists()) {
                } else {
                    if (detailsBean.getObservation() != null) {
                        Appreference.taskMultimediaDownload.put(detailsBean.getObservation(), detailsBean);
                        new DownloadCustomImage(getResources().getString(R.string.task_reminder) + detailsBean.getObservation(), detailsBean.getObservation()).execute();
                    }
                }
            }
            if (detailsBean.getActionTaken() != null && !detailsBean.getActionTaken().equalsIgnoreCase("") && detailsBean.getActionTaken().contains(".jpg")) {
                File cus_Actiontaken = new File(detailsBean.getActionTaken());
                if (cus_Actiontaken.exists()) {
                } else {
                    if (detailsBean.getActionTaken() != null) {
                        Appreference.taskMultimediaDownload.put(detailsBean.getActionTaken(), detailsBean);
                        new DownloadCustomImage(getResources().getString(R.string.task_reminder) + detailsBean.getActionTaken(), detailsBean.getActionTaken()).execute();
                    }
                }
            }
            if (detailsBean.getRemark() != null && !detailsBean.getRemark().equalsIgnoreCase("") && detailsBean.getRemark().contains(".jpg")) {
                File cus_sig1 = new File(detailsBean.getRemark());
                if (cus_sig1.exists()) {
                } else {
                    if (detailsBean.getRemark() != null) {
                        Appreference.taskMultimediaDownload.put(detailsBean.getRemark(), detailsBean);
                        new DownloadCustomImage(getResources().getString(R.string.task_reminder) + detailsBean.getRemark(), detailsBean.getRemark()).execute();
                    }
                }
            }


            if (detailsBean.getCustomerSignature() != null && !detailsBean.getCustomerSignature().equalsIgnoreCase("")) {
                File cus_sig1 = new File(detailsBean.getCustomerSignature());
                if (cus_sig1.exists()) {
                } else {
                    if (detailsBean.getCustomerSignature() != null) {
                        Appreference.taskMultimediaDownload.put(detailsBean.getCustomerSignature(), detailsBean);
                        new DownloadCustomImage(getResources().getString(R.string.task_reminder) + detailsBean.getCustomerSignature(), detailsBean.getCustomerSignature()).execute();
                    }
                }
            }

            if (detailsBean.getPhotoPath() != null && !detailsBean.getPhotoPath().equalsIgnoreCase("")) {
                File photo_path1 = new File(detailsBean.getPhotoPath());
                if (photo_path1.exists()) {
                } else {
                    if (detailsBean.getPhotoPath() != null) {
                        Appreference.taskMultimediaDownload.put(detailsBean.getPhotoPath(), detailsBean);
                        new DownloadCustomImage(getResources().getString(R.string.task_reminder) + detailsBean.getPhotoPath(), detailsBean.getPhotoPath()).execute();
                    }
                }
            }
            if (detailsBean.getTechnicianSignature() != null && !detailsBean.getTechnicianSignature().equalsIgnoreCase("")) {
                File tech_sig1 = new File(detailsBean.getTechnicianSignature());
                if (tech_sig1.exists()) {
                } else {
                    if (detailsBean.getTechnicianSignature() != null) {
                        Appreference.taskMultimediaDownload.put(detailsBean.getTechnicianSignature(), detailsBean);
                        new DownloadCustomImage(getResources().getString(R.string.task_reminder) + detailsBean.getTechnicianSignature(), detailsBean.getTechnicianSignature()).execute();
                    }
                }
            }
        } catch (Resources.NotFoundException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "downLoadcustom1 Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "downLoadcustom1 Exception : " + e.getMessage(), "WARN", null);
        }
    }

    private void selfassign_webservice() {
        try {
            if (isNetworkAvailable() && isProjectFromOracle) {
                showStatusprogress();
                final ProjectHistory projectHistory = (ProjectHistory) Appreference.context_table.get("projecthistory");
                if (projectHistory != null) {
                    Log.i("ProjectHistory", "inside refresh  status projectHistory ========>" + projectHistory.projectDetailsBeans + "size bean " + projectHistory.projectDetailsBeans.size() + "buddayArrayAdapteer==>" + projectHistory.buddyArrayAdapter);

                    if (projectHistory.projectDetailsBeans != null && projectHistory.projectDetailsBeans.size() > 0 && projectHistory.buddyArrayAdapter != null) {

                        ProjectDetailsBean projectDetailsBean = projectHistory.projectDetailsBeans.get(clickPosition);
                        projectDetailsBean.setTaskStatus("Assigned");
                        projectDetailsBean.setTaskReceiver(Appreference.loginuserdetails.getUsername());

                        Log.i("ProjectHistory", "inside refresh  status NewTaskConveratio ========>" + projectCurrentStatus);
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                projectHistory.buddyArrayAdapter.notifyDataSetChanged();
                            }
                        });

                    }
                }
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                String dateTime = dateFormat.format(new Date());
                dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                String dateforrow = dateFormat.format(new Date());
                Log.i("ws123", "inside wservice AssignTask request");
                JSONObject oracleProject_object = new JSONObject();
                JSONObject taskid = new JSONObject();
                TaskDetailsBean taskDetailsBean = new TaskDetailsBean();
                try {
                    taskid.put("id", webtaskId);
                    taskDetailsBean.setTaskId(webtaskId);
                    oracleProject_object.put("task", taskid);
                    Log.i("assign123", "inside wservice AssignTask ownerOfTask==>" + oracleProjectOwner);
                    int getProjOwnerId = VideoCallDataBase.getDB(context).getUserIdForUserName(oracleProjectOwner);
                    Log.i("assign123", "inside wservice AssignTask getProjOwnerId==>" + getProjOwnerId);

                    oracleProject_object.put("fromId", getProjOwnerId);
                    taskDetailsBean.setFromUserId(String.valueOf(getProjOwnerId));
                    oracleProject_object.put("projectId", projectId);
                    taskDetailsBean.setProjectId(projectId);
                    oracleProject_object.put("estimatedTravelHours", "");
                    taskDetailsBean.setEstimatedTravel("");
                    taskDetailsBean.setEstimatedActivity("");
                    oracleProject_object.put("estimatedActivityHours", "");

                    JSONArray jsonArray = new JSONArray();
                    JSONObject usersList = new JSONObject();
                    usersList.put("id", String.valueOf(Appreference.loginuserdetails.getId()));
                    jsonArray.put(0, usersList);
                    oracleProject_object.put("listUser", jsonArray);

                    taskDetailsBean.setFromUserName(ownerOfTask);
                    taskDetailsBean.setToUserName(Appreference.loginuserdetails.getUsername());
                    taskDetailsBean.setToUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                    taskDetailsBean.setTaskName(taskName);
                    taskDetailsBean.setTaskNo(task_No);
                    taskDetailsBean.setCatagory("");
                    taskDetailsBean.setIssueId("");
                    taskDetailsBean.setParentId(getFileName());
                    taskDetailsBean.setIsRemainderRequired("");
                    taskDetailsBean.setCompletedPercentage("");
                    taskDetailsBean.setPlannedStartDateTime("");
                    taskDetailsBean.setPlannedEndDateTime("");
                    taskDetailsBean.setRemainderFrequency("");
                    taskDetailsBean.setSignalid(Utility.getSessionID());
                    taskDetailsBean.setDateTime(dateforrow);
                    taskDetailsBean.setSendStatus("0");
                    taskDetailsBean.setTaskStatus("Assigned");
//                taskDetailsBean.setOwnerOfTask(detailsBean.getOwnerOfTask());

                    taskDetailsBean.setTaskType("individual");
                    taskDetailsBean.setTaskPriority("medium");
                    taskDetailsBean.setParentTaskId(parentTaskId);
                    taskDetailsBean.setSubType("normal");
                    taskDetailsBean.setTaskMemberList("");
                    taskDetailsBean.setTaskReceiver(Appreference.loginuserdetails.getUsername());
                    taskDetailsBean.setRemark("");
                    taskDetailsBean.setReminderQuote("");
                    Log.i("ASE", "userName" + Appreference.loginuserdetails.getFirstName() + " last_name" + Appreference.loginuserdetails.getLastName());
//                taskDetailsBean.setTaskDescription("Task Assigned to " + Appreference.loginuserdetails.getFirstName() + Appreference.loginuserdetails.getLastName());
                    taskDetailsBean.setTaskDescription("Task Assigned to" + Appreference.loginuserdetails.getUsername());
                    taskDetailsBean.setRepeatFrequency("");
                    taskDetailsBean.setTaskTagName("");
                    taskDetailsBean.setTaskUTCDateTime(dateforrow);
                    taskDetailsBean.setMimeType("assigntask");
                    taskDetailsBean.setCatagory("Task");
                    taskDetailsBean.setCustomTagVisible(true);

                    toUserName = Appreference.loginuserdetails.getUsername();
                    taskReceiver = Appreference.loginuserdetails.getUsername();
                    taskType = "individual";
                    category = "Task";
                    taskStatus = "Assigned";
                    toUserId = Integer.valueOf(Appreference.loginuserdetails.getId());
                    Appreference.jsonRequestSender.OracleAssignTask(EnumJsonWebservicename.assignTask, oracleProject_object, taskDetailsBean, NewTaskConversation.this);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "OracleAssignTask Exception : " + e.getMessage(), "WARN", null);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "sendAssignTask_webservice Exception : " + e.getMessage(), "WARN", null);
        }
    }

    private void showtravelTimePopup(View v) {
        try {
            Intent intent = new Intent(NewTaskConversation.this, CustomTravelPickerActivity.class);
            intent.putExtra("taskName", taskName);
            intent.putExtra("projectID", projectId);
            intent.putExtra("isTravel", false);
            intent.putExtra("taskID", webtaskId);
            intent.putExtra("jobcodeno", JobCodeNo);
            intent.putExtra("activitycode", ActivityCode);
//        startActivity(intent);
            startActivityForResult(intent, 120);
            overridePendingTransition(R.anim.right_anim, R.anim.left_anim);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "showtravelTimePopup Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void getEnteredTravelTime(String startTime, String EndTime, String status) {
        try {
            Log.i("desc123", "inside getEnteredTravelTime ========>" + startTime + "==>" + EndTime);
            ActivityStartdate = startTime;
            ActivityEnddate = EndTime;
            observation_path = "";
            Action_Taken_path = "";
            customerRemarks_path = "";
            synopsis_path = "";
            observationStatus = "";
            actiontakenStatus = "";
            HMReadingStatus = "";
            status_signature = "";
            custsignnameStatus = "";
            photo_signature = "";
            tech_signature = "";
            synopsis_status = "";

            getLocationForTravel();
            if (latitude_global == 0.0 && longitude_global == 0.0) {
                Appreference.printLog("NewTaskConversation", "getlanlat Location " + latitude_global + "," + longitude_global, "WARN", null);
                showSettingsAlert("Unable to get current location. Change permissions again ");
            } else {
                if (startTime != null && !startTime.equalsIgnoreCase(""))
                    sendStatus_webservice(status, "", "", "travel", "");
                else
                    sendStatus_webservice(status, "", "", "travel", "");
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "getEnteredTravelTime Exception : " + e.getMessage(), "WARN", null);
        }

    }

    private void showCustom1PopUp(final TaskDetailsBean detailsBean) {
//        ArrayList<TaskDetailsBean> taskDetailsBean = new ArrayList<>();

        try {
            final Dialog dialog = new Dialog(context);
            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
            dialog.setContentView(R.layout.project_complete_show);
            WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
            lp.copyFrom(dialog.getWindow().getAttributes());
            lp.width = WindowManager.LayoutParams.MATCH_PARENT;
            lp.height = WindowManager.LayoutParams.MATCH_PARENT;
            lp.horizontalMargin = 15;
            Window window = dialog.getWindow();
            window.setBackgroundDrawableResource((R.color.white));
            window.setAttributes(lp);
            window.setGravity(Gravity.BOTTOM);
            dialog.show();
            dialog.setOnKeyListener(new Dialog.OnKeyListener() {

                @Override
                public boolean onKey(DialogInterface arg0, int keyCode,
                                     KeyEvent event) {
                    // TODO Auto-generated method stub
                    if (keyCode == KeyEvent.KEYCODE_BACK) {
//                        finish();
                        dialog.dismiss();
                    }
                    return true;
                }
            });

            TextView project_id = (TextView) dialog.findViewById(R.id.project_id);
            TextView project_name = (TextView) dialog.findViewById(R.id.project_name);
            TextView task_id = (TextView) dialog.findViewById(R.id.task_id);
//                    TextView employee_name=(TextView)dialog.findViewById(R.id.emp_name);
            TextView mcModel = (TextView) dialog.findViewById(R.id.mac_model);
            TextView machine_make_show = (TextView) dialog.findViewById(R.id.machine_make_show);
            TextView mcSrNo = (TextView) dialog.findViewById(R.id.mac_no);
            TextView est_travel = (TextView) dialog.findViewById(R.id.estimatedTravelhrs);
            TextView est_activity = (TextView) dialog.findViewById(R.id.estimatedActivityhrs);
            TextView service_date = (TextView) dialog.findViewById(R.id.requested_date);

            TextView address = (TextView) dialog.findViewById(R.id.address);
            TextView description = (TextView) dialog.findViewById(R.id.description);
            TextView proj_activity = (TextView) dialog.findViewById(R.id.proj_activity);
            TextView cust_sign_name_show = (TextView) dialog.findViewById(R.id.cust_sign_name_show);
            TextView HM_Reading_show = (TextView) dialog.findViewById(R.id.HM_Reading_show);
            TextView task_completed_date_show = (TextView) dialog.findViewById(R.id.task_completed_date_show);

            final TextView travel_start = (TextView) dialog.findViewById(R.id.travel_start);
            final TextView travel_end = (TextView) dialog.findViewById(R.id.travel_end);
            final TextView activity_start = (TextView) dialog.findViewById(R.id.activity_start);
            final TextView activity_end = (TextView) dialog.findViewById(R.id.activity_end);

            ImageView signature_path1 = (ImageView) dialog.findViewById(R.id.signature_path1);
            ImageView photo_path1 = (ImageView) dialog.findViewById(R.id.photo_path1);
            ImageView tech_signature_path1 = (ImageView) dialog.findViewById(R.id.tech_signature_path1);
            TextView back = (TextView) dialog.findViewById(R.id.back);
            TextView send_completion = (TextView) dialog.findViewById(R.id.send_completion);
            Button skech_receiver = (Button) dialog.findViewById(R.id.my_sign);

            TextView observation = (TextView) dialog.findViewById(R.id.observation_show);
            ImageView observation_show_custom1 = (ImageView) dialog.findViewById(R.id.observation_show_custom1);
            TextView action_taken_show = (TextView) dialog.findViewById(R.id.action_taken_show);
            ImageView action_taken_show_custom1 = (ImageView) dialog.findViewById(R.id.action_taken_show_custom1);
            final TextView remarks_completion = (TextView) dialog.findViewById(R.id.remarks_complete);
            ImageView remarks_complete_custom1 = (ImageView) dialog.findViewById(R.id.remarks_complete_custom1);

            int queryStatus = 5;
            TaskDetailsBean existing_entry = new TaskDetailsBean();

            String Query = "Select * from projectHistory where projectId ='" + projectId + "' and taskId = '" + webtaskId + "'";
            existing_entry = VideoCallDataBase.getDB(context).getDetails_to_complete_project(Query);

            project_id.setText(existing_entry.getProjectId());
//                project_name.setText(existing_entry.getProjectName());
            project_name.setText("Job Card No :" + JobCodeNo + "\nActivity Code :" + ActivityCode);
            task_id.setText(ActivityCode);
            mcModel.setText(existing_entry.getMcModel());
            machine_make_show.setText(existing_entry.getMachineMake());
            mcSrNo.setText(existing_entry.getMcSrNo());
            service_date.setText(existing_entry.getDateTime());
            est_travel.setText(existing_entry.getEstimatedTravel());
            est_activity.setText(existing_entry.getEstimatedTravel());
            proj_activity.setText(existing_entry.getActivity());
            address.setText(existing_entry.getAddress());
            description.setText(existing_entry.getTaskName());

//        String Querystatus= "Select * from projectStatus where projectId ='" + projectId + "' and taskId = '" + webtaskId + "' and status = '"+ queryStatus + "'";

            cust_sign_name_show.setText(detailsBean.getCustomerSignatureName());
            HM_Reading_show.setText(detailsBean.getHMReading());
            task_completed_date_show.setText(detailsBean.getTaskCompletedDate());


            Log.i("custom1", "signature--> $$ " + detailsBean.getCustomerSignature());
            Log.i("custom1", "photo--> $$  " + detailsBean.getPhotoPath());
            Log.i("custom1", "techsignature--> $$  " + detailsBean.getTechnicianSignature());
            Log.i("custom1", "Remark--> $$  " + detailsBean.getRemark());
            Log.i("custom1", "Observation--> $$  " + detailsBean.getObservation());
            Log.i("custom1", "ActionTaken--> $$ " + detailsBean.getActionTaken());


            if (detailsBean.getRemark() != null && !detailsBean.getRemark().equalsIgnoreCase("") && !detailsBean.getRemark().contains(".jpg")) {
                remarks_completion.setVisibility(View.VISIBLE);
                remarks_completion.setText(detailsBean.getRemark());
            } else if (detailsBean.getRemark() != null && !detailsBean.getRemark().equalsIgnoreCase("") && detailsBean.getRemark().contains(".jpg")) {
                String cus_getRemark = detailsBean.getRemark();
                File file = new File(dir_path + cus_getRemark);
                File file1 = new File(cus_getRemark);
                if (file1.exists()) {
                    Bitmap myBitmap = BitmapFactory.decodeFile(file1.getAbsolutePath());
                    remarks_complete_custom1.setImageBitmap(myBitmap);
                    remarks_complete_custom1.setVisibility(View.VISIBLE);
                } else if (file.exists()) {
                    Bitmap myBitmap = BitmapFactory.decodeFile(file.getAbsolutePath());
                    remarks_complete_custom1.setImageBitmap(myBitmap);
                    remarks_complete_custom1.setVisibility(View.VISIBLE);
                }
            }

            if (detailsBean.getObservation() != null && !detailsBean.getObservation().equalsIgnoreCase("") && !detailsBean.getObservation().contains(".jpg")) {
                observation.setVisibility(View.VISIBLE);
                observation.setText(detailsBean.getObservation());
            } else if (detailsBean.getObservation() != null && !detailsBean.getObservation().equalsIgnoreCase("") && detailsBean.getObservation().contains(".jpg")) {
                String cus_getObservation = detailsBean.getObservation();
                File file = new File(dir_path + cus_getObservation);
                File file1 = new File(cus_getObservation);
                if (file1.exists()) {
                    Bitmap myBitmap = BitmapFactory.decodeFile(file1.getAbsolutePath());
                    observation_show_custom1.setImageBitmap(myBitmap);
                    observation_show_custom1.setVisibility(View.VISIBLE);
                } else if (file.exists()) {
                    Bitmap myBitmap = BitmapFactory.decodeFile(file.getAbsolutePath());
                    observation_show_custom1.setImageBitmap(myBitmap);
                    observation_show_custom1.setVisibility(View.VISIBLE);
                }
            }

            if (detailsBean.getActionTaken() != null && !detailsBean.getActionTaken().equalsIgnoreCase("") && !detailsBean.getActionTaken().contains(".jpg")) {
                action_taken_show.setVisibility(View.VISIBLE);
                action_taken_show.setText(detailsBean.getActionTaken());
            } else if (detailsBean.getActionTaken() != null && !detailsBean.getActionTaken().equalsIgnoreCase("") && detailsBean.getActionTaken().contains(".jpg")) {
                String cus_getActionTaken = detailsBean.getActionTaken();
                File file = new File(dir_path + cus_getActionTaken);
                File file1 = new File(cus_getActionTaken);
                if (file1.exists()) {
                    Bitmap myBitmap = BitmapFactory.decodeFile(file1.getAbsolutePath());
                    action_taken_show_custom1.setImageBitmap(myBitmap);
                    action_taken_show_custom1.setVisibility(View.VISIBLE);
                } else if (file.exists()) {
                    Bitmap myBitmap = BitmapFactory.decodeFile(file.getAbsolutePath());
                    action_taken_show_custom1.setImageBitmap(myBitmap);
                    action_taken_show_custom1.setVisibility(View.VISIBLE);
                }
            }

            if (detailsBean.getCustomerSignature() != null && !detailsBean.getCustomerSignature().equalsIgnoreCase("")) {
                String cus_signature = detailsBean.getCustomerSignature();
                File file = new File(dir_path + cus_signature);
                File file1 = new File(cus_signature);
                if (file1.exists()) {
                    Bitmap myBitmap = BitmapFactory.decodeFile(file1.getAbsolutePath());
                    signature_path1.setImageBitmap(myBitmap);
                    signature_path1.setVisibility(View.VISIBLE);
                } else if (file.exists()) {
                    Bitmap myBitmap = BitmapFactory.decodeFile(file.getAbsolutePath());
                    signature_path1.setImageBitmap(myBitmap);
                    signature_path1.setVisibility(View.VISIBLE);
                }
            }
            if (detailsBean.getPhotoPath() != null && !detailsBean.getPhotoPath().equalsIgnoreCase("")) {
                String Photo_Path = detailsBean.getPhotoPath();
                File file = new File(dir_path + Photo_Path);
                File file1 = new File(Photo_Path);
                if (file1.exists()) {
                    Bitmap myBitmap = BitmapFactory.decodeFile(file1.getAbsolutePath());
                    photo_path1.setImageBitmap(myBitmap);
                    photo_path1.setVisibility(View.VISIBLE);
                } else if (file.exists()) {
                    Bitmap myBitmap = BitmapFactory.decodeFile(file.getAbsolutePath());
                    photo_path1.setImageBitmap(myBitmap);
                    photo_path1.setVisibility(View.VISIBLE);
                }
            }
            if (detailsBean.getTechnicianSignature() != null && !detailsBean.getTechnicianSignature().equalsIgnoreCase("")) {
                String Techn_Signature = detailsBean.getTechnicianSignature();
                File file = new File(dir_path + Techn_Signature);
                File file1 = new File(Techn_Signature);
                if (file1.exists()) {
                    Bitmap myBitmap = BitmapFactory.decodeFile(file1.getAbsolutePath());
                    tech_signature_path1.setImageBitmap(myBitmap);
                    tech_signature_path1.setVisibility(View.VISIBLE);
                } else if (file.exists()) {
                    Bitmap myBitmap = BitmapFactory.decodeFile(file.getAbsolutePath());
                    tech_signature_path1.setImageBitmap(myBitmap);
                    tech_signature_path1.setVisibility(View.VISIBLE);
                }
            }
            activity_start.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        Log.i("custom1", "dateDisplay-->$ ");
                        Intent i = new Intent(getApplicationContext(), DisplayList.class);
                        i.putExtra("projectId", projectId);
                        i.putExtra("webtaskId", webtaskId);
                        i.putExtra("completedate_display", completedate_display);
                        i.putExtra("isFromcustom1", true);
                        i.putExtra("date_type", "travel_start");
                        startActivity(i);
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "showCustom1PopUp activity_start Exception : " + e.getMessage(), "WARN", null);
                    }
                }
            });
            observation_show_custom1.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        Log.i("custom1", "signature_path1-->$ " + detailsBean.getObservation());
                        if (detailsBean.getObservation() != null && !detailsBean.getObservation().equalsIgnoreCase("")) {
                            File customobservation_path = new File(detailsBean.getObservation());
                            Intent intent = new Intent(context, FullScreenImage.class);
                            if (customobservation_path.exists())
                                intent.putExtra("image", detailsBean.getObservation());
                            else
                                intent.putExtra("image", dir_path + detailsBean.getObservation());
                            context.startActivity(intent);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "showCustom1PopUp  observation_show_custom1 Exception : " + e.getMessage(), "WARN", null);
                    }
                }
            });
            action_taken_show_custom1.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        Log.i("custom1", "signature_path1-->$ " + detailsBean.getCustomerSignature());
                        if (detailsBean.getCustomerSignature() != null && !detailsBean.getCustomerSignature().equalsIgnoreCase("")) {
                            File custonActiontaken_path = new File(detailsBean.getCustomerSignature());
                            Intent intent = new Intent(context, FullScreenImage.class);
                            if (custonActiontaken_path.exists())
                                intent.putExtra("image", detailsBean.getCustomerSignature());
                            else
                                intent.putExtra("image", dir_path + detailsBean.getCustomerSignature());
                            context.startActivity(intent);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "showCustom1PopUp action_taken_show_custom1 Exception : " + e.getMessage(), "WARN", null);
                    }
                }
            });
            remarks_complete_custom1.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        Log.i("custom1", "signature_path1-->$ " + detailsBean.getCustomerSignature());
                        if (detailsBean.getCustomerSignature() != null && !detailsBean.getCustomerSignature().equalsIgnoreCase("")) {
                            File custom_Remarks_path = new File(detailsBean.getCustomerSignature());
                            Intent intent = new Intent(context, FullScreenImage.class);
                            if (custom_Remarks_path.exists())
                                intent.putExtra("image", detailsBean.getCustomerSignature());
                            else
                                intent.putExtra("image", dir_path + detailsBean.getCustomerSignature());
                            context.startActivity(intent);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "showCustom1PopUp remarks_complete_custom1 Exception : " + e.getMessage(), "WARN", null);
                    }
                }
            });
            signature_path1.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        Log.i("custom1", "signature_path1-->$ " + detailsBean.getCustomerSignature());
                        if (detailsBean.getCustomerSignature() != null && !detailsBean.getCustomerSignature().equalsIgnoreCase("")) {
                            File signatue_path = new File(detailsBean.getCustomerSignature());
                            Intent intent = new Intent(context, FullScreenImage.class);
                            if (signatue_path.exists())
                                intent.putExtra("image", detailsBean.getCustomerSignature());
                            else
                                intent.putExtra("image", dir_path + detailsBean.getCustomerSignature());
                            context.startActivity(intent);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "showCustom1PopUp signature_path1 Exception : " + e.getMessage(), "WARN", null);
                    }
                }
            });
            photo_path1.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        Log.i("custom1", "photo_path1-->$ " + detailsBean.getPhotoPath());
                        if (detailsBean.getPhotoPath() != null && !detailsBean.getPhotoPath().equalsIgnoreCase("")) {
                            File photo_path1 = new File(detailsBean.getPhotoPath());
                            Intent intent = new Intent(context, FullScreenImage.class);
                            if (photo_path1.exists())
                                intent.putExtra("image", detailsBean.getPhotoPath());
                            else
                                intent.putExtra("image", dir_path + detailsBean.getPhotoPath());
                            context.startActivity(intent);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "showCustom1PopUp photo_path1 Exception : " + e.getMessage(), "WARN", null);
                    }
                }
            });
            tech_signature_path1.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        Log.i("custom1", "tech_signature_path1-->$ " + detailsBean.getTechnicianSignature());
                        if (detailsBean.getTechnicianSignature() != null && !detailsBean.getTechnicianSignature().equalsIgnoreCase("")) {
                            File tech_signature_path1 = new File(detailsBean.getTechnicianSignature());
                            Intent intent = new Intent(context, FullScreenImage.class);
                            if (tech_signature_path1.exists())
                                intent.putExtra("image", detailsBean.getTechnicianSignature());
                            else
                                intent.putExtra("image", dir_path + detailsBean.getTechnicianSignature());
                            context.startActivity(intent);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "showCustom1PopUp tech_signature_path1 Exception : " + e.getMessage(), "WARN", null);
                    }
                }
            });
            back.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        dialog.dismiss();
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "showCustom1PopUp back clicklistener Exception : " + e.getMessage(), "WARN", null);
                    }
                }
            });
            send_completion.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    try {
                        if (remarks_completion.getText().toString() != null && remarks_completion.getText().toString().length() > 0) {
                            dialog.dismiss();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "showCustom1PopUp send_completion Exception : " + e.getMessage(), "WARN", null);
                    }
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "showCustom1PopUp Exception : " + e.getMessage(), "WARN", null);

        }
    }


    public class DownloadImage extends AsyncTask<String, Void, String> {
        String downloadImageurl;
        TaskDetailsBean detailsBean = null;
        String namevalue = "";

        public DownloadImage(String url, String name) {
            this.downloadImageurl = url;
            namevalue = name;
        }

        public DownloadImage(TaskDetailsBean name) {
            detailsBean = name;
            this.downloadImageurl = getResources().getString(R.string.task_reminder) + name.getTaskDescription();
            namevalue = name.getTaskDescription();
        }

        @Override
        protected String doInBackground(String... urls) {
            String response = "";
            try {
                Log.i("profiledownload", "downloadImageurl " + downloadImageurl);
                if (isNetworkAvailable()) {
//                    String url ="http://122.165.92.171:8080/uploads/highmessaging/user/";
                    Log.i("profiledownload", "profile download ");
                    String profile1 = null;
                    if (downloadImageurl != null) {
                        if (downloadImageurl.contains("task"))
                            profile1 = downloadImageurl.split("task/")[1];
                        else
                            profile1 = downloadImageurl.split("chat/")[1];
                        Log.i("profiledownload", "profile1  " + profile1);
                        File extStore = Environment.getExternalStorageDirectory();
                        File myFile = new File(extStore.getAbsolutePath() + "/High Message/downloads/" + profile1);
                        Log.i("profiledownload", "file " + myFile.toString());
                        if (!myFile.exists()) {
                            try {
                                 /*  HostnameVerifier hostnameVerifier = new HostnameVerifier() {
                                        @Override
                                        public boolean verify(String hostname, SSLSession session) {
                                            HostnameVerifier hv =
                                                    HttpsURLConnection.getDefaultHostnameVerifier();
                                            return hv.verify("example.com", session);
                                        }
                                    };*/

// Tell the URLConnection to use our HostnameVerifier



                                   /* Log.i("profiledownload", "file not exit--->" + profile);
                                    URL bishowtmap = new URL(url + profile);
//                                    HostnameVerifier hostnameVerifier = org.apache.http.conn.ssl.SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER;
//                                    HttpsURLConnection.setDefaultHostnameVerifier(hostnameVerifier);
                                    HttpsURLConnection connection = (HttpsURLConnection) bitmap
                                            .openConnection();
//                                    connection.setDefaultHostnameVerifier(hostnameVerifier);
                                    connection.setDoInput(true);*/
                                URL bitmap = new URL(downloadImageurl);

                                Log.i("profiledownload", "profile bitmap " + bitmap);
                                HttpURLConnection connection =
                                        (HttpURLConnection) bitmap.openConnection();
//                                    connection.setHostnameVerifier(hostnameVerifier);
                                InputStream in = connection.getInputStream();
//                                    copyInputStreamToOutputStream(in, System.out);
                                connection.connect();
                                if (connection.getInputStream() != null) {
                                    InputStream inputStream = connection.getInputStream();
                                    String dir_path = Environment.getExternalStorageDirectory()
                                            + "/High Message/downloads";
                                    Log.i("profiledownload", "profile dir_path" + dir_path);
                                    File directory = new File(dir_path);
                                    if (!directory.exists())
                                        directory.mkdir();
                                    String filePath = Environment.getExternalStorageDirectory()
                                            .getAbsolutePath()
                                            + "/High Message/downloads/"
                                            + profile1;

                                    Log.d("profiledownload", "my file path is---->" + filePath);

                                    File file_name = new File(filePath);
                                    BufferedOutputStream bos = new BufferedOutputStream(
                                            new FileOutputStream(file_name));
                                    int inByte;
                                    while ((inByte = inputStream.read()) != -1) {
                                        bos.write(inByte);
                                    }
                                    bos.close();

                                    //** For  Avatar download
                                    //Start
                                    Log.d("profiledownload", "check ");
                                    Bitmap btmap = BitmapFactory.decodeStream(inputStream);
                                    if (connection.getContentLength() <= 0 && btmap == null) {
                                        Log.i("downavatar", "avatar download faild contact name-->");

                                    } else {
                                        Log.i("downavatar", "avatar download success contact name-->");
                                    }
                                    //End
//                                        Appreference.profile_image.put(profile, filePath);
                                }
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                                Appreference.printLog("NewTaskConversation", "DownloadImage Exception : " + e.getMessage(), "WARN", null);
                            } catch (Exception e) {
                                e.printStackTrace();
                                Appreference.printLog("NewTaskConversation", "DownloadImage Exception : " + e.getMessage(), "WARN", null);
                            }
                        } else {
//                                Appreference.profile_image.put(profile, myFile.toString());
//                            Log.i("profiledownload", "file exit--->" + profile);
                        }
                    }

                }


            } catch (Exception e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "DownloadImage Exception : " + e.getMessage(), "WARN", null);
            }
            return response;
        }

        @Override
        protected void onPostExecute(String result) {
            try {
                Log.i("Template creation", "mm1 ** " + namevalue);
                Log.i("Template creation", "TaskDescription1 ** ");
                Log.i("Template creation", "TaskDescription1 ** " + Appreference.taskMultimediaDownload.size());

                if (Appreference.taskMultimediaDownload != null && Appreference.taskMultimediaDownload.size() > 0) {
                    Iterator iterator1 = Appreference.taskMultimediaDownload.entrySet()
                            .iterator();
                    Log.i("Template creation", "mm11 " + namevalue);
                    //                Log.i("Template creation", "TaskDescription1 " + detailsBean.getTaskDescription());
                    while (iterator1.hasNext()) {
                        Map.Entry mapEntry = (Map.Entry) iterator1.next();
                        if (namevalue.equalsIgnoreCase(((TaskDetailsBean) mapEntry.getValue()).getTaskDescription())) {
                            Log.i("Template creation", "mm " + namevalue);
                            //                        Log.i("Template creation", "TaskDescription " + detailsBean.getTaskDescription());
                            detailsBean = (TaskDetailsBean) mapEntry.getValue();
                            File imageFile = new File(Environment.getExternalStorageDirectory()
                                    + "/High Message/downloads/" + detailsBean.getTaskDescription());
                            if (imageFile.exists()) {
                                Log.i("Template creation", "TaskDescription11 " + detailsBean.getTaskDescription());
                                if (detailsBean.getSignalid() != null) {
                                    VideoCallDataBase.getDB(context).updateTaskProgressStatus(detailsBean.getSignalid());
                                }
                            }
                        }
                    }
                }

                if (Appreference.context_table.containsKey("taskcoversation")) {

                    if (detailsBean != null) {
                        Log.i("Template creation", "TaskDescription111 ");
                        NewTaskConversation.getInstance().MMdownloadCompleted(detailsBean);
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "DownloadImage onPostExecute Exception : " + e.getMessage(), "WARN", null);
            }
        }

        @Override
        protected void onPreExecute() {

            super.onPreExecute();
        }
    }


    private void showStatusPopupWindow(View view) {
        final PopupMenu popup = new PopupMenu(NewTaskConversation.this, view);
        try {
            Field[] fields = popup.getClass().getDeclaredFields();
            for (Field field : fields) {
                if ("mPopup".equals(field.getName())) {
                    field.setAccessible(true);
                    Object menuPopupHelper = field.get(popup);
                    Class<?> classPopupHelper = Class.forName(menuPopupHelper.getClass().getName());
                    Method setForceIcons = classPopupHelper.getMethod("setForceShowIcon", boolean.class);
                    setForceIcons.invoke(menuPopupHelper, true);
                    break;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "showStatusPopupWindow Exception : " + e.getMessage(), "WARN", null);
        }
        popup.getMenuInflater().inflate(R.menu.popup_job_status, popup.getMenu());
        popup.getMenu().getItem(1).setVisible(false);
        popup.getMenu().getItem(2).setVisible(false);
        popup.getMenu().getItem(3).setVisible(false);
        popup.getMenu().getItem(4).setVisible(false);
        popup.getMenu().getItem(5).setVisible(false);
        popup.getMenu().getItem(6).setVisible(false);
        popup.getMenu().getItem(7).setVisible(false);
        popup.getMenu().getItem(8).setVisible(false);
        String query = "select status from projectStatus where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "'";
        int current_status = VideoCallDataBase.getDB(context).getCurrentStatus(query);

        if (current_status == 7 || current_status == 9 || current_status == 10) {
            /*String query123 = "select status from projectStatus where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' order by id DESC LIMIT 2";
            int last_beforeStatus = VideoCallDataBase.getDB(context).getCurrentStatus(query123);
            Log.i("output123", "project CurrentStatus from DB====>" + last_beforeStatus);
            current_status = last_beforeStatus;*/
            String status_info = "select status from projectStatus where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and status!='7' and status!= '9'and status!= '10'order by id DESC";
            ArrayList<String> status_all = VideoCallDataBase.getDB(context).getAllCurrentStatus(status_info);
            Log.i("output123", "project CurrentStatus from DB====>" + status_all.size());
            if (status_all.size() > 0) {
                current_status = Integer.parseInt(status_all.get(0));
                Log.i("output123", "project CurrentStatus from current_status " + current_status);
            }
        }
        observation_path = "";
        Action_Taken_path = "";
        customerRemarks_path = "";
        synopsis_path = "";
        observationStatus = "";
        actiontakenStatus = "";
        HMReadingStatus = "";
        status_signature = "";
        custsignnameStatus = "";
        photo_signature = "";
        tech_signature = "";
        synopsis_status = "";
        Log.i("ws123", "project CurrentStatus from DB====>" + current_status);
        /*added for GroupAdmin Observer Start*/
        String get_groupAdminobserver_query = "select groupAdminobserver from projectDetails where loginuser = '" + Appreference.loginuserdetails.getEmail() + "'and projectId='" + projectId + "'";
        String OraclegroupAdminObserver = VideoCallDataBase.getDB(context).getprojectIdForOracleID(get_groupAdminobserver_query);
        /*added for GroupAdmin Observer End*/

        /*added for checklist_PMS Start*/
        String PMSJobcard_query = "select isActiveStatus from projectDetails where loginuser = '" + Appreference.loginuserdetails.getEmail() + "'and projectId='" + projectId + "'";
        String PMSJobcard = VideoCallDataBase.getDB(context).getprojectIdForOracleID(PMSJobcard_query);
        Log.i("pms123", "PMSCARD====> " + PMSJobcard);
        /*added for checklist_PMS End*/

        if (oracleProjectOwner != null && !oracleProjectOwner.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) &&
                (OraclegroupAdminObserver != null && !OraclegroupAdminObserver.contains(Appreference.loginuserdetails.getUsername()))) {
//            popup.getMenu().getItem(7).setVisible(false);
            if (current_status == -1)
                popup.getMenu().getItem(0).setVisible(true);
            popup.getMenu().getItem(6).setVisible(true);
            if (current_status == 0) {
                Start_work = true;
                popup.getMenu().getItem(0).setVisible(false);
                popup.getMenu().getItem(1).setVisible(true);
                popup.getMenu().getItem(3).setVisible(true);
                popup.getMenu().getItem(5).setVisible(true);
                popup.getMenu().getItem(6).setVisible(true);
                if (PMSJobcard != null && PMSJobcard.equalsIgnoreCase("0")) {
                    popup.getMenu().getItem(8).setVisible(true);
                }
            } else if (current_status == 1) {
                hold_work = true;
                popup.getMenu().getItem(0).setVisible(false);
                popup.getMenu().getItem(1).setVisible(false);
                popup.getMenu().getItem(2).setVisible(true);
                popup.getMenu().getItem(3).setVisible(false);
                popup.getMenu().getItem(4).setVisible(false);
                popup.getMenu().getItem(5).setVisible(false);
                popup.getMenu().getItem(6).setVisible(false);
                popup.getMenu().getItem(8).setVisible(false);
            } else if (current_status == 2) {
                resume_work = true;
                popup.getMenu().getItem(0).setVisible(false);
                popup.getMenu().getItem(1).setVisible(true);
                popup.getMenu().getItem(2).setVisible(false);
                popup.getMenu().getItem(3).setVisible(true);
                popup.getMenu().getItem(4).setVisible(false);
                popup.getMenu().getItem(5).setVisible(true);
                popup.getMenu().getItem(6).setVisible(true);
                if (PMSJobcard != null && PMSJobcard.equalsIgnoreCase("0")) {
                    popup.getMenu().getItem(8).setVisible(true);
                }
            } else if (current_status == 3) {
                pause_work = true;
                popup.getMenu().getItem(0).setVisible(false);
                popup.getMenu().getItem(1).setVisible(false);
                popup.getMenu().getItem(2).setVisible(false);
                popup.getMenu().getItem(3).setVisible(false);
                popup.getMenu().getItem(4).setVisible(true);
                popup.getMenu().getItem(5).setVisible(false);
                popup.getMenu().getItem(6).setVisible(false);
                popup.getMenu().getItem(8).setVisible(false);
            } else if (current_status == 4) {
                restart_work = true;
                popup.getMenu().getItem(0).setVisible(false);
                popup.getMenu().getItem(1).setVisible(true);
                popup.getMenu().getItem(2).setVisible(false);
                popup.getMenu().getItem(3).setVisible(true);
                popup.getMenu().getItem(4).setVisible(false);
                popup.getMenu().getItem(5).setVisible(true);
                popup.getMenu().getItem(6).setVisible(true);
                if (PMSJobcard != null && PMSJobcard.equalsIgnoreCase("0")) {
                    popup.getMenu().getItem(8).setVisible(true);
                }
            } else if (current_status == 5) {
                completed_work = true;
                popup.getMenu().getItem(0).setVisible(false);
                popup.getMenu().getItem(1).setVisible(false);
                popup.getMenu().getItem(2).setVisible(false);
                popup.getMenu().getItem(3).setVisible(false);
                popup.getMenu().getItem(4).setVisible(false);
                popup.getMenu().getItem(5).setVisible(false);
                popup.getMenu().getItem(6).setVisible(false);
                Toast.makeText(getApplicationContext(), "Task has been Completed", Toast.LENGTH_SHORT).show();
            } else if (current_status == 8) {
                popup.getMenu().getItem(0).setVisible(true);
                popup.getMenu().getItem(1).setVisible(false);
                popup.getMenu().getItem(2).setVisible(false);
                popup.getMenu().getItem(3).setVisible(false);
                popup.getMenu().getItem(4).setVisible(false);
                popup.getMenu().getItem(5).setVisible(false);
                popup.getMenu().getItem(6).setVisible(true);
//                Toast.makeText(getApplicationContext(), "Task has been DeAssigned", Toast.LENGTH_SHORT).show();
            }
        } else {
            popup.getMenu().getItem(0).setVisible(false);
            if (current_status != 5) {
                popup.getMenu().getItem(7).setVisible(true);
            } else {
                popup.getMenu().getItem(7).setVisible(false);
            }
        }

        popup.setOnMenuItemClickListener(new PopupMenu.OnMenuItemClickListener() {

            public boolean onMenuItemClick(MenuItem item) {
//                Toast.makeText(getApplicationContext(), "You Clicked : " + item.getTitle(), Toast.LENGTH_SHORT).show();
                if (item.getTitle().toString().equalsIgnoreCase("Start")) {
                    String timerToSet = getEstimatedTime_to_set(true);
                    sendStatus_webservice("0", timerToSet, "", "Started", "Started");
                }
                if (item.getTitle().toString().equalsIgnoreCase("Hold")) {
                    int get_startEntry_entered = VideoCallDataBase.getDB(context).CheckTravelEntryDetails("select * from projectStatus where projectId ='" + projectId + "' and taskId = '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL");

                    if (get_startEntry_entered != 0) {
                        AlertDialog.Builder saveDialog = new AlertDialog.Builder(context);
                        saveDialog.setTitle("Hold Task");
                        saveDialog.setCancelable(false);
                        saveDialog.setMessage("Are you sure want to hold this task " + taskName);
                        saveDialog.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                final Dialog dialog1 = new Dialog(context);
                                dialog1.requestWindowFeature(Window.FEATURE_NO_TITLE);
                                dialog1.setContentView(R.layout.task_remarks);
                                dialog1.setCanceledOnTouchOutside(false);
                                TextView header = (TextView) dialog1.findViewById(R.id.template_header);
                                TextView yes = (TextView) dialog1.findViewById(R.id.save);
                                TextView no = (TextView) dialog1.findViewById(R.id.no);
                                final EditText name = (EditText) dialog1.findViewById(R.id.remarks);
                                header.setText("Hold Remarks ");
                                yes.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        Log.i("ws123", "remarks for Hold====>" + name.getText().toString());

                                        if (name.getText().toString() != null && !name.getText().toString().equalsIgnoreCase("")) {
                                            Appreference.isremarksEntered = true;
                                        } else
                                            Appreference.isremarksEntered = false;

                                        if (Appreference.isremarksEntered) {
                                            try {
                                                //New Code Start
                                                final Dialog mDateTimeDialog = new Dialog(context);
                                                mDateTimeDialog.setCanceledOnTouchOutside(false);
                                                // Inflate the root layout
                                                final RelativeLayout mDateTimeDialogView = (RelativeLayout) getLayoutInflater().inflate(R.layout.new_date_picker, null);

                                                // Grab widget instance
                                                final DateTimePicker mDateTimePicker = (DateTimePicker) mDateTimeDialogView.findViewById(R.id.DateTimePicker);
                                                mDateTimePicker.setDateChangedListener(NewTaskConversation.this);

                                                // Update demo TextViews when the "OK" button is clicked
                                                ((Button) mDateTimePicker.findViewById(R.id.month_plus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimePicker.findViewById(R.id.month_minus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimePicker.findViewById(R.id.date_plus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimePicker.findViewById(R.id.date_minus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimePicker.findViewById(R.id.year_plus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimePicker.findViewById(R.id.year_minus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimePicker.findViewById(R.id.hour_plus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimePicker.findViewById(R.id.hour_minus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimePicker.findViewById(R.id.min_plus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimePicker.findViewById(R.id.min_minus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimeDialogView.findViewById(R.id.SetDateTime)).setOnClickListener(new View.OnClickListener() {

                                                    public void onClick(View v) {
                                                        mDateTimePicker.clearFocus();
                                                        // TODO Auto-generated method stub
                                                        String result_string = mDateTimePicker.getMonth() + "-" + String.valueOf(mDateTimePicker.getDay()) + "-" + String.valueOf(mDateTimePicker.getYear())
                                                                + "  " + String.valueOf(mDateTimePicker.getHour()) + ":" + String.valueOf(mDateTimePicker.getMinute());
                                                        Date date_from = null;
                                                        final Calendar c_date1 = Calendar.getInstance();

                                                        try {
                                                            date_from = new SimpleDateFormat("MMM-d-yyyy HH:mm").parse(result_string);
                                                        } catch (ParseException e) {
                                                            e.printStackTrace();
                                                            Appreference.printLog("NewTaskConversation", "showStatusPopupWindow Hold date Exception : " + e.getMessage(), "WARN", null);
                                                        }
                                                        String date3 = null, showholdTimerDate = null;
                                                        Date date_to = null, date_initial = null, dt_temp = null;
                                                        final SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy HH:mm");
                                                        if (date3 == null) {
                                                            try {
                                                                date3 = sdf.format(c_date1.getTime());
                                                                date_from = new SimpleDateFormat("MMM-d-yyyy HH:mm").parse(result_string);
                                                            } catch (Exception e) {
                                                                e.printStackTrace();
                                                                Appreference.printLog("NewTaskConversation", "showStatusPopupWindow Hold date Exception : " + e.getMessage(), "WARN", null);
                                                            }
                                                        }
                                                        try {
                                                            date_to = sdf.parse(date3);
                                                        } catch (Exception e) {
                                                            e.printStackTrace();
                                                            Appreference.printLog("NewTaskConversation", "showStatusPopupWindow Hold date Exception : " + e.getMessage(), "WARN", null);
                                                        }
                                                        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy HH:mm");
                                                        SimpleDateFormat originalFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                                                        Log.i("Date123", "Date arrange===> ## " + result_string);
                                                        Log.i("Date123", "Date From===> ## " + date_from);
                                                        Log.i("Date123", "Date to===> ## " + date_to);
                                                        Log.i("Date123", "date3 ===> ## " + date3);
                                                        Log.i("Date123", "compareTo ===> ## " + date_from.compareTo(date_to));

                                                        String actual_timerdate = sdf.format(date_from);
                                                        Log.i("Date123", "actual_timerdate ===> ## " + actual_timerdate);
                                                        if (date_from.compareTo(date_to) > 0) {
                                                            try {
                                                                dt_temp = dateFormat.parse(actual_timerdate);
                                                                showholdTimerDate = originalFormat.format(dt_temp);
                                                                Log.i("Date123", "result_string ===> ## " + result_string);
                                                                Log.i("Date123", "dt_temp ===> &  ## " + dt_temp);
                                                                Log.i("Date123", "showholdTimerDate ===> & ## " + showholdTimerDate);
                                                            } catch (ParseException e) {
                                                                e.printStackTrace();
                                                                Appreference.printLog("NewTaskConversation", "showStatusPopupWindow Hold date Exception : " + e.getMessage(), "WARN", null);
                                                            }
                                                            Log.i("Date123", "compareTo ===> if " + date_from.compareTo(date_to));
                                                            Appreference.isremarksEntered = false;
                                                            if (isRem_time && estimCounter != null) {
                                                                estimCounter.cancel();
                                                            }
                                                            sendStatus_webservice("1", showholdTimerDate, "Hold Remarks :" + name.getText().toString(), "hold", "Hold");
                                                            mDateTimeDialog.dismiss();
                                                            dialog1.dismiss();
                                                        } else {
                                                            showToast("Please set Correct Timer...");
                                                        }
                                                    }
                                                });
                                                // Cancel the dialog when the "Cancel" button is clicked
                                                ((Button) mDateTimeDialogView.findViewById(R.id.CancelDialog)).setOnClickListener(new View.OnClickListener() {

                                                    public void onClick(View v) {
                                                        // TODO Auto-generated method stub
                                                        mDateTimeDialog.cancel();
                                                        //                                                    dialog1.dismiss();
                                                    }
                                                });
                                                // Setup TimePicker
                                                // No title on the dialog window
                                                mDateTimeDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
                                                // Set the dialog content view
                                                mDateTimeDialog.setContentView(mDateTimeDialogView);
                                                // Display the dialog
                                                mDateTimeDialog.show();
                                                //New Code End
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                                Appreference.printLog("NewTaskConversation", "showStatusPopupWindow Hold date Exception : " + e.getMessage(), "WARN", null);
                                            }
                                        } else {
                                            showToast("Please enter any Remarks");
                                        }

                                    }
                                });
                                no.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        dialog1.dismiss();
                                    }
                                });
                                dialog1.show();
                            }
                        });
                        saveDialog.setNegativeButton("No",
                                new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int which) {
                                        dialog.cancel();
                                    }
                                });
                        saveDialog.show();
                    } else {
                        showToast("Please Enter Start Time");
                    }
                }
                if (item.getTitle().toString().equalsIgnoreCase("Resume")) {
                    timerstop();
                    sendStatus_webservice("2", "", "", "Resumed", "Resumed");
                }
                if (item.getTitle().toString().equalsIgnoreCase("Pause")) {
                    int get_startEntry_entered = VideoCallDataBase.getDB(context).CheckTravelEntryDetails("select * from projectStatus where projectId ='" + projectId + "' and taskId = '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL");

                    if (get_startEntry_entered != 0) {
                        AlertDialog.Builder saveDialog = new AlertDialog.Builder(context);
                        saveDialog.setTitle("Pause Task");
                        saveDialog.setCancelable(false);
                        saveDialog.setMessage("Are you sure want to pause this task " + taskName);
                        saveDialog.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                final Dialog dialog1 = new Dialog(context);
                                dialog1.requestWindowFeature(Window.FEATURE_NO_TITLE);
                                dialog1.setContentView(R.layout.task_remarks);
                                dialog1.setCanceledOnTouchOutside(false);
                                TextView header = (TextView) dialog1.findViewById(R.id.template_header);
                                final TextView yes = (TextView) dialog1.findViewById(R.id.save);
                                final TextView no = (TextView) dialog1.findViewById(R.id.no);
                                final EditText name = (EditText) dialog1.findViewById(R.id.remarks);

                                header.setText("Pause Remarks ");
                                yes.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        Log.i("ws123", "remarks for pause====>" + name.getText().toString());

                                        isFromPauseClick = true;
                                        if (name.getText().toString() != null && !name.getText().toString().equalsIgnoreCase("")) {
                                            Appreference.isremarksEntered = true;
                                        } else
                                            Appreference.isremarksEntered = false;

                                        if (Appreference.isremarksEntered) {
                                            try {
                                                //New Code Start
                                                final Dialog mDateTimeDialog = new Dialog(context);
                                                mDateTimeDialog.setCanceledOnTouchOutside(false);
                                                // Inflate the root layout
                                                final RelativeLayout mDateTimeDialogView = (RelativeLayout) getLayoutInflater().inflate(R.layout.new_date_picker, null);

                                                // Grab widget instance
                                                final DateTimePicker mDateTimePicker = (DateTimePicker) mDateTimeDialogView.findViewById(R.id.DateTimePicker);
                                                mDateTimePicker.setDateChangedListener(NewTaskConversation.this);

                                                // Update demo TextViews when the "OK" button is clicked
                                                ((Button) mDateTimePicker.findViewById(R.id.month_plus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimePicker.findViewById(R.id.month_minus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimePicker.findViewById(R.id.date_plus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimePicker.findViewById(R.id.date_minus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimePicker.findViewById(R.id.year_plus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimePicker.findViewById(R.id.year_minus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimePicker.findViewById(R.id.hour_plus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimePicker.findViewById(R.id.hour_minus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimePicker.findViewById(R.id.min_plus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimePicker.findViewById(R.id.min_minus)).setVisibility(View.VISIBLE);
                                                ((Button) mDateTimeDialogView.findViewById(R.id.SetDateTime)).setOnClickListener(new View.OnClickListener() {

                                                    public void onClick(View v) {
                                                        mDateTimePicker.clearFocus();
                                                        // TODO Auto-generated method stub
                                                        String result_string = mDateTimePicker.getMonth() + "-" + String.valueOf(mDateTimePicker.getDay()) + "-" + String.valueOf(mDateTimePicker.getYear())
                                                                + "  " + String.valueOf(mDateTimePicker.getHour()) + ":" + String.valueOf(mDateTimePicker.getMinute());
                                                        Date date_from = null;
                                                        final Calendar c_date1 = Calendar.getInstance();

                                                        try {
                                                            date_from = new SimpleDateFormat("MMM-d-yyyy HH:mm").parse(result_string);
                                                        } catch (ParseException e) {
                                                            e.printStackTrace();
                                                            Appreference.printLog("NewTaskConversation", "showStatusPopupWindow Pause date Exception : " + e.getMessage(), "WARN", null);
                                                        }
                                                        String date3 = null, showpauseTimerDate = null;
                                                        Date date_to = null, date_initial = null, dt_temp = null;
                                                        final SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy HH:mm");
                                                        if (date3 == null) {
                                                            try {
                                                                date3 = sdf.format(c_date1.getTime());
                                                                date_from = new SimpleDateFormat("MMM-d-yyyy HH:mm").parse(result_string);
                                                            } catch (Exception e) {
                                                                e.printStackTrace();
                                                                Appreference.printLog("NewTaskConversation", "showStatusPopupWindow Pause date Exception : " + e.getMessage(), "WARN", null);
                                                            }
                                                        }
                                                        try {
                                                            date_to = sdf.parse(date3);
                                                        } catch (Exception e) {
                                                            e.printStackTrace();
                                                            Appreference.printLog("NewTaskConversation", "showStatusPopupWindow Pause date Exception : " + e.getMessage(), "WARN", null);
                                                        }
                                                        SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMM-yyyy HH:mm");
                                                        SimpleDateFormat originalFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                                                        Log.i("Date123", "Date arrange===> " + result_string);
                                                        Log.i("Date123", "Date From===> " + date_from);
                                                        Log.i("Date123", "Date to===> " + date_to);
                                                        Log.i("Date123", "date3 ===> " + date3);
                                                        Log.i("Date123", "compareTo ===> " + date_from.compareTo(date_to));

                                                        String actual_timerdate = sdf.format(date_from);
                                                        Log.i("Date123", "actual_timerdate ===> " + actual_timerdate);
                                                        if (date_from.compareTo(date_to) > 0) {
                                                            try {
                                                                dt_temp = dateFormat.parse(actual_timerdate);
                                                                showpauseTimerDate = originalFormat.format(dt_temp);
                                                            } catch (ParseException e) {
                                                                e.printStackTrace();
                                                                Appreference.printLog("NewTaskConversation", "showStatusPopupWindow Pause date Exception : " + e.getMessage(), "WARN", null);
                                                            }
                                                            Log.i("Date123", "compareTo ===> if " + date_from.compareTo(date_to));
                                                            if (isRem_time && estimCounter != null) {
                                                                estimCounter.cancel();
                                                            }
                                                            Appreference.isremarksEntered = false;
                                                            sendStatus_webservice("3", showpauseTimerDate, "Pause Remarks :" + name.getText().toString(), "Paused", "Paused");
                                                            mDateTimeDialog.dismiss();
                                                            dialog1.dismiss();
                                                        } else {
                                                            showToast("Please set Correct Timer...");
                                                        }
                                                    }
                                                });
                                                // Cancel the dialog when the "Cancel" button is clicked
                                                ((Button) mDateTimeDialogView.findViewById(R.id.CancelDialog)).setOnClickListener(new View.OnClickListener() {

                                                    public void onClick(View v) {
                                                        // TODO Auto-generated method stub
                                                        mDateTimeDialog.cancel();
                                                        //                                                    dialog1.dismiss();
                                                    }
                                                });
                                                // Setup TimePicker
                                                // No title on the dialog window
                                                mDateTimeDialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
                                                // Set the dialog content view
                                                mDateTimeDialog.setContentView(mDateTimeDialogView);
                                                // Display the dialog
                                                mDateTimeDialog.show();
                                                //New Code End
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                                Appreference.printLog("NewTaskConversation", "showStatusPopupWindow Pause Exception : " + e.getMessage(), "WARN", null);
                                            }
                                        } else {
                                            showToast("Please enter any Remarks");
                                        }

                                    }
                                });
                                no.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        dialog1.dismiss();
                                    }
                                });
                                dialog1.show();
                            }
                        });
                        saveDialog.setNegativeButton("No",
                                new DialogInterface.OnClickListener() {
                                    public void onClick(DialogInterface dialog, int which) {
                                        dialog.cancel();
                                    }
                                });
                        saveDialog.show();
                    } else {
                        showToast("Please Enter Start Time");
                    }

                }
                if (item.getTitle().toString().equalsIgnoreCase("Restart")) {
                    timerstop();
                    sendStatus_webservice("4", "", "", "Restarted", "Restarted");
                }
                if (item.getTitle().toString().equalsIgnoreCase("Complete")) {
                    Log.i("Givercomplete", "taskType ==> " + taskType);
                    if (taskType != null && taskType.equalsIgnoreCase("group")) {
                        getgroupStatus();
                    } else {
                        String query_forstart = "select * from projectStatus where projectId='" + projectId + "'  and taskId= '" + webtaskId + "' and status = '0'";
                        Log.i("Givercomplete", "query_forstart==> " + query_forstart);
                        final int count_status = VideoCallDataBase.getDB(context).getCountForTravelEntry(query_forstart);
                        Log.i("Givercomplete", "count_status==> " + count_status);
                        if (count_status != 0) {
                            String query_enddatenull = "select * from projectStatus where projectId='" + projectId + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                            final int travelentry = VideoCallDataBase.getDB(context).getCountForTravelEntry(query_enddatenull);
                            Log.i("Givercomplete", "query_enddatenull==>" + query_enddatenull);
                            Log.i("Givercomplete", "TravelEntry==>" + travelentry);
                            String query_forstartend = "select * from projectStatus where projectId='" + projectId + "'  and taskId= '" + webtaskId + "' and status = '7'";
                            final int count_fortravel = VideoCallDataBase.getDB(context).getCountForTravelEntry(query_forstartend);
                            Log.i("Givercomplete", "query_forstartend==> " + query_forstartend);
                            Log.i("Givercomplete", "count_fortravel==> " + count_fortravel);
                            String qry_status = "select status from projectStatus where projectId='" + projectId + "' and taskId= '" + webtaskId + "'";
                            final int check_status = VideoCallDataBase.getDB(context).getCurrentStatus(qry_status);
                            Log.i("Givercomplete", "qry_status==> " + qry_status);
                            Log.i("Givercomplete", "check_status==> " + check_status);

                            String query_forEod = "select * from projectStatus where projectId='" + projectId + "' and status = '10'";
                            final int count_forEod = VideoCallDataBase.getDB(context).getCountForTravelEntry(query_forEod);
                            Log.i("Givercomplete", "query_forEod==> " + query_forEod);
                            Log.i("Givercomplete", "count_forEod==> " + count_forEod);
                            if (check_status != 1 && check_status != 3) {
                                if (count_fortravel != 0) {
                                    if (travelentry == 0) {
                                        if (count_forEod != 0) {
                                            showAlertDialog("Complete Task", "Are You sure want to complete this job " + taskName, context);
                                        } else {
                                            Toast.makeText(NewTaskConversation.this, "This task has no Eod ", Toast.LENGTH_SHORT).show();
                                        }
                                    } else {
                                        Toast.makeText(NewTaskConversation.this, "Enter end date and time and then proceed to complete the task.", Toast.LENGTH_SHORT).show();
                                    }
                                } else {
                                    Toast.makeText(NewTaskConversation.this, "No StartEndTime Found", Toast.LENGTH_SHORT).show();
                                }
                            } else {
                                Toast.makeText(NewTaskConversation.this, "Task is in Hold state", Toast.LENGTH_SHORT).show();
                            }
                        } else {
                            Toast.makeText(NewTaskConversation.this, "Task is not yet to Started", Toast.LENGTH_SHORT).show();

                        }
                    }
                    Log.i("ws123", "OracleStatusList $$--> " + OracleStatusList.size());
                }
                if (item.getTitle().toString().equalsIgnoreCase("End of Day")) {
                    final Calendar calendar = Calendar.getInstance();
                    final SimpleDateFormat mdformat = new SimpleDateFormat("yyyy-MM-dd");
                    String taskcomplete_date = mdformat.format(calendar.getTime());
                    Log.i("ws123", "taskcomplete_ddate $$--> " + taskcomplete_date);
                    String query = "select * from projectStatus where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and status = '7'";
                    int count = VideoCallDataBase.getDB(context).getCountForTravelEntry(query);
                    Log.i("conv123", "count ==> " + count);
                    int complete_travel = VideoCallDataBase.getDB(context).CheckTravelEntryDetails("select * from projectStatus where projectId ='" + projectId + "' and taskId = '" + webtaskId + "' and status = '10' and taskcompleteddate like '" + taskcomplete_date + "%" + "'");
                    Log.i("ws123", "complete_travel $$--> " + complete_travel);
                    int travelentry = VideoCallDataBase.getDB(context).CheckTravelEntryDetails("select * from projectStatus where projectId ='" + projectId + "' and taskId = '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL");
                    String checklist_available_query = "select * from checklistDetails where projectId='" + projectId + "'and taskId='" + webtaskId + "'and userId='" + Appreference.loginuserdetails.getId() + "'";
                    checkListDetails checklistBean = VideoCallDataBase.getDB(context).getchecklistdetails(checklist_available_query);

                    if (count != 0) {
                        if (travelentry == 0) {
                            if (checklistBean.getId() != null && checklistBean.getIsServiceDone().equalsIgnoreCase("1")) {
                                if (complete_travel == 0) {
                                    Intent i = new Intent(context, EodScreen.class);
                                    i.putExtra("projectId", projectId);
                                    i.putExtra("webtaskId", webtaskId);
                                    i.putExtra("taskName", taskName);
                                    i.putExtra("JobCodeNo", JobCodeNo);
                                    i.putExtra("ActivityCode", ActivityCode);
                                    startActivityForResult(i, 9999);
                                } else {
                                    Toast.makeText(NewTaskConversation.this, "Already EOD sent", Toast.LENGTH_SHORT).show();
                                }
                            }else {
                                Toast.makeText(NewTaskConversation.this, "Please submit the check list before EOD!", Toast.LENGTH_SHORT).show();
                            }
                        } else {
                            Toast.makeText(NewTaskConversation.this, "Enter end date and time and then proceed to complete the task.", Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        Toast.makeText(NewTaskConversation.this, "No StartEndTime Found", Toast.LENGTH_SHORT).show();
                    }
                }
                if (item.getTitle().toString().equalsIgnoreCase("checklist")) {
                    try {
                        /*added for checklist_PMS Start*/
                        String PMSJobcard_query = "select  jobDescription from projectDetails where loginuser = '" + Appreference.loginuserdetails.getEmail() + "'and projectId='" + projectId + "'";
                        String PMSJobDescription = VideoCallDataBase.getDB(context).getprojectIdForOracleID(PMSJobcard_query);
                       /*added for checklist_PMS End*/
                       final ProjectDetailsBean PMSJobDetails=getprojectDetails_Row();

//                        hideKeyboard();
                      /*  Intent intent = new Intent(NewTaskConversation.this, FormsView.class);
                        startActivity(intent);
                        overridePendingTransition(R.anim.right_anim, R.anim.left_anim);*/

                        if (PMSJobDetails.getServiceType() != null && !PMSJobDetails.getServiceType().equalsIgnoreCase("")
                                && !PMSJobDetails.getServiceType().equalsIgnoreCase(null)
                                && !PMSJobDetails.getServiceType().equalsIgnoreCase("null")) {
                            getChecklistExistData();
                        } else {
                            String query = "select * from checklistDetails where projectId='" + projectId + "'and taskId='" + webtaskId + "'and userId='" + Appreference.loginuserdetails.getId() + "'";
                            checkListDetails checklistBean = VideoCallDataBase.getDB(context).getchecklistdetails(query);
                            if (checklistBean.getId() != null) {
                                getChecklistExistData();
                            } else {
                                AlertDialog.Builder builderSingle = new AlertDialog.Builder(NewTaskConversation.this);
                                builderSingle.setIcon(R.drawable.accept_notify);
                                builderSingle.setTitle("Select Service Type");

                                final ArrayAdapter<String> arrayAdapter = new ArrayAdapter<String>(NewTaskConversation.this, android.R.layout.simple_list_item_single_choice);
                                arrayAdapter.add("PMS_" + PMSJobDetails.getMachineMake() + "_" + PMSJobDetails.getMcModel() + "_" + "250 HOURS SERVICE");
                                arrayAdapter.add("PMS_" + PMSJobDetails.getMachineMake() + "_" + PMSJobDetails.getMcModel() + "_" + "500 HOURS SERVICE");
                                arrayAdapter.add("PMS_" + PMSJobDetails.getMachineMake() + "_" + PMSJobDetails.getMcModel() + "_" + "1000 HOURS SERVICE");
                                arrayAdapter.add("PMS_" + PMSJobDetails.getMachineMake() + "_" + PMSJobDetails.getMcModel() + "_" + "2000 HOURS SERVICE");

                                builderSingle.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {
                                        dialog.dismiss();
                                    }
                                });

                                builderSingle.setAdapter(arrayAdapter, new DialogInterface.OnClickListener() {
                                    @Override
                                    public void onClick(DialogInterface dialog, int which) {
                                        String strName = arrayAdapter.getItem(which);
                                        final String type_service=getselectedService(which);
                                        try {
                                            AlertDialog alertDialog = new AlertDialog.Builder(NewTaskConversation.this).create();
                                            alertDialog.setTitle(strName);
                                            alertDialog.setCancelable(false);
                                            alertDialog.setMessage("Adding " +type_service+" Hours Check list to this Job card! \n" +
                                                    "Are you sure of your selection?");
                                            alertDialog.setButton(AlertDialog.BUTTON_NEGATIVE, "No",
                                                    new DialogInterface.OnClickListener() {
                                                        public void onClick(DialogInterface dialogAlert, int which) {

                                                            dialogAlert.dismiss();
                                                        }
                                                    });
                                            alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "Yes",
                                                    new DialogInterface.OnClickListener() {
                                                        public void onClick(DialogInterface dialog, int which) {
                                                            Appreference.mychecklistTemplate = getTemplateList(PMSJobDetails, Integer.parseInt(type_service));
                                                            try {
                                                                if (Appreference.mychecklistTemplate.getLabel().size()>0) {

                                                                    if (Appreference.mychecklistTemplate != null) {
                                                                        Intent intent = new Intent(NewTaskConversation.this, CheckListActivity.class);
                                                                        intent.putExtra("checklistBean", Appreference.mychecklistTemplate);
                                                                        intent.putExtra("isExistingView", false);
                                                                        intent.putExtra("PMSprojectId", projectId);
                                                                        intent.putExtra("PMStaskId", webtaskId);
                                                                        startActivity(intent);
                                                                    }
                                                                }else{
                                                                    Toast.makeText(NewTaskConversation.this, "CheckList Not Available....", Toast.LENGTH_SHORT).show();
                                                                }
                                                            } catch (Exception e) {
                                                                e.printStackTrace();
                                                                Appreference.printLog("NewTaskConversation", "mychecklistTemplate  Exception : " + e.getMessage(), "WARN", null);
                                                            }
                                                        }
                                                    });
                                            alertDialog.show();
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                            Appreference.printLog("EodScreen", "alert_dialog Exception : " + e.getMessage(), "WARN", null);
                                        }
                                    }
                                });
                                builderSingle.show();
                            }
                        }

                      /*  try {
                            String query = "select * from checklistDetails where projectId='" + projectId + "'and taskId='" + webtaskId + "'and userId='" + Appreference.loginuserdetails.getId() + "'";
                            checkListDetails checklistBean = VideoCallDataBase.getDB(context).getchecklistdetails(query);

                            if (checklistBean.getId() != null && checklistBean.getIsServiceDone().equalsIgnoreCase("1")) {
                                String checklistData_query = "select * from checklistData where checklistdataid='" + checklistBean.getId() + "'";
                                ArrayList<Label> dataBean = VideoCallDataBase.getDB(context).getchecklistData(checklistData_query);
                                checklistBean.setLabel(dataBean);
                                Intent intent = new Intent(NewTaskConversation.this, CheckListActivity.class);
                                intent.putExtra("checklistBean", checklistBean);
                                intent.putExtra("isExistingView", true);
                                intent.putExtra("PMSprojectId", projectId);
                                intent.putExtra("PMStaskId", webtaskId);
                                startActivity(intent);
                            } else if (checklistBean.getId() != null && checklistBean.getIsServiceDone().equalsIgnoreCase("0")) {
                                String checklistData_query = "select * from checklistData where checklistdataid='" + checklistBean.getId() + "'";
                                ArrayList<Label> dataBean = VideoCallDataBase.getDB(context).getchecklistData(checklistData_query);
                                checklistBean.setLabel(dataBean);
                                Intent intent = new Intent(NewTaskConversation.this, CheckListActivity.class);
                                intent.putExtra("checklistBean", checklistBean);
                                intent.putExtra("isExistingView", false);
                                intent.putExtra("PMSprojectId", projectId);
                                intent.putExtra("PMStaskId", webtaskId);
                                startActivity(intent);
                            } else if (isNetworkAvailable()) {
                                showprogress();
                                String PMSmake_query = "select machineMake from projectDetails where loginuser = '" + Appreference.loginuserdetails.getEmail() + "'and projectId='" + projectId + "'";
                                String PMS_machine_make = VideoCallDataBase.getDB(context).getprojectIdForOracleID(PMSmake_query);
                                String PMSmodel_query = "select mcModel from projectDetails where loginuser = '" + Appreference.loginuserdetails.getEmail() + "'and projectId='" + projectId + "'";
                                String PMS_machine_model = VideoCallDataBase.getDB(context).getprojectIdForOracleID(PMSmodel_query);
                                List<NameValuePair> tagNameValuePairs = new ArrayList<NameValuePair>();
                                tagNameValuePairs.add(new BasicNameValuePair("machinemake", PMS_machine_make));
                                tagNameValuePairs.add(new BasicNameValuePair("machinemodel", PMS_machine_model));
                                tagNameValuePairs.add(new BasicNameValuePair("serviceType", "250"));

                                Appreference.jsonRequestSender.getChecklistForm(EnumJsonWebservicename.getCheckListDetailsFromClient, tagNameValuePairs, NewTaskConversation.this);
                            } else {
                                Toast.makeText(NewTaskConversation.this, "CheckList Not Available....", Toast.LENGTH_SHORT).show();

                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                            Appreference.printLog("ProjectFragment", "ProjectArrayAdapter projectCompleted Exception : " + e.getMessage(), "WARN", null);
                        }*/
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("ProjectFragment", "image_search Exception : " + e.getMessage(), "WARN", null);
                    }
                }
                if (item.getTitle().toString().equalsIgnoreCase("DeAssign")) {
                    try {
                        if (isNetworkAvailable()) {
                            int travelentry = VideoCallDataBase.getDB(context).CheckTravelEntryDetails("select * from projectStatus where projectId ='" + projectId + "' and taskId = '" + webtaskId + "'and userId='" + Appreference.loginuserdetails.getId() + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL");

                            if (travelentry == 0) {
                                final Dialog dialog1 = new Dialog(context);
                                dialog1.requestWindowFeature(Window.FEATURE_NO_TITLE);
                                dialog1.setContentView(R.layout.task_remarks);
                                dialog1.setCanceledOnTouchOutside(false);
                                TextView header = (TextView) dialog1.findViewById(R.id.template_header);
                                TextView yes = (TextView) dialog1.findViewById(R.id.save);
                                TextView no = (TextView) dialog1.findViewById(R.id.no);
                                final EditText name = (EditText) dialog1.findViewById(R.id.remarks);
                                header.setText("DeAssign Remarks");
                                yes.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        Log.i("ws123", "remarks for DeAssign====>" + name.getText().toString());
                                        if (name.getText().toString() != null && !name.getText().toString().equalsIgnoreCase("")) {
                                            if (isRem_time && estimCounter != null) {
                                                estimCounter.cancel();
                                            }
                                            String EstimatedTimeQuery = "update taskDetailsInfo set estimCompletion='1' where (taskStatus='Started') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
                                            Log.i("tone123", "updateSnoozeTime_query***********" + EstimatedTimeQuery);
                                            VideoCallDataBase.getDB(context).updateaccept(EstimatedTimeQuery);
                                            EstimTimerstop();
                                            sendStatus_webservice("8", "", "DeAssign Remarks : " + name.getText().toString(), "DeAssign", "draft");
                                            dialog1.dismiss();
                                        } else {
                                            showToast("Please enter any Remarks");
                                        }
                                    }
                                });
                                no.setOnClickListener(new View.OnClickListener() {
                                    @Override
                                    public void onClick(View v) {
                                        dialog1.dismiss();
                                    }
                                });
                                dialog1.show();
                            } else {
                                Toast.makeText(NewTaskConversation.this, "Enter End DateTime to Deassign the task.", Toast.LENGTH_SHORT).show();
                            }
                        } else {
                            showToast("Not available when no internet connection");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "DeAssign item_clicklistener Exception : " + e.getMessage(), "WARN", null);
                    }
                }
                return true;
            }
        });
        popup.show();
    }

    private String getselectedService(int position) {
        String type="";
        if(position==0){
            type="250";
        }else if(position==1){
            type="500";
        }else if(position==2){
            type="1000";
        }else if(position==3){
            type="2000";
        }
        return type;
    }


    private ProjectDetailsBean getprojectDetails_Row() {
        String PMSServiceType_query = "select * from projectDetails where loginuser ='" + Appreference.loginuserdetails.getEmail() + "'and projectId='" + projectId + "'";
        ArrayList<ProjectDetailsBean> projectList = VideoCallDataBase.getDB(context).getProjectdetails(PMSServiceType_query);
        return projectList.get(0);
    }

    private void getChecklistExistData() {
        try {
            String query = "select * from checklistDetails where projectId='" + projectId + "'and taskId='" + webtaskId + "'and userId='" + Appreference.loginuserdetails.getId() + "'";
            checkListDetails checklistBean = VideoCallDataBase.getDB(context).getchecklistdetails(query);

            if (checklistBean.getId() != null && checklistBean.getIsServiceDone().equalsIgnoreCase("1")) {
                String checklistData_query = "select * from checklistData where checklistdataid='" + checklistBean.getId() + "'";
                ArrayList<Label> dataBean = VideoCallDataBase.getDB(context).getchecklistData(checklistData_query);
                checklistBean.setLabel(dataBean);
                Intent intent = new Intent(NewTaskConversation.this, CheckListActivity.class);
                intent.putExtra("checklistBean", checklistBean);
                intent.putExtra("isExistingView", true);
                intent.putExtra("PMSprojectId", projectId);
                intent.putExtra("PMStaskId", webtaskId);
                startActivity(intent);
            } else if (checklistBean.getId() != null && checklistBean.getIsServiceDone().equalsIgnoreCase("0")) {
                String checklistData_query = "select * from checklistData where checklistdataid='" + checklistBean.getId() + "'";
                ArrayList<Label> dataBean = VideoCallDataBase.getDB(context).getchecklistData(checklistData_query);
                checklistBean.setLabel(dataBean);
                Intent intent = new Intent(NewTaskConversation.this, CheckListActivity.class);
                intent.putExtra("checklistBean", checklistBean);
                intent.putExtra("isExistingView", false);
                intent.putExtra("PMSprojectId", projectId);
                intent.putExtra("PMStaskId", webtaskId);
                startActivity(intent);
            } else {
//                Toast.makeText(NewTaskConversation.this, "CheckList Not Available....", Toast.LENGTH_SHORT).show();
                final ProjectDetailsBean PMSJobDetails=getprojectDetails_Row();
                checkListDetails mychecklistTemplate = getTemplateList(PMSJobDetails, Integer.parseInt(PMSJobDetails.getServiceType()));
                if (mychecklistTemplate.getLabel().size()>0) {
                    if (mychecklistTemplate != null) {
                        Intent intent = new Intent(NewTaskConversation.this, CheckListActivity.class);
                        intent.putExtra("checklistBean", mychecklistTemplate);
                        intent.putExtra("isExistingView", false);
                        intent.putExtra("PMSprojectId", projectId);
                        intent.putExtra("PMStaskId", webtaskId);
                        startActivity(intent);
                    }
                }else{
                    Toast.makeText(NewTaskConversation.this, "CheckList Not Available....", Toast.LENGTH_SHORT).show();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("ProjectFragment", "ProjectArrayAdapter projectCompleted Exception : " + e.getMessage(), "WARN", null);
        }
    }

    private checkListDetails getTemplateList(ProjectDetailsBean PMSJobDetails, int ServiceType) {
        String checklistTemplate_quey = "select * from checklistTemplate where machine='" + PMSJobDetails.getMachineMake() + "'and modal='" + PMSJobDetails.getMcModel() + "'and serviceType='" + ServiceType + "'";
        checkListDetails mychecklistTemplate = VideoCallDataBase.getDB(context).getTemplatedetails(checklistTemplate_quey);
        return mychecklistTemplate;
    }

    private String getEstimatedTime_to_set(boolean isTaskStartNow) {
        String timer = "";
        try {

            int timer_hour = 0, timer_minutes = 0;

            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            SimpleDateFormat Date_only_formatter = new SimpleDateFormat("yyyy-MM-dd");
            String currentDateandTime = sdf.format(new Date());
            Log.i("estim123", "Calculated Timer details===>currentDateandTime*****" + currentDateandTime);

            Date date = null;
            try {
                date = formatter.parse(currentDateandTime);
            } catch (ParseException e) {
                e.printStackTrace();
            }
            if (isTaskStartNow) {
                Calendar calendar = Calendar.getInstance();
                calendar.setTime(date);
                String estim_timeQuery = "Select * from projectHistory where projectId ='" + projectId + "' and taskId = '" + webtaskId + "'";
                String timeToAdd = VideoCallDataBase.getDB(context).getEstimHoursForTaskId(estim_timeQuery);
                Log.i("estim123", "estimated Time added===>*****" + timeToAdd);

                if (timeToAdd != null && !timeToAdd.equalsIgnoreCase("0") && !timeToAdd.equalsIgnoreCase("0.0")) {
                    Log.i("estim123", "estimated Time added===>*****" + timeToAdd);
//                                timeToAdd= String.valueOf(0.10);

                    double d_timeToAdd = Double.parseDouble(timeToAdd);
                    Log.i("checktime123", "estimated Time timeToAdd===>*****" + timeToAdd);

                    if (timeToAdd != null && !(d_timeToAdd == (Math.ceil(d_timeToAdd)))) {
                        //            String timer_result[] = timeToAdd.split("\\.");
                        double d_minutes = d_timeToAdd % 1;
                        int i_hour = (int) d_timeToAdd;
                        Log.i("checktime123", "Integer.parseInt(timer_result[0])===>*****" + i_hour);
                        Log.i("checktime123", "(Integer.parseInt(timer_result[1])======" + d_minutes);
                        Log.i("checktime123", "(Integer.parseInt(timer_result[1]*60)======" + d_minutes * 60);

                        try {
                            timer_hour = i_hour;
                            timer_minutes = (int) (d_minutes * 60);
                        } catch (NumberFormatException e) {
                            e.printStackTrace();
                        }
                        calendar.add(Calendar.HOUR, timer_hour);
                        calendar.add(Calendar.MINUTE, timer_minutes);
                    } else {
                        try {
                            calendar.add(Calendar.HOUR, Integer.parseInt(timeToAdd));
                        } catch (NumberFormatException e) {
                            e.printStackTrace();
                        }
                    }
                    final SimpleDateFormat mdformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                    timer = mdformat.format(calendar.getTime());

                    Log.i("checktime123", "Calculated final Timer details===>timer******" + timer);
                    Log.i("estim123", "Calculated Timer details===>timer******" + timer);
                }
            } else {

                try {
                    String taskQueryRemainingTime = "select estimRemainingTime from taskDetailsInfo where (taskDescription='Task is Started') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
                    String getLastEndTime = VideoCallDataBase.getDB(context).getValuefromDBEntry(taskQueryRemainingTime, "estimRemainingTime");
                    String taskQuery = "select estimTime from taskDetailsInfo where (taskStatus='Started') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
                    String getEstimatedTimer = VideoCallDataBase.getDB(context).getValuefromDBEntry(taskQuery, "estimTime");
                    Log.i("remain123", " getEstimatedTime_to_set getEstimatedTime========>" + getEstimatedTimer);
                    Log.i("remain123", " getEstimatedTime_to_set getLastEndTime FROM DB========>" + getLastEndTime);

                    if (getLastEndTime != null) {
                        String dateTime_fromDB[] = getLastEndTime.split(" ");
                        Date datefromDB = null;
                        Log.i("remain123", "getEstimatedTime_to_set split Time From DB dateTime_fromDB[0]*****" + dateTime_fromDB[0]);
                        Log.i("remain123", "getEstimatedTime_to_set split Time From DB dateTime_fromDB[1]*****" + dateTime_fromDB[1]);


                        Calendar calendar = Calendar.getInstance();
                        calendar.setTime(date);

                        String timeToAdd = null;
                        if (dateTime_fromDB != null) {
                            timeToAdd = dateTime_fromDB[1];
                        }

                        if (timeToAdd != null && !timeToAdd.equalsIgnoreCase("")) {
                            String HMS_fromDB[] = timeToAdd.split(":");
                            if (HMS_fromDB != null) {
                                int hour_DB = Integer.parseInt(HMS_fromDB[0]);
                                int minutes_DB = Integer.parseInt(HMS_fromDB[1]);
                                int seconds_DB = Integer.parseInt(HMS_fromDB[2]);
                                calendar.add(Calendar.HOUR, hour_DB);
                                calendar.add(Calendar.MINUTE, minutes_DB);
                                calendar.add(Calendar.SECOND, seconds_DB);

                                   /* calendar.add(Calendar.HOUR, 0);
                                calendar.add(Calendar.MINUTE, 3);
                                calendar.add(Calendar.SECOND, seconds_DB);*/
                                final SimpleDateFormat mdformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                                timer = mdformat.format(calendar.getTime());
                            }
                        }
                    }
                } catch (NumberFormatException e) {
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "getEstimatedTime_to_set Exception : " + e.getMessage(), "WARN", null);
        }
        return timer;
    }

    public void getgroupStatus() {
        try {
            showprogressforpriority("Loading...");
            Log.d("test1", "appSharedpreferences.getString " + webtaskId);
            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
            nameValuePairs.add(new BasicNameValuePair("taskId", webtaskId));
            Appreference.jsonRequestSender.listGroupTaskUsers(EnumJsonWebservicename.listGroupTaskUsers, nameValuePairs, this);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "listGroupTaskUsers Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void complete_task_check() {
        try {
            if (OracleStatusList.size() > 0) {
                for (int i = 0; i < OracleStatusList.size(); i++) {
                    if (OracleStatusList.get(i).equalsIgnoreCase("hold") || OracleStatusList.get(i).equalsIgnoreCase("pause") || OracleStatusList.get(i).equalsIgnoreCase("assigned")) {
                        isOracleStatusList = false;
                        break;
                    } else if (OracleStatusList.get(i).equalsIgnoreCase("started")) {
                        isOracleStatusList = true;
                    } else {
                        isOracleStatusList = true;
                    }
                }
            }
            Log.i("ws123", "id $$--> " + isOracleStatusList);
            Log.i("ws123", "id $$--> " + projectId);
            Log.i("ws123", "id $$--> " + Appreference.loginuserdetails.getId());
            Log.i("ws123", "id $$--> " + webtaskId);
            if (isOracleStatusList) {
                final int travelentry = VideoCallDataBase.getDB(context).CheckTravelEntryDetails("select * from projectStatus where projectId ='" + projectId + "' and taskId = '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL");
                Log.i("conv123", "TravelEntry==>" + travelentry);
                String query = "select * from projectStatus where projectId='" + projectId + "'  and taskId= '" + webtaskId + "' and status = '7'";
                final int count = VideoCallDataBase.getDB(context).getCountForTravelEntry(query);
                if (count != 0) {
                    if (travelentry == 0) {
                        String query_forEod = "select * from projectStatus where projectId='" + projectId + "' and status = '10'";
                        final int count_forEod = VideoCallDataBase.getDB(context).getCountForTravelEntry(query_forEod);
                        Log.i("conv123", "count_forEod==> $$ " + count_forEod);
                        if (count_forEod != 0) {
                            showAlertDialog("Complete Task", "Are You sure want to complete this job " + taskName, context);
                        } else {
                            Toast.makeText(NewTaskConversation.this, "This task has no Eod ", Toast.LENGTH_SHORT).show();
                        }
                    } else {
                        Toast.makeText(NewTaskConversation.this, "Enter end date and time and then proceed to complete the task.", Toast.LENGTH_SHORT).show();
                    }
                } else {
                    Toast.makeText(NewTaskConversation.this, "No StartEndTime Found", Toast.LENGTH_SHORT).show();
                }
            } else {
                Toast.makeText(NewTaskConversation.this, "can't able to complete this task", Toast.LENGTH_SHORT).show();

            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "complete_task_check() Exception : " + e.getMessage(), "WARN", null);
        }
    }

    private String getRemarks() {
        final Dialog dialog1 = new Dialog(context);
        dialog1.requestWindowFeature(Window.FEATURE_NO_TITLE);
        dialog1.setContentView(R.layout.task_remarks);
        TextView header = (TextView) dialog1.findViewById(R.id.template_header);
        TextView yes = (TextView) dialog1.findViewById(R.id.save);
        TextView no = (TextView) dialog1.findViewById(R.id.no);
        final EditText name = (EditText) dialog1.findViewById(R.id.remarks);
        header.setText("Enter Remarks ");

        name.addTextChangedListener(new TextWatcher() {
            @Override
            public void beforeTextChanged(CharSequence s, int start, int count, int after) {
            }

            @Override
            public void onTextChanged(CharSequence s, int start, int before, int count) {
            }

            @Override
            public void afterTextChanged(Editable s) {
                name.setError(null);
            }
        });
        yes.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog1.dismiss();
            }
        });
        no.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                dialog1.dismiss();
            }
        });
        dialog1.show();
        return name.getText().toString();
    }

    public void showSettingsAlert(String message) {
        try {
            AlertDialog.Builder alertDialog = new AlertDialog.Builder(NewTaskConversation.this);
            alertDialog.setTitle("Gps setting");
            alertDialog.setMessage(message);
            alertDialog.setCancelable(false);
            alertDialog.setPositiveButton("Setting", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    Intent in = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                    startActivity(in);
                }
            });
            alertDialog.setNegativeButton("Cancel", new DialogInterface.OnClickListener() {
                @Override
                public void onClick(DialogInterface dialog, int which) {
                    dialog.cancel();
                }
            });
            alertDialog.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void getLocationForTravel() {
        Log.d("FireGps", "NewTaskConversation getLocationForTravel");
        if (locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER)
                || locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER)) {
            for (int i = 0; i < 3; i++) {
                Log.d("FireGps", "getLocationForTravel location : " + loc);
                Log.d("FireGps", "Loop ==> " + i);
                loc.getLocation();
                latitude_global = loc.getLatitude();
                longitude_global = loc.getLongitude();
                Log.i("FireGps", "NewTaskConversation latitude $ ==> " + latitude_global);
                if (latitude_global == 0.0 && !back_preesed) {
                    Log.i("Location", "user ");
                } else {
                    break;
                }
            }
        }
        Log.i("FireGps", "latitude_global **% " + latitude_global);
        Log.i("FireGps", "longitude_global **% " + longitude_global);
    }

    private void sendStatus_webservice(String status, String timer, String remarks, String projectCurrentStatus, String StatusUI) {
        try {

            Log.i("desc123", "inside 120  status ========> " + status);

            if (isNetworkAvailable()) {
                showStatusprogress();
            } else {
                Toast.makeText(NewTaskConversation.this, "Check your internet connection", Toast.LENGTH_SHORT).show();
            }
            final ProjectHistory projectHistory = (ProjectHistory) Appreference.context_table.get("projecthistory");

            if (projectHistory != null) {
                Log.i("ProjectHistory123", "inside refresh  status projectHistory ========>" + projectHistory.projectDetailsBeans + "size bean " + projectHistory.projectDetailsBeans.size() + "buddayArrayAdapteer==>" + projectHistory.buddyArrayAdapter);

                if (projectHistory.projectDetailsBeans != null && projectHistory.projectDetailsBeans.size() > 0 && projectHistory.buddyArrayAdapter != null) {
                    Log.i("ProjectHistory123", "projectHistory.projectDetailsBeans.get(clickPosition)========>" + clickPosition);

                    ProjectDetailsBean projectDetailsBean = projectHistory.projectDetailsBeans.get(clickPosition);
                    Log.i("ProjectHistory123", "projectDetailsBean)========>" + projectDetailsBean);
                    if (projectCurrentStatus.equalsIgnoreCase("DeAssign")) {
                        projectDetailsBean.setTaskStatus("Unassigned");
                        projectDetailsBean.setTaskReceiver("NA");
                    } else if (!projectCurrentStatus.equalsIgnoreCase("travel") || !projectCurrentStatus.equalsIgnoreCase("EOD Details Sent..")) {
                        projectDetailsBean.setTaskStatus(StatusUI);
                    }

                    Log.i("ProjectHistory123", "inside refresh  status NewTaskConveratio ========>" + projectCurrentStatus);
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            projectHistory.buddyArrayAdapter.notifyDataSetChanged();
                        }
                    });
                }
            }
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            SimpleDateFormat dateParse = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            SimpleDateFormat taskDateParse = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            SimpleDateFormat taskDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String dateTime = dateFormat.format(new Date());
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            taskDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            String dateforrow = dateFormat.format(new Date());
            Date date = null;
            Date date1 = null;
            Date date2 = null;
            String StartDateUTC = "", EndDateUTC = "", taskCompletedDateUTC = "";
            Appreference.EstimTimerValue = "";

            if (status.equalsIgnoreCase("10")) {
                String eod_query = "select travelEndTime from projectStatus where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and status = '7'";
                String eod_end_date = VideoCallDataBase.getDB(context).getProjectParentTaskId(eod_query);
                Log.i("Eod", "eod_end_date ==> " + eod_end_date);
                Log.i("Eod", "dateTime ==> " + dateTime);
                ActivityStartdate = eod_end_date;
                ActivityEnddate = dateTime;
            }
            if (status.equalsIgnoreCase("1") || status.equalsIgnoreCase("3")) {
                Log.i("status", "timer ==> " + timer);
                ActivityEnddate = dateTime;
                Appreference.isEstimTimerStarted = false;
            } else
                Appreference.isEstimTimerStarted = true;

            if (status.equalsIgnoreCase("2") || status.equalsIgnoreCase("4")) {
                Log.i("status", "timer ==> " + timer);
                ActivityStartdate = dateTime;
            }
            if (ActivityStartdate != null && !ActivityStartdate.equalsIgnoreCase("")) {
                try {
                    date = dateParse.parse(ActivityStartdate);
                    StartDateUTC = dateFormat.format(date);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendStatus_webservice  ActivityStartdate Exception : " + e.getMessage(), "WARN", null);
                }
            }
            if (ActivityEnddate != null && !ActivityEnddate.equalsIgnoreCase("")) {
                try {
                    date1 = dateParse.parse(ActivityEnddate);
                    EndDateUTC = dateFormat.format(date1);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendStatus_webservice  ActivityEnddate Exception : " + e.getMessage(), "WARN", null);
                }
            }
            tasktime = dateTime;
            taskUTCtime = dateforrow;
            travel_date_details = null;

            ArrayList<TaskDetailsBean> status_list = new ArrayList<>();
            TaskDetailsBean taskDetailsBean = new TaskDetailsBean();

            JSONObject jsonObject = new JSONObject();
            JSONObject jsonObject1 = new JSONObject();
            jsonObject1.put("id", Integer.parseInt(projectId));
            taskDetailsBean.setProjectId(projectId);
            jsonObject.put("project", jsonObject1);

            JSONObject jsonObject2 = new JSONObject();
            jsonObject2.put("id", Appreference.loginuserdetails.getId());
            taskDetailsBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
            jsonObject.put("from", jsonObject2);

            JSONObject jsonObject3 = new JSONObject();
            jsonObject3.put("id", Integer.parseInt(webtaskId));
            taskDetailsBean.setTaskId(webtaskId);
            jsonObject.put("task", jsonObject3);

            if (status.equalsIgnoreCase("7") || status.equalsIgnoreCase("9")) {
                Log.d("Location", "after_getLocation ==> " + latitude_global + " longitude==> " + longitude_global);
                try {
                    if (ActivityStartdate != null && !ActivityStartdate.equalsIgnoreCase(""))
                        if (!status.equalsIgnoreCase("9")) {
                            jsonObject.put("startDateLatitude", latitude_global);
                            jsonObject.put("startDateLongitude", longitude_global);
                            taskDetailsBean.setStartDateLatitude(String.valueOf(latitude_global));
                            taskDetailsBean.setStartDateLongitude(String.valueOf(longitude_global));
                        } else {
                            jsonObject.put("startDateLatitude", "");
                            jsonObject.put("startDateLongitude", "");
                        }

                    if (ActivityEnddate != null && !ActivityEnddate.equalsIgnoreCase("")) {
                        jsonObject.put("endDateLatitude", latitude_global);
                        jsonObject.put("endDateLongitude", longitude_global);
                        taskDetailsBean.setEndDateLatitude(String.valueOf(latitude_global));
                        taskDetailsBean.setEndDateLongitude(String.valueOf(longitude_global));
                    } else {
                        jsonObject.put("endDateLatitude", "");
                        jsonObject.put("endDateLongitude", "");
                    }

                    if (status.equalsIgnoreCase("7")) {
                        String restartTimer = getEstimatedTime_to_set(false);
                        Log.i("remain123", "Newtask conv restart restartTimer value***********" + restartTimer);

                        if (restartTimer != null && !restartTimer.equalsIgnoreCase("")) {
                            String AlarmRingedUpdateQuery = "update taskDetailsInfo set EstimAlarm='1' where projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
                            Log.i("remain123", "ShowEstimWishAlert updateSnoozeTime_query***********" + AlarmRingedUpdateQuery);
                            VideoCallDataBase.getDB(context).updateaccept(AlarmRingedUpdateQuery);

                /*update Query : set Task completed before the EstimatedHours*/
                            String EstimatedTimeQuery = "update taskDetailsInfo set estimCompletion='0' where (taskStatus='Started') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
                            Log.i("remain123", "ShowEstimWishAlert updateSnoozeTime_query***********" + EstimatedTimeQuery);
                            VideoCallDataBase.getDB(context).updateaccept(EstimatedTimeQuery);

                            String EstimTimeQuery = "update taskDetailsInfo set estimTime='" + restartTimer + "' where (taskStatus='Started') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
                            Log.i("remain123", "estimTime restart time set query***********" + EstimatedTimeQuery);
                            VideoCallDataBase.getDB(context).updateaccept(EstimTimeQuery);

                            String taskQuery = "select estimTime from taskDetailsInfo where (taskStatus='Started') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
                            String getEstimatedTimer = VideoCallDataBase.getDB(context).getValuefromDBEntry(taskQuery, "estimTime");
                            Log.i("remain123", "estimTime restart EnteredValue***********" + getEstimatedTimer);
                            Appreference.EstimTimerValue = restartTimer;
                              /*  startHoldOrPauseAlarmManager(restartTimer, webtaskId, projectCurrentStatus, taskDetailsBean.getProjectId(), "EstimTimer");
                                ShowEstimTimerDisplay(false);*/
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (status.equalsIgnoreCase("7") || status.equalsIgnoreCase("9") || status.equalsIgnoreCase("10")) {
                try {
                    if (ActivityStartdate != null && !ActivityStartdate.equalsIgnoreCase(""))
                        if (!status.equalsIgnoreCase("9")) {
                            jsonObject.put("travelStartTime", StartDateUTC);
                        } else
                            jsonObject.put("travelStartTime", "");
                    jsonObject.put("travelEndTime", EndDateUTC);
                    taskDetailsBean.setTravelStartTime(ActivityStartdate);
                    taskDetailsBean.setTravelEndTime(ActivityEnddate);
                    if (!isNetworkAvailable()) {
                        taskDetailsBean.setEnd_dateStatus("7");
                    }
                    travel_date_details = new ArrayList<>();
                    if (ActivityStartdate != null && !ActivityStartdate.equalsIgnoreCase("") && !status.equalsIgnoreCase("9")) {
                        travel_date_details.add("StartTime : " + ActivityStartdate);
                        if (status.equalsIgnoreCase("7") || status.equalsIgnoreCase("9")) {
                            Log.i("location", "status @@@@@ " + taskDetailsBean.getStartDateLatitude());
                            travel_date_details.add("Latitude : " + taskDetailsBean.getStartDateLatitude());
                            travel_date_details.add("Longitude : " + taskDetailsBean.getStartDateLongitude());
                        }
                    }
                    if (ActivityEnddate != null && !ActivityEnddate.equalsIgnoreCase("")) {
                        travel_date_details.add("EndTime : " + ActivityEnddate);
                        if (status.equalsIgnoreCase("7") || status.equalsIgnoreCase("9")) {
                            Log.i("location", "status @@@@@ " + taskDetailsBean.getEndDateLatitude());
                            travel_date_details.add("Latitude : " + taskDetailsBean.getEndDateLatitude());
                            travel_date_details.add("Longitude : " + taskDetailsBean.getEndDateLongitude());
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendStatus_webservice  travel_date_details Exception : " + e.getMessage(), "WARN", null);
                }
            } else if (status.equalsIgnoreCase("1") || status.equalsIgnoreCase("3")) {
                jsonObject.put("travelEndTime", EndDateUTC);
                travel_date_details = new ArrayList<>();
                if (ActivityEnddate != null && !ActivityEnddate.equalsIgnoreCase("")) {
                    travel_date_details.add("EndTime : " + ActivityEnddate);
                }
            } else if (status.equalsIgnoreCase("2") || status.equalsIgnoreCase("4")) {
                jsonObject.put("travelStartTime", StartDateUTC);
                travel_date_details = new ArrayList<>();
                if (ActivityStartdate != null && !ActivityStartdate.equalsIgnoreCase("") && !status.equalsIgnoreCase("9")) {
                    travel_date_details.add("StartTime : " + ActivityStartdate);
                }
            } else {
                jsonObject.put("travelStartTime", "");
                jsonObject.put("activityStartTime", "");
                jsonObject.put("activityEndTime", "");
                jsonObject.put("travelEndTime", "");
                jsonObject.put("toTravelStartDateTime", "");
                jsonObject.put("toTravelEndDateTime", "");
            }
            if (remarks != null && !remarks.equalsIgnoreCase("") && !remarks.equalsIgnoreCase(null)) {
                jsonObject.put("remarks", remarks);
                taskDetailsBean.setCustomerRemarks(remarks);

            } else
                jsonObject.put("remarks", "");
            jsonObject.put("status", status);

            if (synopsis_status != null && !synopsis_status.equalsIgnoreCase("") && !synopsis_status.equalsIgnoreCase(null)) {
                jsonObject.put("synopsis", synopsis_status);
                taskDetailsBean.setSynopsis(synopsis_status);
            } else
                jsonObject.put("synopsis", "");

            if (observationStatus != null && !observationStatus.equalsIgnoreCase("") && !observationStatus.equalsIgnoreCase(null)) {
                jsonObject.put("observation", observationStatus);
                taskDetailsBean.setObservation(observationStatus);
            } else
                jsonObject.put("observation", "");


            if (actiontakenStatus != null && !actiontakenStatus.equalsIgnoreCase("") && !actiontakenStatus.equalsIgnoreCase(null)) {
                taskDetailsBean.setActionTaken(actiontakenStatus);
                jsonObject.put("actionTaken", actiontakenStatus);
            } else
                jsonObject.put("actionTaken", "");


            if (custsignnameStatus != null && !custsignnameStatus.equalsIgnoreCase("") && !custsignnameStatus.equalsIgnoreCase(null)) {
                jsonObject.put("customerSignatureName", custsignnameStatus);
                taskDetailsBean.setCustomerSignatureName(custsignnameStatus);
            } else
                jsonObject.put("customerSignatureName", "");
            Log.i("desc123", "HourMeterReading ========>" + HMReadingStatus);
            if (HMReadingStatus != null && !HMReadingStatus.equalsIgnoreCase("") && !HMReadingStatus.equalsIgnoreCase(null)) {
                jsonObject.put("hourMeterReading", HMReadingStatus);
                taskDetailsBean.setHMReading(HMReadingStatus);
            } else
                jsonObject.put("hourMeterReading", "");
            Log.i("desc123", "machine_model ========>" + machine_model);
            if (machine_model != null && !machine_model.equalsIgnoreCase("") && !machine_model.equalsIgnoreCase(null)) {
                jsonObject.put("mcModel", machine_model);
                taskDetailsBean.setMcModel(machine_model);
            } else
                jsonObject.put("mcModel", "");
            Log.i("desc123", "machine_serialno ========>" + machine_serialno);
            if (machine_serialno != null && !machine_serialno.equalsIgnoreCase("") && !machine_serialno.equalsIgnoreCase(null)) {
                jsonObject.put("mcSrNo", machine_serialno);
                taskDetailsBean.setMcSrNo(machine_serialno);
                String updateMachineSerialNo = "update projectDetails set mcSrNo='" + machine_serialno + "' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "'";
                VideoCallDataBase.getDB(context).updateaccept(updateMachineSerialNo);
            } else
                jsonObject.put("mcSrNo", "");
            Log.i("desc123", "machine_description ========>" + machine_description);
            if (machine_description != null && !machine_description.equalsIgnoreCase("") && !machine_description.equalsIgnoreCase(null)) {
                jsonObject.put("mcDescription", machine_description);
                taskDetailsBean.setMcDescription(machine_description);
            } else
                jsonObject.put("mcDescription", "");
            Log.i("desc123", "machine_model ========>" + machion_make_edit);
            if (machion_make_edit != null && !machion_make_edit.equalsIgnoreCase("") && !machion_make_edit.equalsIgnoreCase(null)) {
                jsonObject.put("machineMake", machion_make_edit);
                taskDetailsBean.setMachineMake(machion_make_edit);
            } else
                jsonObject.put("machineMake", "");
            Log.i("oracle123", "taskCompletedDate w/s===>" + taskCompletedDate);


            if (status != null && status.equalsIgnoreCase("10") && taskCompletedDate != null
                    && !taskCompletedDate.equalsIgnoreCase("") && !taskCompletedDate.equalsIgnoreCase(null)) {
                try {
                    date2 = taskDateParse.parse(taskCompletedDate);
                    taskCompletedDateUTC = taskDateFormat.format(date2);
                } catch (Exception e) {
                    Log.i("oracle123", "taskCompletedDateUTC===>" + e.getMessage());
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendStatus_webservice  taskCompletedDateUTC Exception : " + e.getMessage(), "WARN", null);
                }
            }
            Log.i("oracle123", "taskCompletedDateUTC===>" + taskCompletedDateUTC);

            if (status != null && status.equalsIgnoreCase("10") && taskCompletedDateUTC != null
                    && !taskCompletedDateUTC.equalsIgnoreCase("") && !taskCompletedDateUTC.equalsIgnoreCase(null)) {
                taskDetailsBean.setTaskCompletedDate(taskCompletedDate);
                jsonObject.put("taskcompletedDate", taskCompletedDateUTC);
            } else
                jsonObject.put("taskcompletedDate", "");


            taskDetailsBean.setProjectStatus(status);
            taskDetailsBean.setTaskUTCDateTime(dateforrow);
            taskDetailsBean.setDateTime(dateTime);
            taskDetailsBean.setTasktime(tasktime);
            taskDetailsBean.setTaskUTCTime(taskUTCtime);
            taskDetailsBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
            taskDetailsBean.setFromUserName(Appreference.loginuserdetails.getUsername());
            taskDetailsBean.setToUserName(toUserName);
//            taskDetailsBean.setToUserId(String.valueOf(toUserId));
            taskDetailsBean.setToUserId("");
            taskDetailsBean.setSignalid(Utility.getSessionID());
            taskDetailsBean.setTaskNo(task_No);
            taskDetailsBean.setPlannedStartDateTime("");
            taskDetailsBean.setTaskStatus(projectCurrentStatus);
            taskDetailsBean.setSendStatus("0");
            taskDetailsBean.setTaskType(taskType);

            taskDetailsBean.setMimeType("text");
            taskDetailsBean.setPlannedEndDateTime("");
            if (status.equalsIgnoreCase("0")) {
                Appreference.EstimTimerValue = timer;
            } else {
                Appreference.HoldOrPauseTimervalue = timer;
            }
            if (status.equalsIgnoreCase("2") || status.equalsIgnoreCase("4")) {
                String getHoldPause_Interval_value = getHoldPauseInterval(status);
                String EstimatedTimeQuery = "update taskDetailsInfo set estimTime='" + getHoldPause_Interval_value + "' where (taskStatus='Started') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
                Log.i("tone123", "updateSnoozeTime_query***********" + EstimatedTimeQuery);
                VideoCallDataBase.getDB(context).updateaccept(EstimatedTimeQuery);
            }
            String taskQuery = "select estimTime from taskDetailsInfo where (taskStatus='Started') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
            String getEstimatedTimer = VideoCallDataBase.getDB(context).getValuefromDBEntry(taskQuery, "estimTime");
            Log.i("estim123", " getEstimatedTimer started===============>" + getEstimatedTimer);
            if (!status.equalsIgnoreCase("1") && !status.equalsIgnoreCase("3") && !status.equalsIgnoreCase("0") && !status.equalsIgnoreCase("9")) {
                Log.i("estim123", " getEstimatedTimer from DB added===============>" + getEstimatedTimer);
                Appreference.EstimTimerValue = getEstimatedTimer;
            } else if (status.equalsIgnoreCase("9")) {
                showEstimWishAlert(projectId, webtaskId);
            }
            taskStatus = StatusUI;

            taskDetailsBean.setUtcPlannedStartDateTime(Appreference.customLocalDateToUTC(null));
            taskDetailsBean.setUtcplannedEndDateTime(Appreference.customLocalDateToUTC(null));
            taskDetailsBean.setParentId(getFileName());
            taskDetailsBean.setTaskPriority("Medium");
            taskDetailsBean.setCompletedPercentage("");
            taskDetailsBean.setRequestStatus("");
            taskDetailsBean.setMsg_status(0);
            taskDetailsBean.setShow_progress(1);

            taskDetailsBean.setOwnerOfTask(ownerOfTask);
            taskDetailsBean.setTaskReceiver(taskReceiver);
            taskDetailsBean.setTaskName(taskName);
            taskDetailsBean.setCatagory(category);
            if (project) {
                taskDetailsBean.setProjectId(projectId);
                if (category != null && category.equalsIgnoreCase("issue")) {
                    taskDetailsBean.setParentTaskId(issueId);
                } else {
                    taskDetailsBean.setParentTaskId(parentTaskId);
                }
            }
            taskDetailsBean.setSubType("normal");
            taskDetailsBean.setTaskRequestType("normal");
            Log.i("travel123", "isnetworkAvailable when travel time send===>" + isNetworkAvailable());
            if (!isNetworkAvailable()) {
                SimpleDateFormat simpleDateFormat_1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                String curr_date = simpleDateFormat_1.format(new Date());
                taskDetailsBean.setWssendstatus("000");
                Log.i("travel123", "setWssendstatus set successfully===>" + isNetworkAvailable());
                taskDetailsBean.setDatenow(curr_date);
            }


            if (projectCurrentStatus != null && projectCurrentStatus.equalsIgnoreCase("DeAssign")) {
                isDeassign = true;
                taskDetailsBean.setTaskDescription(Appreference.loginuserdetails.getFirstName() + " " + Appreference.loginuserdetails.getLastName() + " Left");
                taskDetailsBean.setSubType("deassign");
                Log.i("travel123", "TaskDescription ==> && " + taskDetailsBean.getTaskDescription());
            } else if (status.equalsIgnoreCase("7") || status.equalsIgnoreCase("9")) {
                taskDetailsBean.setTaskDescription("Gathering Details...");
                taskDetailsBean.setCustomTagVisible(false);
            } else if (status.equalsIgnoreCase("10")) {
                taskDetailsBean.setTaskDescription(projectCurrentStatus);
            } else {
                taskDetailsBean.setTaskDescription("Task is " + projectCurrentStatus);
            }

            for (int level = 0; level < statusCompletedFieldValues.size(); level++) {
                try {
                    if (statusCompletedFieldValues.containsKey(level)) {
                        TaskDetailsBean taskDetailsBean1 = (TaskDetailsBean) taskDetailsBean.clone();
                        Log.i("ws123", "taskDetailsBean1 reference signalID +++>>>   " + taskDetailsBean1.getSignalid());
                        Log.i("ws123", "taskDetailsBean1 reference  signalID+++>>>   " + taskDetailsBean1.getSignalid());
                        taskDetailsBean1.setMimeType("text");
                        Log.i("desc123", "hashmap values ===>" + "level===>" + level + "===>" + statusCompletedFieldValues.get(level));
                        taskDetailsBean1.setTaskDescription(statusCompletedFieldValues.get(level));
                        Log.i("ws123", "taskDetailsBean1 reference  +++>>>   " + taskDetailsBean1);
                        status_list.add(taskDetailsBean1);
                    }
                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendStatus_webservice  statusCompletedFieldValues Exception : " + e.getMessage(), "WARN", null);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendStatus_webservice  statusCompletedFieldValues Exception : " + e.getMessage(), "WARN", null);
                }
            }
            JSONObject jsonObject4 = new JSONObject();
            if (status_signature != null && !status_signature.equalsIgnoreCase(null) && !status_signature.equalsIgnoreCase("")) {
                try {
                    TaskDetailsBean taskbean = (TaskDetailsBean) taskDetailsBean.clone();
                    Log.i("ws123", "taskDetailsBean1 reference signalID +++>>>   " + taskbean.getSignalid());
                    taskbean.setMimeType("image");
                    taskbean.setTaskDescription(status_signature);
                    taskbean.setTaskRequestType("signature");
                    jsonObject4.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(status_signature)));
                    jsonObject4.put("taskFileExt", "jpg");
                    jsonObject.put("signatures", jsonObject4);
                    status_list.add(taskbean);
                    taskDetailsBean.setCustomerSignature(status_signature);

                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendStatus_webservice  status_signature Exception : " + e.getMessage(), "WARN", null);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendStatus_webservice  status_signature Exception : " + e.getMessage(), "WARN", null);
                }
            }
            JSONObject jsonObject5 = new JSONObject();
            if (photo_signature != null && !photo_signature.equalsIgnoreCase(null) && !photo_signature.equalsIgnoreCase("")) {
                try {
                    TaskDetailsBean taskbean1 = (TaskDetailsBean) taskDetailsBean.clone();
                    taskbean1.setMimeType("image");
                    taskbean1.setTaskRequestType("photo");
                    taskbean1.setTaskDescription(photo_signature);
                    jsonObject5.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(photo_signature)));
                    jsonObject5.put("taskFileExt", "jpg");
                    jsonObject.put("photos", jsonObject5);
                    status_list.add(taskbean1);
                    taskDetailsBean.setPhotoPath(photo_signature);
                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "photo_signature  statusCompletedFieldValues Exception : " + e.getMessage(), "WARN", null);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "photo_signature  statusCompletedFieldValues Exception : " + e.getMessage(), "WARN", null);
                }
            }
            JSONObject jsonObject6 = new JSONObject();
            if (tech_signature != null && !tech_signature.equalsIgnoreCase(null) && !tech_signature.equalsIgnoreCase("")) {
                try {
                    TaskDetailsBean taskbean2 = (TaskDetailsBean) taskDetailsBean.clone();
                    taskbean2.setMimeType("image");
                    taskbean2.setTaskRequestType("technicianSignature");
                    taskbean2.setTaskDescription(tech_signature);
                    jsonObject6.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(tech_signature)));
                    jsonObject6.put("taskFileExt", "jpg");
                    jsonObject.put("technicianSignatures", jsonObject6);
                    status_list.add(taskbean2);
                    taskDetailsBean.setTechnicianSignature(tech_signature);
                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendStatus_webservice  tech_signature Exception : " + e.getMessage(), "WARN", null);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendStatus_webservice  tech_signature Exception : " + e.getMessage(), "WARN", null);
                }
            }
            JSONObject jsonObject7 = new JSONObject();
            if (observation_path != null && !observation_path.equalsIgnoreCase(null) && !observation_path.equalsIgnoreCase("")) {
                try {
                    TaskDetailsBean taskbean2 = (TaskDetailsBean) taskDetailsBean.clone();
                    taskbean2.setMimeType("image");
                    taskbean2.setTaskRequestType("observation");
                    taskbean2.setTaskDescription(observation_path);
                    String listObservation = "";
                    if (Appreference.observation_list != null && !Appreference.observation_list.equals("")) {
                        String[] myObservation = new String[Appreference.observation_list.size()];
                        myObservation = Appreference.observation_list.toArray(myObservation);
                        JSONArray Multi_array = new JSONArray();
                        if (myObservation != null) {
                            for (int i = 0; i < myObservation.length; i++) {
                                JSONObject jsonObject_sketch = new JSONObject();
                                jsonObject_sketch.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(myObservation[i])));
                                jsonObject_sketch.put("taskFileExt", "jpg");
                                Multi_array.put(i, jsonObject_sketch);
                            }
                        }
                        jsonObject.put("observationImage", Multi_array);

                        listObservation = Arrays.toString(myObservation);
                        listObservation = listObservation.substring(1, listObservation.length() - 1);
                    }

                   /* jsonObject7.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(observation_path)));
                    jsonObject7.put("taskFileExt", "jpg");
                    jsonObject.put("observationImage", jsonObject7);
                    status_list.add(taskbean2);*/
                    taskDetailsBean.setObservation(listObservation);
                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendStatus_webservice  observation_path Exception : " + e.getMessage(), "WARN", null);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendStatus_webservice  observation_path Exception : " + e.getMessage(), "WARN", null);
                }
            }
            JSONObject jsonObject8 = new JSONObject();
            if (Action_Taken_path != null && !Action_Taken_path.equalsIgnoreCase(null) && !Action_Taken_path.equalsIgnoreCase("")) {
                try {
                    TaskDetailsBean taskbean2 = (TaskDetailsBean) taskDetailsBean.clone();
                    taskbean2.setMimeType("image");
                    taskbean2.setTaskRequestType("actionTaken");
                    taskbean2.setTaskDescription(Action_Taken_path);
                    String listActionTaken = "";
                    if (Appreference.Action_Taken_list != null && !Appreference.Action_Taken_list.equals("")) {
                        String[] myactionTaken = new String[Appreference.Action_Taken_list.size()];
                        myactionTaken = Appreference.Action_Taken_list.toArray(myactionTaken);
                        JSONArray Multi_array = new JSONArray();
                        if (myactionTaken != null) {
                            for (int i = 0; i < myactionTaken.length; i++) {
                                JSONObject jsonObject_sketch = new JSONObject();
                                jsonObject_sketch.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(myactionTaken[i])));
                                jsonObject_sketch.put("taskFileExt", "jpg");
                                Multi_array.put(jsonObject_sketch);
                            }
                        }
                        jsonObject.put("actionTakenImage", Multi_array);
                        listActionTaken = Arrays.toString(myactionTaken);
                        listActionTaken = listActionTaken.substring(1, listActionTaken.length() - 1);

                    }
                    /*jsonObject8.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(Action_Taken_path)));
                    jsonObject8.put("taskFileExt", "jpg");
                    jsonObject.put("actionTakenImage", jsonObject8);
                    status_list.add(taskbean2);*/
                    taskDetailsBean.setActionTaken(listActionTaken);
                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendStatus_webservice  Action_Taken_path Exception : " + e.getMessage(), "WARN", null);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendStatus_webservice  Action_Taken_path Exception : " + e.getMessage(), "WARN", null);
                }
            }
            JSONObject jsonObject9 = new JSONObject();
            if (customerRemarks_path != null && !customerRemarks_path.equalsIgnoreCase(null) && !customerRemarks_path.equalsIgnoreCase("")) {
                Log.i("Eod", "customerRemarks_path 5 " + customerRemarks_path);
                try {
                    TaskDetailsBean taskbean2 = (TaskDetailsBean) taskDetailsBean.clone();
                    taskbean2.setMimeType("image");
                    taskbean2.setTaskRequestType("customerRemarks");
                    taskbean2.setTaskDescription(customerRemarks_path);
                    String listCustomerRemarks = "";
                    if (Appreference.customerRemarks_list != null && !Appreference.customerRemarks_list.equals("")) {
                        String[] mycustomerRemarks = new String[Appreference.customerRemarks_list.size()];
                        mycustomerRemarks = Appreference.customerRemarks_list.toArray(mycustomerRemarks);
                        JSONArray Multi_array = new JSONArray();
                        if (mycustomerRemarks != null) {
                            for (int i = 0; i < mycustomerRemarks.length; i++) {
                                JSONObject jsonObject_sketch = new JSONObject();
                                jsonObject_sketch.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(mycustomerRemarks[i])));
                                jsonObject_sketch.put("taskFileExt", "jpg");
                                Multi_array.put(jsonObject_sketch);
                            }
                        }
                        jsonObject.put("remarksImage", Multi_array);
                        listCustomerRemarks = Arrays.toString(mycustomerRemarks);
                        listCustomerRemarks = listCustomerRemarks.substring(1, listCustomerRemarks.length() - 1);
                    }
                   /* jsonObject9.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(customerRemarks_path)));
                    jsonObject9.put("taskFileExt", "jpg");
                    jsonObject.put("remarksImage", jsonObject9);
                    status_list.add(taskbean2);*/
                    taskDetailsBean.setCustomerRemarks(listCustomerRemarks);
                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendStatus_webservice  customerRemarks_path Exception : " + e.getMessage(), "WARN", null);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendStatus_webservice  customerRemarks_path Exception : " + e.getMessage(), "WARN", null);
                }
            }
            Log.i("travel123", "synopsis_path ===>" + synopsis_path);
            JSONObject jsonObject10 = new JSONObject();
            if (synopsis_path != null && !synopsis_path.equalsIgnoreCase(null) && !synopsis_path.equalsIgnoreCase("")) {
                try {
                    TaskDetailsBean taskbean2 = (TaskDetailsBean) taskDetailsBean.clone();
                    taskbean2.setMimeType("image");
                    taskbean2.setTaskRequestType("synopsis");
                    taskbean2.setTaskDescription(synopsis_path);
                    String listSynopsis = "";
                    if (Appreference.Synopsis_list != null && !Appreference.Synopsis_list.equals("")) {
                        String[] mysynopsis = new String[Appreference.Synopsis_list.size()];
                        mysynopsis = Appreference.Synopsis_list.toArray(mysynopsis);
                        JSONArray Multi_array = new JSONArray();
                        if (mysynopsis != null) {
                            for (int i = 0; i < mysynopsis.length; i++) {
                                JSONObject jsonObject_sketch = new JSONObject();
                                jsonObject_sketch.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(mysynopsis[i])));
                                jsonObject_sketch.put("taskFileExt", "jpg");
                                Multi_array.put(jsonObject_sketch);
                            }
                        }
                        jsonObject.put("synopsisImage", Multi_array);
                        listSynopsis = Arrays.toString(mysynopsis);
                        listSynopsis = listSynopsis.substring(1, listSynopsis.length() - 1);
                    }
                   /* jsonObject10.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(synopsis_path)));
                    jsonObject10.put("taskFileExt", "jpg");
                    jsonObject.put("synopsisImage", jsonObject10);
                    status_list.add(taskbean2);*/
                    taskDetailsBean.setSynopsis(listSynopsis);
                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendStatus_webservice  synopsis_path Exception : " + e.getMessage(), "WARN", null);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendStatus_webservice  synopsis_path Exception : " + e.getMessage(), "WARN", null);
                }
            }
            Log.i("listobservers", "ownerOfTask ** " + ownerOfTask);
            Log.i("userlist", "grouptaskmember() $$ " + grouptaskmember());
            listOfObservers.clear();
            TaskDetailsBean My_Owner = new TaskDetailsBean();
            String taskMemberList = "";
            taskMemberList = grouptaskmember();
            String Query = "Select * from projectHistory where projectId ='" + projectId + "' and taskId = '" + webtaskId + "'";
            My_Owner = VideoCallDataBase.getDB(context).getDetails_to_complete_project(Query);

            Log.i("userlist", "taskMemberList==> 1 " + My_Owner.getTaskMemberList());
            Log.i("userlist", "taskMemberList==> 1 " + taskMemberList);
            Log.i("userlist", "project_toUsers==> 1 " + project_toUsers);
            if (My_Owner.getOwnerOfTask() != null && !My_Owner.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                listOfObservers.add(My_Owner.getOwnerOfTask());
                if (status != null && status.equalsIgnoreCase("8")) {
                    project_toUsers = "";
                    project_toUsers = listTaskMembers();
                    taskDetailsBean.setGroupTaskMembers(project_toUsers);
                    Log.i("userlist", "project_toUsers 1 " + project_toUsers);
                    if (taskMemberList != null) {
                        VideoCallDataBase.getDB(context).updateaccept("update projectHistory set taskMemberList='" + project_toUsers + "' where projectId='" + projectId + "' and taskId='" + webtaskId + "'");
                    }
                } else {
                    project_toUsers = taskMemberList;
                    taskDetailsBean.setGroupTaskMembers(taskMemberList);
                }
            } else {
                listOfObservers.add(taskMemberList);
                taskDetailsBean.setGroupTaskMembers(taskMemberList);
            }
            Log.i("listobservers", "ownerOfTask ** " + listOfObservers);
            if (status.equalsIgnoreCase("9")) {
                    /*DB Update*/
                String query = "select * from projectStatus where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and status = '7'";
                TaskDetailsBean bean = VideoCallDataBase.getDB(context).getActivityTimeFromStatus(query);
                if (bean != null) {
                    if (ActivityEnddate != null && !ActivityEnddate.equalsIgnoreCase("")) {
                        Log.i("output123", "projectUpdate travel====>" + bean.getActivityStartTime());
                        Log.i("output123", "projectUpdate travel====>" + bean.getActivityEndTime());
                        if (!isNetworkAvailable()) {
                            if (bean.getWssendstatus() != null && bean.getWssendstatus().equalsIgnoreCase("000")) {
                                SimpleDateFormat simpleDateFormat_1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                                String curr_date = simpleDateFormat_1.format(new Date());
                                Log.i("travel123", "setWssendstatus set successfully===>" + isNetworkAvailable());
                                String date_new = curr_date;
                                String signal_Id = Utility.getSessionID();
                                String task_description = "Gathering Details...";
                                String queryUpdate_1 = "update projectStatus set travelEndTime='" + ActivityEnddate + "' , wssendstatus='000' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                                String queryUpdate_2 = "update projectStatus set dateStatus='7' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                                String queryUpdate_3 = "update projectStatus set datenow='" + date_new + "' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                                String queryUpdate_4 = "update projectStatus set signalId='" + signal_Id + "' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                                String queryUpdate_5 = "update projectStatus set taskDescription='" + task_description + "' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                                Log.i("output123", "projectUpdate queryUpdate_1 " + queryUpdate_1);
                                Log.i("output123", "projectUpdate queryUpdate_2 " + queryUpdate_2);

                                String queryUpdate_6 = "update projectStatus set endDateLatitude='" + taskDetailsBean.getEndDateLatitude() + "' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                                String queryUpdate_7 = "update projectStatus set endDateLongitude='" + taskDetailsBean.getEndDateLongitude() + "' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";

                                Log.i("output123", "projectUpdate query_1 " + queryUpdate_6);
                                Log.i("output123", "projectUpdate query_1 " + queryUpdate_7);
                                VideoCallDataBase.getDB(context).updateaccept(queryUpdate_6);
                                VideoCallDataBase.getDB(context).updateaccept(queryUpdate_7);

                                VideoCallDataBase.getDB(context).updateaccept(queryUpdate_2);
                                VideoCallDataBase.getDB(context).updateaccept(queryUpdate_3);
                                VideoCallDataBase.getDB(context).updateaccept(queryUpdate_4);
                                VideoCallDataBase.getDB(context).updateaccept(queryUpdate_5);
                                VideoCallDataBase.getDB(context).updateaccept(queryUpdate_1);
                            } else {
                                SimpleDateFormat simpleDateFormat_1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                                String curr_date = simpleDateFormat_1.format(new Date());
                                Log.i("travel123", "setWssendstatus set successfully===>" + isNetworkAvailable());
                                String date_new = curr_date;
                                String signal_Id = Utility.getSessionID();
                                String task_description = "Gathering Details...";
                                String queryUpdate_1 = "update projectStatus set travelEndTime='" + ActivityEnddate + "' , wssendstatus='000' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                                String queryUpdate_2 = "update projectStatus set dateStatus='9' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                                String queryUpdate_3 = "update projectStatus set datenow='" + date_new + "' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                                String queryUpdate_4 = "update projectStatus set signalId='" + signal_Id + "' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                                String queryUpdate_5 = "update projectStatus set taskDescription='" + task_description + "' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                                Log.i("output123", "projectUpdate queryUpdate_1 " + queryUpdate_1);
                                Log.i("output123", "projectUpdate queryUpdate_2 " + queryUpdate_2);

                                String queryUpdate_6 = "update projectStatus set endDateLatitude='" + taskDetailsBean.getEndDateLatitude() + "' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                                String queryUpdate_7 = "update projectStatus set endDateLongitude='" + taskDetailsBean.getEndDateLongitude() + "' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";

                                Log.i("output123", "projectUpdate query_1 " + queryUpdate_6);
                                Log.i("output123", "projectUpdate query_1 " + queryUpdate_7);
                                VideoCallDataBase.getDB(context).updateaccept(queryUpdate_6);
                                VideoCallDataBase.getDB(context).updateaccept(queryUpdate_7);

                                VideoCallDataBase.getDB(context).updateaccept(queryUpdate_2);
                                VideoCallDataBase.getDB(context).updateaccept(queryUpdate_3);
                                VideoCallDataBase.getDB(context).updateaccept(queryUpdate_4);
                                VideoCallDataBase.getDB(context).updateaccept(queryUpdate_5);
                                VideoCallDataBase.getDB(context).updateaccept(queryUpdate_1);
                            }
//                            VideoCallDataBase.getDB(context).update_enddate_status(ActivityEnddate,projectId,webtaskId,String.valueOf(Appreference.loginuserdetails.getId()));
                        } else {
                            Log.i("location", "status $$$^ " + status);
                            String queryUpdate_1 = "update projectStatus set endDateLatitude='" + taskDetailsBean.getEndDateLatitude() + "' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                            String queryUpdate_2 = "update projectStatus set endDateLongitude='" + taskDetailsBean.getEndDateLongitude() + "' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";

                            Log.i("output123", "projectUpdate query_1 " + queryUpdate_1);
                            Log.i("output123", "projectUpdate query_1 " + queryUpdate_2);
                            VideoCallDataBase.getDB(context).updateaccept(queryUpdate_1);
                            VideoCallDataBase.getDB(context).updateaccept(queryUpdate_2);

                            String queryUpdate = "update projectStatus set travelEndTime='" + ActivityEnddate + "' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                            Log.i("output123", "projectUpdate query " + queryUpdate);
                            VideoCallDataBase.getDB(context).updateaccept(queryUpdate);
                        }
                    }
                }
            } else {
                Log.i("location", "status $$$^^ " + status);
                    /*DB Insert*/
                VideoCallDataBase.getDB(context).insertORupdateStatus(taskDetailsBean);
                if (status.equalsIgnoreCase("1") || status.equalsIgnoreCase("3")) {
                    if (!isNetworkAvailable()) {
                        SimpleDateFormat simpleDateFormat_1 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                        String curr_date = simpleDateFormat_1.format(new Date());
                        Log.i("travel123", "setWssendstatus set successfully===>" + isNetworkAvailable());
                        String date_new = curr_date;
                        String signal_Id = Utility.getSessionID();
                        String task_description = "Gathering Details...";
                        String queryUpdate_1 = "update projectStatus set travelEndTime='" + ActivityEnddate + "' , wssendstatus='000' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                        String queryUpdate_2 = "update projectStatus set dateStatus='9' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                        String queryUpdate_3 = "update projectStatus set datenow='" + date_new + "' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                        String queryUpdate_4 = "update projectStatus set signalId='" + signal_Id + "' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                        String queryUpdate_5 = "update projectStatus set taskDescription='" + task_description + "' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                        Log.i("output123", "projectUpdate queryUpdate_1 " + queryUpdate_1);
                        Log.i("output123", "projectUpdate queryUpdate_2 " + queryUpdate_2);
                        VideoCallDataBase.getDB(context).updateaccept(queryUpdate_2);
                        VideoCallDataBase.getDB(context).updateaccept(queryUpdate_3);
                        VideoCallDataBase.getDB(context).updateaccept(queryUpdate_4);
                        VideoCallDataBase.getDB(context).updateaccept(queryUpdate_5);
                        VideoCallDataBase.getDB(context).updateaccept(queryUpdate_1);
                    } else {
                        String queryUpdate = "update projectStatus set travelEndTime='" + ActivityEnddate + "' where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                        VideoCallDataBase.getDB(context).updateaccept(queryUpdate);
                    }
                }
            }
            if (status.equalsIgnoreCase("10")) {
                VideoCallDataBase.getDB(context).eod_Update(machine_model, machine_serialno, machine_description, projectId, webtaskId, machion_make_edit);
            }
            if (isNetworkAvailable()) {
                try {
                    Appreference.printLog("taskStatus", jsonObject.toString(), "Request", null);
                    Appreference.jsonRequestSender.taskStatus(EnumJsonWebservicename.taskStatus, jsonObject, status_list, taskDetailsBean, NewTaskConversation.this);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendStatus_webservice taskStatus Exception : " + e.getMessage(), "WARN", null);
                }
            } else {
//                cancelDialog();
                Toast.makeText(NewTaskConversation.this, "Check your internet connection", Toast.LENGTH_SHORT).show();
                VideoCallDataBase.getDB(context).update_Project_history(taskDetailsBean);
                Log.i("responce", "travel_endDate " + travel_endDate + " Remarks==> " + taskDetailsBean.getCustomerRemarks());
                Log.i("sketch123", "  taskDetailsBean.getObservation()*****" + taskDetailsBean.getObservation());
                Log.i("sketch123", "taskDetailsBean.getActionTaken()*****" + taskDetailsBean.getActionTaken());
                Log.i("sketch123", "taskDetailsBean.getCustomerRemarks()*****" + taskDetailsBean.getCustomerRemarks());
                Log.i("sketch123", " taskDetailsBean.getSynopsis()****" + taskDetailsBean.getSynopsis());

                NOInternet_InsertConversaion("text", taskDetailsBean.getTaskDescription(), "", taskDetailsBean.getSignalid(), 0);
                if (taskDetailsBean.getCustomerRemarks() != null && !taskDetailsBean.getCustomerRemarks().equalsIgnoreCase("") && !taskDetailsBean.getCustomerRemarks().equalsIgnoreCase("null")
                        && taskDetailsBean.getProjectStatus() != null && !taskDetailsBean.getProjectStatus().equalsIgnoreCase("10")) {
                    if (projectCurrentStatus != null && !projectCurrentStatus.equalsIgnoreCase("Completed") && !isremarksSketchselected && !isRemarkstextselected)
                        NOInternet_InsertConversaion("text", taskDetailsBean.getCustomerRemarks(), "", Utility.getSessionID(), 0);
                }
                if (travel_date_details != null && travel_date_details.size() > 0) {
                    int sec = 0;
                    for (final String travel : travel_date_details) {
                        sec = sec + 2000;
                        handler.postDelayed(new Runnable() {
                            @Override
                            public void run() {
                                NOInternet_InsertConversaion("text", travel, "", Utility.getSessionID(), 0);
                            }
                        }, sec);
                    }
                }
                if (status.equalsIgnoreCase("2") || status.equalsIgnoreCase("4")) {
                    taskDetailsBean.setTravelStartTime(ActivityStartdate);
                    taskDetailsBean.setTaskDescription("Gathering Details...");
                    taskDetailsBean.setProjectStatus("7");
                    taskDetailsBean.setSignalid(Utility.getSessionID());
                    taskDetailsBean.setWssendstatus("000");
                    VideoCallDataBase.getDB(context).insertORupdateStatus(taskDetailsBean);
                }
                if (status.equalsIgnoreCase("1") || status.equalsIgnoreCase("3")) {
                    startHoldOrPauseAlarmManager(timer, webtaskId, projectCurrentStatus, taskDetailsBean.getProjectId(), "IntervalTimer");
                    ShowHoldOrPauseTimerDisplay();

                }
                 /*code started for estimTimer*/
                if (status.equalsIgnoreCase("0")) {
                    String EstimatedTimeQuery = "update taskDetailsInfo set estimCompletion='0' where projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
                    Log.i("tone123", "updateSnoozeTime_query***********" + EstimatedTimeQuery);
                    VideoCallDataBase.getDB(context).updateaccept(EstimatedTimeQuery);
                }
               /* if (status != null && status.equalsIgnoreCase("2") || status.equalsIgnoreCase("4")) {
                    String getHoldPause_Interval_value = getHoldPauseInterval(status);
                    String EstimatedTimeQuery = "update taskDetailsInfo set estimTime='" + getHoldPause_Interval_value + "' where (taskStatus='Started') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
                    Log.i("tone123", "updateSnoozeTime_query***********" + EstimatedTimeQuery);
                    VideoCallDataBase.getDB(context).updateaccept(EstimatedTimeQuery);
                }*/
                if (!status.equalsIgnoreCase("1") && !status.equalsIgnoreCase("3")) {

                    String taskQuery_count = "select * from taskDetailsInfo where projectId='" + projectId + "'and taskId= '" + webtaskId + "' and estimCompletion='1'";
                    int getEstimatedTimerCompleted = VideoCallDataBase.getDB(context).getCountForTravelEntry(taskQuery_count);
                    if (getEstimatedTimerCompleted == 0) {
                        startHoldOrPauseAlarmManager(Appreference.EstimTimerValue, webtaskId, projectCurrentStatus, taskDetailsBean.getProjectId(), "EstimTimer");
                        ShowEstimTimerDisplay();
                    }
                }
                /*code ended for estimTimer*/

            }
        } catch (JSONException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "sendStatus_webservice Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "sendStatus_webservice Exception : " + e.getMessage(), "WARN", null);
        }
    }

    private void showEstimWishAlert(String projectId, String taskId) {
        try {
            Log.i("estimtone123", "***====showEstimWishAlert inside==****");
            Log.i("remain123", "***====showEstimWishAlert inside==****");

            String taskQuery = "select EstimAlarm from taskDetailsInfo where (taskStatus='Started') and projectId='" + projectId + "'and taskId= '" + taskId + "'";
            String getEstimetedTimeAlertShownOrNot = VideoCallDataBase.getDB(context).getAlertShownstatus(taskQuery, "EstimAlarm");

            Log.i("estimtone123", " ShowEstimWishAlert getEstimetedTimeAlertShownOrNot taskQuery==>" + taskQuery);
            Log.i("estimtone123", "ShowEstimWishAlert getEstimetedTimeAlertShownOrNot ==>" + getEstimetedTimeAlertShownOrNot);

            /********************************************/
            /*******************added 5thMar18 ********/
            /********************************************/

            /*start for RemainingTime estim timer*/
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String getLastEndTime = sdf.format(new Date());

            /*getLastEndTime interval details*/
            String Expected_HMS;
//            String taskQueryRemainingTime = "select estimRemainingTime from taskDetailsInfo where (taskStatus='Started') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
//            String getLastEndTime = VideoCallDataBase.getDB(context).getValuefromDBEntry(taskQueryRemainingTime, "estimRemainingTime");
            String initialEstimTime = "select estimTime from taskDetailsInfo where (taskStatus='Started') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
            String getEstimatedTimer = VideoCallDataBase.getDB(context).getValuefromDBEntry(initialEstimTime, "estimTime");
            Log.i("remain123", " showEstimWishAlert  getEstimatedTime==============>" + getEstimatedTimer);
            Date date2 = null;
            Date date1 = null;
            try {
                date1 = sdf.parse(getLastEndTime);
                date2 = sdf.parse(getEstimatedTimer);
            } catch (Exception e) {
                Log.i("remain123", " showEstimWishAlert  data parse Exception==============>" + e.getMessage());
                e.printStackTrace();
            }
            final long mills = date2.getTime() - date1.getTime();
            final long seconds = 1000;
            Log.i("remain123", " showEstimWishAlert  mills==============>" + mills);

            if (mills > 0) {
                String hms = String.format("%02d:%02d:%02d", TimeUnit.MILLISECONDS.toHours(mills), TimeUnit.MILLISECONDS.toMinutes(mills) - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(mills)), TimeUnit.MILLISECONDS.toSeconds(mills) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(mills)));
                Log.i("remain123", "Remaining Time" + hms);
//                    timer = hms;
                Expected_HMS = hms;
            } else
                Expected_HMS = "";
            Log.i("remain123", " showEstimWishAlert  Expected_HMS==============>" + Expected_HMS);

            if (Expected_HMS != null & !Expected_HMS.equalsIgnoreCase("")) {
                Calendar calendar = Calendar.getInstance();
                SimpleDateFormat mdformat = new SimpleDateFormat("yyyy-MM-dd");
                String strDate = mdformat.format(calendar.getTime());
                Expected_HMS = strDate + " " + Expected_HMS;
                String EstimatedRemainingTimeQuery = "update taskDetailsInfo set estimRemainingTime='" + Expected_HMS + "' where (taskStatus='Started') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
                Log.i("remain123", "updateSnoozeTime_query***********" + EstimatedRemainingTimeQuery);
                VideoCallDataBase.getDB(context).updateaccept(EstimatedRemainingTimeQuery);
            }
            Log.i("remain123", "showEstimWishAlert  Expected_HMS DB Updated==============>");

            /********************************************/
            /*end for RemainingTime estim timer*/
            /********************************************/


            if ((getEstimetedTimeAlertShownOrNot != null && !getEstimetedTimeAlertShownOrNot.equalsIgnoreCase("")
                    && !getEstimetedTimeAlertShownOrNot.equalsIgnoreCase(null) && getEstimetedTimeAlertShownOrNot.equalsIgnoreCase("1"))) {

                    /*update query : set alarm toned*/
                String AlarmRingedUpdateQuery = "update taskDetailsInfo set EstimAlarm='0' where projectId='" + projectId + "'and taskId= '" + taskId + "'";
                Log.i("estimtone123", "ShowEstimWishAlert updateSnoozeTime_query***********" + AlarmRingedUpdateQuery);
                VideoCallDataBase.getDB(context).updateaccept(AlarmRingedUpdateQuery);

                /*update Query : set Task completed before the EstimatedHours*/
                String EstimatedTimeQuery = "update taskDetailsInfo set estimCompletion='1' where (taskStatus='Started') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
                Log.i("estimtone123", "ShowEstimWishAlert updateSnoozeTime_query***********" + EstimatedTimeQuery);
                VideoCallDataBase.getDB(context).updateaccept(EstimatedTimeQuery);
                EstimTimerstop();

                MainActivity.startAlarmRingTone();

                String get_OracleprojectId_query = "select oracleProjectId from projectDetails where loginuser = '" + Appreference.loginuserdetails.getEmail() + "'and projectId='" + projectId + "'";
                String OracleIdForProjectId = VideoCallDataBase.getDB(context).getprojectIdForOracleID(get_OracleprojectId_query);
                String quryActivity1 = "select oracleTaskId from projectHistory where projectId='" + projectId + "' and taskId= '" + taskId + "'";
                String oracleTaskId = VideoCallDataBase.getDB(getApplication()).getProjectParentTaskId(quryActivity1);

                final Dialog dialog = new Dialog(NewTaskConversation.this);
                dialog.setContentView(R.layout.conngrzalert);
                dialog.setTitle(taskName);
                dialog.setCancelable(false);
                Button dialogButtonOK = (Button) dialog.findViewById(R.id.dismiss_congrz);
                TextView Oracle_Project_ID = (TextView) dialog.findViewById(R.id.project_id_alert_new);
                TextView Oracle_Task_ID = (TextView) dialog.findViewById(R.id.taskid_alert_new);
                TextView alert_Time = (TextView) dialog.findViewById(R.id.wish_currentTime);
                Oracle_Project_ID.setText("Job Card No : " + OracleIdForProjectId);
                Oracle_Task_ID.setText("Activity Code : " + oracleTaskId);
                Calendar c = Calendar.getInstance();
                SimpleDateFormat df = new SimpleDateFormat("dd MMM yyyy hh:mm");
                String formattedDate = df.format(c.getTime());
                alert_Time.setText(formattedDate);
                dialogButtonOK.setOnClickListener(new View.OnClickListener() {
                    @Override
                    public void onClick(View v) {
                        dialog.dismiss();
                    }
                });
                dialog.show();
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "ShowMyId clickListener Exception : " + e.getMessage(), "WARN", null);
        }
    }

    private String getOracleTaskIdForProjectId() {
        String quryActivity1 = "select oracleTaskId from projectHistory where projectId='" + projectId + "' and taskId= '" + webtaskId + "'";
        String oracleTaskId = VideoCallDataBase.getDB(getApplication()).getProjectParentTaskId(quryActivity1);
        return oracleTaskId;
    }

    private void insertCell(PdfPTable table, String text, int align, int colspan, Font font) {

        //create a new cell with the specified Text and Font
        PdfPCell cell = new PdfPCell(new Phrase(text.trim(), font));
        //set the cell alignment
        cell.setHorizontalAlignment(align);
//        cell.setFixedHeight(50f);
        //set the cell column span in case you want to merge two or more cells
        cell.setColspan(colspan);
        //in case there is no text and you wan to create an empty row
        if (text.trim().equalsIgnoreCase("")) {
            cell.setMinimumHeight(10f);
        }
        //add the call to the table
        table.addCell(cell);

    }

    private void gridAccess() {
        try {
            if (((taskType != null && taskType.equalsIgnoreCase("Group")) && (groupMemberAccess != null && groupMemberAccess.getRespondText() != null && groupMemberAccess.getRespondText().contains("0")) && !Appreference.loginuserdetails.getUsername().equalsIgnoreCase(ownerOfTask))) {
                des.setClickable(false);
                des.setFocusable(false);
                des.setCursorVisible(false);
                des.setHint("Access Denied");
                Log.i("groupMemberAccess", "webtaskId!! " + webtaskId);
            } else {
                Log.i("groupMemberAccess", "webtaskId -->!! " + webtaskId);
                des.setClickable(true);
                des.setFocusable(true);
                des.setCursorVisible(true);
                des.setHint("");
            }
            if ((taskType != null && taskType.equalsIgnoreCase("Group") && groupMemberAccess != null && groupMemberAccess.getChangeTaskName() != null && groupMemberAccess.getChangeTaskName().contains("0"))) {
                Log.i("groupMemberAccess", "getChangeTaskName   " + groupMemberAccess.getChangeTaskName() + " " + webtaskId);
                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        sendTemplate.setVisibility(View.GONE);
                        Log.i("groupMemberAccess", "groupMemberAccess.getChangeTaskName()!! " + groupMemberAccess.getChangeTaskName());
                    }
                });
            } else if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) && taskType != null && taskType.equalsIgnoreCase("Group") && !chat) {
                if (!isProjectFromOracle)
                    sendTemplate.setVisibility(View.VISIBLE);
                Log.i("groupMemberAccess", "groupMemberAccess.sendTemplate()!! ");
            }
            if ((taskType != null && taskType.equalsIgnoreCase("Group") && groupMemberAccess != null && groupMemberAccess.getAddObserver() != null && groupMemberAccess.getAddObserver().contains("0"))) {
                Log.i("groupMemberAccess", "getChangeTaskName   " + groupMemberAccess.getAddObserver() + " " + webtaskId);
                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        addObserver.setVisibility(View.GONE);
                        Log.i("groupMemberAccess", "groupMemberAccess.getAddObserver()!! " + groupMemberAccess.getAddObserver());
                    }
                });
            } else if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) && taskType != null && taskType.equalsIgnoreCase("Group")) {
                if (webtaskId != null && parentTaskId != null && webtaskId.equalsIgnoreCase(parentTaskId)) {
                    addObserver.setVisibility(View.GONE);
                } else {
                    Log.i("groupMemberAccess", "groupMemberAccess.addObserver()!! ");
                    if ((taskType != null && !taskType.equalsIgnoreCase("Group")) && !chat && !isProjectFromOracle) {
                        addObserver.setVisibility(View.VISIBLE);
                    } else {
                        addObserver.setVisibility(View.GONE);
                    }
                }
            }

            if ((taskType != null && taskType.equalsIgnoreCase("Group") && groupMemberAccess != null && groupMemberAccess.getRespondDateChange() != null && groupMemberAccess.getRespondDateChange().contains("0"))) {
                Log.i("groupMemberAccess", "tab_datechangerequest   " + groupMemberAccess.getRespondDateChange() + " " + webtaskId);
                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        tab_datechangerequest.setVisibility(View.GONE);
                        Log.i("groupMemberAccess", "groupMemberAccess.tab_datechangerequest()!! " + groupMemberAccess.getRespondDateChange());
                    }
                });
            } else if (!ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                Log.i("tab_datechangerequest", "tab_datechangerequest 3 ");
                if (!project)
                    tab_datechangerequest.setVisibility(View.VISIBLE);
                Log.i("groupMemberAccess", "groupMemberAccess.tab_datechangerequest()!! ");
            }
//            Log.i("groupMemberAccess", "groupMemberAccess.tab_datechangerequest()!!! " + groupMemberAccess.getRespondDateChange());
            if ((taskType != null && taskType.equalsIgnoreCase("Group")) && !Appreference.loginuserdetails.getUsername().equalsIgnoreCase(ownerOfTask) && (groupMemberAccess != null && groupMemberAccess.getRespondTask() != null && groupMemberAccess.getRespondTask().contains("0"))) {
                audio.setVisibility(View.GONE);
                photo.setVisibility(View.GONE);
                sketch.setVisibility(View.GONE);
                video.setVisibility(View.GONE);
                doc.setVisibility(View.GONE);
                location.setVisibility(View.GONE);
                Log.i("groupMemberAccess", "assingNew cant reply !!! ");
            } else {
                audio.setVisibility(View.VISIBLE);
                photo.setVisibility(View.VISIBLE);
                sketch.setVisibility(View.VISIBLE);
                video.setVisibility(View.VISIBLE);
                doc.setVisibility(View.VISIBLE);
                location.setVisibility(View.VISIBLE);
            }
            if ((taskType != null && taskType.equalsIgnoreCase("Group")) && !Appreference.loginuserdetails.getUsername().equalsIgnoreCase(ownerOfTask) && (groupMemberAccess != null && groupMemberAccess.getRespondTask() != null && (groupMemberAccess.getRespondTask().contains("1") || groupMemberAccess.getRespondTask().contains("2")))) {
                Log.i("groupMemberAccess", "assingNew cant reply 1 ");
                if ((taskType != null && taskType.equalsIgnoreCase("Group")) && ((groupMemberAccess.getRespondAudio() != null && groupMemberAccess.getRespondAudio().contains("0")))) {
                    audio.setVisibility(View.GONE);
                    Log.i("groupMemberAccess", "assingNew audio !!! ");
                } else {
                    audio.setVisibility(View.VISIBLE);
                }
                if ((taskType != null && taskType.equalsIgnoreCase("Group")) && ((groupMemberAccess.getRespondPhoto() != null && groupMemberAccess.getRespondPhoto().contains("0")))) {
                    photo.setVisibility(View.GONE);
                    Log.i("groupMemberAccess", "assingNew photo !!! ");
                } else {
                    photo.setVisibility(View.VISIBLE);
                }
                if ((taskType != null && taskType.equalsIgnoreCase("Group")) && ((groupMemberAccess.getRespondSketch() != null && groupMemberAccess.getRespondSketch().contains("0")))) {
                    sketch.setVisibility(View.GONE);
                    Log.i("groupMemberAccess", "assingNew sketch !!! ");
                } else {
                    sketch.setVisibility(View.VISIBLE);
                }
                if ((taskType != null && taskType.equalsIgnoreCase("Group")) && ((groupMemberAccess.getRespondVideo() != null && groupMemberAccess.getRespondVideo().contains("0")))) {
                    video.setVisibility(View.GONE);
                    Log.i("groupMemberAccess", "assingNew video !!! ");
                } else {
                    video.setVisibility(View.VISIBLE);
                }
                if ((taskType != null && taskType.equalsIgnoreCase("Group")) && ((groupMemberAccess.getRespondFiles() != null && groupMemberAccess.getRespondFiles().contains("0")))) {
                    doc.setVisibility(View.GONE);
                    Log.i("groupMemberAccess", "assingNew file !!! ");
                } else {
                    doc.setVisibility(View.VISIBLE);
                }
                if ((taskType != null && taskType.equalsIgnoreCase("Group")) && ((groupMemberAccess.getRespondLocation() != null && groupMemberAccess.getRespondLocation().contains("0")))) {
                    location.setVisibility(View.GONE);
                    Log.i("groupMemberAccess", "assingNew location !!! ");
                } else {
                    location.setVisibility(View.VISIBLE);
                }
            }
            if ((taskType != null && taskType.equalsIgnoreCase("Group")) && ((groupMemberAccess != null && groupMemberAccess.getRespondConfCall() != null && groupMemberAccess.getRespondConfCall().contains("0")))) {
                call.setVisibility(View.GONE);
                Log.i("groupMemberAccess", "assingNew call !!! ");
            } else {
                call.setVisibility(View.VISIBLE);
            }
            gridview_text = new ArrayList<>();
            gridviewtaker_text = new ArrayList<>();
            gridview_thump = new ArrayList<>();
            gridviewtaker_thump = new ArrayList<>();

            if (taskType != null && taskType.equalsIgnoreCase("Group") && !project) {
                gridview_text.add("Audio");
                gridview_thump.add(R.drawable.audiofilefilled_32);
                gridview_text.add("Photo");
                gridview_thump.add(R.drawable.photo_grid);
                gridview_text.add("Sketch");
                gridview_thump.add(R.drawable.sketch_grid);
                gridview_text.add("Video");
                gridview_thump.add(R.drawable.video_grid);
                gridview_text.add("File");
                gridview_thump.add(R.drawable.file_grid);
                gridview_text.add("Completion");
                gridview_thump.add(R.drawable.percent_grid);
                if (groupMemberAccess.getRespondConfCall() != null && groupMemberAccess.getRespondConfCall().contains("1")) {
                    gridview_text.add("Call");
                    gridview_thump.add(R.drawable.call_grid);
                }
                if (groupMemberAccess.getRespondDateChange() != null && groupMemberAccess.getRespondDateChange().contains("1")) {
                    gridview_text.add("Dates");
                    gridview_thump.add(R.drawable.date_grid);
                }

                if (groupMemberAccess.getTaskPriority() != null && groupMemberAccess.getTaskPriority().contains("1")) {
                    gridview_text.add("Priority");
                    gridview_thump.add(R.drawable.priority_grid);
                }
                if (groupMemberAccess.getEscalations() != null && groupMemberAccess.getEscalations().contains("1")) {
                    gridview_text.add("Escalations");
                    gridview_thump.add(R.drawable.issue_icon);
                }
                if (groupMemberAccess.getAccessForms() != null && groupMemberAccess.getAccessForms().contains("1")) {
                    gridview_text.add("Forms");
                    gridview_thump.add(R.drawable.forms);
                }
                if (groupMemberAccess.getChatAccess() != null && groupMemberAccess.getChatAccess().contains("1")) {
                    Log.i("gridview", "index Chat ");
                    gridview_text.add("Chat");
                    gridview_thump.add(R.drawable.chat_grid_icon);
                }
                if (groupMemberAccess.getTaskDescriptions() != null && groupMemberAccess.getTaskDescriptions().contains("1")) {
                    gridview_text.add("Task Description");
                    gridview_thump.add(R.drawable.desceiption_grid);
                }
                if (groupMemberAccess.getAccessScheduledCNF() != null && groupMemberAccess.getAccessScheduledCNF().contains("1")) {
                    gridview_text.add("Scheduled Call");
                    gridview_thump.add(R.drawable.missedcall_32);
                }
                if (groupMemberAccess.getAccessReminder() != null && groupMemberAccess.getAccessReminder().contains("1")) {
                    gridview_text.add("Reminder Responses");
                    gridview_thump.add(R.mipmap.ic_reminder_icon);
                }
                if (groupMemberAccess.getAddObserver() != null && groupMemberAccess.getAddObserver().contains("1")) {
                    if (!taskType.equalsIgnoreCase("Group")) {
                        gridview_text.add("Add Observer");
                        gridview_thump.add(R.drawable.addobserver_grid_icon);
                    }
                }
                if (groupMemberAccess.getRespondPrivate() != null && groupMemberAccess.getRespondPrivate().contains("1")) {
                    gridview_text.add("Private");
                    gridview_thump.add(R.drawable.private_chat);
                }
                if (groupMemberAccess.getReassignTask() != null && groupMemberAccess.getReassignTask().contains("1")) {
                    if (!taskType.equalsIgnoreCase("Group")) {
                        gridview_text.add("Reassign");
                        gridview_thump.add(R.drawable.reassign_task_new);
                    }
                }
                gridview_text.add("MoreFields");
                gridview_thump.add(R.drawable.morefields_grid_icon);
                if (groupMemberAccess.getRemindMe() != null && groupMemberAccess.getRemindMe().contains("1")) {
                    gridview_text.add("RemindMe");
                    gridview_thump.add(R.drawable.remind_me);
                }
                if (category != null && category.equalsIgnoreCase("issue")) {
                    gridview_text.add("ViewTask");
                    gridview_thump.add(R.drawable.ic_view_task);
                }

            } else if (isProjectFromOracle && project) {
                Log.i("gridview", "individual owner " + taskType);
                gridview_text.add("Audio");
                gridview_text.add("Photo");
                gridview_text.add("Sketch");
                gridview_text.add("Video");
                gridview_text.add("File");
//                gridview_text.add("Completion");
                gridview_text.add("Call");
                gridview_text.add("Dates");
                gridview_text.add("Priority");
                gridview_text.add("Chat");
                gridview_text.add("Task Description");
                gridview_text.add("Scheduled Call");
                gridview_text.add("Reminder Responses");
                gridview_text.add("Private");
                gridview_text.add("RemindMe");
//                gridview_text.add("Custom1");
                if (category != null && category.equalsIgnoreCase("issue")) {
                    gridview_text.add("ViewTask");
                }
                gridview_thump.add(R.drawable.audiofilefilled_32);
                gridview_thump.add(R.drawable.photo_grid);
                gridview_thump.add(R.drawable.sketch_grid);
                gridview_thump.add(R.drawable.video_grid);
                gridview_thump.add(R.drawable.file_grid);
//                gridview_thump.add(R.drawable.percent_grid);
                gridview_thump.add(R.drawable.call_grid);
                gridview_thump.add(R.drawable.date_grid);
                gridview_thump.add(R.drawable.priority_grid);
                gridview_thump.add(R.drawable.chat_grid_icon);
                gridview_thump.add(R.drawable.desceiption_grid);
                gridview_thump.add(R.drawable.missedcall_32);
                gridview_thump.add(R.mipmap.ic_reminder_icon);
                gridview_thump.add(R.drawable.private_chat);
                gridview_thump.add(R.drawable.remind_me);
                gridview_thump.add(R.drawable.custom);
                if (category != null && category.equalsIgnoreCase("issue")) {
                    gridview_thump.add(R.drawable.ic_view_task);
                }
            } else {
                gridview_text.add("Audio");
                gridview_text.add("Photo");
                gridview_text.add("Sketch");
                gridview_text.add("Video");
                gridview_text.add("File");
                gridview_text.add("Completion");
                gridview_text.add("Call");
                gridview_text.add("Dates");
                gridview_text.add("Priority");
                gridview_text.add("Escalations");
                gridview_text.add("Forms");
                gridview_text.add("Chat");
                gridview_text.add("Task Description");
                gridview_text.add("Scheduled Call");
                gridview_text.add("Reminder Responses");
                gridview_text.add("Add Observer");
                gridview_text.add("Private");
                gridview_text.add("Reassign");
                gridview_text.add("MoreFields");
                gridview_text.add("RemindMe");
                if (category != null && category.equalsIgnoreCase("issue")) {
                    gridview_text.add("ViewTask");
                }

                gridview_thump.add(R.drawable.audiofilefilled_32);
                gridview_thump.add(R.drawable.photo_grid);
                gridview_thump.add(R.drawable.sketch_grid);
                gridview_thump.add(R.drawable.video_grid);
                gridview_thump.add(R.drawable.file_grid);
                gridview_thump.add(R.drawable.percent_grid);
                gridview_thump.add(R.drawable.call_grid);
                gridview_thump.add(R.drawable.date_grid);
                gridview_thump.add(R.drawable.priority_grid);
                gridview_thump.add(R.drawable.issue_icon);
                gridview_thump.add(R.drawable.forms);
                gridview_thump.add(R.drawable.chat_grid_icon);
                gridview_thump.add(R.drawable.desceiption_grid);
                gridview_thump.add(R.drawable.missedcall_32);
                gridview_thump.add(R.mipmap.ic_reminder_icon);
                gridview_thump.add(R.drawable.addobserver_grid_icon);
                gridview_thump.add(R.drawable.private_chat);
                gridview_thump.add(R.drawable.reassign_task_new);
                gridview_thump.add(R.drawable.morefields_grid_icon);
                gridview_thump.add(R.drawable.remind_me);


                if (category != null && category.equalsIgnoreCase("issue")) {
                    gridview_thump.add(R.drawable.ic_view_task);
                }
            }

            Log.i("gridview", "texts  size is # " + gridview_text.size());
            texts = gridview_text.toArray(new String[gridview_text.size()]);
            mThumbIds = gridview_thump.toArray(new Integer[gridview_thump.size()]);
            gridview.setAdapter(new ImageAdapter(texts, mThumbIds, context));

            if (taskType != null && taskType.equalsIgnoreCase("Group") && !project) {

                if (groupMemberAccess.getRespondAudio() != null && groupMemberAccess.getRespondAudio().contains("1")) {
                    gridviewtaker_text.add("Audio");
                    gridviewtaker_thump.add(R.drawable.audiofilefilled_32);
                }
                if (groupMemberAccess.getRespondPhoto() != null && groupMemberAccess.getRespondPhoto().contains("1")) {
                    gridviewtaker_text.add("Photo");
                    gridviewtaker_thump.add(R.drawable.photo_grid);
                }
                if (groupMemberAccess.getRespondSketch() != null && groupMemberAccess.getRespondSketch().contains("1")) {
                    gridviewtaker_text.add("Sketch");
                    gridviewtaker_thump.add(R.drawable.sketch_grid);
                }
                if (groupMemberAccess.getRespondVideo() != null && groupMemberAccess.getRespondVideo().contains("1")) {
                    gridviewtaker_text.add("Video");
                    gridviewtaker_thump.add(R.drawable.video_grid);
                }
                if (groupMemberAccess.getRespondFiles() != null && groupMemberAccess.getRespondFiles().contains("1")) {
                    gridviewtaker_text.add("File");
                    gridviewtaker_thump.add(R.drawable.file_grid);
                }
                gridviewtaker_text.add("Completion");
                gridviewtaker_thump.add(R.drawable.percent_grid);

                if (groupMemberAccess.getRespondConfCall() != null && groupMemberAccess.getRespondConfCall().contains("1")) {
                    gridviewtaker_text.add("Call");
                    gridviewtaker_thump.add(R.drawable.call_grid);
                }
                if (groupMemberAccess.getChatAccess() != null && groupMemberAccess.getChatAccess().contains("1")) {
                    gridviewtaker_text.add("Chat");
                    gridviewtaker_thump.add(R.drawable.chat_grid_icon);
                }
                if (groupMemberAccess.getAccessForms() != null && groupMemberAccess.getAccessForms().contains("1")) {
                    gridviewtaker_text.add("Forms");
                    gridviewtaker_thump.add(R.drawable.forms);
                }
                if (groupMemberAccess.getApproveLeave() != null && groupMemberAccess.getApproveLeave().contains("1")) {
                    gridviewtaker_text.add("Leave");
                    gridviewtaker_thump.add(R.drawable.leave);
                }
                if (groupMemberAccess.getAccessScheduledCNF() != null && groupMemberAccess.getAccessScheduledCNF().contains("1")) {
                    gridviewtaker_text.add("Scheduled Call");
                    gridviewtaker_thump.add(R.drawable.missedcall_32);
                }
                if (groupMemberAccess.getAccessReminder() != null && groupMemberAccess.getAccessReminder().contains("1")) {
                    gridviewtaker_text.add("Reminder Responses");
                    gridviewtaker_thump.add(R.mipmap.ic_reminder_icon);
                }
                if (groupMemberAccess.getRespondPrivate() != null && groupMemberAccess.getRespondPrivate().contains("1")) {
                    gridviewtaker_text.add("Private");
                    gridviewtaker_thump.add(R.drawable.private_chat);
                }
                gridviewtaker_text.add("MoreFields");
                gridviewtaker_thump.add(R.drawable.morefields_grid_icon);
                if (category != null && category.equalsIgnoreCase("issue")) {
                    gridviewtaker_text.add("ViewTask");
                    gridviewtaker_thump.add(R.drawable.ic_view_task);
                }
            } else if (isProjectFromOracle && project) {
                Log.i("gridview", "individual receiver " + taskType);
                gridviewtaker_text.add("Audio");
                gridviewtaker_text.add("Photo");
                gridviewtaker_text.add("Sketch");
                gridviewtaker_text.add("Video");
                gridviewtaker_text.add("File");
                gridviewtaker_text.add("Completion");
                gridviewtaker_text.add("Call");
                gridviewtaker_text.add("Chat");
                gridviewtaker_text.add("Leave");
                gridviewtaker_text.add("Scheduled Call");
//                gridviewtaker_text.add("Forms");
                gridviewtaker_text.add("Reminder Responses");
                gridviewtaker_text.add("Private");
//                gridviewtaker_text.add("moreFields");
//                gridviewtaker_text.add("Custom1");
                if (category != null && category.equalsIgnoreCase("issue")) {
                    gridviewtaker_text.add("ViewTask");
                }


                gridviewtaker_thump.add(R.drawable.audiofilefilled_32);
                gridviewtaker_thump.add(R.drawable.photo_grid);
                gridviewtaker_thump.add(R.drawable.sketch_grid);
                gridviewtaker_thump.add(R.drawable.video_grid);
                gridviewtaker_thump.add(R.drawable.file_grid);
                gridviewtaker_thump.add(R.drawable.percent_grid);
                gridviewtaker_thump.add(R.drawable.call_grid);
                gridviewtaker_thump.add(R.drawable.chat_grid_icon);
                gridviewtaker_thump.add(R.drawable.leave);
                gridviewtaker_thump.add(R.drawable.missedcall_32);
//                gridviewtaker_thump.add(R.drawable.forms);
                gridviewtaker_thump.add(R.mipmap.ic_reminder_icon);
                gridviewtaker_thump.add(R.drawable.private_chat);
//                gridviewtaker_thump.add(R.drawable.ic_rectangle_filled_100);
                gridviewtaker_thump.add(R.drawable.custom);
                if (category != null && category.equalsIgnoreCase("issue")) {
                    gridviewtaker_thump.add(R.drawable.ic_view_task);
                }
            } else {
                gridviewtaker_text.add("Audio");
                gridviewtaker_text.add("Photo");
                gridviewtaker_text.add("Sketch");
                gridviewtaker_text.add("Video");
                gridviewtaker_text.add("File");
                gridviewtaker_text.add("Completion");
                gridviewtaker_text.add("Call");
                gridviewtaker_text.add("Chat");
                gridviewtaker_text.add("Forms");
                gridviewtaker_text.add("Leave");
                gridviewtaker_text.add("Scheduled Call");
                gridviewtaker_text.add("Reminder Responses");
                gridviewtaker_text.add("Private");
                gridviewtaker_text.add("MoreFields");
                if (category != null && category.equalsIgnoreCase("issue")) {
                    gridviewtaker_text.add("ViewTask");
                }

                gridviewtaker_thump.add(R.drawable.audiofilefilled_32);
                gridviewtaker_thump.add(R.drawable.photo_grid);
                gridviewtaker_thump.add(R.drawable.sketch_grid);
                gridviewtaker_thump.add(R.drawable.video_grid);
                gridviewtaker_thump.add(R.drawable.file_grid);
                gridviewtaker_thump.add(R.drawable.percent_grid);
                gridviewtaker_thump.add(R.drawable.call_grid);
                gridviewtaker_thump.add(R.drawable.chat_grid_icon);
                gridviewtaker_thump.add(R.drawable.forms);
                gridviewtaker_thump.add(R.drawable.leave);
                gridviewtaker_thump.add(R.drawable.missedcall_32);
                gridviewtaker_thump.add(R.mipmap.ic_reminder_icon);
                gridviewtaker_thump.add(R.drawable.private_chat);
                gridviewtaker_thump.add(R.drawable.morefields_grid_icon);
                if (category != null && category.equalsIgnoreCase("issue")) {
                    gridviewtaker_thump.add(R.drawable.ic_view_task);
                }
            }

            Log.i("gridview", "texts  size is " + gridview_text.size());
            Log.i("gridview", "taker_text " + gridviewtaker_text.toArray(new String[gridviewtaker_text.size()]));
            Log.i("gridview", "taker_thump " + gridviewtaker_thump.toArray(new Integer[gridviewtaker_thump.size()]));
            texts_taker = gridviewtaker_text.toArray(new String[gridviewtaker_text.size()]);
            mThumbIds_taker = gridviewtaker_thump.toArray(new Integer[gridviewtaker_thump.size()]);
            Log.i("Gridadapter", "taker adapter");
            gridview_taker.setAdapter(new ImageTakerAdapter(texts_taker, mThumbIds_taker, context));

        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "gridaccess method Exception : " + e.getMessage(), "WARN", null);
        }
    }

    private void escalationObserverList(TaskDetailsBean taskDetailsBean_1) {
//        escalate_observers = new ArrayList<>();
        try {
            escalate_observersFLName = new ArrayList<>();
            escalate_observersId = new ArrayList<>();
            int obs_id;
            String nname;
            String tomems_value = VideoCallDataBase.getDB(context).getProjectListMembers(taskDetailsBean_1.getTaskId());
            if (tomems_value != null) {
                int counter = 0;
                for (int i = 0; i < tomems_value.length(); i++) {
                    if (tomems_value.charAt(i) == ',') {
                        counter++;
                    }
                    Log.i("taskConversation", "project_details Task Mem's counter size is == " + counter);
                }
                Log.i("taskConversation", "projectBean.getFromUserName() " + tomems_value);
                for (int j = 0; j < counter + 1; j++) {
                    Log.i("taskConversation", "project_details Task Mem's and position == " + tomems_value.split(",")[j] + " " + j);
                    if (counter == 0) {
                        if (!listOfObservers.contains(tomems_value)) {
                            listOfObservers.add(tomems_value);
                            listObservers.add(tomems_value);
                        }
                    } else {
                        if (!listOfObservers.contains(tomems_value.split(",")[j])) {
                            listOfObservers.add(tomems_value.split(",")[j]);
                            listObservers.add(tomems_value.split(",")[j]);
                        }
                    }
                }
            }
            Log.i("Escalation", "taskDetailsBean_1.getTaskDescription() " + taskDetailsBean_1.getTaskDescription());
            String old_names = "";
            if (taskDetailsBean_1.getProjectId() != null && !taskDetailsBean_1.getProjectId().equalsIgnoreCase("") && !taskDetailsBean_1.getProjectId().equalsIgnoreCase("null")) {
                old_names = VideoCallDataBase.getDB(context).getProjectParentTaskId("select taskObservers from projectHistory where taskId='" + webtaskId + "'");
            } else {
                old_names = VideoCallDataBase.getDB(context).getProjectParentTaskId("select taskObservers from taskHistoryInfo where taskId='" + webtaskId + "'");
            }
            if (old_names != null && !old_names.equalsIgnoreCase("") && !old_names.equalsIgnoreCase("null")) {
                taskDetailsBean_1.setTaskObservers(old_names + "," + taskDetailsBean_1.getTaskDescription().toString());
            } else {
                taskDetailsBean_1.setTaskObservers(taskDetailsBean_1.getTaskDescription().toString());
            }
            if (taskDetailsBean_1.getTaskDescription() != null && taskDetailsBean_1.getTaskDescription().contains(",")) {
                int counter_1 = 0;
                for (int i = 0; i < taskDetailsBean_1.getTaskDescription().length(); i++) {
                    if (taskDetailsBean_1.getTaskDescription().charAt(i) == ',') {
                        counter_1++;
                    }
                    Log.d("SchedulerObserver", "Observer's counter size is == " + counter_1);
                }
                for (int j = 0; j < counter_1 + 1; j++) {
                    escalate_observers.add(taskDetailsBean_1.getTaskDescription().split(",")[j].trim());
                    nname = VideoCallDataBase.getDB(context).getName(taskDetailsBean_1.getTaskDescription().split(",")[j].trim());
                    escalate_observersFLName.add(nname);
                    obs_id = VideoCallDataBase.getDB(context).getUserid(taskDetailsBean_1.getTaskDescription().split(",")[j].trim());
                    escalate_observersId.add(String.valueOf(obs_id));
                }
            } else {
                escalate_observers.add(taskDetailsBean_1.getTaskDescription());
                nname = VideoCallDataBase.getDB(context).getName(taskDetailsBean_1.getTaskDescription());
                escalate_observersFLName.add(nname);
                obs_id = VideoCallDataBase.getDB(context).getUserid(taskDetailsBean_1.getTaskDescription());
                escalate_observersId.add(String.valueOf(obs_id));
            }
            String obs_FLNmae = "";
            if (escalate_observersFLName.size() > 0) {
                for (int i = 0; i < escalate_observersFLName.size(); i++) {
                    obs_FLNmae = obs_FLNmae.concat(escalate_observersFLName.get(i)) + ",";
                }
                obs_FLNmae = obs_FLNmae.substring(0, obs_FLNmae.length() - 1);
            }
            String LoginUser = Appreference.loginuserdetails.getFirstName() + " " + Appreference.loginuserdetails.getLastName();
            Log.i("Escalation", "listofobserver " + obs_FLNmae);
            taskDetailsBean_1.setTaskAddObservers(obs_FLNmae);      // selected observer added for sip message
            taskDetailsBean_1.setTaskDescription(LoginUser + " added " + obs_FLNmae + " as observer");
            taskObs_Bean = taskDetailsBean_1;
            JSONObject jsonObject = new JSONObject();
            JSONArray jsonArray = new JSONArray();

            try {
                jsonObject.put("taskId", Integer.valueOf(webtaskId));

                for (String id : escalate_observersId) {
                    JSONObject object = new JSONObject();
                    Log.i("task", "chat Selected user-->  " + id);
                    object.put("id", Integer.valueOf(id));

                    jsonArray.put(object);
                }
                jsonObject.put("addObserver", jsonArray);
                Log.i("SchedulerObserver", "Observer JsonObject " + jsonObject);
                Appreference.isEscalate_Observer_WS = true;
                Appreference.printLog("taskObserverEntry", jsonObject.toString(), "Request", null);
                Appreference.jsonRequestSender.taskObserverEntry(EnumJsonWebservicename.taskObserverEntry, jsonObject, NewTaskConversation.this);
            } catch (JSONException e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "taskObserverEntry Exception : " + e.getMessage(), "WARN", null);
            } catch (Exception e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "taskObserverEntry Exception : " + e.getMessage(), "WARN", null);
            }
//        sendEscalationObserver(escalate_observers, escalate_observersFLName, taskDetailsBean_1.getTaskDescription(), taskDetailsBean_1.getProjectId());
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "escalationObserverList Exception : " + e.getMessage(), "WARN", null);
        }
    }

    private void sendEscalationObserver(ArrayList<String> escalate_observers, ArrayList<String> escalate_obsFLName, String escalte_obsUN, String project_id) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String dateTime = dateFormat.format(new Date());
        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
        String dateforrow = dateFormat.format(new Date());
        String rejectString = null;
        tasktime = dateTime;
        tasktime = tasktime.split(" ")[1];
        Log.i("task", "tasktime" + tasktime);
        Log.i("UTC", "sendMessage utc time" + dateforrow);
        Log.i("time", "value");
        taskUTCtime = dateforrow;
//        String[] stockArr = new String[list.size()];
//        Log.i("observer name", "addedobserver_url " + list.size());
//        Log.i("observer name", "addedobserver_url " + stockArr.length);
//        stockArr = list.toArray(stockArr);
//        StringBuilder builder = new StringBuilder();
//        addedobserver = "";
//        removedobserver = "";
//        String addedobserver_url = null;
//        Log.i("observer name", "addedobserver_url " + addedobserver_url);
//        if (rejectlist.size() > 0) {
//            String[] stockArr1 = new String[rejectlist.size()];
//            stockArr1 = rejectlist.toArray(stockArr1);
//            StringBuilder builder1 = new StringBuilder();
//            for (String s : stockArr1) {
//                Log.d("observer", "value  == " + s);
//                removedobserver = removedobserver + VideoCallDataBase.getDB(this).getname(s) + ",";
//                Log.d("observer", "value  == " + removedobserver);
//                builder1.append(s);
//                builder1.append(",");
//            }
//            removedobserver = removedobserver.substring(0, removedobserver.length() - 1);
//            Log.d("observer", "value  * * " + removedobserver);
//            rejectString = builder1.toString().substring(0, builder1.toString().length() - 1);
//            Log.i("task", "rejected observer" + rejectString);
//        }
//        for (String s : stockArr) {
//            Log.d("observer", "s : " + s);
//            if (addedobserver_url == null) {
//                addedobserver_url = s;
//                Log.i("observer name", "addedobserver_url 1 " + addedobserver_url);
//            } else {
//                addedobserver_url = addedobserver_url + "," + s;
//                Log.i("observer name", "addedobserver_url 2 " + addedobserver_url);
//            }
//            addedobserver = addedobserver + VideoCallDataBase.getDB(this).getname(s) + ",";
//            Log.d("observer", "value  == " + addedobserver);
//            Log.i("observer name", "addedobserver 1 " + addedobserver);
//            builder.append(s);
//            builder.append(",");
//        }
//        String s1 = "";
//        if (list.size() > 0) {
//            addedobserver = addedobserver.substring(0, addedobserver.length() - 1);
//            Log.d("observer", "value  * * " + addedobserver);
//            Log.i("observer name", "addedobserver 2 " + addedobserver);
//            s1 = builder.toString().substring(0, builder.toString().length() - 1);
//        }
//        Log.d("observer", "value  == " + stockArr.toString());
//        Log.d("observer", s1);
        final TaskDetailsBean chatBean = new TaskDetailsBean();
//        Log.i("observerlist", "rejectlist ---->  " + rejectlist.size());
//        Log.i("observerlist", "list ---->   " + list.size());
//        int obj_size = rejectlist.size() + list.size();
//        Log.i("observerlist", "size ---->   " + obj_size);
        String LoginUser = Appreference.loginuserdetails.getFirstName() + " " + Appreference.loginuserdetails.getLastName();
//        if (rejectlist.size() > 0 && list.size() > 0) {
//            chatBean.setTaskDescription(LoginUser + " added " + addedobserver + " as observer \n" + LoginUser + " removed   " + removedobserver + " from observers");
//        } else if (rejectlist.size() == 0) {
        String obs_FLNmae = "";
        Log.i("Escalation", "escalate_obsFLName size is " + escalate_obsFLName.size());
        Log.i("Escalation", "escalate_obsFLName " + escalate_obsFLName);
        Log.i("Escalation", "obs_FLNmae" + obs_FLNmae);
        if (escalate_obsFLName.size() > 0) {
            for (int i = 0; i < escalate_obsFLName.size(); i++) {
                obs_FLNmae = obs_FLNmae.concat(escalate_obsFLName.get(i)) + ",";
            }
            obs_FLNmae = obs_FLNmae.substring(0, obs_FLNmae.length() - 1);
        }
        chatBean.setTaskDescription(LoginUser + " added " + obs_FLNmae + " as observer");
//        } else if (rejectlist.size() > 0)
//            chatBean.setTaskDescription(LoginUser + " removed " + removedobserver + " from observers ");
//        chatBean.setTaskObservers(s1);
//        chatBean.setTaskObservers(escalte_obsUN);
//        Log.d("observer", "value " + s1);
//        if (rejectString != null)
//            chatBean.setRejectedObserver(rejectString);
        chatBean.setOwnerOfTask(ownerOfTask);
        chatBean.setCustomTagVisible(true);
        chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
        chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
        chatBean.setSelect(false);
        chatBean.setToUserName(toUserName);
        chatBean.setToUserId(String.valueOf(toUserId));
        chatBean.setSignalid(Utility.getSessionID());
        chatBean.setTaskNo(task_No);
        if (category != null) {
            chatBean.setCatagory(category);
        } else {
            chatBean.setCatagory("Task");
        }
        chatBean.setIssueId(issueId);
        chatBean.setTaskId(webtaskId);
        chatBean.setParentId(getFileName());
        chatBean.setTaskPriority("low");
        chatBean.setCompletedPercentage("0");
        if (note) {
            chatBean.setTaskStatus("note");
        } else {
            chatBean.setTaskStatus(taskStatus);
        }

        Log.i("Accept", "value 8" + chatBean.getTaskStatus());
        chatBean.setPlannedStartDateTime("");
        chatBean.setDateTime(dateforrow);
        chatBean.setTaskName(taskName);
        chatBean.setMimeType("observer");
        chatBean.setTasktime(tasktime);
        chatBean.setSendStatus("3");
        chatBean.setTaskType(taskType);
        chatBean.setTaskReceiver(taskReceiver);
        chatBean.setDateTime(dateTime);
        chatBean.setTaskUTCDateTime(dateforrow);
        chatBean.setTaskUTCTime(taskUTCtime);
        chatBean.setCustomTagVisible(true);
        chatBean.setSubType("normal");
        if (project_id != null) {
            chatBean.setProjectId(project_id);
        }
        if (chatBean.isCustomTagVisible()) {
            taskList.add(chatBean);
        }
        refresh();
        Log.i("taskconversation", "CusTome ---->>><<< 4 ");
        dataBase.insertORupdate_Task_history(chatBean);
        dataBase.insertORupdate_TaskHistoryInfo(chatBean);
        String exist_observers = VideoCallDataBase.getDB(context).getProjectParentTaskId("select taskObservers from taskHistoryInfo where taskId='" + chatBean.getTaskId() + "'");
        if (exist_observers != null && !exist_observers.equalsIgnoreCase("") && !exist_observers.equalsIgnoreCase("null")) {
            try {
                existEscaObsUN = new ArrayList<>();
                EscaObsUN = new ArrayList<>();
                String observ = "";
                int counter = 0;
                for (int i = 0; i < exist_observers.length(); i++) {
                    if (exist_observers.charAt(i) == ',') {
                        counter++;
                    }
                    Log.i("taskConversation", "project_details Task Mem's counter size is == " + counter);
                }
                for (int j = 0; j < counter + 1; j++) {
                    Log.i("taskConversation", "project_details Task Mem's and position == " + exist_observers.split(",")[j] + " " + j);
                    if (counter == 0) {
                        existEscaObsUN.add(exist_observers);
                    } else {
                        if (exist_observers.split(",")[j].equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                        } else {
                            existEscaObsUN.add(exist_observers.split(",")[j]);
                        }
                    }
                }
                int counter_1 = 0;
                for (int i = 0; i < escalte_obsUN.length(); i++) {
                    if (escalte_obsUN.charAt(i) == ',') {
                        counter_1++;
                    }
                    Log.i("taskConversation", "project_details Task Mem's counter size is == " + counter_1);
                }
                for (int j = 0; j < counter_1 + 1; j++) {
                    Log.i("taskConversation", "project_details Task Mem's and position == " + escalte_obsUN.split(",")[j] + " " + j);
                    if (counter_1 == 0) {
                        EscaObsUN.add(escalte_obsUN);
                    } else {
                        if (escalte_obsUN.split(",")[j].equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                        } else {
                            EscaObsUN.add(escalte_obsUN.split(",")[j]);
                        }
                    }
                }
                for (String finalEscObs : EscaObsUN) {
                    if (!existEscaObsUN.contains(finalEscObs)) {
                        observ = observ.concat(finalEscObs) + ",";
                    }
                }
                observ = observ.substring(0, observ.length() - 1);
                chatBean.setTaskObservers(observ);
            } catch (Exception e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "sendEscalationObserver Exception " + e.getMessage(), "WARN", null);
            }
        } else {
            chatBean.setTaskObservers(escalte_obsUN);
        }
        if (project_id != null) {
            VideoCallDataBase.getDB(context).update_Project_history(chatBean);
        }
        String xml = composeObserverXml(chatBean, escalte_obsUN);
//        if (rejectlist.size() > 0)
//            sendMultiInstantMessage(xml, listOfObservers, rejectlist);
//        else
        if (escalate_observers.size() > 0) {
            for (String str1 : escalate_observers) {
                listOfObservers.add(str1);
            }
        }
        for (String str : listOfObservers) {
            Log.i("SchedulerObserver", "observer's is " + str);
        }
        sendMultiInstantMessage(xml, listOfObservers, 1);
    }

    //auto scroll for listview
    private void scrollMyListViewToBottom() {
        list_all.post(new Runnable() {
            @Override
            public void run() {
                // Select the last row so it will scroll into view...
                list_all.setSelection(medialistadapter.getCount() - 1);
            }
        });
    }

    @Override
    public void finish() {
        super.finish();
        Log.d("App", "finished");
    }

    @Override
    public void onClick(View v) {
        int id = v.getId();
        try {
            if (id == R.id.addObserver || id == R.id.addobservertext) {
                if (webtaskId == null) {
                    if (note) {
                        Toast.makeText(NewTaskConversation.this, "Please Create the Task ", Toast.LENGTH_SHORT).show();
                    } else {
                        Toast.makeText(NewTaskConversation.this, "Please Create the Task ", Toast.LENGTH_SHORT).show();
                    }
                } else if ((taskType != null && taskType.equalsIgnoreCase("Group") && groupMemberAccess != null && groupMemberAccess.getAddObserver() != null && groupMemberAccess.getAddObserver().contains("1")) || (taskType != null && taskType.equalsIgnoreCase("individual") || project)) {
                    //                Log.i("groupMemberAccess", "getAddObserver1 " + groupMemberAccess.getAddObserver());
                    addObserverClickEvent();
                } else {
//                    Toast.makeText(context, "Access Denied for AddObserver", Toast.LENGTH_SHORT).show();
                    Log.i("groupMemberAccess", "getAddObserver---->1 " + groupMemberAccess.getAddObserver());
                    Log.i("groupMemberAccess", "getAddObserver1--->2 " + taskType);
                    Log.i("groupMemberAccess", "getAddObserver1--->3 " + groupMemberAccess);
                    Log.i("groupMemberAccess", "getAddObserver1--->4 " + project);
                    addObserverClickEvent();
                }
            } else if (id == R.id.tagfilter) {
                try {
                    Intent intent = new Intent(getApplicationContext(), TaskConversationTagFilter.class);
                    startActivityForResult(intent, 400);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "Onclick tagfilter Exception : " + e.getMessage(), "WARN", null);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "Onclick event Exception : " + e.getMessage(), "WARN", null);
        }
    }

    @Override
    protected void onResume() {
        super.onResume();
        try {
            Date dn = new Date();
            Log.i("onResume", "onResume NewTaskConversation 1 " + ft.format(dn));
            Log.d("onResume", "value onResume called ");
            Log.d("NewTaskConversation", "onResume ");
            showNetworkStateUI();
            if (Appreference.main_Activity_context.openPinActivity) {
                Appreference.main_Activity_context.reRegister_onAppResume();
            }
            startTimer();
            if (webtaskId != null) {
                taskList_9 = new ArrayList<>();
                taskList_10 = new ArrayList<>();
                taskList_11 = new ArrayList<>();
                taskList_9 = VideoCallDataBase.getDB(context).getTaskHistory("select * from taskDetailsInfo where taskId='" + webtaskId + "' and taskDescription = '" + category + " accepted' order by id desc");
                taskList_10 = VideoCallDataBase.getDB(context).getTaskHistory("select * from taskDetailsInfo where taskId='" + webtaskId + "' and mimeType = 'date' order by id desc");
                taskList_11 = VideoCallDataBase.getDB(context).getTaskHistory("select * from taskDetailsInfo where taskId='" + webtaskId + "' and taskDescription = 'This " + category + " is closed' order by id desc");
                Log.i("Accept", "value onResume list" + taskList_9.size() + " " + taskList_10.size() + " " + taskList_11.size());
            }
            if (subType == null || subType.equalsIgnoreCase("") || subType.equalsIgnoreCase(null)) {
                subType = "normal";
                Log.i("onResume", "subType " + subType);
            }
            Log.i("onResume", "subType outside " + subType + " " + taskType);
            Date dn1 = new Date();
            Log.i("onResume", "onResume NewTaskConversation 2 " + ft.format(dn1));
            ArrayList<String> stringsList = new ArrayList<>();
            String observeres = null;
            if (project) {
                observeres = VideoCallDataBase.getDB(context).getProjectParentTaskId("select taskObservers from projectHistory where taskId='" + webtaskId + "'");
            } else {
                observeres = VideoCallDataBase.getDB(context).getProjectParentTaskId("select taskObservers from taskHistoryInfo where taskId='" + webtaskId + "'");
            }

            Log.i("onResume", "subType " + observeres);
            if (observeres != null) {
                String[] items = observeres.split(",");
                for (String ss : items) {
                    stringsList.add(ss);
                }
            }
            if (observeres != null && observeres.contains(Appreference.loginuserdetails.getUsername())) {
                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        calen_picker.setVisibility(View.GONE);
                        update.setVisibility(View.GONE);
                    }
                });
            }
            Log.i("onResume", "listOfObservers ==> ** " + listOfObservers);
            Log.i("onResume", "ownerOfTask ==> ** " + ownerOfTask);
            Log.i("onResume", "taskReceiver ==> ** " + taskReceiver);
            Log.i("onResume", "stringsList ==> ** " + stringsList);
            stringsList.addAll(listOfObservers);
            if (!stringsList.contains(ownerOfTask))
                stringsList.add(ownerOfTask);
            else if (!stringsList.contains(taskReceiver))
                stringsList.add(taskReceiver);


            if (chat && !stringsList.contains(Appreference.loginuserdetails.getUsername())) {
                stringsList.add(Appreference.loginuserdetails.getUsername());
            }
            String receiver;
            if (project) {
                receiver = VideoCallDataBase.getDB(context).getProjectParentTaskId("select taskReceiver from projectHistory where taskId='" + webtaskId + "'");
            } else {
                receiver = VideoCallDataBase.getDB(context).getProjectParentTaskId("select taskReceiver from taskHistoryInfo where taskId='" + webtaskId + "'");
            }

            if (taskType != null && !taskType.equalsIgnoreCase("Group")) {
                if (receiver != null && !receiver.equalsIgnoreCase("")) {
                    if (receiver.contains(Appreference.loginuserdetails.getUsername())) {
                        stringsList.add(Appreference.loginuserdetails.getUsername());
                    }
                }
            }

            boolean checkUserPresentTask = false;
            if (taskType != null && !taskType.equalsIgnoreCase("Group") && stringsList != null) {
                for (String s : stringsList) {
                    Log.i("onResume", "oberver name " + s);
                    if (s.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                        checkUserPresentTask = true;
                        break;
                    } else {
                        checkUserPresentTask = false;
                    }
                }
            } else {
                checkUserPresentTask = true;
            }
            Log.i("onResume", " checkUserPresentTask :" + checkUserPresentTask);
            if (!checkUserPresentTask) {
                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        Log.i("notifyTaskReceived", "bottom_layout 19 ");
                        addObserver.setVisibility(View.GONE);
                        Log.i("gone123", "bottom_layout 0001 ");
                        /*changed for groupadmin_observer start*/

//                        bottom_layout.setVisibility(View.GONE);
                        if (!isTaskCompleted && !template) {
                            bottom_layout.setVisibility(View.VISIBLE);
                        }

                        /*changed for groupadmin_observer end*/

                    }
                });
            }

            /*Added for groupadmin_observer start*/

            String GroupAdmin_observer = getGroupAdmin_observer_DB();
            if (GroupAdmin_observer != null && GroupAdmin_observer.contains(Appreference.loginuserdetails.getUsername())) {
//                bottom_layout.setVisibility(View.VISIBLE);
                Arrow.setVisibility(View.GONE);
                ObserverUI();
            }
            /*Added for groupadmin_observer end*/

            Log.i("onResume", "Appreference.createdFormsList size is " + Appreference.createdFormsList.size());
            if (Appreference.createdFormsList.size() > 0) {
                for (TaskDetailsBean taskDetailsBean : Appreference.createdFormsList) {
                    taskList.add(taskDetailsBean);
                }
                sortTaskMessage();
                refresh();
                Appreference.createdFormsList.clear();
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "onresume Exception : " + e.getMessage(), "WARN", null);
        }
    }

    private void checkbeanTOTaskBean(ConflictCheckBean checkBean) {
        try {
            Log.i("leave", "Leave_Approve check to task bean");
            Log.i("***", "Leave_Approve" + checkBean.getFromUserName() + "-" + checkBean.getPlannedStartDate() + "-" + checkBean.getPlannedEndDate() + "-" + checkBean.getToUserId() + "-" + checkBean.getTaskNo());
            Log.i("***", "Leave_Approve" + checkBean.getTaskId() + "-" + checkBean.getToUserName() + "-" + checkBean.getTaskType() + "-" + checkBean.getToUserId() + "-" + checkBean.getTaskNo());
            final TaskDetailsBean chatBean = new TaskDetailsBean();
            chatBean.setTaskId(checkBean.getTaskId());
            chatBean.setToUserId(checkBean.getToUserId());
            chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
            chatBean.setTaskNo(checkBean.getTaskNo());
            chatBean.setCatagory(checkBean.getTaskCategory());
            if (checkBean.getProjectId() != null && !checkBean.getProjectId().equalsIgnoreCase("")) {
                chatBean.setProjectId(checkBean.getProjectId());
                String ProjectListMembers = dataBase.getProjectListMembers(checkBean.getTaskId());
                if (ProjectListMembers != null) {
                    chatBean.setGroupTaskMembers(ProjectListMembers);
                }
            }
            chatBean.setIssueId(issueId);
            chatBean.setTaskName(checkBean.getTaskName());
            chatBean.setToUserName(checkBean.getToUserName());
            chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String dateTime = dateFormat.format(new Date());
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            String dateforrow = dateFormat.format(new Date());
            tasktime = dateTime;
            tasktime = tasktime.split(" ")[1];
            Log.i("leave", "tasktime" + tasktime);
            Log.i("leave", "sendMessage utc time" + dateforrow);
            Appreference.isOverdue.put(webtaskId, false);
            Log.i("leave", "value");
            taskUTCtime = dateforrow;
            SimpleDateFormat utcdateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            chatBean.setTaskDescription("Reminder Details");
            SimpleDateFormat sdf3 = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy", Locale.ENGLISH);
            Log.d("***", "start date not a  utc final result    ==  " + dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(checkBean.getPlannedStartDate())))));
            Log.d("***", "end date not a  utc final result    ==  " + dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(checkBean.getPlannedEndDate())))));
            Log.d("***", "reminder date not a  utc final result    ==  " + dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(checkBean.getPlannedStartDate())))));
            chatBean.setUtcPlannedStartDateTime(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(checkBean.getPlannedStartDate())))));
            chatBean.setPlannedStartDateTime(checkBean.getPlannedStartDate());
            chatBean.setPlannedEndDateTime(checkBean.getPlannedEndDate());
            chatBean.setUtcplannedEndDateTime(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(checkBean.getPlannedEndDate())))));
            String isRemainderRequired = VideoCallDataBase.getDB(context).getProjectParentTaskId("select isRemainderRequired from taskDetailsInfo where taskId='" + checkBean.getTaskId() + "' and mimeType='date' and (requestStatus='approved' or requestStatus='assigned') order by id DESC LIMIT 1");
            Log.i("***", "isRemainderRequired >>----->>? " + isRemainderRequired);
            chatBean.setIsRemainderRequired(isRemainderRequired);
            if (isRemainderRequired != null && (isRemainderRequired.equalsIgnoreCase("R") || isRemainderRequired.equalsIgnoreCase("Y"))) {
                chatBean.setUtcPemainderFrequency(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(checkBean.getPlannedStartDate())))));
                chatBean.setRemainderFrequency(checkBean.getPlannedStartDate());
            } else {
                chatBean.setUtcPemainderFrequency("");
                chatBean.setRemainderFrequency("");
            }
            chatBean.setDateFrequency("");
            String timeFrequency = VideoCallDataBase.getDB(context).getProjectParentTaskId("select timeFrequency from taskDetailsInfo where taskId='" + checkBean.getTaskId() + "' and mimeType='date' and (requestStatus='approved' or requestStatus='assigned') order by id DESC LIMIT 1");
            Log.i("***", "timeFrequency >>----->>? " + timeFrequency);
            if (timeFrequency != null && !timeFrequency.equalsIgnoreCase("")) {
                chatBean.setTimeFrequency(timeFrequency);
            } else {
                chatBean.setTimeFrequency("1 Minutes");
            }


            reminderquote = VideoCallDataBase.getDB(context).getProjectParentTaskId("select reminderquotes from taskDetailsInfo where taskId='" + checkBean.getTaskId() + "' and mimeType='date' and (requestStatus ='approved' or requestStatus='assigned') order by id DESC LIMIT 1");

            if (reminderquote != null && !reminderquote.equalsIgnoreCase(null) && !reminderquote.equalsIgnoreCase("")) {
                chatBean.setReminderQuote(reminderquote);
            } else {
                chatBean.setReminderQuote("Task Remainder");
            }


            chatBean.setSignalid(Utility.getSessionID());
            chatBean.setMimeType("date");
            chatBean.setParentId(getFileName());
            chatBean.setDaysOfTheWeek("");
            chatBean.setTaskPriority("Medium");
            chatBean.setCompletedPercentage("0");
            chatBean.setDateTime(dateTime);
            chatBean.setTaskUTCDateTime(dateforrow);
            ownerOfTask = Appreference.loginuserdetails.getUsername();
            chatBean.setOwnerOfTask(ownerOfTask);
            chatBean.setCustomTagVisible(true);
            chatBean.setSendStatus("0");   // send status 0 is send 1 is unsend
            chatBean.setTaskType(checkBean.getTaskType());
            if (template) {
                if (note) {
                    chatBean.setTaskStatus("note");
                } else {
                    chatBean.setTaskStatus("draft");
                }
                chatBean.setCustomTagVisible(true);
            } else {
                if (taskType != null && getResources().getString(R.string.task_enable).equalsIgnoreCase("enable") && !taskType.equalsIgnoreCase("Group")) {
                    if (isTaskAccept) {
                        taskStatus = "inprogress";
                        chatBean.setTaskStatus(taskStatus);
                        Log.i("leave", "value 303 " + chatBean.getTaskStatus());
                    } else {
                        taskStatus = "assigned";
                        chatBean.setTaskStatus(taskStatus);
                        Log.i("leave", "value 304 " + chatBean.getTaskStatus());
                    }
                } else {
                    taskStatus = "inprogress";
                    chatBean.setTaskStatus(taskStatus);
                }
                Log.i("leave", "value 3 * " + chatBean.getTaskStatus());
            }
            if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                chatBean.setRequestStatus("assigned");
            } else {
                chatBean.setRequestStatus("approved");
            }
            chatBean.setRequestStatus("assigned");
            chatBean.setRemark("");
            chatBean.setTaskRequestType("taskDateChangedApproval");
            chatBean.setRemark("");
            chatBean.setSubType("normal");
            chatBean.setTasktime(tasktime);
            chatBean.setTaskUTCTime(taskUTCtime);
            chatBean.setTaskReceiver(taskReceiver);
            if (!isTaskName) {
                if (project) {
                    VideoCallDataBase.getDB(context).update_Project_history(chatBean);
                } else {
                    dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                }
                chatBean.setWs_send("0");
                Log.i("taskconversation", "CusTome ---->>><<< 5 ");
                dataBase.insertORupdate_Task_history(chatBean);
//                dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                if (chatBean.isCustomTagVisible()) {
                    if (Leave_taskid != null && Leave_taskid.equalsIgnoreCase(chatBean.getTaskId())) {
                        Log.i("Last_Extend", "taskList.add(chatBean)if " + Leave_taskid + "           " + chatBean.getTaskId());
                        taskList.add(chatBean);
                    } else {
                        Log.i("Last_Extend", "taskList.add(chatBean)else  " + Leave_taskid + "           " + chatBean.getTaskId());
                    }
                }
                sortTaskMessage();
                refresh();
            }
            Log.i("leave", "date bean" + chatBean.toString());
            Log.i("leave", "Desc1 " + chatBean.getTaskDescription());
            Log.i("leave", "Leave_Approve end");
            if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                Leave_ApproveDateWebService(chatBean);
            } else {
                String xml = composeChatXML(chatBean);
                sendMultiInstantMessage(xml, listOfObservers, 0);
            }
            if (!calender)
                reminderTimerDisplay();
            calender = false;
        } catch (ParseException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "checkbeanTOTaskBean Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "checkbeanTOTaskBean Exception : " + e.getMessage(), "WARN", null);
        }
    }

    private void Leave_ApproveDateWebService(TaskDetailsBean chatBean) {
        {

            String rem_tone, rem_freq_min, rem_frq, remainder_Frequency = null, task_startdate = null, task_enddate = null, task_remindate = null;
            long total_mins;
            if (reminderfreq != null && !reminderfreq.equalsIgnoreCase("")) {
                if (getResources().getString(R.string.TASKNOTIFICATION_FROM_SERVER).equalsIgnoreCase("0")) {
                    Log.i("task", "Reminder Freq Local Changed to Lower case " + reminderfreq.toLowerCase());
                    switch (reminderfreq.toLowerCase()) {
                        case "none":
                            remainder_Frequency = "0";
                            break;
                        case "every minute":
                            total_mins = 60000;
                            remainder_Frequency = String.valueOf(total_mins);
                            break;
                        case "every 10 min":
                            total_mins = 10 * 60000;
                            remainder_Frequency = String.valueOf(total_mins);
                            break;
                        case "hourly":
                            total_mins = 60 * 60000;
                            remainder_Frequency = String.valueOf(total_mins);
                            break;
                        case "daily":
                            total_mins = 1440 * 60000;
                            remainder_Frequency = String.valueOf(total_mins);
                            break;
                        case "week day":
                            total_mins = 10080 * 60000;
                            remainder_Frequency = String.valueOf(total_mins);
                            break;
                        case "monthly":
                            total_mins = 43200 * 60000;
                            remainder_Frequency = String.valueOf(total_mins);
                            break;
                        case "yearly":
                            total_mins = 525600 * 60000;
                            remainder_Frequency = String.valueOf(total_mins);
                            break;
                        default:
                            remainder_Frequency = "60000";
                            break;
                    }
                } else {
                    Log.i("Request", "timeFrequency " + chatBean.getTimeFrequency());  // 1 Minute
                    rem_freq_min = reminderfreq.split(" ")[0];   // 1
                    rem_frq = reminderfreq.split(" ")[1];   // Minute
                    Log.i("task", "Reminder Freq Minutes " + rem_freq_min);
                    switch (rem_frq.toLowerCase()) {
                        case "minutes":
                            total_mins = Long.parseLong(rem_freq_min) * 60000;
                            remainder_Frequency = String.valueOf(total_mins);
                            break;
                        case "hours":
                            total_mins = Long.parseLong(rem_freq_min) * 60 * 60000;
                            remainder_Frequency = String.valueOf(total_mins);
                            break;
                        case "days":
                            total_mins = Long.parseLong(rem_freq_min) * 1440 * 60000;
                            remainder_Frequency = String.valueOf(total_mins);
                            break;
                        default:
                            remainder_Frequency = "60000";
                            break;
                    }
                }
            } else {
                remainder_Frequency = "60000";
            }
            try {
                JSONObject jsonObject = new JSONObject();
                JSONObject jsonObject1 = new JSONObject();
                jsonObject1.put("id", Integer.parseInt(chatBean.getTaskId()));
                jsonObject.put("task", jsonObject1);
                JSONObject jsonObject2 = new JSONObject();
                jsonObject2.put("id", Appreference.loginuserdetails.getId());
                jsonObject.put("from", jsonObject2);
                JSONObject jsonObject3 = new JSONObject();
                jsonObject3.put("id", chatBean.getToUserId());
                jsonObject.put("to", jsonObject3);
                jsonObject.put("signalId", chatBean.getSignalid());
                jsonObject.put("parentId", getFileName());
                jsonObject.put("createdDate", chatBean.getTaskUTCTime());
                if (chatBean.getRequestStatus().equalsIgnoreCase("assigned")) {
                    jsonObject.put("requestType", "taskDateChangedApproval");
                    jsonObject.put("requestStatus", "approved");
                }
                if (chatBean.getRequestStatus().equalsIgnoreCase("requested")) {
                    jsonObject.put("requestType", "taskDateChangedRequest");
                    jsonObject.put("requestStatus", "requested");
                }
                if (chatBean.getRequestStatus().equalsIgnoreCase("rejected")) {
                    jsonObject.put("requestType", "taskDateChangedApproval");
                    jsonObject.put("requestStatus", "rejected");
                }
                if (chatBean.getRequestStatus().equalsIgnoreCase("approved")) {
                    jsonObject.put("requestType", "taskDateChangedApproval");
                    jsonObject.put("requestStatus", "approved");
                }

                jsonObject.put("taskEndDateTime", chatBean.getUtcplannedEndDateTime());
                jsonObject.put("taskStartDateTime", chatBean.getUtcPlannedStartDateTime());
//                jsonObject.put("remainderDateTime", chatBean.getUtcPemainderFrequency());
                if (chatBean.getIsRemainderRequired() != null && chatBean.getIsRemainderRequired().equalsIgnoreCase("R")) {
                    jsonObject.put("remainderDateTime", chatBean.getUtcPemainderFrequency());
                    jsonObject.put("timeFrequency", remainder_Frequency);
                    jsonObject.put("isRemainderRequired", "R");
                } else if (chatBean.getIsRemainderRequired() != null && chatBean.getIsRemainderRequired().equalsIgnoreCase("N")) {
                    jsonObject.put("remainderDateTime", chatBean.getUtcPemainderFrequency());
                    jsonObject.put("timeFrequency", remainder_Frequency);
                    jsonObject.put("isRemainderRequired", "N");
                } else if (chatBean.getIsRemainderRequired() != null && chatBean.getIsRemainderRequired().equalsIgnoreCase("Y")) {
                    jsonObject.put("remainderDateTime", chatBean.getUtcPemainderFrequency());
                    jsonObject.put("timeFrequency", remainder_Frequency);
                    jsonObject.put("isRemainderRequired", "Y");
                }
                jsonObject.put("dateFrequency", "");
                jsonObject.put("taskNo", chatBean.getTaskNo());
                if (Weekdays != null && !Weekdays.equalsIgnoreCase("")) {
                    jsonObject.put("repeatFrequency", "1");
                    jsonObject.put("dayOfTheWeek", Weekdays);
                }
                if (reminderquote != null && !reminderquote.equalsIgnoreCase("") && !reminderquote.equalsIgnoreCase(null)) {
                    jsonObject.put("remainderQuotes", reminderquote);
                } else {
                    jsonObject.put("remainderQuotes", "Task Reminder");
                }
                Log.i("leave", "remainder" + reminderquote);
                jsonObject.put("remark", "");
                JSONObject jsonObject5 = new JSONObject();
                jsonObject5.put("id", Appreference.loginuserdetails.getId());
                JSONObject jsonObject4 = new JSONObject();
                jsonObject4.put("user", jsonObject5);
                jsonObject4.put("fileType", "audio");
                jsonObject4.put("taskFileExt", "mp3");
                Log.i("***", "remainder" + remindertone);
                if (remindertone != null && !remindertone.equalsIgnoreCase(null) && !remindertone.equalsIgnoreCase("")) {
                    rem_tone = encodeAudioVideoToBase64(remindertone);
                    jsonObject4.put("fileContent", rem_tone);
                    JSONArray jsonArray = new JSONArray();
                    jsonArray.put(0, jsonObject4);
                    jsonObject.put("listTaskConversationFiles", jsonArray);
                }
                Log.i("***", ">>------>>>  <<----<>---->> <<<------<<" + remindertone);
                Log.i("leave", "Task date update for giver is " + jsonObject);
                Log.i("leave", "Desc2 " + chatBean.getTaskDescription());
                Appreference.printLog("taskConversationEntry", jsonObject.toString(), "Request", null);
                Appreference.jsonRequestSender.taskConversationEntry(EnumJsonWebservicename.taskConversationEntry, jsonObject, NewTaskConversation.this, null, chatBean);
            } catch (Exception e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "Leave_ApproveDateWebService Exception : " + e.getMessage(), "WARN", null);
            }
        }
    }

    @Override
    public void onActivityReenter(int resultCode, Intent data) {
        super.onActivityReenter(resultCode, data);
    }

    private String[] getDatesFromCalender() {
        Calendar c1 = Calendar.getInstance(TimeZone.getTimeZone("GMT+1"));
        Calendar c2 = Calendar.getInstance(TimeZone.getTimeZone("GMT+1"));
        List<String> dates = new ArrayList<String>();
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("MMM dd", Locale.ENGLISH);
            dates.add("Today");
            today = dateFormat.format(c1.getTime());
            Calendar c = Calendar.getInstance();
            SimpleDateFormat df = new SimpleDateFormat("dd-MMM-yyyy");
            String formattedDate = df.format(c.getTime());
            String split[] = formattedDate.split("-");
            String todaydate = split[0] + " " + split[1];
            for (int i = 0; i < 360; i++) {
                c1.add(Calendar.DATE, 1);
                dates.add(dateFormat.format(c1.getTime()));
            }
            c2.add(Calendar.DATE, -60);
            for (int i = 0; i < 59; i++) {
                c2.add(Calendar.DATE, 1);
                dates.add(dateFormat.format(c2.getTime()));
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "getDatesFromCalender Exception " + e.getMessage(), "WARN", null);
        }
        return dates.toArray(new String[dates.size() - 1]);
    }

    public void callNotification(ArrayList<Integer> toIds, int fromId) {
        try {
            Log.i("call", String.valueOf(fromId));
            JSONObject jsonObject = new JSONObject();
            jsonObject.put("fromId", String.valueOf(fromId));

            JSONArray jsonArray = new JSONArray();
            for (int i = 0; i < toIds.size(); i++) {
                int toId = toIds.get(i);
                JSONObject jsonObject1 = new JSONObject();
                jsonObject1.put("id", String.valueOf(toId));
                jsonArray.put(i, jsonObject1);
            }
            jsonObject.put("to", jsonArray);
            Appreference.printLog("callNotification", jsonObject.toString(), "Request", null);
            Appreference.jsonRequestSender.callNotification(EnumJsonWebservicename.callNotification, jsonObject, NewTaskConversation.this);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "callNotification Exception : " + e.getMessage(), "WARN", null);
        }
    }

    private void multimediaImage(final String type1) {
        try {
            Log.i("clone", " inside multimediaImage ===> : " + type1);
            final Dialog dialog = new Dialog(context);
            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
            dialog.setContentView(R.layout.dialog_myacc_menu);
            WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
            lp.copyFrom(dialog.getWindow().getAttributes());
            lp.width = WindowManager.LayoutParams.MATCH_PARENT;
            lp.height = WindowManager.LayoutParams.WRAP_CONTENT;
            lp.horizontalMargin = 15;
            Window window = dialog.getWindow();
            window.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
            window.setAttributes(lp);
            window.setGravity(Gravity.BOTTOM);
            dialog.show();
            TextView gallery = (TextView) dialog.findViewById(R.id.delete_acc);
            TextView camera = (TextView) dialog.findViewById(R.id.log_out);
            if (type1.equalsIgnoreCase("call")) {
                gallery.setText("Audio Call");
                camera.setText("Video Call");
                if (taskType != null && taskType.equalsIgnoreCase("Group")) {
                    camera.setVisibility(View.GONE);
                    ArrayList<String> users = VideoCallDataBase.getDB(context).getGroupMembers(String.valueOf(toUserId));
                    Log.i("clone", "users.size() : " + users.size());
                    if (users.size() >= 2 && !chat) {
                        camera.setVisibility(View.GONE);
                    }
                }
            } else if (type1.equalsIgnoreCase("image")) {
                gallery.setText("Gallery");
                camera.setText("Camera");
            } else if (type1.equalsIgnoreCase("video")) {
                gallery.setText("Gallery");
                camera.setText("Video");
            }
            TextView cancel1 = (TextView) dialog.findViewById(R.id.cancel);
            cancel1.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View arg0) {
                    try {
                        dialog.dismiss();
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "multimediaImage progress dismiss Exception : " + e.getMessage(), "WARN", null);
                    }
                }
            });
            gallery.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View arg0) {
                    try {
                        dialog.dismiss();

                        if (type1.equals("image")) {
                            if (Build.VERSION.SDK_INT < 19) {
                                Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
                                intent.setType("image/*");
                                startActivityForResult(intent, 30);
                            } else {
                                Log.i("img", "sdk is above 19");
                                Log.i("clone", "====> inside gallery");
                                Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
                                intent.addCategory(Intent.CATEGORY_OPENABLE);
                                intent.setType("image/*");
                                startActivityForResult(intent, 31);
                            }
                        } else if (type1.equals("video")) {
                            if (Build.VERSION.SDK_INT < 19) {
                                Intent intent = new Intent(Intent.ACTION_GET_CONTENT);
                                intent.setType("video/*");
                                startActivityForResult(intent, 32);
                            } else {
                                Log.i("img", "sdk is above 19");
                                Log.i("clone", "====> inside gallery");
                                Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT);
                                intent.addCategory(Intent.CATEGORY_OPENABLE);
                                intent.setType("video/*");
                                startActivityForResult(intent, 33);
                            }
                        } else {
                            check_call = false;
                            MainActivity.isAudioCall = true;
                            if (taskType != null && taskType.equalsIgnoreCase("Group")) {
                                ArrayList<String> grouplist_mem = new ArrayList<String>();
                                ArrayList<Integer> group_list_id = new ArrayList<Integer>();
                                if (project) {
                                    String project_List_Mems = listTaskMembers();
                                    String[] all_members;
                                    if (project_List_Mems != null && project_List_Mems.contains(",")) {
                                        all_members = project_List_Mems.split(",");
                                        for (int i = 0; i < all_members.length; i++) {
                                            grouplist_mem.add(all_members[i]);
                                            int to_user_id = VideoCallDataBase.getDB(context).getUserid(all_members[i]);
                                            if (to_user_id != 0) {
                                                group_list_id.add(to_user_id);
                                            }
                                        }
                                        if (!grouplist_mem.contains(ownerOfTask) && !Appreference.loginuserdetails.getUsername().equalsIgnoreCase(ownerOfTask)) {
                                            grouplist_mem.add(ownerOfTask);
                                            int to_user_id = VideoCallDataBase.getDB(context).getUserid(ownerOfTask);
                                            if (to_user_id != 0) {
                                                group_list_id.add(to_user_id);
                                            }
                                        }
                                    } else {
                                        int to_user_id = VideoCallDataBase.getDB(context).getUserid(project_List_Mems);
                                        if (to_user_id != 0) {
                                            group_list_id.add(to_user_id);
                                        }
                                    }
                                } else {
                                    ArrayList<String> grouplist = VideoCallDataBase.getDB(context).selectGroupmembers("select * from groupmember where groupid= '" + toUserId + "'", "userid");
                                    for (String groupId : grouplist) {
                                        group_list_id.add(Integer.parseInt(groupId));
                                    }
                                }
                                Log.i("ProjectCall", " group_list_id : " + group_list_id);
                                if (group_list_id.size() > 0) {
                                    callNotification(group_list_id, Appreference.loginuserdetails.getId());
                                    Appreference.broadcast_call = false;
                                }
                            } else {
                                ArrayList<Integer> group_list_id = new ArrayList<Integer>();
                                group_list_id.add(toUserId);
                                if (group_list_id.size() > 0) {
                                    callNotification(group_list_id, Appreference.loginuserdetails.getId());
                                    Appreference.broadcast_call = false;
                                }
//                                callNotification(toUserId, Appreference.loginuserdetails.getId());
                            }
                            show_CallProgress("Call Connecting...");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "multimediaImage gallary clicklistener Exception " + e.getMessage(), "WARN", null);
                    }
                }
            });
            camera.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View arg0) {
                    try {
                        dialog.dismiss();
                        if (type1.equals("image")) {
                            final String path = Environment.getExternalStorageDirectory() + "/High Message/";
                            File directory = new File(path);
                            if (!directory.exists())
                                directory.mkdir();
                            strIPath = path + getFileName() + ".jpg";
                            Intent intent = new Intent(context, CustomVideoCamera.class);
                            Uri imageUri = Uri.fromFile(new File(strIPath));
                            intent.putExtra("filePath", strIPath);
                            intent.putExtra("isPhoto", true);
                            intent.putExtra(MediaStore.EXTRA_OUTPUT, imageUri);
                            startActivityForResult(intent, 132);
                        } else if (type1.equals("video")) {
                            final String path = Environment.getExternalStorageDirectory() + "/High Message/";
                            File directory = new File(path);
                            if (!directory.exists())
                                directory.mkdir();
                            strIPath = path + getFileName() + ".mp4";
                            Intent intent = new Intent(context, CustomVideoCamera.class);
                            intent.putExtra("filePath", strIPath);
                            intent.putExtra("isPhoto", false);
                            startActivityForResult(intent, 111);
                        } else {
                            check_call = false;
                            MainActivity.isAudioCall = false;
                            if (taskType != null && taskType.equalsIgnoreCase("Group")) {
                                ArrayList<Integer> group_list_id = new ArrayList<Integer>();
                                if (project) {
                                    String users = null;

                                    ArrayList<String> project_memberlist = VideoCallDataBase.getDB(context).selectGroupmembers("select * from projectHistory where taskId= '" + toUserId + "'", "taskMemberList");
                                    Log.i("ProjectCall", "project_memberlist : " + project_memberlist);
                                    if (project_memberlist.size() > 0) {
                                        users = project_memberlist.get(0);
                                    }
                                    Log.i("ProjectCall", "users : " + users);
                                    if (users != null) {
                                        if (users.contains(",")) {
                                            String[] user_array = users.split(",");
                                            for (String us : user_array) {
                                                int to_user_id = VideoCallDataBase.getDB(context).getUserid(us);
                                                Log.i("ProjectCall", "to_user_id : " + to_user_id);
                                                if (to_user_id != 0) {
                                                    group_list_id.add(to_user_id);
                                                }
                                            }
                                        } else {
                                            int to_user_id = VideoCallDataBase.getDB(context).getUserid(users);
                                            Log.i("ProjectCall", "else to_user_id : " + to_user_id);
                                            if (to_user_id != 0) {
                                                group_list_id.add(to_user_id);
                                            }
                                        }
                                    }
                                } else {
                                    ArrayList<String> grouplist = VideoCallDataBase.getDB(context).selectGroupmembers("select * from groupmember where groupid= '" + toUserId + "'", "userid");
//                                for (String groupId : grouplist) {
//                                    callNotification(Integer.parseInt(groupId), Appreference.loginuserdetails.getId());
//                                    Appreference.broadcast_call = false;
//                                }

                                    for (String groupId : grouplist) {
                                        group_list_id.add(Integer.parseInt(groupId));
                                    }
                                }
                                if (group_list_id.size() > 0) {
                                    callNotification(group_list_id, Appreference.loginuserdetails.getId());
                                    Appreference.broadcast_call = false;
                                }
                            } else {
//                                callNotification(toUserId, Appreference.loginuserdetails.getId());
                                ArrayList<Integer> group_list_id = new ArrayList<Integer>();
                                group_list_id.add(toUserId);
                                if (group_list_id.size() > 0) {
                                    callNotification(group_list_id, Appreference.loginuserdetails.getId());
                                    Appreference.broadcast_call = false;
                                }
                            }
                            show_CallProgress("Call Connecting...");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "multimediaImage camara clicklistener Exception : " + e.getMessage(), "WARN", null);
                    }
                }
            });
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "multimediaImage Exception : " + e.getMessage(), "WARN", null);
        }
    }

    private void Priority() {
        try {
            String pri = null;
            Log.i("clone", "===> inside message response");
            final Dialog dialog = new Dialog(context);
            dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
            dialog.setContentView(R.layout.priority_selection);
            WindowManager.LayoutParams lp = new WindowManager.LayoutParams();
            lp.copyFrom(dialog.getWindow().getAttributes());
            lp.width = WindowManager.LayoutParams.MATCH_PARENT;
            lp.height = WindowManager.LayoutParams.WRAP_CONTENT;
            lp.horizontalMargin = 15;
            Window window = dialog.getWindow();
            window.setBackgroundDrawable(new ColorDrawable(Color.TRANSPARENT));
            window.setAttributes(lp);
            window.setGravity(Gravity.BOTTOM);
            dialog.show();
            final ImageView hightick = (ImageView) dialog.findViewById(R.id.hightick);
            final ImageView mediumtick = (ImageView) dialog.findViewById(R.id.mediumtick);
            final ImageView lowtick = (ImageView) dialog.findViewById(R.id.lowtick);
            final TextView High = (TextView) dialog.findViewById(R.id.high);
            final TextView Medium = (TextView) dialog.findViewById(R.id.medium);
            final TextView Low = (TextView) dialog.findViewById(R.id.low);
            TextView cancel = (TextView) dialog.findViewById(R.id.cancel);
            cancel.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View arg0) {
                    try {
                        Log.i("priority", "Cancel -->1" + toUserName);
                        dialog.dismiss();
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "Priority progress dismiss Exception : " + e.getMessage(), "WARN", null);
                    }
                }
            });
            Log.i("priority", "ownerOfTask -->0" + ownerOfTask);
            if (Appreference.loginuserdetails.getUsername().equalsIgnoreCase(ownerOfTask)) {
                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        Log.i("priority", "ownerOfTask -->1" + ownerOfTask);
                        High.setClickable(true);
                        Medium.setClickable(true);
                        Low.setClickable(true);
                        Log.i("priority", "ownerOfTask -->2" + ownerOfTask);
                    }
                });
            } else {
                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        Log.i("priority", "toUserName -->1" + toUserName);
                        High.setClickable(false);
                        Medium.setClickable(false);
                        Low.setClickable(false);
                        Log.i("priority", "toUserName -->2" + toUserName);
                    }
                });
            }
            taskDetailsBeen_1 = new ArrayList<>();
            String query_4;
            if (taskType != null && !taskType.equalsIgnoreCase("Group")) {
                query_4 = "select * from taskDetailsInfo where (fromUserName='" + Appreference.loginuserdetails.getUsername() + "' or toUserName='" + Appreference.loginuserdetails.getUsername() + "') and loginuser='" + Appreference.loginuserdetails.getEmail() + "' and taskId='" + webtaskId + "' order by id DESC";
            } else {
                query_4 = "select * from taskDetailsInfo where (fromUserId='" + toUserId + "' or toUserId='" + toUserId + "') and loginuser='" + Appreference.loginuserdetails.getEmail() + "' and taskId='" + webtaskId + "' order by id DESC";
            }
            VideoCallDataBase videoCallDataBase = new VideoCallDataBase(context);
            taskDetailsBeen_1 = videoCallDataBase.getTaskHistory(query_4);
            if (taskDetailsBeen_1.size() > 0) {
                TaskDetailsBean taskDetailsBeen_2 = taskDetailsBeen_1.get(0);
                pri = taskDetailsBeen_2.getTaskPriority();
            }
            switch (pri) {
                case "High":
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            hightick.setVisibility(View.VISIBLE);
                            mediumtick.setVisibility(View.INVISIBLE);
                            lowtick.setVisibility(View.INVISIBLE);
                        }
                    });
                    break;
                case "Medium":
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            hightick.setVisibility(View.INVISIBLE);
                            mediumtick.setVisibility(View.VISIBLE);
                            lowtick.setVisibility(View.INVISIBLE);
                        }
                    });
                    break;
                case "Low":
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            hightick.setVisibility(View.INVISIBLE);
                            mediumtick.setVisibility(View.INVISIBLE);
                            lowtick.setVisibility(View.VISIBLE);
                        }
                    });
                    break;
                default:
                    break;
            }
            High.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    priority = 2;
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            Log.i("priority", "HIgh -->1" + toUserName);
                            hightick.setVisibility(View.VISIBLE);
                            mediumtick.setVisibility(View.INVISIBLE);
                            lowtick.setVisibility(View.INVISIBLE);
                        }
                    });
                    TaskDetailsBean taskDetailsBean = new TaskDetailsBean();
                    taskDetailsBean.setTaskId(webtaskId);
                    showprogressforpriority("Setting Task Priority");
                    if (priority == 2) {
                        taskDetailsBean.setTaskPriority("High");
                    }
                    taskDetailsBean.setToUserId(String.valueOf(toUserId));
                    taskDetailsBean.setFromUserId(String.valueOf(fromId));
                    taskDetailsBean.setTaskType(taskType);
                    taskDetailsBean.setToUserName(toUserName);
                    taskDetailsBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                    try {
                        JSONObject jsonObject = new JSONObject();
                        jsonObject.put("id", webtaskId);
                        JSONObject jsonObject1 = new JSONObject();
                        jsonObject1.put("id", Appreference.loginuserdetails.getId());
                        jsonObject.put("from", jsonObject1);
                        jsonObject.put("to", toUserId);
                        jsonObject.put("dateFrequency", "");
                        jsonObject.put("timeFrequency", "");
                        jsonObject.put("taskPriority", priority);
                        jsonObject.put("status", "assigned");
                        jsonObject.put("completedPercentage", "0");
                        jsonObject.put("remark", "normal");
                        Log.i("Priority", " jsonObject----->" + jsonObject);
                        Appreference.is_Priority = true;
                        Appreference.printLog("changePercentageCompleted", jsonObject.toString(), "Request", null);
                        Appreference.jsonRequestSender.changePercentageCompleted(EnumJsonWebservicename.changePercentageCompleted, jsonObject, NewTaskConversation.this);
                    } catch (JSONException e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "changePercentageCompleted high Exception : " + e.getMessage(), "WARN", null);
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "changePercentageCompleted high Exception : " + e.getMessage(), "WARN", null);
                    }
                    try {
                        dialog.dismiss();
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "priority() highbutton clicklistener Exception " + e.getMessage(), "WARN", null);
                    }

                }
            });
            Medium.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    priority = 1;
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            Log.i("priority", "Medium -->1" + toUserName);
                            hightick.setVisibility(View.INVISIBLE);
                            mediumtick.setVisibility(View.VISIBLE);
                            lowtick.setVisibility(View.INVISIBLE);
                        }
                    });
                    TaskDetailsBean taskDetailsBean = new TaskDetailsBean();
                    taskDetailsBean.setTaskId(webtaskId);
                    showprogressforpriority("Setting Task Priority");
                    if (priority == 1) {
                        taskDetailsBean.setTaskPriority("High");
                    }
                    taskDetailsBean.setToUserId(String.valueOf(toUserId));
                    taskDetailsBean.setFromUserId(String.valueOf(fromId));
                    taskDetailsBean.setToUserName(toUserName);
                    taskDetailsBean.setTaskType(taskType);
                    taskDetailsBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                    try {
                        JSONObject jsonObject = new JSONObject();
                        jsonObject.put("id", webtaskId);
                        JSONObject jsonObject1 = new JSONObject();
                        jsonObject1.put("id", Appreference.loginuserdetails.getId());
                        jsonObject.put("from", jsonObject1);
                        jsonObject.put("to", toUserId);
                        jsonObject.put("dateFrequency", "");
                        jsonObject.put("timeFrequency", "");
                        jsonObject.put("taskPriority", priority);
                        jsonObject.put("status", "assigned");
                        jsonObject.put("completedPercentage", "0");
                        jsonObject.put("remark", "normal");
                        Log.i("Priority", " jsonObject----->" + jsonObject);
                        Appreference.is_Priority = true;
                        Appreference.printLog("changePercentageCompleted", jsonObject.toString(), "Request", null);
                        Appreference.jsonRequestSender.changePercentageCompleted(EnumJsonWebservicename.changePercentageCompleted, jsonObject, NewTaskConversation.this);
                    } catch (JSONException e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "changePercentageCompleted medium  Exception " + e.getMessage(), "WARN", null);
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "changePercentageCompleted medium  Exception " + e.getMessage(), "WARN", null);
                    }
                    try {
                        dialog.dismiss();
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "medium progress dismiss Exception " + e.getMessage(), "WARN", null);
                    }
                }
            });
            Low.setOnClickListener(new View.OnClickListener() {
                @Override
                public void onClick(View v) {
                    priority = 0;
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            Log.i("priority", "Low -->1" + toUserName);
                            hightick.setVisibility(View.INVISIBLE);
                            mediumtick.setVisibility(View.INVISIBLE);
                            lowtick.setVisibility(View.VISIBLE);
                        }
                    });
                    TaskDetailsBean taskDetailsBean = new TaskDetailsBean();
                    taskDetailsBean.setTaskId(webtaskId);
                    showprogressforpriority("Setting Task Priority");
                    if (priority == 0) {
                        taskDetailsBean.setTaskPriority("High");
                    }
                    taskDetailsBean.setToUserId(String.valueOf(toUserId));
                    taskDetailsBean.setFromUserId(String.valueOf(fromId));
                    taskDetailsBean.setToUserName(toUserName);
                    taskDetailsBean.setTaskType(taskType);
                    taskDetailsBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                    try {
                        JSONObject jsonObject = new JSONObject();
                        jsonObject.put("id", webtaskId);
                        JSONObject jsonObject1 = new JSONObject();
                        jsonObject1.put("id", Appreference.loginuserdetails.getId());
                        jsonObject.put("from", jsonObject1);
                        jsonObject.put("to", toUserId);
                        jsonObject.put("dateFrequency", "");
                        jsonObject.put("timeFrequency", "");
                        jsonObject.put("taskPriority", priority);
                        jsonObject.put("status", "assigned");
                        jsonObject.put("completedPercentage", "0");
                        jsonObject.put("remark", "normal");
                        Log.i("Priority", " jsonObject----->" + jsonObject);
                        Appreference.is_Priority = true;
                        Appreference.printLog("changePercentageCompleted", jsonObject.toString(), "Request", null);
                        Appreference.jsonRequestSender.changePercentageCompleted(EnumJsonWebservicename.changePercentageCompleted, jsonObject, NewTaskConversation.this);
                    } catch (JSONException e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "changePercentageCompleted Low  Exception : " + e.getMessage(), "WARN", null);
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "changePercentageCompleted Low  Exception : " + e.getMessage(), "WARN", null);
                    }
                    try {
                        dialog.dismiss();
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "Low progress dismiss Exception : " + e.getMessage(), "WARN", null);
                    }
                }
            });
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "Low priority Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void notifytaskEntryResponse(final String values) {
        cancelDialog();
        Appreference.webview_refresh = true;
        finish();
        try {
            JSONObject json = new JSONObject(values);
            if (values.contains("result_code")) {
                int resultCode = json.getInt("result_code");
                final String text = json.getString("result_text");
            } else {
                showToast("Post failed");
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "notifytaskEntryResponse Exception " + e.getMessage(), "WARN", null);
        }
    }

    public String getFileName() {
        String strFilename = null;
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("ddMMyyyyHHmmss");
            Date date = new Date();
            strFilename = dateFormat.format(date);
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "getFileName Exception " + e.getMessage(), "WARN", null);
        }
        return strFilename;
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {
        // TODO Auto-generated method stub
        try {
            Log.d("task", "inside activity result page" + RESULT_OK + " resultCode :" + resultCode + " requestCode :" + requestCode);
            super.onActivityResult(requestCode, resultCode, data);
            if (resultCode == RESULT_OK) {
                if (requestCode == 30) {
                    if (data != null) {
                        Uri selectedImageUri = data.getData();
                        strIPath = getRealPathFromURI(selectedImageUri);
                        mime_Type = "image";
                        File selected_file = new File(strIPath);
                        int length = (int) selected_file.length() / 1048576;
                        if (length <= 2) {
                            Bitmap img = null;
                            img = convertpathToBitmap(strIPath);
                            if (img != null) {
                                img = Bitmap.createScaledBitmap(img, 100, 75, false);
                                final String path = Environment.getExternalStorageDirectory() + "/High Message/" + getFileName() + ".jpg";
                                BufferedOutputStream stream;
                                Bitmap bitmap = null;
                                try {
                                    bitmap = convertpathToBitmap(strIPath);
                                    if (bitmap != null) {
                                        stream = new BufferedOutputStream(new FileOutputStream(new File(path)));
                                        bitmap.compress(Bitmap.CompressFormat.JPEG, 100, stream);
                                        Log.d("filePath  1 ", strIPath);
                                        strIPath = path;
                                        Log.d("filePath  2 ", strIPath);
                                    }
                                    if (bitmap != null) {
                                        bitmap = Bitmap.createScaledBitmap(bitmap, 200, 150, false);
                                    }
                                    refresh();
                                    if (subType != null && subType.equalsIgnoreCase("private")) {
                                        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                                        String dateTime = dateFormat.format(new Date());
                                        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                                        String dateforrow = dateFormat.format(new Date());
                                        tasktime = dateTime;
                                        tasktime = tasktime.split(" ")[1];
                                        Log.i("task", "tasktime" + tasktime);
                                        Log.i("UTC", "sendMessage utc time" + dateforrow);
                                        taskUTCtime = dateforrow;
                                        final TaskDetailsBean chatBean = new TaskDetailsBean();
                                        chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                                        chatBean.setPrivate_Member(private_member);
                                        chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                                        chatBean.setSelect(false);
                                        chatBean.setToUserName(toUserName);
                                        chatBean.setToUserId(String.valueOf(toUserId));
                                        if (isTaskName) {
                                            taskName = "New Task";
                                            chatBean.setTaskName(taskName);
                                            Log.i("taskconversation", "headername  15 ");
                                        } else {
                                            chatBean.setTaskName(taskName);
                                            Log.e("task", "taskname " + taskName);
                                        }
                                        chatBean.setTaskDescription(strIPath);
                                        chatBean.setSignalid(Utility.getSessionID());
                                        chatBean.setTaskNo(task_No);
                                        chatBean.setCatagory(category);
                                        chatBean.setIssueId(issueId);
                                        chatBean.setParentId(getFileName());
                                        chatBean.setTaskType(taskType);
                                        chatBean.setTaskPriority("Medium");
                                        chatBean.setIsRemainderRequired("");
                                        chatBean.setCompletedPercentage(percentage);
                                        chatBean.setPlannedStartDateTime("");
                                        chatBean.setPlannedEndDateTime("");
                                        chatBean.setRemainderFrequency("");
                                        chatBean.setTaskUTCDateTime(dateforrow);
                                        chatBean.setDateTime(dateTime);
                                        chatBean.setTaskReceiver(taskReceiver);
                                        chatBean.setTasktime(tasktime);
                                        chatBean.setTaskUTCTime(taskUTCtime);
                                        chatBean.setMimeType("image");
                                        chatBean.setTaskId(webtaskId);
                                        chatBean.setOwnerOfTask(ownerOfTask);
                                        chatBean.setCustomTagVisible(true);
                                        chatBean.setTaskStatus(taskStatus);
                                        chatBean.setSendStatus("0");
                                        chatBean.setShow_progress(0);
                                        chatBean.setMsg_status(0);
                                        chatBean.setSubType(subType);
                                        if (project) {
                                            chatBean.setProjectId(projectId);
                                            if (projectGroup_Mems != null) {
                                                chatBean.setGroupTaskMembers(projectGroup_Mems);
                                            }
                                        }
                                        if (!isTaskName) {
                                            if (project) {
                                                VideoCallDataBase.getDB(context).update_Project_history(chatBean);
                                            } else {
                                                dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                                            }
                                            Log.i("taskconversation", "CusTome ---->>><<< 6 ");
                                            dataBase.insertORupdate_Task_history(chatBean);
//                                            dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                                            if (chatBean.isCustomTagVisible()) {
                                                taskList.add(chatBean);
                                            }
                                            sortTaskMessage();
                                            refresh();
                                            refreshListViewCache();
                                        }
                                        listLastposition();
                                        PrivateMultifileUpload_Webservice(chatBean);
                                    } else {
                                        firstmmfile(mime_Type, "jpg");
                                        refreshListViewCache();
                                    }
                                } catch (Exception e) {
                                    // TODO Auto-generated catch block
                                    e.printStackTrace();
                                    Appreference.printLog("NewTaskConversation", "onActivityResult 30 image Exception " + e.getMessage(), "WARN", null);
                                }
                            }
                        }
                    }
                } else if (requestCode == 101) {
                    try {
                        Log.d("Observer", "Inside Observer list    == ");
                        remove_check = false;
                        ArrayList<String> list1 = new ArrayList<>();
                        ArrayList<String> list2 = new ArrayList<>();
                        rejected = new ArrayList<>();
                        list1 = data.getStringArrayListExtra("observer");
                        list2 = data.getStringArrayListExtra("rejected");
                        ArrayList<String> newly_added_user = data.getStringArrayListExtra("added");
                        Log.d("Observer", "Observer     == " + list1.size() + "");
                        Log.d("Observer", "Rejected Observer     == " + list2.size() + "");
                        Log.d("Observer", "Observer     == " + list1 + "");
                        Log.d("Observer", "Rejected Observer     == " + list2 + "");
                        if (list1.size() > 0 && taskType != null && !taskType.equalsIgnoreCase("group")) {
                            //                        listOfObservers.clear();
                            //                        listObservers.clear();
                            for (String names : list1) {
                                if (!listOfObservers.contains(names)) {
                                    listOfObservers.add(names);
                                    listObservers.add(names);
                                }
                            }
                        } else if (list1.size() > 0) {
                            rejected.addAll(list1);
                            for (String name : rejected) {
                                Log.i("observer", "rejected " + name);
                            }
                            for (int i = 0; i < listOfObservers.size(); i++) {
                                String name = listOfObservers.get(i);
                                for (String rejectname : rejected) {
                                    if (!rejectname.equalsIgnoreCase(name)) {
                                        if (!listOfObservers.contains(rejectname)) {
                                            listOfObservers.add(rejectname);
                                            listObservers.add(rejectname);
                                        }
                                        Log.i("taskobserver", "removed " + name);
                                    }
                                }
                            }
                            rejected.clear();
                        }
                        Log.i("taskobserver", "removed " + listObservers);
                        Log.i("taskobserver", "removed *** " + listOfObservers);
                        Log.i("taskobserver", "removed " + list2);
                        if (list2.size() > 0) {
                            remove_check = true;
                            rejected.addAll(list2);
                        }
                        if (taskReceiver != null && !taskReceiver.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                            boolean ch = false;
                            for (int i = 0; i < listOfObservers.size(); i++) {
                                String name = listOfObservers.get(i);
                                if (name.equalsIgnoreCase(taskReceiver)) {
                                    ch = true;
                                    break;
                                }
                            }
                            if (!ch) {
                                if (!listOfObservers.contains(taskReceiver))
                                    listOfObservers.add(taskReceiver);
                            }
                        }
                        for (String name : listOfObservers)
                            Log.i("observer", "observer1 " + name);
//                    sendObserver(list1, list2);
                        String sig_id = Utility.getSessionID();

                        String content = Appreference.loginuserdetails.getUsername();
                        if (Appreference.loginuserdetails.getFirstName() != null && Appreference.loginuserdetails.getLastName() != null) {
                            content = Appreference.loginuserdetails.getFirstName() + " " + Appreference.loginuserdetails.getLastName();
                        } else if (Appreference.loginuserdetails.getFirstName() != null) {
                            content = Appreference.loginuserdetails.getFirstName();
                        }

                        String added_uers = null;
                        String removed_users = null;
                        String added_user_names = null;
                        String removed_user_names = null;
                        for (String ad_user : newly_added_user) {
                            if (added_uers == null) {
                                added_uers = ad_user;
                                added_user_names = VideoCallDataBase.getDB(this).getname(ad_user);
                            } else {
                                added_uers = added_uers + "," + ad_user;
                                added_user_names = added_user_names + "," + VideoCallDataBase.getDB(this).getname(ad_user);
                            }
                        }

                        for (String rm_user : list2) {
                            if (removed_users == null) {
                                removed_users = rm_user;
                                removed_user_names = VideoCallDataBase.getDB(this).getname(rm_user);
                            } else {
                                removed_users = removed_users + "," + rm_user;
                                removed_user_names = removed_user_names + "," + VideoCallDataBase.getDB(this).getname(rm_user);
                            }
                        }

                        if (added_user_names != null) {
                            content = content + " added " + added_user_names + " as observer";
                            if (removed_users != null) {
                                content = content + " and Removed " + removed_user_names + " from observer";
                            }
                        } else if (removed_user_names != null) {
                            content = content + " Removed " + removed_user_names + " from observer";
                        }
                        Log.i("addobserver", "content : " + content);
                        String total_current_observers = null;
                        if (list1 != null) {
                            for (String tot_observer : list1) {
                                if (total_current_observers == null) {
                                    total_current_observers = tot_observer;
                                } else {
                                    total_current_observers = total_current_observers + "," + tot_observer;
                                }
                            }
                        }

                        if (content != null) {
                            TaskDetailsBean chatBean = new TaskDetailsBean();
                            if (added_uers != null) {
                                chatBean.setTaskAddObservers(added_uers);
                            }

                            if (removed_users != null) {
                                chatBean.setTaskRemoveObservers(removed_users);
                            }

                            if (total_current_observers != null) {
                                chatBean.setTaskObservers(total_current_observers);
                            }

                            Log.d("ListOfSender", listOfObservers + " ");
                            PercentageWebService(content, sig_id, chatBean);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 101 observer Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 212) {
                    try {
                        test = data.getStringExtra("remarks");
                        TaskDetailsBean mediaListBean1 = (TaskDetailsBean) data.getExtras().getSerializable("value");
                        Log.i("Resolve", "onActiveResult getTaskId " + mediaListBean1.getTaskId());
                        Log.i("Resolve", "onActiveResult getSignalid " + mediaListBean1.getSignalid());
                        VideoCallDataBase.getDB(context).updateDependency(mediaListBean1.getSignalid(), mediaListBean1.getTaskId());
                        for (TaskDetailsBean taskDetailsBean2 : taskList) {
                            if (mediaListBean1.getSignalid().equalsIgnoreCase(taskDetailsBean2.getSignalid())) {
                                Log.i("dependency", "taskDetailsBean_1 " + taskDetailsBean2.getSignalid());
                                Log.i("dependency", "withdraw 1 " + mediaListBean1.getSignalid());
                                taskDetailsBean2.setMsg_status(22);
                                taskDetailsBean2.setRequestStatus("Resolved");
                                Log.i("dependency", "withdraw 1 " + mediaListBean1.getMsg_status());
                            }
                        }
                        sortTaskMessage();
                        refresh();
                        ArrayList<TaskDetailsBean> beanArrayList = (ArrayList<TaskDetailsBean>) data.getExtras().getSerializable("media");
                        Log.i("Task1", "test" + test);
                        for (int k = 0; k < 1; k++) {
                            if (!test.equals("sam")) {
                                PercentageWebService("text", test, " ", Utility.getSessionID(), 3);
                            } else
                                continue;
                        }
                        for (int k = 0; k < beanArrayList.size(); k++) {
                            TaskDetailsBean mediaListBean = new TaskDetailsBean();
                            mediaListBean = beanArrayList.get(k);
                            if (subType == null && subType.equalsIgnoreCase(null) && subType.equalsIgnoreCase("")) {
                                subType = "normal";
                            } else if (subType != null && !subType.equalsIgnoreCase("taskDescription")) {
                                subType = "normal";
                            }
                            String sig_id = Utility.getSessionID();
                            Log.i("taskconversation", "mediaListBean.getTaskDescription() " + mediaListBean.getTaskDescription());
                            Log.i("taskconversation", "mediaListBean.getMimeType() --------> 1 " + mediaListBean.getMimeType());
                            if (mediaListBean.getMimeType() != null && !mediaListBean.getMimeType().equalsIgnoreCase("") && !mediaListBean.getMimeType().equalsIgnoreCase("map")) {
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 2 " + mediaListBean.getMimeType());
                                PercentageWebService(mediaListBean.getMimeType(), mediaListBean.getTaskDescription(), mediaListBean.getTaskDescription().split("\\.")[1], sig_id, 1);
                            }
                            if (mediaListBean.getMimeType() != null && !mediaListBean.getMimeType().equalsIgnoreCase("") && mediaListBean.getMimeType().equalsIgnoreCase("map")) {
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 3 " + mediaListBean.getMimeType());
                                PercentageWebService("map", mediaListBean.getTaskDescription(), "", sig_id, 1);
                                sendMessage(mediaListBean.getTaskDescription(), null, "map", null, null, sig_id, null);
                            }
                        }
                    } catch (Resources.NotFoundException e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 212  Exception " + e.getMessage(), "WARN", null);
                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 212 Exception " + e.getMessage(), "WARN", null);
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 212 Exception " + e.getMessage(), "WARN", null);
                    }


                } else if (requestCode == 210) {
                    try {
                        percentage = data.getStringExtra("percentage");
                        percentage_value = percentage;
                        String signal_id = null, parent_id = null;
                        test = data.getStringExtra("remarks");
                        ArrayList<TaskDetailsBean> beanArrayList = (ArrayList<TaskDetailsBean>) data.getExtras().getSerializable("media");
                        int s = beanArrayList.size();
                        Log.i("Task1", "path" + strIPath);
                        Log.i("Task1", "test" + test);
                        getTaskListforPercentage = new ArrayList<>();
                        if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                            showprogressforpriority("Updating Task");
                        }
                        for (int k = 0; k < 2; k++) {
                            Log.i("taskconversation", "mediaListBean.getMimeType() --------> 001 ");
                            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                            String dateTime = dateFormat.format(new Date());
                            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                            String dateforrow = dateFormat.format(new Date());
                            tasktime = dateTime;
                            tasktime = tasktime.split(" ")[1];
                            Log.i("task", "tasktime" + tasktime);
                            Log.i("UTC", "sendMessage utc time" + dateforrow);
                            Log.i("time", "value");
                            taskUTCtime = dateforrow;
                            final TaskDetailsBean chatBean = new TaskDetailsBean();
                            chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                            chatBean.setToUserName(toUserName);
                            chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                            chatBean.setSelect(false);
                            chatBean.setToUserId(String.valueOf(toUserId));
                            chatBean.setTaskType(taskType);
                            if (k == 0) {
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 002 ");
                                chatBean.setTaskName("text");
                                chatBean.setTaskDescription("Completed Percentage " + percentage + "%");
                                chatBean.setMimeType("text");
                                Log.d("percentage", "type of Percentage :" + percentage);
                                Log.d("percentage", "Completed Percentage " + percentage);
                            } else if (k == 1) {
                                if (!test.equals("sam")) {
                                    chatBean.setTaskName("text");
                                    chatBean.setTaskDescription(test);
                                    chatBean.setMimeType("text");
                                    Log.i("taskconversation", "mediaListBean.getMimeType() --------> 003 ");
                                } else
                                    continue;
                            }
                            chatBean.setTaskNo(task_No);
                            if (category != null && category.equalsIgnoreCase("taskCreation")) {
                                category = "Task";
                            }
                            chatBean.setCatagory(category);
                            chatBean.setIssueId(issueId);
                            chatBean.setParentId(getFileName());
                            chatBean.setIsRemainderRequired("");
                            if (percentage != null) {
                                chatBean.setCompletedPercentage(percentage);
                            }
                            chatBean.setPlannedStartDateTime("");
                            chatBean.setPlannedEndDateTime("");
                            chatBean.setRemainderFrequency("");
                            chatBean.setSignalid(Utility.getSessionID());
                            signal_id = chatBean.getSignalid();
                            chatBean.setParentId(getFileName());
                            parent_id = chatBean.getParentId();
                            chatBean.setDateTime(dateTime);
                            chatBean.setTaskUTCDateTime(dateforrow);
                            chatBean.setTaskName(taskName);
                            chatBean.setOwnerOfTask(ownerOfTask);
                            chatBean.setCustomTagVisible(true);
                            chatBean.setTaskId(webtaskId);
                            chatBean.setTasktime(tasktime);
                            chatBean.setTaskUTCTime(taskUTCtime);
                            chatBean.setTaskReceiver(taskReceiver);
                            chatBean.setTaskPriority("Medium");
                            if (subType != null && subType.equalsIgnoreCase("taskDescription") && !chatBean.getTaskDescription().contains("Completed Percentage ")) {
                                chatBean.setSubType(subType);
                                chatBean.setTaskRequestType(subType);
                            } else if (subType != null && subType.equalsIgnoreCase("normal")) {
                                chatBean.setSubType(subType);
                                chatBean.setTaskRequestType("percentageCompleted");
                            } else {
                                chatBean.setSubType("normal");
                            }
                            if (project) {
                                chatBean.setProjectId(projectId);
                                if (projectGroup_Mems != null) {
                                    chatBean.setGroupTaskMembers(projectGroup_Mems);
                                }
                            }
                            // send status 0 is send 1 is unsend
                            chatBean.setSendStatus("0");
                            if (taskType != null && taskType.equalsIgnoreCase("Group") && (percentage.equalsIgnoreCase("100%") || percentage.equalsIgnoreCase("100"))) {
                                timerstop();
                                if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()))
                                    taskStatus = "closed";
                                else
                                    taskStatus = "Completed";
                            } else {
                                Log.i("Accept", "value_taskStatus 210 ** " + taskStatus);
                                if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) && (percentage.equalsIgnoreCase("100%") || percentage.equalsIgnoreCase("100"))) {
                                    if (note) {
                                        taskStatus = "note";
                                    } else {
                                        taskStatus = "closed";
                                    }
                                    //                                taskStatus = "closed";
                                    timerstop();
                                    isGrp_Percent = true;
                                    VideoCallDataBase.getDB(context).updatetaskstatus(chatBean.getTaskId());
                                } else if (!ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) && (percentage.equalsIgnoreCase("100%") || percentage.equalsIgnoreCase("100"))) {
                                    taskStatus = "Completed";
                                    timerstop();
                                    VideoCallDataBase.getDB(context).updatetaskstatus(chatBean.getTaskId());
                                } else {
                                    if (percentage != null && !percentage.equalsIgnoreCase("100")) {
                                        if (!isProjectFromOracle) {
                                            taskStatus = "inprogress";
                                        }
                                    }
                                    VideoCallDataBase.getDB(context).updateGroupTaskStatus(chatBean.getTaskId(), percentage);
                                    Log.i("Accept", "value_taskStatus isnow " + taskStatus + " " + percentage);
                                    VideoCallDataBase.getDB(context).updateaccept("update taskHistoryInfo set completedPercentage='" + percentage + "' and taskStatus='" + taskStatus + "'  where taskId='" + webtaskId + "'");
                                }
                            }

                            int percent_value = Integer.parseInt(percentage);
                            if (percent_value < 100) {
                                reminderTimerDisplay();
                            }
                            chatBean.setTaskStatus(taskStatus);
                            Log.i("Task", "Status of Percentage :" + taskStatus);
                            Log.i("Task1", "image" + chatBean.getTaskDescription());
                            if (!isTaskName) {
                                if (chatBean.isCustomTagVisible()) {
                                    if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) && chatBean.getTaskDescription().equalsIgnoreCase("Completed Percentage 100%")) {

                                    } else {
                                        taskList.add(chatBean);
                                    }
                                }
                            }
                            getTaskListforPercentage.add(chatBean);
                            Log.i("Accept", "taskStatus 66666 --> " + category);
                            if (!isTaskName) {
                                if (project) {
                                    Log.i("taskconversation", "mediaListBean.getMimeType() --------> 006 " + chatBean.getCompletedPercentage());
                                    if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) && (chatBean.getTaskDescription().equalsIgnoreCase("Completed Percentage 100%") || chatBean.getTaskDescription().equalsIgnoreCase("This task is closed"))) {
                                        VideoCallDataBase.getDB(context).updateaccept("update projectHistory set completedPercentage='" + chatBean.getCompletedPercentage() + "' and taskStatus='" + taskStatus + "'  where taskId='" + webtaskId + "'");
                                    } else {
                                        VideoCallDataBase.getDB(context).update_Project_history(chatBean);
                                    }
                                } else {
                                    Log.i("taskconversation", "mediaListBean.getMimeType() --------> Task  ");
                                    if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) && (chatBean.getTaskDescription().equalsIgnoreCase("Completed Percentage 100%") || chatBean.getTaskDescription().equalsIgnoreCase("This task is closed"))) {
                                        VideoCallDataBase.getDB(context).updateaccept("update taskHistoryInfo set completedPercentage='" + chatBean.getCompletedPercentage() + "' and taskStatus='" + taskStatus + "'  where taskId='" + webtaskId + "'");
                                    } else {
                                        if (!chat)
                                            dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                                    }
                                }
                                if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) && chatBean.getTaskDescription().equalsIgnoreCase("Completed Percentage 100%")) {

                                } else {
                                    dataBase.insertORupdate_Task_history(chatBean);
                                }
                            }
                            if (VideoCallDataBase.getDB(context).giverTaskCompletion(chatBean.getTaskId(), chatBean.getOwnerOfTask())) {
                                task_approve.setVisibility(View.GONE);
                                actorrej.setVisibility(View.GONE);
                                Log.i("ApproveTask", "percent UI " + taskStatus);
                            }
                            String query3 = "update taskDetailsInfo  set completedPercentage = " + percentage + " where ('" + chatBean.getTaskId() + "'= taskId ) and loginuser='" + Appreference.loginuserdetails.getEmail() + "';";
                            if (taskType != null && taskType.equalsIgnoreCase("Group")) {
                            } else {
                                VideoCallDataBase.getDB(context).getTaskHistory(query3);
                            }
                            if (chatBean.getCompletedPercentage().equals("100")) {
                                if (getResources().getString(R.string.TASKNOTIFICATION_FROM_SERVER).equalsIgnoreCase("0")) {
                                    Log.i("Task", "Push Notification from client - value is " + getResources().getString(R.string.TASKNOTIFICATION_FROM_SERVER));
                                    cancelAlarmId = Integer.parseInt(chatBean.getTaskId());
                                    if (cancelAlarmId != 0) {
                                        try {
                                            AlarmManager am = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
                                            Intent it = new Intent(this, ScheduleManager.class);
                                            PendingIntent pi = PendingIntent.getBroadcast(this, cancelAlarmId,
                                                    it, 0);
                                            if (pi != null) {
                                                Log.d("Task", "Alarm cancelled in task conversation itself");
                                                am.cancel(pi);
                                                pi.cancel();
                                            }
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                            Appreference.printLog("NewTaskConversation", "onActivityResult 210 stop Exception " + e.getMessage(), "WARN", null);
                                        }
                                    } else {
                                        Log.d("Task", "Alarm not cancelled in task conversation itself");
                                    }
                                }
                            }
                        }

                        try {
                            JSONObject[] listpostfiles_object1 = new JSONObject[beanArrayList.size()];
                            int i = 0;
                            for (int k = 0; k < beanArrayList.size(); k++) {
                                TaskDetailsBean mediaListBean = new TaskDetailsBean();
                                mediaListBean = beanArrayList.get(k);
                                if (mediaListBean.getTaskDescription() != null) {
                                    listpostfiles_object1[i] = new JSONObject();
                                    listpostfiles_object1[i].put("fileType", type);
                                    File file = new File(mediaListBean.getTaskDescription());
                                    String imgcontent = "";
                                    switch (mediaListBean.getMimeType().trim().toLowerCase()) {
                                        case "image":
                                            listpostfiles_object1[i].put("taskFileExt", "jpg");
                                            imgcontent = encodeTobase64(BitmapFactory.decodeFile((file.getPath())));
                                            break;
                                        case "video":
                                            listpostfiles_object1[i].put("taskFileExt", "mp4");
                                            imgcontent = encodeAudioVideoToBase64(file.getPath());
                                            break;
                                        case "audio":
                                            listpostfiles_object1[i].put("taskFileExt", "mp3");
                                            imgcontent = encodeAudioVideoToBase64(file.getPath());
                                            break;
                                    }
                                    JSONObject jsonObject3 = new JSONObject();
                                    jsonObject3.put("id", fromId);
                                    Log.i("AAA", "new post" + mediaListBean.getTaskDescription());
                                    listpostfiles_object1[i].put("fileContent", imgcontent);
                                    listpostfiles_object1[i].put("fileType", mediaListBean.getMimeType());
                                    listpostfiles_object1[i].put("user", jsonObject3);
                                }
                                i++;
                            }
                            JSONArray listpostfiles_object = new JSONArray();
                            for (int i1 = 0; i1 < listpostfiles_object1.length; i1++) {
                                listpostfiles_object.put(listpostfiles_object1[i1]);
                            }
                            JSONObject jsonObject = new JSONObject();
                            JSONObject jsonObject1 = new JSONObject();
                            jsonObject1.put("id", webtaskId);
                            jsonObject.put("task", jsonObject1);
                            JSONObject jsonObject2 = new JSONObject();
                            jsonObject2.put("id", fromId);
                            jsonObject.put("from", jsonObject2);
                            JSONObject jsonObject3 = new JSONObject();
                            if (note) {
                                jsonObject3.put("id", fromId);
                            } else {
                                jsonObject3.put("id", toUserId);
                            }
                            if (!project) {
                                if (taskType != null && taskType.equalsIgnoreCase("Group")) {
                                    Log.i("task", "tasktype task group " + taskType);
                                    jsonObject.put("group", jsonObject3);
                                } else {
                                    Log.i("task", "tasktype task individual " + taskType);
                                    jsonObject.put("to", jsonObject3);
                                }
                            }
                            jsonObject.put("signalId", signal_id);
                            jsonObject.put("parentId", parent_id);
                            jsonObject.put("createdDate", dateFormat.format(new Date()));
                            jsonObject.put("percentageCompleted", percentage);
                            jsonObject.put("taskNo", task_No);
                            jsonObject.put("requestType", "percentageCompleted");
                            if (percentage.equalsIgnoreCase("100") && ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                jsonObject.put("taskStatus", "closed");
                            } else if (percentage.equalsIgnoreCase("100") && !ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                jsonObject.put("taskStatus", "Completed");
                            } else {
                                if (isProjectFromOracle) {
                                    jsonObject.put("taskStatus", taskStatus);
                                } else {
                                    jsonObject.put("taskStatus", "inprogress");
                                }
                            }
                            percent = percentage;
                            Log.i("TaskEntry", "taskConversationEntry 1");
                            Log.i("percentage", "webservice jobject " + jsonObject);
                            if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                                if ((percentage != null && !percentage.equalsIgnoreCase("100")) || !ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                    try {
                                        Appreference.printLog("taskConversationEntry", jsonObject.toString(), "Request", null);
                                        Appreference.jsonRequestSender.taskConversationEntry(EnumJsonWebservicename.taskConversationEntry, jsonObject, NewTaskConversation.this, getTaskListforPercentage, null);
                                    } catch (Exception e) {
                                        e.printStackTrace();
                                        Appreference.printLog("NewTaskConversation", "taskConversationEntry 210 Exception : " + e.getMessage(), "WARN", null);
                                    }
                                } else {
                                    for (TaskDetailsBean chatBean : getTaskListforPercentage) {
                                        if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) && chatBean.getCompletedPercentage().equalsIgnoreCase("100")) {
                                            if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                                                if (chatBean.getTaskDescription() != null && chatBean.getTaskDescription().equalsIgnoreCase("Completed Percentage 100%"))
                                                    PercentageWebService("text", "This " + category + " is closed", "", Utility.getSessionID(), 0);
                                            } else {
                                                sendMessage("This '" + category + "' is closed", null, "text", null, "", Utility.getSessionID(), null);
                                            }
                                        }
                                        if (chatBean.getMimeType().equalsIgnoreCase("text") && !chatBean.getTaskDescription().equalsIgnoreCase("Completed Percentage 100%")) {
                                            if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                                                PercentageWebService("text", chatBean.getTaskDescription(), "", chatBean.getSignalid(), 0);
                                            }
                                        }
                                    }
                                }
                            } else {
                                if (getTaskListforPercentage.size() > 1) {
                                    for (TaskDetailsBean chatBean : getTaskListforPercentage) {
                                        if (chatBean.getMimeType().equalsIgnoreCase("text")) {
                                            if (!template || note) {
                                                if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) && chatBean.getCompletedPercentage().equalsIgnoreCase("100")) {
                                                    if (category != null) {
                                                        chatBean.setTaskDescription("This " + category + " is closed");
                                                    } else {
                                                        chatBean.setTaskDescription("This Task is closed");
                                                    }
                                                    sendMessage(chatBean.getTaskDescription(), null, "text", null, "", chatBean.getSignalid(), null);
                                                } else {
                                                    Log.i("percentage", "chatBean.getCompletedPercentage() fff " + chatBean.getCompletedPercentage());
                                                    sendMessage(chatBean.getTaskDescription(), null, "text", null, "", chatBean.getSignalid(), null);
                                                }
                                            } else {
                                                updateTemplateStatus(chatBean);
                                            }
                                        }
                                    }
                                } else {
                                    TaskDetailsBean chatBean = getTaskListforPercentage.get(0);
                                    if (!template || note || project) {
                                        String sig_id = Utility.getSessionID();
                                        if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                            if (percentage != null && percentage.equalsIgnoreCase("100") || percentage.equalsIgnoreCase("100%")) {
                                                if (category != null) {
                                                    sendMessage("This " + category + " is closed", null, "text", null, "", sig_id, null);
                                                } else {
                                                    sendMessage("This Task is closed", null, "text", null, "", sig_id, null);
                                                }
                                            } else {
                                                sendMessage(chatBean.getTaskDescription(), null, "text", null, "", chatBean.getSignalid(), null);
                                            }
                                        } else {
                                            sendMessage(chatBean.getTaskDescription(), null, "text", null, "", chatBean.getSignalid(), null);
                                        }
                                        Log.i("taskconversation", "mediaListBean.getMimeType() --------> 008 ");
                                    }
                                }
                            }

                            for (int k = 0; k < beanArrayList.size(); k++) {
                                TaskDetailsBean mediaListBean = new TaskDetailsBean();
                                mediaListBean = beanArrayList.get(k);
                                if (subType == null && subType.equalsIgnoreCase(null) && subType.equalsIgnoreCase("")) {
                                    subType = "normal";
                                } else if (subType != null && !subType.equalsIgnoreCase("taskDescription")) {
                                    subType = "normal";
                                }
                                String sig_id = Utility.getSessionID();
                                Log.i("taskconversation", "mediaListBean.getTaskDescription() " + mediaListBean.getTaskDescription());
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 1 " + mediaListBean.getMimeType());
                                if (mediaListBean.getMimeType() != null && !mediaListBean.getMimeType().equalsIgnoreCase("") && !mediaListBean.getMimeType().equalsIgnoreCase("map")) {
                                    Log.i("taskconversation", "mediaListBean.getMimeType() --------> 2 " + mediaListBean.getMimeType());
                                    PercentageWebService(mediaListBean.getMimeType(), mediaListBean.getTaskDescription(), mediaListBean.getTaskDescription().split("\\.")[1], sig_id, 1);
                                }
                                if (mediaListBean.getMimeType() != null && !mediaListBean.getMimeType().equalsIgnoreCase("") && mediaListBean.getMimeType().equalsIgnoreCase("map")) {
                                    ispercentageLocation = true;
                                    Log.i("percent", "map ==> " + ispercentageLocation);
                                    Log.i("taskconversation", "mediaListBean.getMimeType() --------> 3 " + mediaListBean.getMimeType());
                                    PercentageWebService("map", mediaListBean.getTaskDescription(), "", sig_id, 1);
//                                    sendMessage(mediaListBean.getTaskDescription(), null, "map", null, "map", sig_id, null);
                                }
                            }

                        } catch (Exception e) {
                            e.printStackTrace();
                            Appreference.printLog("NewTaskConversation", "onActivityResult 210 webservice Exception " + e.getMessage(), "WARN", null);
                        }
                    } catch (Resources.NotFoundException e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 210 percentage Exception " + e.getMessage(), "WARN", null);
                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 210  percentage Exception " + e.getMessage(), "WARN", null);
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 210  percentage Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 336) {
                    try {
                        Log.d("task", "inside activity result page  2");
                        startdate = data.getStringExtra("StartDate");
                        enddate = data.getStringExtra("EndDate");
                        reminderdate = data.getStringExtra("ReminderDate");
                        reminderfreq = data.getStringExtra("ReminderFrequency");
                        reminderquote = data.getStringExtra("ReminderQuote");
                        remindertone = data.getStringExtra("ReminderTone");
                        accept_list = new ArrayList<>();
                        accept_list = VideoCallDataBase.getDB(context).getTaskHistory("select * from taskDetailsInfo where taskId='" + webtaskId + "' and taskDescription = '" + category + " accepted' order by id desc");
                        Weekdays = data.getStringExtra("Weekdays");
                        date_header = data.getStringExtra("changedateheader");
                        Log.i("date", "startdate" + startdate);
                        Log.i("date", "enddate" + enddate);
                        Log.i("date", "reminderdate" + reminderdate);
                        Log.i("date", "reminderfreq" + reminderfreq);
                        Log.i("date", "reminderquote" + reminderquote);
                        Log.i("date", "remindertone" + remindertone);
                        Log.i("date", "date_header" + date_header);
                        Log.i("date", "WeekDays" + Weekdays);
                        Log.i("task", "reminderfreq" + reminderfreq);
                        final_date = date_header + "\n" + "Startdate : " + startdate + " Enddate : " + enddate + " Reminderdate : " + reminderdate + " Reminderfreq : " + reminderfreq;
                        Log.i("task", "composed date for showing UI----> " + final_date);
                        Log.i("task", "Appreference.conflicttask " + Appreference.conflicttask);
                        if (taskStatus != null && taskStatus.equalsIgnoreCase("overdue")) {
                            String qry = "select * from taskDetailsInfo where taskId='" + webtaskId + "' and mimeType='overdue'";
                            ArrayList<TaskDetailsBean> list = VideoCallDataBase.getDB(this).getTaskHistory(qry);
                            if (list.size() > 0) {
                                VideoCallDataBase.getDB(this).updateOverdueStatus(webtaskId);
                            }
                            String removing_fromlist = "select * from taskDetailsInfo where taskId='" + webtaskId + "' and mimeType='overdue'";
                            ArrayList<TaskDetailsBean> removing_List = new ArrayList<TaskDetailsBean>();
                            removing_List = dataBase.getTaskHistory(removing_fromlist);
                            Log.i("TaskDateChangeApprovel", " 336 -------> removing_List query ---> " + removing_List.size() + "taskList.size() ----> above " + taskList.size());
                            if (removing_List.size() > 0) {
                                for (TaskDetailsBean task : removing_List) {
                                    for (int i = 0; i < taskList.size(); i++) {
                                        TaskDetailsBean beanlist1 = taskList.get(i);
                                        if (task.getSignalid().equalsIgnoreCase(beanlist1.getSignalid())) {
                                            Log.i("TaskDateChangeApprovel", " 336 -------> removing_List if condition " + taskList.size());
                                            taskList.get(i).setMsg_status(9);
                                            sortTaskMessage();
                                            refresh();
                                        }
                                    }
                                }
                            }
                        }

                        if (isTaskName) {
                            is_date = true;
                            if (des.getText().toString().trim().length() > 0) {
                                taskName = des.getText().toString();
                                Log.i("taskconversation", "headername  19 ");
                            } else {
                                taskName = "New Task";
                                Log.i("taskconversation", "headername  20 ");
                            }
                            String sig_id = Utility.getSessionID();
                            sendMessage(taskName, null, "text", null, "", sig_id, null);
                            des.setText("");
                        } else {
                            dateSendORApprovalORReject();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult date336 Exception : " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 105) {
                    try {
                        TaskDetailsBean taskDetailsBean = (TaskDetailsBean) data.getSerializableExtra("taskBean");
                        String RemoveUser = data.getStringExtra("taskRemover");
                        String isProject = data.getStringExtra("isProject");
                        Log.d("ReAssign", "Task  == " + isProject);
                        Log.d("ReAssign", "Task remover == " + RemoveUser);
                        Log.d("ReAssign", "Task ProjectId == " + taskDetailsBean.getProjectId());
                        Log.d("ReAssign", "Task Receiver == " + taskDetailsBean.getTaskReceiver());
                        if (isProject != null && isProject.equalsIgnoreCase("Yes")) {
                            if (isProjectFromOracle) {
                                Log.d("output123", "task isProjectFromOracle inside  == " + isProjectFromOracle);
                                taskAssign(taskDetailsBean, RemoveUser, taskDetailsBean.getTaskReceiver(), 1);
                            } else
                                taskReassign(taskDetailsBean, RemoveUser, taskDetailsBean.getTaskReceiver(), 1);
                        } else {
                            taskReassign(taskDetailsBean, RemoveUser, taskDetailsBean.getTaskReceiver(), 0);
                        }

                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 105 reassign Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 666) {
                    try {
                        duration = data.getStringExtra("Duration");
                        durationunit = data.getStringExtra("DurationUnit");
                        repeatfreq = data.getStringExtra("RepeatFrequency");
                        reminderquote = data.getStringExtra("ReminderQuote");
                        remindertone = data.getStringExtra("ReminderTone");
                        if (isTaskName) {
                            is_tempDate = true;
                            if (des.getText().toString().trim().length() > 0) {
                                taskName = des.getText().toString();
                            } else {
                                taskName = "New Template";
                            }
                            if (!chat) {
                                if (isProjectFromOracle) {
                                    headerName.setText("Job Card No :" + JobCodeNo + "\nActivity Code :" + ActivityCode);
                                } else {
                                    headerName.setText(taskName);
                                }
                            }
                            Log.i("Template", "templatename" + headerName);
                            String sig_id = Utility.getSessionID();
                            sendMessage(taskName, null, "text", null, "", sig_id, null);
                            des.setText("");
                        } else {
                            dateTemplateCreation();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 666 Exception : " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 555) {
                    try {
                        Log.d("note", "reminder details ");
                        reminderdate = data.getStringExtra("ReminderDate");
                        reminderquote = data.getStringExtra("ReminderQuote");
                        remindertone = data.getStringExtra("ReminderTone");
                        Log.d("note", "reminderdate " + reminderdate);
                        Log.d("note", "reminderquote " + reminderquote);
                        Log.d("note", "remindertone " + remindertone);
                        if (isTaskName) {
                            if (des.getText().toString().trim().length() > 0) {
                                taskName = des.getText().toString();
                            } else {
                                taskName = "New Note";
                            }
                            if (isProjectFromOracle) {
                                headerName.setText("Job Card No :" + JobCodeNo + "\nActivity Code :" + ActivityCode);
                            } else {
                                headerName.setText(taskName);
                            }
                            Log.i("note", "headerName " + taskName);
                            String sig_id = Utility.getSessionID();
                            sendMessage(taskName, null, "text", null, "", sig_id, null);
                            des.setText("");
                        } else {
                            dateNoteCreation();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 555 Exception : " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 337) {
                    try {
                        Log.d("date", "Date change request page");
                        startdate = data.getStringExtra("StartDate");
                        enddate = data.getStringExtra("EndDate");
                        reminderdate = data.getStringExtra("ReminderDate");
                        reminderfreq = data.getStringExtra("ReminderFrequency");
                        reminderquote = data.getStringExtra("ReminderQuote");
                        remindertone = data.getStringExtra("ReminderTone");
                        ch_remarks = data.getStringExtra("remark");
                        date_header = data.getStringExtra("changedateheader");
                        isRemainderRequired = data.getStringExtra("isRemainderRequired");
                        ArrayList<TaskDetailsBean> beanArrayList = (ArrayList<TaskDetailsBean>) data.getExtras().getSerializable("mediaList");
                        Log.i("date", "startdate" + startdate);
                        Log.i("date", "enddate" + enddate);
                        Log.i("date", "reminderdate" + reminderdate);
                        Log.i("date", "reminderfreq" + reminderfreq);
                        Log.i("date", "reminderquote" + reminderquote);
                        Log.i("date", "remindertone" + remindertone);
                        Log.i("date", "ch_remarks" + ch_remarks);
                        Log.i("date", "isReminderRequired" + isRemainderRequired);
                        final_date = "Startdate : " + startdate + " Enddate : " + enddate + " Reminderdate : " + reminderdate + " Reminderfreq : " + reminderfreq;
                        Log.i("task", "composed date for showing UI----> " + final_date);
                        Appreference.isOverdue.put(webtaskId, false);
                        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                        String dateTime = dateFormat.format(new Date());
                        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                        String dateforrow = dateFormat.format(new Date());
                        tasktime = dateTime;
                        tasktime = tasktime.split(" ")[1];
                        Log.i("task", "tasktime" + tasktime);
                        Log.i("UTC", "sendMessage utc time" + dateforrow);
                        Log.i("time", "value");
                        taskUTCtime = dateforrow;
                        final TaskDetailsBean chatBean = new TaskDetailsBean();
                        Log.i("task", "task1 login user " + String.valueOf(Appreference.loginuserdetails.getId()));
                        Log.i("task", "task1 toid " + toUserId);
                        Log.i("task", "task1 task_No " + task_No);
                        Log.i("task", "task1 from_UserName " + from_UserName);
                        Log.i("task", "task1 toUserName " + toUserName);
                        Log.i("task", "task1 Appreference from_UserName " + Appreference.loginuserdetails.getUsername());
                        chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                        chatBean.setToUserId(String.valueOf(toUserId));
                        if (project) {
                            chatBean.setProjectId(projectId);
                            if (projectGroup_Mems != null) {
                                chatBean.setGroupTaskMembers(projectGroup_Mems);
                            }
                        }
                        chatBean.setTaskNo(task_No);
                        if (!template && !note)
                            chatBean.setCatagory(category);
                        chatBean.setIssueId(issueId);
                        chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                        chatBean.setToUserName(toUserName);
                        chatBean.setTaskReceiver(taskReceiver);
                        if (reminderquote != null && !reminderquote.equalsIgnoreCase(null) && !reminderquote.equalsIgnoreCase("")) {
                            chatBean.setReminderQuote(reminderquote);
                        }
                        chatBean.setServerFileName(remindertone);
                        chatBean.setTaskDescription(date_header);
                        chatBean.setTaskName(taskName);
                        chatBean.setTasktime(tasktime);
                        chatBean.setTaskUTCTime(taskUTCtime);
                        chatBean.setDateTime(dateTime);
                        chatBean.setTaskUTCDateTime(dateforrow);
                        chatBean.setPlannedStartDateTime(startdate);
                        chatBean.setTaskStatus(taskStatus);
                        chatBean.setUtcPlannedStartDateTime(Appreference.customLocalDateToUTC(startdate));
                        chatBean.setPlannedEndDateTime(enddate);
                        chatBean.setUtcplannedEndDateTime(Appreference.customLocalDateToUTC(enddate));
                        chatBean.setIsRemainderRequired(isRemainderRequired);
                        if (isRemainderRequired != null && !isRemainderRequired.equalsIgnoreCase("") && isRemainderRequired.equalsIgnoreCase("Y")) {
                            chatBean.setRemainderFrequency(reminderdate);
                            chatBean.setUtcPemainderFrequency(Appreference.customLocalDateToUTC(reminderdate));
                        } else if (isRemainderRequired != null && !isRemainderRequired.equalsIgnoreCase("") && isRemainderRequired.equalsIgnoreCase("R")) {
                            chatBean.setRemainderFrequency(reminderdate);
                            chatBean.setUtcPemainderFrequency(Appreference.customLocalDateToUTC(reminderdate));
                        } else {
                            chatBean.setRemainderFrequency("");
                            chatBean.setUtcPemainderFrequency("");
                        }
                        chatBean.setDateFrequency("");
                        chatBean.setTimeFrequency(reminderfreq);
                        chatBean.setSignalid(Utility.getSessionID());
                        chatBean.setMimeType("date");
                        chatBean.setParentId(getFileName());
                        chatBean.setTaskPriority("Medium");
                        chatBean.setCompletedPercentage(percentage);
                        chatBean.setOwnerOfTask(ownerOfTask);
                        chatBean.setCustomTagVisible(true);
                        chatBean.setTaskId(webtaskId);
                        chatBean.setSendStatus("0");   // send status 0 is send 1 is unsend
                        chatBean.setTaskType(taskType);
                        if (date_header.equalsIgnoreCase("requested")) {
                            chatBean.setRequestStatus("requested");
                        }
                        chatBean.setTaskRequestType("taskDateChangedRequest");
                        if (subType != null && subType.equalsIgnoreCase("private")) {
                            chatBean.setSubType(subType);
                            chatBean.setPrivate_Member(private_member);
                        } else {
                            chatBean.setSubType(subType);
                        }
                        if (!isTaskName) {
                            if (project) {
                                VideoCallDataBase.getDB(context).update_Project_history(chatBean);
                            } else {
                                dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                            }
                            chatBean.setWs_send("0");
                            dataBase.insertORupdate_Task_history(chatBean);
                            if (chatBean.isCustomTagVisible()) {
                                taskList.add(chatBean);
                            }
                            sortTaskMessage();
                            refresh();
                        }
                        if (taskStatus != null && taskStatus.equalsIgnoreCase("overdue")) {
                            String qry = "select * from taskDetailsInfo where taskId='" + webtaskId + "' and taskStatus='overdue'";
                            ArrayList<TaskDetailsBean> list = VideoCallDataBase.getDB(this).getTaskHistory(qry);
                            if (list.size() > 0) {
                                VideoCallDataBase.getDB(this).updateOverdueStatus(webtaskId);
                            }
                            String removing_fromlist = "select * from taskDetailsInfo where taskId='" + webtaskId + "' and mimeType='overdue'";
                            ArrayList<TaskDetailsBean> removing_List = new ArrayList<TaskDetailsBean>();
                            removing_List = dataBase.getTaskHistory(removing_fromlist);
                            Log.i("TaskDateChangeApprovel", " 336 -------> removing_List query ---> " + removing_List.size() + "taskList.size() ----> above " + taskList.size());
                            if (removing_List.size() > 0) {
                                for (TaskDetailsBean task : removing_List) {
                                    for (int i = 0; i < taskList.size(); i++) {
                                        TaskDetailsBean beanlist1 = taskList.get(i);
                                        if (task.getSignalid().equalsIgnoreCase(beanlist1.getSignalid())) {
                                            Log.i("TaskDateChangeApprovel", " 336 -------> removing_List if condition " + taskList.size());
                                            taskList.get(i).setMsg_status(9);
                                            sortTaskMessage();
                                            refresh();
                                        }
                                    }
                                }
                            }
                        }
                        Log.i("date", "date request bean" + chatBean);
                        Log.i("task", "Desc1 " + chatBean.getTaskDescription());
                        if (subType != null && subType.equalsIgnoreCase("normal")) {
                            if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                                datefileWebService(chatBean);
                            } else {
                                String xml = composeChatXML(chatBean);
                                sendMultiInstantMessage(xml, listOfObservers, 0);
                            }
                        }
                        for (int k = 0; k < beanArrayList.size(); k++) {
                            TaskDetailsBean mediaListBean = new TaskDetailsBean();
                            mediaListBean = beanArrayList.get(k);
                            if (subType == null && subType.equalsIgnoreCase(null) && subType.equalsIgnoreCase("")) {
                                subType = "normal";
                            } else if (subType != null && !subType.equalsIgnoreCase("taskDescription")) {
                                subType = "normal";
                            }
                            String sig_id = Utility.getSessionID();
                            Log.i("taskconversation", "mediaListBean.getTaskDescription() " + mediaListBean.getTaskDescription());
                            if (mediaListBean.getMimeType() != null && !mediaListBean.getMimeType().equalsIgnoreCase("") && !mediaListBean.getMimeType().equalsIgnoreCase("map")) {
                                PercentageWebService(mediaListBean.getMimeType(), mediaListBean.getTaskDescription(), mediaListBean.getTaskDescription().split("\\.")[1], sig_id, 2);
                            }
                            if (mediaListBean.getMimeType() != null && !mediaListBean.getMimeType().equalsIgnoreCase("") && mediaListBean.getMimeType().equalsIgnoreCase("map")) {
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 3 " + mediaListBean.getMimeType());
                                PercentageWebService("map", mediaListBean.getTaskDescription(), "", sig_id, 2);
                                sendMessage(mediaListBean.getTaskDescription(), null, "map", null, null, sig_id, null);
                            }
                        }
                        if (!calender)
                            reminderTimerDisplay();
                        calender = false;
                        Log.i("task", "Reminder time set");
                    } catch (Resources.NotFoundException e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult date337 Exception : " + e.getMessage(), "WARN", null);
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult date337 Exception : " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 31) {
                    try {
                        if (data != null) {
                            Uri selectedImageUri = data.getData();
                            Log.d("filePath  1 ", selectedImageUri.toString());
                            final int takeFlags = data.getFlags() & (Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
                            getContentResolver().takePersistableUriPermission(selectedImageUri, takeFlags);
                            strIPath = Environment.getExternalStorageDirectory() + "/High Message/" + getFileName() + ".jpg";
                            mime_Type = "image";
                            Log.d("filePath  1 ", "strIPath   " + strIPath);
                            File selected_file = new File(strIPath);
                            Log.d("filePath  1 ", "selected_file" + "   " + selected_file.toString());
                            int length = (int) selected_file.length() / 1048576;
                            Log.d("task", "........ size is------------->" + strIPath);
                            Log.d("task", "........ size is------------->" + selected_file);
                            Log.d("task", "........ size is------------->" + length);
                            Log.d("task", "........ size is------------->" + selectedImageUri);
                            Log.d("task", "........ size is------------->" + length);
                            if (length <= 2) {
                                String sig_id = Utility.getSessionID();
                                new bitmaploader(sig_id, strIPath, subType, context).execute(selectedImageUri);
                                Log.i("Task conversation", "image>19 " + sig_id);
                                Log.d("task", "........ size is------------->" + selectedImageUri);
                            } else {
                                showToast("Kindly Select someother image,this image is too large");
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 31 image Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 32) {
                    if (data != null) {
                        Log.i("AAA", "New activity 32*************");
                        Uri selectedImageUri = data.getData();
                        strIPath = getRealPathFromURI(selectedImageUri);
                        mime_Type = "video";
                        final String path = Environment.getExternalStorageDirectory() + "/High Message/" + getFileName() + ".mp4";
                        strIPath = path;
                        try {
                            FileInputStream fin = (FileInputStream) getContentResolver().openInputStream(selectedImageUri);
                            ByteArrayOutputStream straam = new ByteArrayOutputStream();
                            byte[] content = new byte[1024];
                            int bytesread;
                            while ((bytesread = fin.read(content)) != -1) {
                                straam.write(content, 0, bytesread);
                            }
                            byte[] bytes = straam.toByteArray();
                            FileOutputStream fout = new FileOutputStream(strIPath);
                            straam.flush();
                            straam.close();
                            straam = null;
                            fin.close();
                            fin = null;
                            fout.write(bytes);
                            fout.flush();
                            fout.close();
                            fout = null;
                            Log.i("AAA", "New activity " + strIPath);
                            Log.i("task", "video loaded");
                            File file = new File(strIPath);
// Get length of file in bytes
                            long fileSizeInBytes = file.length();
// Convert the bytes to Kilobytes (1 KB = 1024 Bytes)
                            long fileSizeInKB = fileSizeInBytes / 1024;
// Convert the KB to MegaBytes (1 MB = 1024 KBytes)
                            long fileSizeInMB = fileSizeInKB / 1024;
                            Log.i("filesize", "Files size bytes--->" + fileSizeInBytes);
                            Log.i("filesize", "Files size kb--->" + fileSizeInKB);
                            Log.i("filesize", "Files size mb--->" + fileSizeInMB);
                            if (fileSizeInMB < 10) {
                                if (subType != null && subType.equalsIgnoreCase("private")) {
                                    SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                                    String dateTime = dateFormat.format(new Date());
                                    dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                                    String dateforrow = dateFormat.format(new Date());
                                    tasktime = dateTime;
                                    tasktime = tasktime.split(" ")[1];
                                    Log.i("task", "tasktime" + tasktime);
                                    Log.i("UTC", "sendMessage utc time" + dateforrow);
                                    taskUTCtime = dateforrow;
                                    final TaskDetailsBean chatBean = new TaskDetailsBean();
                                    chatBean.setPrivate_Member(private_member);
                                    chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                                    chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                                    chatBean.setSelect(false);
                                    chatBean.setToUserName(toUserName);
                                    chatBean.setToUserId(String.valueOf(toUserId));
                                    if (isTaskName) {
                                        taskName = "New Task";
                                        chatBean.setTaskName(taskName);
                                        Log.i("taskconversation", "headername  21 ");
                                    } else {
                                        chatBean.setTaskName(taskName);
                                        Log.i("taskconversation", "headername 22 ");
                                        Log.e("task", "taskname " + taskName);
                                    }
                                    chatBean.setTaskDescription(strIPath);
                                    chatBean.setSignalid(Utility.getSessionID());
                                    chatBean.setTaskNo(task_No);
                                    if (!template && !note) {
                                        chatBean.setCatagory(category);
                                    }
                                    chatBean.setIssueId(issueId);
                                    chatBean.setParentId(getFileName());
                                    chatBean.setTaskType(taskType);
                                    chatBean.setTaskPriority("Medium");
                                    chatBean.setIsRemainderRequired("");
                                    chatBean.setCompletedPercentage(percentage);
                                    chatBean.setPlannedStartDateTime("");
                                    chatBean.setPlannedEndDateTime("");
                                    chatBean.setRemainderFrequency("");
                                    chatBean.setTaskUTCDateTime(dateforrow);
                                    chatBean.setDateTime(dateTime);
                                    chatBean.setTaskReceiver(taskReceiver);
                                    chatBean.setTasktime(tasktime);
                                    chatBean.setTaskUTCTime(taskUTCtime);
                                    chatBean.setMimeType("video");
                                    chatBean.setTaskId(webtaskId);
                                    chatBean.setOwnerOfTask(ownerOfTask);
                                    chatBean.setCustomTagVisible(true);
                                    chatBean.setTaskStatus(taskStatus);
                                    chatBean.setSendStatus("0");
                                    chatBean.setMsg_status(0);
                                    chatBean.setShow_progress(0);
                                    chatBean.setSubType(subType);
                                    if (project) {
                                        chatBean.setProjectId(projectId);
                                        if (projectGroup_Mems != null) {
                                            chatBean.setGroupTaskMembers(projectGroup_Mems);
                                        }
                                    }
                                    if (!isTaskName) {
                                        if (project) {
                                            VideoCallDataBase.getDB(context).update_Project_history(chatBean);
                                        } else {
                                            dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                                        }
                                        Log.i("taskconversation", "CusTome ---->>><<< 9 ");
                                        dataBase.insertORupdate_Task_history(chatBean);
//                                        dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                                        if (chatBean.isCustomTagVisible()) {
                                            taskList.add(chatBean);
                                        }
                                        sortTaskMessage();
                                        refresh();
                                        refreshListViewCache();
                                    }
                                    listLastposition();
                                    PrivateMultifileUpload_Webservice(chatBean);
                                } else {
                                    firstmmfile(mime_Type, "mp4");
                                    refreshListViewCache();
                                }
                            } else {
                                showToast("Pick less than 10 MB Video");
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                            Appreference.printLog("NewTaskConversation", "onActivityResult 32 video Exception " + e.getMessage(), "WARN", null);
                        }
                    }
                } else if (requestCode == 33) {
                    if (data != null) {
                        try {
                            Log.i("AAA", "New activity 33*************");
                            Uri selectedImageUri = data.getData();
                            String uri_path = selectedImageUri.getPath();
                            Log.i("AAA", "uri_path :" + uri_path);
                            File myFile = new File(selectedImageUri.getPath());
                            Log.i("AAA", "2 uri_path :" + myFile.length());

                            Cursor cursor = context.getContentResolver().query(selectedImageUri,
                                    null, null, null, null);
                            cursor.moveToFirst();
                            long size = cursor.getLong(cursor.getColumnIndex(OpenableColumns.SIZE));
                            cursor.close();

                            long fileSize = (size / 1024) / 1024;

                            Log.i("AAA", "2 uri_path size :" + (size / 1024) / 1024);
                            Log.i("AAA", "New activity selectedImageUri: " + selectedImageUri);

                            if (fileSize <= 10) {
                                strIPath = getRealPathFromURI(selectedImageUri);
                                mime_Type = "video";
                                final String path = Environment.getExternalStorageDirectory() + "/High Message/" + getFileName() + ".mp4";
                                Log.i("AAA", "1 New activity strIPath : " + strIPath);
                                strIPath = path;
                                Log.i("AAA", "2 New activity strIPath :" + strIPath);
                                try {
                                    FileInputStream fin = (FileInputStream) getContentResolver().openInputStream(selectedImageUri);
                                    ByteArrayOutputStream straam = new ByteArrayOutputStream();
                                    byte[] content = new byte[1024];
                                    int bytesread;
                                    while ((bytesread = fin.read(content)) != -1) {
                                        straam.write(content, 0, bytesread);
                                    }
                                    byte[] bytes = straam.toByteArray();
                                    FileOutputStream fout = new FileOutputStream(strIPath);
                                    straam.flush();
                                    straam.close();
                                    straam = null;
                                    fin.close();
                                    fin = null;
                                    fout.write(bytes);
                                    fout.flush();
                                    fout.close();
                                    fout = null;
                                } catch (IOException e) {
                                    e.printStackTrace();
                                    Appreference.printLog("NewTaskConversation", "onActivityResult 33 filewrite Exception " + e.getMessage(), "WARN", null);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                    Appreference.printLog("NewTaskConversation", "onActivityResult 33 filewrite Exception " + e.getMessage(), "WARN", null);

                                }
                                File file = new File(strIPath);
// Get length of file in bytes
                                long fileSizeInBytes = file.length();
// Convert the bytes to Kilobytes (1 KB = 1024 Bytes)
                                long fileSizeInKB = fileSizeInBytes / 1024;
// Convert the KB to MegaBytes (1 MB = 1024 KBytes)
                                long fileSizeInMB = fileSizeInKB / 1024;
                                Log.i("filesize", "Files size bytes--->" + fileSizeInBytes);
                                Log.i("filesize", "Files size kb--->" + fileSizeInKB);
                                Log.i("filesize", "Files size mb--->" + fileSizeInMB);
                                if (fileSizeInMB < 10) {
                                    if (subType != null && subType.equalsIgnoreCase("private")) {
                                        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                                        String dateTime = dateFormat.format(new Date());
                                        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                                        String dateforrow = dateFormat.format(new Date());
                                        tasktime = dateTime;
                                        tasktime = tasktime.split(" ")[1];
                                        Log.i("task", "tasktime" + tasktime);
                                        Log.i("UTC", "sendMessage utc time" + dateforrow);
                                        taskUTCtime = dateforrow;
                                        final TaskDetailsBean chatBean = new TaskDetailsBean();
                                        chatBean.setPrivate_Member(private_member);
                                        chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                                        chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                                        chatBean.setSelect(false);
                                        chatBean.setToUserName(toUserName);
                                        chatBean.setToUserId(String.valueOf(toUserId));
                                        if (isTaskName) {
                                            taskName = "New Task";
                                            Log.i("taskconversation", "headername  24 ");
                                            chatBean.setTaskName(taskName);
                                        } else {
                                            chatBean.setTaskName(taskName);
                                            Log.e("task", "taskname " + taskName);
                                            Log.i("taskconversation", "headername  25 ");
                                        }
                                        chatBean.setTaskDescription(strIPath);
                                        chatBean.setSignalid(Utility.getSessionID());
                                        chatBean.setTaskNo(task_No);
                                        if (!template && !note) {
                                            chatBean.setCatagory(category);
                                        }
                                        chatBean.setIssueId(issueId);
                                        chatBean.setParentId(getFileName());
                                        chatBean.setTaskType(taskType);
                                        chatBean.setTaskPriority("Medium");
                                        chatBean.setIsRemainderRequired("");
                                        chatBean.setCompletedPercentage(percentage);
                                        chatBean.setPlannedStartDateTime("");
                                        chatBean.setPlannedEndDateTime("");
                                        chatBean.setRemainderFrequency("");
                                        chatBean.setTaskUTCDateTime(dateforrow);
                                        chatBean.setDateTime(dateTime);
                                        chatBean.setTaskReceiver(taskReceiver);
                                        chatBean.setTasktime(tasktime);
                                        chatBean.setTaskUTCTime(taskUTCtime);
                                        chatBean.setMimeType("video");
                                        chatBean.setTaskId(webtaskId);
                                        chatBean.setOwnerOfTask(ownerOfTask);
                                        chatBean.setCustomTagVisible(true);
                                        chatBean.setTaskStatus(taskStatus);
                                        chatBean.setSendStatus("0");
                                        chatBean.setMsg_status(0);
                                        chatBean.setShow_progress(0);
                                        chatBean.setSubType(subType);
                                        if (project) {
                                            chatBean.setProjectId(projectId);
                                            if (projectGroup_Mems != null) {
                                                chatBean.setGroupTaskMembers(projectGroup_Mems);
                                            }
                                        }
                                        if (!isTaskName) {
                                            if (project) {
                                                VideoCallDataBase.getDB(context).update_Project_history(chatBean);
                                            } else {
                                                dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                                            }
                                            Log.i("taskconversation", "CusTome ---->>><<< 11 ");
                                            dataBase.insertORupdate_Task_history(chatBean);
//                                        dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                                            if (chatBean.isCustomTagVisible()) {
                                                taskList.add(chatBean);
                                            }
                                            sortTaskMessage();
                                            refresh();
                                            refreshListViewCache();
                                        }
                                        listLastposition();
                                        PrivateMultifileUpload_Webservice(chatBean);
                                    } else {
                                        firstmmfile(mime_Type, "mp4");
                                        refreshListViewCache();
                                    }
                                } else {
                                    showToast("Choose a video which is less than or equal to 10MB");
                                }

                            } else {
                                showToast("Choose a video which is less than or equal to 10MB");
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                            Appreference.printLog("NewTaskConversation", "onActivityResult 33 video Exception " + e.getMessage(), "WARN", null);
                        }
                    }
                } else if (requestCode == 55) {
                    try {
                        fileExt = data.getStringExtra("fileExt");
                        String fileName = data.getStringExtra("fileName");
                        strIPath = data.getStringExtra("filePath");
                        mime_Type = "document";
                        Log.i("fExt", "fileExt" + strIPath);
                        Log.i("filePath", "fm--->" + fileExt);
                        Log.i("filename", "fm--->" + fileName);
                        Log.i("fileExt", "fm--->" + strIPath);
                        Log.i("fileExt", "fileExt $$ " + fileExt);
                        if (subType != null && subType.equalsIgnoreCase("private")) {
                            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                            String dateTime = dateFormat.format(new Date());
                            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                            String dateforrow = dateFormat.format(new Date());
                            tasktime = dateTime;
                            tasktime = tasktime.split(" ")[1];
                            Log.i("task", "tasktime" + tasktime);
                            Log.i("UTC", "sendMessage utc time" + dateforrow);
                            taskUTCtime = dateforrow;
                            final TaskDetailsBean chatBean = new TaskDetailsBean();
                            chatBean.setPrivate_Member(private_member);
                            chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                            chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                            chatBean.setSelect(false);
                            chatBean.setToUserName(toUserName);
                            chatBean.setToUserId(String.valueOf(toUserId));
                            if (isTaskName) {
                                taskName = "New Task";
                                Log.i("taskconversation", "headername 28 ");
                                chatBean.setTaskName(taskName);
                            } else {
                                chatBean.setTaskName(taskName);
                                Log.i("taskconversation", "headername 29 ");
                                Log.e("task", "taskname " + taskName);
                            }
                            chatBean.setTaskDescription(strIPath);
                            chatBean.setSignalid(Utility.getSessionID());
                            chatBean.setTaskNo(task_No);
                            if (!template && !note) {
                                chatBean.setCatagory(category);
                            }
                            chatBean.setIssueId(issueId);
                            chatBean.setParentId(getFileName());
                            chatBean.setTaskType(taskType);
                            chatBean.setTaskPriority("Medium");
                            chatBean.setIsRemainderRequired("");
                            chatBean.setCompletedPercentage(percentage);
                            chatBean.setPlannedStartDateTime("");
                            chatBean.setPlannedEndDateTime("");
                            chatBean.setRemainderFrequency("");
                            chatBean.setTaskUTCDateTime(dateforrow);
                            chatBean.setDateTime(dateTime);
                            chatBean.setTaskReceiver(taskReceiver);
                            chatBean.setTasktime(tasktime);
                            chatBean.setTaskUTCTime(taskUTCtime);
                            chatBean.setMimeType("document");
                            chatBean.setTaskId(webtaskId);
                            chatBean.setOwnerOfTask(ownerOfTask);
                            chatBean.setCustomTagVisible(true);
                            chatBean.setTaskStatus(taskStatus);
                            chatBean.setSendStatus("0");
                            chatBean.setMsg_status(0);
                            chatBean.setShow_progress(0);
                            chatBean.setSubType(subType);
                            if (project) {
                                chatBean.setProjectId(projectId);
                                if (projectGroup_Mems != null) {
                                    chatBean.setGroupTaskMembers(projectGroup_Mems);
                                }
                            }
                            if (!isTaskName) {
                                if (project) {
                                    VideoCallDataBase.getDB(context).update_Project_history(chatBean);
                                } else {
                                    dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                                }
                                Log.i("taskconversation", "CusTome ---->>><<< 12 ");
                                dataBase.insertORupdate_Task_history(chatBean);
                                //                                dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                                if (chatBean.isCustomTagVisible()) {
                                    taskList.add(chatBean);
                                }
                                sortTaskMessage();
                                refresh();
                            }
                            PrivateMultifileUpload_Webservice(chatBean);
                        } else {
                            firstmmfile(mime_Type, fileExt);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult  55 doc Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 132) {
                    try {
                        File new_file = new File(strIPath);
                        if (photo_path != null) {
                            custom_1MediaList.add(strIPath);
                            photo_signature = strIPath;
                            if (photo_path != null) {
                                File imgFile = new File(photo_signature);
                                if (imgFile.exists()) {
                                    Bitmap myBitmap = BitmapFactory.decodeFile(imgFile.getAbsolutePath());
                                    photo_path.setImageBitmap(myBitmap);
                                }
                                photo_path.setVisibility(View.VISIBLE);
                            }
//                            photo_path.setText(strIPath);
                        }
                        mime_Type = "image";
                        if (subType != null && subType.equalsIgnoreCase("private")) {
                            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                            String dateTime = dateFormat.format(new Date());
                            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                            String dateforrow = dateFormat.format(new Date());
                            tasktime = dateTime;
                            tasktime = tasktime.split(" ")[1];
                            Log.i("task", "tasktime" + tasktime);
                            Log.i("UTC", "sendMessage utc time" + dateforrow);
                            taskUTCtime = dateforrow;
                            final TaskDetailsBean chatBean = new TaskDetailsBean();
                            chatBean.setPrivate_Member(private_member);
                            chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                            chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                            chatBean.setSelect(false);
                            chatBean.setToUserName(toUserName);
                            chatBean.setToUserId(String.valueOf(toUserId));
                            if (isTaskName) {
                                taskName = "New Task";
                                chatBean.setTaskName(taskName);
                                Log.i("taskconversation", "headername  41 ");
                            } else {
                                chatBean.setTaskName(taskName);
                                Log.e("task", "taskname " + taskName);
                                Log.i("taskconversation", "headername  42 ");
                            }
                            chatBean.setTaskDescription(strIPath);
                            chatBean.setSignalid(Utility.getSessionID());
                            chatBean.setTaskNo(task_No);
                            if (!template && !note) {
                                chatBean.setCatagory(category);
                            }
                            chatBean.setIssueId(issueId);
                            chatBean.setParentId(getFileName());
                            chatBean.setTaskType(taskType);
                            chatBean.setTaskPriority("Medium");
                            chatBean.setIsRemainderRequired("");
                            chatBean.setCompletedPercentage(percentage);
                            chatBean.setPlannedStartDateTime("");
                            chatBean.setPlannedEndDateTime("");
                            chatBean.setRemainderFrequency("");
                            chatBean.setTaskUTCDateTime(dateforrow);
                            chatBean.setDateTime(dateTime);
                            chatBean.setTaskReceiver(taskReceiver);
                            chatBean.setTasktime(tasktime);
                            chatBean.setTaskUTCTime(taskUTCtime);
                            chatBean.setMimeType("image");
                            chatBean.setTaskId(webtaskId);
                            chatBean.setOwnerOfTask(ownerOfTask);
                            chatBean.setCustomTagVisible(true);
                            chatBean.setTaskStatus(taskStatus);
                            chatBean.setSendStatus("0");
                            chatBean.setMsg_status(0);
                            chatBean.setShow_progress(0);
                            chatBean.setSubType(subType);
                            if (project) {
                                chatBean.setProjectId(projectId);
                                if (projectGroup_Mems != null) {
                                    chatBean.setGroupTaskMembers(projectGroup_Mems);
                                }
                            }
                            if (!isTaskName) {
                                if (project) {
                                    VideoCallDataBase.getDB(context).update_Project_history(chatBean);
                                } else {
                                    dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                                }
                                dataBase.insertORupdate_Task_history(chatBean);
//                                dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                                if (chatBean.isCustomTagVisible()) {
                                    taskList.add(chatBean);
                                }
                                sortTaskMessage();
                                refresh();
                                refreshListViewCache();
                            }
                            PrivateMultifileUpload_Webservice(chatBean);
                        } else if (new_file.exists()) {
                            if (!isForOracleProject)
                                firstmmfile(mime_Type, "jpg");
                            refreshListViewCache();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 132 image Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 111) {
                    try {
                        Log.i("Avideo", "New activity 33************* : " + strIPath);
                        mime_Type = "video";
                        if (subType != null && subType.equalsIgnoreCase("private")) {
                            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                            String dateTime = dateFormat.format(new Date());
                            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                            String dateforrow = dateFormat.format(new Date());
                            tasktime = dateTime;
                            tasktime = tasktime.split(" ")[1];
                            Log.i("task", "tasktime" + tasktime);
                            Log.i("UTC", "sendMessage utc time" + dateforrow);
                            taskUTCtime = dateforrow;
                            final TaskDetailsBean chatBean = new TaskDetailsBean();
                            chatBean.setPrivate_Member(private_member);
                            chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                            chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                            chatBean.setSelect(false);
                            chatBean.setToUserName(toUserName);
                            chatBean.setToUserId(String.valueOf(toUserId));
                            if (isTaskName) {
                                taskName = "New Task";
                                Log.i("taskconversation", "headername  44 ");
                                chatBean.setTaskName(taskName);
                            } else {
                                chatBean.setTaskName(taskName);
                                Log.i("taskconversation", "headername  45 ");
                                Log.e("task", "taskname " + taskName);
                            }
                            chatBean.setTaskDescription(strIPath);
                            chatBean.setSignalid(Utility.getSessionID());
                            chatBean.setTaskNo(task_No);
                            if (!template)
                                chatBean.setCatagory(category);
                            chatBean.setIssueId(issueId);
                            chatBean.setParentId(getFileName());
                            chatBean.setTaskType(taskType);
                            chatBean.setTaskPriority("Medium");
                            chatBean.setIsRemainderRequired("");
                            chatBean.setCompletedPercentage(percentage);
                            chatBean.setPlannedStartDateTime("");
                            chatBean.setPlannedEndDateTime("");
                            chatBean.setRemainderFrequency("");
                            chatBean.setTaskUTCDateTime(dateforrow);
                            chatBean.setDateTime(dateTime);
                            chatBean.setTaskReceiver(taskReceiver);
                            chatBean.setTasktime(tasktime);
                            chatBean.setTaskUTCTime(taskUTCtime);
                            chatBean.setMimeType("video");
                            chatBean.setTaskId(webtaskId);
                            chatBean.setOwnerOfTask(ownerOfTask);
                            chatBean.setCustomTagVisible(true);
                            chatBean.setTaskStatus(taskStatus);
                            chatBean.setSendStatus("0");
                            chatBean.setMsg_status(0);
                            chatBean.setShow_progress(0);
                            chatBean.setSubType(subType);
                            if (project) {
                                chatBean.setProjectId(projectId);
                                if (projectGroup_Mems != null) {
                                    chatBean.setGroupTaskMembers(projectGroup_Mems);
                                }
                            }
                            if (!isTaskName) {
                                if (project) {
                                    VideoCallDataBase.getDB(context).update_Project_history(chatBean);
                                } else {
                                    dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                                }
                                dataBase.insertORupdate_Task_history(chatBean);
//                                dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                                if (chatBean.isCustomTagVisible()) {
                                    taskList.add(chatBean);
                                }
                                sortTaskMessage();
                                refresh();
                                refreshListViewCache();
                            }
                            PrivateMultifileUpload_Webservice(chatBean);
                        } else {
                            firstmmfile(mime_Type, "mp4");
                            refreshListViewCache();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 111 video Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 423) {
                    try {
                        strIPath = data.getStringExtra("path");
                        Log.i("result_handsketch", "strIPath==> " + strIPath);
                        Log.i("result_handsketch", "isCustomerSign==> ## " + isCustomerSign);
                        Log.i("result_handsketch", "isObservation==> ## " + isObservation);
                        if (isCustomerSign) {
                            status_signature = strIPath;
                            if (signature_path != null) {
                                File imgFile = new File(status_signature);
                                if (imgFile.exists()) {
                                    Bitmap myBitmap = BitmapFactory.decodeFile(imgFile.getAbsolutePath());
                                    signature_path.setImageBitmap(myBitmap);
                                }
                                signature_path.setVisibility(View.VISIBLE);
                            }
                            custom_1MediaList.add(strIPath);
//                            if (signature_path != null)
//                                signature_path.setText(strIPath);
                        } else if (isObservation) {
                            Log.i("result_handsketch", "isObservation==> " + strIPath);
                            observation_path = strIPath;
                            if (observation_1 != null) {
                                File imgFile = new File(observation_path);
                                if (imgFile.exists()) {
                                    Bitmap myBitmap = BitmapFactory.decodeFile(imgFile.getAbsolutePath());
                                    observation_1.setImageBitmap(myBitmap);
                                }
                                observation_1.setVisibility(View.VISIBLE);
                                Log.i("result_handsketch", "observation_1==>$$ !! " + strIPath);
                            }
                        } else if (isActionTaken) {
                            Log.i("result_handsketch", "isActionTaken==> " + strIPath);
                            Action_Taken_path = strIPath;
                            if (action_taken_1 != null) {
                                File imgFile = new File(Action_Taken_path);
                                if (imgFile.exists()) {
                                    Bitmap myBitmap = BitmapFactory.decodeFile(imgFile.getAbsolutePath());
                                    action_taken_1.setImageBitmap(myBitmap);
                                }
                                action_taken_1.setVisibility(View.VISIBLE);
                                Log.i("result_handsketch", "action_taken_1==>$$ !! " + strIPath);
                            }
                        } else if (isCustomerRemarks) {
                            Log.i("result_handsketch", "isCustomerRemarks==> " + strIPath);
                            customerRemarks_path = strIPath;
                            if (remarks_complete_1 != null) {
                                File imgFile = new File(customerRemarks_path);
                                if (imgFile.exists()) {
                                    Bitmap myBitmap = BitmapFactory.decodeFile(imgFile.getAbsolutePath());
                                    remarks_complete_1.setImageBitmap(myBitmap);
                                }
                                remarks_complete_1.setVisibility(View.VISIBLE);
                                Log.i("result_handsketch", "remarks_complete_1==>$$ !! " + strIPath);
                            }
                        } else if (isSynopsis) {
                            Log.i("result_handsketch", "isSynopsis==> " + strIPath);
                            synopsis_path = strIPath;
                            if (synopsis_img != null) {
                                File imgFile = new File(synopsis_path);
                                if (imgFile.exists()) {
                                    Bitmap myBitmap = BitmapFactory.decodeFile(imgFile.getAbsolutePath());
                                    synopsis_img.setImageBitmap(myBitmap);
                                }
                                synopsis_img.setVisibility(View.VISIBLE);
                                Log.i("result_handsketch", "synopsis_path==>$$ !! " + synopsis_path);
                            }
                        } else {
                            tech_signature = strIPath;
                            if (tech_signature_path != null) {
                                File imgFile = new File(tech_signature);
                                if (imgFile.exists()) {
                                    Bitmap myBitmap = BitmapFactory.decodeFile(imgFile.getAbsolutePath());
                                    tech_signature_path.setImageBitmap(myBitmap);
                                }
                                tech_signature_path.setVisibility(View.VISIBLE);
                            }
                            custom_1MediaList.add(strIPath);
//                            if (tech_signature_path != null)
//                                tech_signature_path.setText(strIPath);
                        }

                        mime_Type = "image";
                        Log.i("Task", "path" + strIPath);
                        File new_file = new File(strIPath);
                        if (new_file.exists()) {
                            Log.i("AAAA", "onactivity result $$$$$$$$$$$$$$$" + strIPath);
                        }
                        Log.i("task", "extension");
                        if (subType != null && subType.equalsIgnoreCase("private")) {
                            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                            String dateTime = dateFormat.format(new Date());
                            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                            String dateforrow = dateFormat.format(new Date());
                            tasktime = dateTime;
                            tasktime = tasktime.split(" ")[1];
                            Log.i("task", "tasktime" + tasktime);
                            Log.i("UTC", "sendMessage utc time" + dateforrow);
                            taskUTCtime = dateforrow;
                            final TaskDetailsBean chatBean = new TaskDetailsBean();
                            chatBean.setPrivate_Member(private_member);
                            chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                            chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                            chatBean.setSelect(false);
                            chatBean.setToUserName(toUserName);
                            chatBean.setToUserId(String.valueOf(toUserId));
                            if (isTaskName) {
                                taskName = "New Task";
                                Log.i("taskconversation", "headername  48 ");
                                chatBean.setTaskName(taskName);
                            } else {
                                chatBean.setTaskName(taskName);
                                Log.i("taskconversation", "headername  49 ");
                                Log.e("task", "taskname " + taskName);
                            }
                            chatBean.setTaskDescription(strIPath);
                            chatBean.setSignalid(Utility.getSessionID());
                            chatBean.setTaskNo(task_No);
                            if (!template && !note) {
                                chatBean.setCatagory(category);
                            }
                            chatBean.setIssueId(issueId);
                            chatBean.setParentId(getFileName());
                            chatBean.setTaskType(taskType);
                            chatBean.setTaskPriority("Medium");
                            chatBean.setIsRemainderRequired("");
                            chatBean.setCompletedPercentage(percentage);
                            chatBean.setPlannedStartDateTime("");
                            chatBean.setPlannedEndDateTime("");
                            chatBean.setRemainderFrequency("");
                            chatBean.setTaskUTCDateTime(dateforrow);
                            chatBean.setDateTime(dateTime);
                            chatBean.setTaskReceiver(taskReceiver);
                            chatBean.setTasktime(tasktime);
                            chatBean.setTaskUTCTime(taskUTCtime);
                            chatBean.setMimeType("sketch");
                            chatBean.setTaskId(webtaskId);
                            chatBean.setOwnerOfTask(ownerOfTask);
                            chatBean.setCustomTagVisible(true);
                            chatBean.setTaskStatus(taskStatus);
                            chatBean.setSendStatus("0");
                            chatBean.setMsg_status(0);
                            chatBean.setShow_progress(0);
                            chatBean.setSubType(subType);
                            if (project) {
                                chatBean.setProjectId(projectId);
                                if (projectGroup_Mems != null) {
                                    chatBean.setGroupTaskMembers(projectGroup_Mems);
                                }
                            }
                            if (!isTaskName) {
                                if (project) {
                                    VideoCallDataBase.getDB(context).update_Project_history(chatBean);
                                } else {
                                    dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                                }
                                dataBase.insertORupdate_Task_history(chatBean);
//                                dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                                if (chatBean.isCustomTagVisible()) {
                                    taskList.add(chatBean);
                                }
                                sortTaskMessage();
                                refresh();
                            }
                            listLastposition();
                            PrivateMultifileUpload_Webservice(chatBean);
                        } else {
                            if (!isForOracleProject)
                                firstmmfile(mime_Type, "jpg");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 423 image Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 333) {
                    try {
                        Log.d("filePath", data.getStringExtra("taskFileExt"));
                        strIPath = data.getStringExtra("taskFileExt");
                        mime_Type = "audio";
                        Log.i("task", "extension");
                        if (subType != null && subType.equalsIgnoreCase("private")) {
                            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                            String dateTime = dateFormat.format(new Date());
                            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                            String dateforrow = dateFormat.format(new Date());
                            tasktime = dateTime;
                            tasktime = tasktime.split(" ")[1];
                            Log.i("task", "tasktime" + tasktime);
                            Log.i("UTC", "sendMessage utc time" + dateforrow);
                            taskUTCtime = dateforrow;
                            final TaskDetailsBean chatBean = new TaskDetailsBean();
                            chatBean.setPrivate_Member(private_member);
                            chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                            chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                            chatBean.setSelect(false);
                            chatBean.setToUserName(toUserName);
                            chatBean.setToUserId(String.valueOf(toUserId));
                            chatBean.setTaskStatus(taskStatus);
                            if (isTaskName) {
                                taskName = "New Task";
                                chatBean.setTaskName(taskName);
                            } else {
                                chatBean.setTaskName(taskName);
                                Log.e("task", "taskname " + taskName);
                            }
                            chatBean.setTaskDescription(strIPath);
                            chatBean.setSignalid(Utility.getSessionID());
                            chatBean.setTaskNo(task_No);
                            if (!template && !note) {
                                chatBean.setCatagory(category);
                            }
                            chatBean.setIssueId(issueId);
                            chatBean.setParentId(getFileName());
                            chatBean.setTaskType(taskType);
                            chatBean.setTaskPriority("Medium");
                            chatBean.setIsRemainderRequired("");
                            chatBean.setCompletedPercentage(percentage);
                            chatBean.setPlannedStartDateTime("");
                            chatBean.setPlannedEndDateTime("");
                            chatBean.setRemainderFrequency("");
                            chatBean.setTaskUTCDateTime(dateforrow);
                            chatBean.setDateTime(dateTime);
                            chatBean.setTaskReceiver(taskReceiver);
                            chatBean.setTasktime(tasktime);
                            chatBean.setTaskUTCTime(taskUTCtime);
                            chatBean.setMimeType("audio");
                            chatBean.setTaskId(webtaskId);
                            chatBean.setOwnerOfTask(ownerOfTask);
                            chatBean.setCustomTagVisible(true);
                            chatBean.setSendStatus("0");
                            chatBean.setMsg_status(0);
                            chatBean.setShow_progress(0);
                            chatBean.setSubType(subType);
                            chatBean.setPrivate_Member(private_member);
                            if (project) {
                                chatBean.setProjectId(projectId);
                                if (projectGroup_Mems != null) {
                                    chatBean.setGroupTaskMembers(projectGroup_Mems);
                                }
                            }
                            if (!isTaskName) {
                                if (project) {
                                    VideoCallDataBase.getDB(context).update_Project_history(chatBean);
                                } else {
                                    dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                                }
                                dataBase.insertORupdate_Task_history(chatBean);
//                                dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                                if (chatBean.isCustomTagVisible()) {
                                    taskList.add(chatBean);
                                }
                                sortTaskMessage();
                                refresh();
                            }
                            PrivateMultifileUpload_Webservice(chatBean);
                        } else {
                            firstmmfile(mime_Type, "");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 333 audio Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 888) {
                    try {
                        Location = data.getStringExtra("loc_latitude");
                        Log.i("location", "loc_latitude " + Location);
                        String sig_id = Utility.getSessionID();
                        if (isTaskName) {
                            if (template) {
                                taskName = "New Template";
                            } else if (chat) {
                                taskName = "New Chat";
                            } else {
                                taskName = "New Task";
                            }
                            PercentageWebService("text", taskName, "", sig_id, 0);
                            isLocation = true;
                        } else {
                            PercentageWebService("map", Location, "", sig_id, 0);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 888 location Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 999) {
                    try {
                        Log.i("taskConversation", "chatusers 999 1");
                        ArrayList<String> chatUsers = data.getStringArrayListExtra("chatUsers");
                        ArrayList<String> chatUsersName = data.getStringArrayListExtra("chatUsersName");
                        Log.i("taskConversation", "chatUsers1 size is 999 2 " + chatUsersName);
                        if (chatUsersName != null && chatUsersName.size() > 0) {
                            Log.i("observer", "list clear 12");
                            listOfObservers.clear();
                            listObservers.clear();
                            for (String string : chatUsersName) {
                                if (!listOfObservers.contains(string)) {
                                    listOfObservers.add(string);
                                    if (private_member == null) {
                                        private_member = VideoCallDataBase.getDB(context).getName(string);
                                    } else {
                                        private_member = private_member + "," + VideoCallDataBase.getDB(context).getName(string);
                                    }
                                }
                                listObservers.add(string);
                                Log.i("private", "listOfObserversin group is " + string);
                                Log.i("taskConversation", "private_member 999 3 " + private_member);
                            }
                        } else {
                            if (subType != null && subType.equalsIgnoreCase("private")) {
                                private_member = null;
                                subType = "normal";
                                des.setHint("");
                                icons.setBackgroundColor(getResources().getColor(R.color.white));
                                linear1.setBackgroundColor(getResources().getColor(R.color.white));
                                //                            if (taskType!=null&&taskType.equalsIgnoreCase("Group")){
                                //                                listOfObservers.clear();
                                //                                listObservers.clear();
                                //                                listOfObservers=VideoCallDataBase.getDB(context).getGroupMembers(groupname);
                                //                                listObservers=VideoCallDataBase.getDB(context).getGroupMembers(groupname);
                                //                            }
                                Toast.makeText(NewTaskConversation.this, "Private message disabled", Toast.LENGTH_SHORT).show();
                            }
                        }
                        Log.i("private", "listOfObservers size is " + listOfObservers.size());
                    } catch (Resources.NotFoundException e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 999 chatusers Exception " + e.getMessage(), "WARN", null);
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 999 chatusers Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 456) {
                    try {
                        Log.i("Template", "result  ");
                        Log.i("Template", "Appreference.temconvert  " + Appreference.temconvert);
                        for (TaskDetailsBean taskDetailsBean : taskList) {
                            if (taskDetailsBean.isSelect()) {
                                taskDetailsBean.setSelect(false);
                            }
                        }
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                Appreference.temconvert = false;
                                options.setVisibility(View.GONE);
                                save.setVisibility(View.VISIBLE);
                                icons.setVisibility(View.VISIBLE);

                                if ((taskType != null && !taskType.equalsIgnoreCase("Group")) && !chat && !isProjectFromOracle) {
                                    addObserver.setVisibility(View.VISIBLE);
                                } else {
                                    addObserver.setVisibility(View.GONE);
                                }
                                if (!isProjectFromOracle)
                                    sendTemplate.setVisibility(View.VISIBLE);
                                barchart.setVisibility(View.VISIBLE);
                                Log.i("barchat", "visibility 8 ");
                                savetemplate1.setVisibility(View.GONE);
                                linear1.setVisibility(View.VISIBLE);
                                tem = false;
                                Log.i("Template", "Appreference.temconvert..  " + Appreference.temconvert);
                            }
                        });
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 456 templateconvert Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 400) {
                    try {
                        filter = data.getStringExtra("tagFilter");
                        Log.i("tagFilter", "filter " + filter);
                        Appreference.fillter = filter;
                        String Query = null;
                        switch (filter) {
                            case "Date":
                                Query = "select * from taskDetailsInfo where  (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "') and (mimeType ='date');";
                                Log.i("tagFilter", Query);
                                taskList_3 = VideoCallDataBase.getDB(context).getTaskHistory(Query);
                                taskList.clear();
                                taskList.addAll(taskList_3);
                                if (taskList.size() <= 0)
                                    Toast.makeText(NewTaskConversation.this, "There is NO Date in Conversation", Toast.LENGTH_SHORT).show();
                                Log.i("tagFilter", "size for date " + taskList.size());
                                refresh();
                                break;
                            case "Audio":
                                Query = "select * from taskDetailsInfo where  (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "') and (mimeType ='audio');";
                                Log.i("tagFilter", Query);
                                taskList_3 = VideoCallDataBase.getDB(context).getTaskHistory(Query);
                                taskList.clear();
                                taskList.addAll(taskList_3);
                                if (taskList.size() <= 0)
                                    Toast.makeText(NewTaskConversation.this, "There is No Audio in Conversation", Toast.LENGTH_SHORT).show();
                                Log.i("tagFilter", "size for audio " + taskList.size());
                                refresh();
                                break;
                            case "Video":
                                Query = "select * from taskDetailsInfo where  (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "') and (mimeType ='video');";
                                Log.i("tagFilter", Query);
                                taskList_3 = VideoCallDataBase.getDB(context).getTaskHistory(Query);
                                taskList.clear();
                                taskList.addAll(taskList_3);
                                if (taskList.size() <= 0)
                                    Toast.makeText(NewTaskConversation.this, "There is No Video in Conversation", Toast.LENGTH_SHORT).show();
                                Log.i("tagFilter", "size for video " + taskList.size());
                                refresh();
                                break;
                            case "Image":
                                Query = "select * from taskDetailsInfo where  (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "') and (mimeType ='image' or mimeType ='sketch');";
                                Log.i("tagFilter", Query);
                                taskList_3 = VideoCallDataBase.getDB(context).getTaskHistory(Query);
                                taskList.clear();
                                taskList.addAll(taskList_3);
                                if (taskList.size() <= 0)
                                    Toast.makeText(NewTaskConversation.this, "There is No Image in Conversation", Toast.LENGTH_SHORT).show();
                                Log.i("tagFilter", "size for image " + taskList.size());
                                refresh();
                                break;
                            case "Reminder":
                                Query = "select * from taskDetailsInfo where  (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "')  and (taskStatus='reminder');";
                                Log.i("tagFilter ", Query);
                                taskList_3 = VideoCallDataBase.getDB(context).getTaskHistory(Query);
                                taskList.clear();
                                taskList.addAll(taskList_3);
                                Log.i("tagFilter", "size1 " + taskList.size());
                                if (taskList.size() <= 0)
                                    Toast.makeText(NewTaskConversation.this, "There is NO Reminder in Conversation", Toast.LENGTH_SHORT).show();
                                Log.i("tagFilter", "size for reminder " + taskList.size());
                                refresh();
                                break;
                            case "Text":
                                Query = "select * from taskDetailsInfo where  (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "') and (mimeType ='text') and (taskStatus !='reminder') and (subType !='taskDescription') and (subType !='private');";
                                Log.i("tagFilter", Query);
                                taskList_3 = VideoCallDataBase.getDB(context).getTaskHistory(Query);
                                taskList.clear();
                                taskList.addAll(taskList_3);
                                if (taskList.size() <= 0)
                                    Toast.makeText(NewTaskConversation.this, "There is NO Text in Conversation", Toast.LENGTH_SHORT).show();
                                Log.i("tagFilter", "size for text " + taskList.size());
                                refresh();
                                break;
                            case "Completion":
                                Query = "select * from taskDetailsInfo where  (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "')  and (taskDescription LIKE '%Completed Percentage%') ;";
                                Log.i("tagFilter", Query);
                                taskList_3 = VideoCallDataBase.getDB(context).getTaskHistory(Query);
                                taskList.clear();
                                taskList.addAll(taskList_3);
                                if (taskList.size() <= 0)
                                    Toast.makeText(NewTaskConversation.this, "There is NO Completion in Conversation", Toast.LENGTH_SHORT).show();
                                Log.i("tagFilter", "size for text " + taskList.size());
                                refresh();
                                break;
                            case "TaskDescription":
                                Query = "select * from taskDetailsInfo where  (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "') and (subType ='taskDescription') and (subType !='private');";
                                Log.i("tagFilter", Query);
                                taskList_3 = VideoCallDataBase.getDB(context).getTaskHistory(Query);
                                taskList.clear();
                                taskList.addAll(taskList_3);
                                if (taskList.size() <= 0)
                                    Toast.makeText(NewTaskConversation.this, "There is NO TaskDescription in Conversation", Toast.LENGTH_SHORT).show();
                                Log.i("tagFilter", "size for text " + taskList.size());
                                refresh();
                                break;
                            case "Private":
                                Query = "select * from taskDetailsInfo where  (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "') and (subType ='private') and (subType !='taskDescription');";
                                Log.i("tagFilter", Query);
                                taskList_3 = VideoCallDataBase.getDB(context).getTaskHistory(Query);
                                taskList.clear();
                                taskList.addAll(taskList_3);
                                if (taskList.size() <= 0)
                                    Toast.makeText(NewTaskConversation.this, "There is NO Private in Conversation", Toast.LENGTH_SHORT).show();
                                Log.i("tagFilter", "size for text " + taskList.size());
                                refresh();
                                break;
                            case "RemoveAll":
                                Query = "select * from taskDetailsInfo where  (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "');";
                                Log.i("tagFilter", Query);
                                taskList_3 = VideoCallDataBase.getDB(context).getTaskHistory(Query);
                                taskList.clear();
                                taskList.addAll(taskList_3);
                                Log.i("tagFilter", "size for remove all " + taskList.size());
                                refresh();
                                break;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 400 tagfillter Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 222) {
                    try {
                        Intent i = new Intent();
                        Log.d("leave", "request");
                        startdate = data.getStringExtra("Start_Time");
                        enddate = data.getStringExtra("End_Time");
                        ch_remarks = data.getStringExtra("Remarks");
                        Log.i("date", "startdate" + startdate);
                        Log.i("date", "enddate" + enddate);
                        Log.i("date", "ch_remarks" + ch_remarks);
                        final_date = "From : " + startdate + " To : " + enddate;
                        Log.i("task", "composed date for showing UI----> " + final_date);
                        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                        String dateTime = dateFormat.format(new Date());
                        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                        String dateforrow = dateFormat.format(new Date());
                        tasktime = dateTime;
                        tasktime = tasktime.split(" ")[1];
                        Log.i("task", "tasktime" + tasktime);
                        Log.i("UTC", "sendMessage utc time" + dateforrow);
                        Log.i("time", "value");
                        taskUTCtime = dateforrow;
                        final TaskDetailsBean chatBean = new TaskDetailsBean();
                        Log.i("task", "task1 login user " + String.valueOf(Appreference.loginuserdetails.getId()));
                        Log.i("task", "task1 toid " + toUserId);
                        Log.i("task", "task1 taskType " + taskType);
                        Log.i("task", "task1 listOfObservers " + listOfObservers);
                        Log.i("task", "task1 taskReceiver " + taskReceiver);
                        Log.i("task", "task1 task_No " + task_No);
                        Log.i("task", "task1 from_UserName " + from_UserName);
                        Log.i("task", "task1 toUserName " + toUserName);
                        Log.i("task", "task1 Appreference from_UserName " + Appreference.loginuserdetails.getUsername());
                        chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                        chatBean.setToUserId(String.valueOf(toUserId));
                        chatBean.setTaskNo(task_No);
                        if (!template && !note) {
                            chatBean.setCatagory(category);
                        }
                        if (project) {
                            chatBean.setProjectId(projectId);
                        }
                        chatBean.setIssueId(issueId);
                        chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                        chatBean.setToUserName(toUserName);
                        chatBean.setTaskReceiver(taskReceiver);
                        chatBean.setTaskDescription("Leave Request");
                        chatBean.setTaskName(taskName);
                        chatBean.setTasktime(tasktime);
                        chatBean.setTaskUTCTime(taskUTCtime);
                        chatBean.setDateTime(dateTime);
                        chatBean.setTaskUTCDateTime(dateforrow);
                        chatBean.setPlannedStartDateTime(startdate);
                        chatBean.setUtcPlannedStartDateTime(Appreference.customLocalDateToUTC(startdate));
                        chatBean.setPlannedEndDateTime(enddate);
                        chatBean.setUtcplannedEndDateTime(Appreference.customLocalDateToUTC(enddate));
                        Log.i("task", "utc for start date in request" + Appreference.utcToLocalTime(startdate));
                        chatBean.setDateFrequency("");
                        chatBean.setSignalid(Utility.getSessionID());
                        chatBean.setMimeType("leaveRequest");
                        chatBean.setParentId(getFileName());
                        chatBean.setTaskPriority("Medium");
                        chatBean.setCompletedPercentage(percentage);
                        chatBean.setOwnerOfTask(ownerOfTask);
                        chatBean.setCustomTagVisible(true);
                        Log.i("task", "webtaskId " + webtaskId);
                        Log.i("task", "Project id 1 " + projectId);
                        chatBean.setTaskId(webtaskId);
                        chatBean.setRequestStatus("requested");
                        chatBean.setSendStatus("0");   // send status 0 is send 1 is unsend
                        chatBean.setTaskType(taskType);
                        chatBean.setMsg_status(10);
                        chatBean.setShow_progress(0);
                        chatBean.setTaskStatus(taskStatus);
                        chatBean.setTaskRequestType("taskConversation");
                        if (!isTaskName) {
                            if (project) {
                                dataBase.update_Project_history(chatBean);
                            } else {
                                dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                            }
                            dataBase.insertORupdate_Task_history(chatBean);
//                            dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                            if (chatBean.isCustomTagVisible()) {
                                taskList.add(chatBean);
                            }
                            sortTaskMessage();
                            refresh();
                        }
                        Log.i("date", "date request bean" + chatBean);
                        Log.i("task", "Desc1 " + chatBean.getTaskDescription());
                        String xml = composeChatXML(chatBean);
                        Log.d("TaskObserver", "TaskObserver list size is == " + listOfObservers.size());
                        if (listOfObservers != null && listOfObservers.size() > 0) {
                            sendMultiInstantMessage(xml, listOfObservers, 0);
                            if ((ch_remarks != null && !ch_remarks.equalsIgnoreCase(null) && !ch_remarks.equalsIgnoreCase("")) && chatBean.getRequestStatus().equalsIgnoreCase("requested")) {
                                String sig_id = Utility.getSessionID();
                                sendMessage(ch_remarks, null, "text", null, null, sig_id, null);
                            }
                            Log.i("leave", "request is set");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 222 remarks Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 444) {
                    try {
                        Log.d("leave", "Leave_Approve 121");
                        Log.d("leave", "Leave_Approve");
                        if (Appreference.isonlyLeaveApprove) {
                            Log.d("leave", "only leave approve 121 " + webtaskId + " Leave_Signal_Id  " + Leave_Signal_Id);
                            Leave_taskid = data.getStringExtra("Leave_Taskid");
                            VideoCallDataBase.getDB(context).leaveMsg_Status_Send(webtaskId);
                            for (TaskDetailsBean detailsBean : taskList) {
                                Log.d("leave", "only leave approve 121 " + webtaskId + " detailsBean.getSignalid()  " + detailsBean.getSignalid());
                                if (detailsBean.getSignalid() != null && detailsBean.getSignalid().equalsIgnoreCase(Leave_Signal_Id)) {
                                    detailsBean.setMsg_status(9);
                                }
                            }
                            String sig_id = Utility.getSessionID();
                            if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                                PercentageWebService("text", "Leave Rejected", "", sig_id, 0);
                            } else {
                                sendMessage("Leave Rejected", null, "text", null, "", sig_id, null);
                            }
                            refresh();
                            Appreference.isonlyLeaveApprove = false;
                        } else {
                            Leave_taskid = data.getStringExtra("Leave_Taskid");
                            Log.d("leave", "only leave approve 121 *** " + webtaskId);
                            Log.d("leave", "only leave approve 121 *** " + webtaskId + " Leave_Signal_Id  " + Leave_Signal_Id);
                            VideoCallDataBase.getDB(context).leaveMsg_Status_Send(webtaskId);
                            for (TaskDetailsBean detailsBean : taskList) {
                                if (detailsBean.getSignalid() != null && detailsBean.getSignalid().equalsIgnoreCase(Leave_Signal_Id)) {
                                    detailsBean.setMsg_status(9);
                                }
                            }
                            refresh();
                            int fromid = Appreference.loginuserdetails.getId();
                            String extend = data.getStringExtra("extend");
                            if (extend != null && extend.equalsIgnoreCase("true")) {
                                checkBeenLeave_List = (ArrayList<ConflictCheckBean>) data.getSerializableExtra("LeaveList");
                                Log.i("Last_Extend", "checkBeenLeave_List " + checkBeenLeave_List.size());
                                for (int i = 0; i < checkBeenLeave_List.size(); i++) {
                                    ConflictCheckBean checkBean_leave = new ConflictCheckBean();
                                    toUserName = checkBeenLeave_List.get(i).getToUserName();
                                    int toid = VideoCallDataBase.getDB(context).getUserid(toUserName);
                                    checkBean_leave.setFromUserName(Appreference.loginuserdetails.getUsername());
                                    checkBean_leave.setTaskId(checkBeenLeave_List.get(i).getTaskId());
                                    checkBean_leave.setPlannedStartDate(checkBeenLeave_List.get(i).getPlannedStartDate());
                                    checkBean_leave.setPlannedEndDate(checkBeenLeave_List.get(i).getPlannedEndDate());
                                    checkBean_leave.setToUserId(String.valueOf(toid));
                                    checkBean_leave.setTaskNo(checkBeenLeave_List.get(i).getTaskNo());
                                    checkBean_leave.setToUserName(String.valueOf(checkBeenLeave_List.get(i).getToUserName()));
                                    checkBean_leave.setFromUserId(String.valueOf(fromid));
                                    checkBean_leave.setTaskStatus(checkBeenLeave_List.get(i).getTaskStatus());
                                    checkBean_leave.setTaskPriority(checkBeenLeave_List.get(i).getTaskPriority());
                                    checkBean_leave.setTaskName(checkBeenLeave_List.get(i).getTaskName());

                                    if (checkBeenLeave_List.get(i).getProjectId() != null && !checkBeenLeave_List.get(i).getProjectId().equalsIgnoreCase("")) {
                                        checkBean_leave.setProjectId(checkBeenLeave_List.get(i).getProjectId());
                                    }
                                    if (checkBeenLeave_List.get(i).getIsGroupTask() != null && !checkBeenLeave_List.get(i).getIsGroupTask().equalsIgnoreCase("")) {
                                        if (checkBeenLeave_List.get(i).getIsGroupTask().equalsIgnoreCase("Y")) {
                                            checkBean_leave.setTaskType("Group");
                                        } else {
                                            checkBean_leave.setTaskType("Individual");
                                        }
                                    }
                                    if (checkBeenLeave_List.get(i).getTaskCategory() != null && !checkBeenLeave_List.get(i).getTaskCategory().equalsIgnoreCase("")) {
                                        if (checkBeenLeave_List.get(i).getTaskCategory().equalsIgnoreCase("taskCreation")) {
                                            checkBean_leave.setTaskCategory("Task");
                                        } else {
                                            checkBean_leave.setTaskCategory(checkBeenLeave_List.get(i).getTaskCategory());
                                        }
                                    }
                                    Log.i("leave", "Leave_Approve" + webtaskId + "-" + toUserName + "-" + taskType + "-" + toUserId + "-" + task_No);
                                    Log.i("taskconversation", "checkBeenLeave_List 1 " + checkBeenLeave_List.get(i).getToUserId() + " " + checkBeenLeave_List.get(i).getToUserName());
                                    checkbeanTOTaskBean(checkBean_leave);
                                    refresh();
                                }
                                String sig_id = Utility.getSessionID();
                                if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                                    PercentageWebService("text", "Leave Approved", "", sig_id, 0);
                                } else {
                                    sendMessage("Leave Approved", null, "text", null, "", sig_id, null);
                                }
                            } else {
                                String sig_id = Utility.getSessionID();
                                if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                                    PercentageWebService("text", "Leave Approved", "", sig_id, 0);
                                } else {
                                    sendMessage("Leave Approved", null, "text", null, "", sig_id, null);
                                }
                                refresh();
                            }
                        }
                    } catch (Resources.NotFoundException e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 444 leave Exception " + e.getMessage(), "WARN", null);
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 444 leave Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 786) {
                    try {
                        Log.i("Task", "Result" + "Inside 786");
                        ArrayList<TaskDetailsBean> beanArrayList = (ArrayList<TaskDetailsBean>) data.getExtras().getSerializable("values");
                        Log.i("Task", "Result  == " + beanArrayList.size());
                        for (int z = 0; z < beanArrayList.size(); z++) {
                            TaskDetailsBean chatBean = beanArrayList.get(z);
                            if (!isTaskName) {
                                if (chatBean.isCustomTagVisible()) {
                                    taskList.add(chatBean);
                                }
                                sortTaskMessage();
                                refresh();
                            }
                            Log.i("date", "date request bean" + chatBean);
                            Log.i("task", "Desc1 " + chatBean.getTaskDescription());
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 786 customattribute786 Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 787) {
                    try {
                        ArrayList<ListofFileds> beanArrayList = (ArrayList<ListofFileds>) data.getExtras().getSerializable("Values");
                        ArrayList<TaskDetailsBean> tagsList = new ArrayList<>();
                        int timeLimit = 0;
                        for (int z = 0; z < beanArrayList.size(); z++) {
                            ListofFileds listofFileds = beanArrayList.get(z);
                            TaskDetailsBean chatBean = new TaskDetailsBean();
                            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                            String dateTime = dateFormat.format(new Date());
                            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                            String dateforrow = dateFormat.format(new Date());
                            Log.i("task", "task1 login user " + String.valueOf(Appreference.loginuserdetails.getId()));
                            Log.i("task", "task1 toid " + toUserId);
                            Log.i("task", "task1 task_No " + task_No);
                            Log.i("task", "task1 from_UserName " + from_UserName);
                            Log.i("task", "task1 toUserName " + toUserName);
                            Log.i("task", "task1 Appreference from_UserName " + Appreference.loginuserdetails.getUsername());
                            chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                            chatBean.setToUserId(String.valueOf(toUserId));
                            chatBean.setTaskNo(task_No);
                            if (!template && !note) {
                                chatBean.setCatagory(category);
                            }
                            chatBean.setIssueId(issueId);
                            chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                            chatBean.setToUserName(toUserName);
                            chatBean.setTaskReceiver(taskReceiver);
                            if (listofFileds.getDataType().equalsIgnoreCase("datetime") || listofFileds.getDataType().equalsIgnoreCase("numeric")) {
                                chatBean.setTaskDescription(listofFileds.getName());
                                chatBean.setMimeType("text");
                            } else if (listofFileds.getDataType().equalsIgnoreCase("photo") || listofFileds.getDataType().equalsIgnoreCase("image") || listofFileds.getDataType().equalsIgnoreCase("signature")) {
                                chatBean.setTaskDescription(listofFileds.getName());
                                chatBean.setMimeType("image");
                            } else if (listofFileds.getDataType().equalsIgnoreCase("video")) {
                                chatBean.setTaskDescription(listofFileds.getName());
                                chatBean.setMimeType("video");
                            } else if (listofFileds.getDataType().equalsIgnoreCase("audio")) {
                                chatBean.setTaskDescription(listofFileds.getName());
                                chatBean.setMimeType("audio");
                            } else {
                                chatBean.setTaskDescription(listofFileds.getName());
                                chatBean.setMimeType("text");
                            }
                            chatBean.setTaskName(taskName);
                            chatBean.setTasktime(tasktime);
                            chatBean.setTaskUTCTime(taskUTCtime);
                            chatBean.setDateTime(dateTime);
                            chatBean.setTaskUTCDateTime(dateforrow);
                            chatBean.setPlannedStartDateTime(null);
                            chatBean.setUtcPlannedStartDateTime(Appreference.customLocalDateToUTC(null));
                            chatBean.setPlannedEndDateTime(null);
                            chatBean.setUtcplannedEndDateTime(Appreference.customLocalDateToUTC(null));
                            chatBean.setDateFrequency("");
                            chatBean.setSignalid(Utility.getSessionID());
                            chatBean.setParentId(getFileName());
                            chatBean.setTaskPriority("Medium");
                            chatBean.setCompletedPercentage(percentage);
                            chatBean.setOwnerOfTask(ownerOfTask);
                            chatBean.setCustomTagVisible(true);
                            Log.i("task", "webtaskId " + webtaskId);
                            chatBean.setTaskId(webtaskId);
                            chatBean.setRequestStatus("requested");
                            chatBean.setSendStatus("0");   // send status send: 0 ,unsend= 1
                            chatBean.setTaskType(taskType);
                            chatBean.setMsg_status(0);
                            chatBean.setTaskStatus(taskStatus);
                            chatBean.setRequestStatus("requested");
                            chatBean.setTaskRequestType("customeHeaderAttributeRequest");
                            chatBean.setSubType("customeHeaderAttribute");
                            chatBean.setTaskTagName(listofFileds.getTask());
                            chatBean.setShow_progress(1);
                            chatBean.setCustomTagId(Integer.valueOf(listofFileds.getId()));
                            chatBean.setCustomSetId(Integer.valueOf(listofFileds.getCreatedBy()));
                            if (!isTaskName) {
                                TaskDetailsBean taskDetailsBean = chatBean;
                                if (taskDetailsBean.isCustomTagVisible()) {
                                    taskList.add(taskDetailsBean);
                                }
                                sortTaskMessage();
                                refresh();
                            }
                            if (listofFileds.getDataType().equalsIgnoreCase("datetime")) {
                                // In future change the mimetype value.
                                chatBean.setTaskDescription(listofFileds.getName());
                                chatBean.setMimeType("text");
                            } else if (listofFileds.getDataType().equalsIgnoreCase("photo") || listofFileds.getDataType().equalsIgnoreCase("image") || listofFileds.getDataType().equalsIgnoreCase("signature")) {
                                chatBean.setTaskDescription(listofFileds.getIsInputRequired());
                                chatBean.setMimeType("image");
                            } else if (listofFileds.getDataType().equalsIgnoreCase("video")) {
                                chatBean.setTaskDescription(listofFileds.getIsInputRequired());
                                chatBean.setMimeType("video");
                            } else if (listofFileds.getDataType().equalsIgnoreCase("audio")) {
                                chatBean.setTaskDescription(listofFileds.getIsInputRequired());
                                chatBean.setMimeType("audio");
                            } else {
                                chatBean.setTaskDescription(listofFileds.getName());
                                chatBean.setMimeType("text");
                            }
                            if (project) {
                                chatBean.setProjectId(projectId);
                            }
                            Log.i("date", "date chatBean.getProjectId() -> " + chatBean.getProjectId());
                            Log.i("date", "date request bean " + chatBean);
                            Log.i("task", "Desc1 " + chatBean.getTaskDescription());
                            final String xml = composeChatXML(chatBean);
                            Log.d("TaskObserver", "TaskObserver list size is == " + listOfObservers.size());
                            if (listOfObservers != null && listOfObservers.size() > 0) {
                                timeLimit = timeLimit + 2000;
                                handler.postDelayed(new Runnable() {
                                    @Override
                                    public void run() {
                                        sendMultiInstantMessage(xml, listOfObservers, 0);
                                    }
                                }, timeLimit);
                            }
                            if (listofFileds.getDataType().equalsIgnoreCase("datetime") || listofFileds.getDataType().equalsIgnoreCase("numeric")) {
                                chatBean.setTaskDescription(listofFileds.getName());
                                chatBean.setMimeType("text");
                            } else if (listofFileds.getDataType().equalsIgnoreCase("photo") || listofFileds.getDataType().equalsIgnoreCase("image") || listofFileds.getDataType().equalsIgnoreCase("signature")) {
                                chatBean.setTaskDescription(listofFileds.getName());
                                chatBean.setMimeType("image");
                            } else if (listofFileds.getDataType().equalsIgnoreCase("video")) {
                                chatBean.setTaskDescription(listofFileds.getName());
                                chatBean.setMimeType("video");
                            } else if (listofFileds.getDataType().equalsIgnoreCase("audio")) {
                                chatBean.setTaskDescription(listofFileds.getName());
                                chatBean.setMimeType("audio");
                            } else {
                                chatBean.setTaskDescription(listofFileds.getName());
                                chatBean.setMimeType("text");
                            }
                            if (!isTaskName) {
                                if (project) {
                                    dataBase.update_Project_history(chatBean);
                                } else {
                                    dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                                }
                                dataBase.insertORupdate_Task_history(chatBean);
//                                dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                            }
                        }
                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 787 customattribute787 Exception " + e.getMessage(), "WARN", null);
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 787 customattribute787 Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 775) {
                    try {
                        ArrayList<TaskDetailsBean> beanArrayList_1 = (ArrayList<TaskDetailsBean>) data.getExtras().getSerializable("ValuesFromEscalation");
                        Log.i("taskconversation", "escalation list size is " + beanArrayList_1.size());
                        if (beanArrayList_1.size() > 0) {
                            for (TaskDetailsBean taskDetailsBean : beanArrayList_1) {
                                taskList.add(taskDetailsBean);
                            }
                            sortTaskMessage();
                            refresh();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 775 Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 3847) {
                    try {
                        Log.i("NewTaskConversation", "inside 3847");
                        TaskDetailsBean taskbean = (TaskDetailsBean) data.getSerializableExtra("message");
                        String buddy_uri = data.getStringExtra("buddyuri");
                        Log.i("NewTaskConversation", "taskbean" + taskbean.getTaskDescription());
                        Log.i("NewTaskConversation", "buddy_uri value is" + buddy_uri);
                        Log.i("NewTaskConversation", "taskbean" + taskbean.getMimeType());
                        forwardto(buddy_uri, taskbean);
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 3847 forwardto Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 143) {
                    try {
                        ArrayList<TaskDetailsBean> detailsBeanArrayList = (ArrayList<TaskDetailsBean>) data.getExtras().get("uiList");
                        Log.i("NewTaskConversation", "143   ==  " + detailsBeanArrayList.size());
                        Log.i("response", "NewTaskConversation uiList.size()  143  * >----> 1 * " + detailsBeanArrayList.size());
                        if (detailsBeanArrayList.size() > 0) {
                            for (TaskDetailsBean taskDetailsBean : detailsBeanArrayList) {
                                Log.i("response", "NewTaskConversation uiList.size()  143  * >----> 2  * " + taskDetailsBean.getTaskDescription());
                                taskList.add(taskDetailsBean);
                            }
                            sortTaskMessage();
                            refresh();
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 143 Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 3838) {
                    TaskDetailsBean beanfortask = (TaskDetailsBean) getIntent().getSerializableExtra("medialistBean");
                    Log.i("NewTaskConversation", beanfortask.getTaskDescription());
                    Log.i("NewTaskConversation", beanfortask.getMimeType());
                    Log.i("NewTaskConversation", beanfortask.getPrivate_Member());
                } else if (requestCode == 120) {
                    try {
                        if (null != data) {
                            Log.i("desc123", "inside 120========>");
//                            ActivityStartdate = data.getStringExtra("DateStart");
//                            ActivityEnddate = data.getStringExtra("DateEnd");
//                            sendStatus_webservice("7", "", "", "travel", "");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "onActivityResult 120 Exception " + e.getMessage(), "WARN", null);
                    }
                } else if (requestCode == 9999) {
                    TaskDetailsBean beanfortEod = (TaskDetailsBean) data.getExtras().getSerializable("eodBean");
                    Log.i("EodScreen", "onavtivity 9999 " + beanfortEod);
                    Log.i("NewTaskConversation", "machinemake " + beanfortEod.getMachineMake());
                    Log.i("NewTaskConversation", "observation " + beanfortEod.getObservation());
                    Log.i("NewTaskConversation", "McDescription " + beanfortEod.getMcDescription());
                    Log.i("NewTaskConversation", "techsign " + beanfortEod.getTechnicianSignature());
                    Log.i("NewTaskConversation", "photopath " + beanfortEod.getPhotoPath());
                    Log.i("NewTaskConversation", "synopsis " + beanfortEod.getSynopsis());
                    Log.i("NewTaskConversation", "customerremark " + beanfortEod.getCustomerRemarks());
                    observation_path = "";
                    Action_Taken_path = "";
                    customerRemarks_path = "";
                    synopsis_path = "";
                    observationStatus = "";
                    actiontakenStatus = "";
                    HMReadingStatus = "";
                    status_signature = "";
                    custsignnameStatus = "";
                    photo_signature = "";
                    tech_signature = "";
                    synopsis_status = "";
                    String customer_remarksEntry = "";
                    if (beanfortEod.getCustomerRemarks() != null && !beanfortEod.getCustomerRemarks().equalsIgnoreCase("")
                            && beanfortEod.getCustomerRemarks().contains(".jpg")) {
                        customerRemarks_path = beanfortEod.getCustomerRemarks();
                        Log.i("Eod", "customerRemarks_path " + customerRemarks_path);
                    } else {
                        customer_remarksEntry = beanfortEod.getCustomerRemarks();
                        Log.i("Eod", "customerRemarks_path 1 " + customerRemarks_path);
                    }
                    taskCompletedDate = beanfortEod.getTaskCompletedDate();
                    machion_make_edit = beanfortEod.getMachineMake();
                    machine_model = beanfortEod.getMcModel();
                    machine_serialno = beanfortEod.getMcSrNo();
                    machine_description = beanfortEod.getMcDescription();
                    if (beanfortEod.getObservation() != null && !beanfortEod.getObservation().equalsIgnoreCase("")
                            && beanfortEod.getObservation().contains(".jpg")) {
                        observation_path = beanfortEod.getObservation();
                    } else {
                        observationStatus = beanfortEod.getObservation();
                    }
                    if (beanfortEod.getActionTaken() != null && !beanfortEod.getActionTaken().equalsIgnoreCase("")
                            && beanfortEod.getActionTaken().contains(".jpg")) {
                        Action_Taken_path = beanfortEod.getActionTaken();
                    } else {
                        actiontakenStatus = beanfortEod.getActionTaken();
                    }
                    if (beanfortEod.getSynopsis() != null && !beanfortEod.getSynopsis().equalsIgnoreCase("")
                            && beanfortEod.getSynopsis().contains(".jpg")) {
                        synopsis_path = beanfortEod.getSynopsis();
                    } else if (beanfortEod.getSynopsis() != null && !beanfortEod.getSynopsis().equalsIgnoreCase("")
                            && !beanfortEod.getSynopsis().equalsIgnoreCase(null)) {
                        synopsis_status = beanfortEod.getSynopsis();
                    }

                    HMReadingStatus = beanfortEod.getHMReading();
                    custsignnameStatus = beanfortEod.getCustomerSignatureName();
                    status_signature = beanfortEod.getCustomerSignature();
                    tech_signature = beanfortEod.getTechnicianSignature();
                    photo_signature = beanfortEod.getPhotoPath();
                    Appreference.observation_list = beanfortEod.getMultiObservation_list();
                    Appreference.Action_Taken_list = beanfortEod.getMultiActionTaken_list();
                    Appreference.customerRemarks_list = beanfortEod.getMulticustomerRemarks_list();
                    Appreference.Synopsis_list = beanfortEod.getMultiSynopsis_list();
                    Log.i("EodScreen", "custsignnameStatus  " + custsignnameStatus);
                    Log.i("EodScreen", "tech_signature  " + tech_signature);
                    Log.i("EodScreen", "photo_signature  " + photo_signature);
                    Log.i("EodScreen", "synopsis_status  " + synopsis_status);
                    Log.i("EodScreen", "synopsis_path  " + synopsis_path);
                    Log.i("EodScreen", "machine_description  " + machine_description);
                    Log.i("EodScreen", "machion_make_edit  " + machion_make_edit);
                    Log.i("EodScreen", "machine_description  " + machine_description);
                    Log.i("EodScreen", "observation_path  " + observation_path);
                    Log.i("EodScreen", "observationStatus  " + observationStatus);
                    Log.i("EodScreen", "customerRemarks_path  " + customerRemarks_path);
                    Log.i("EodScreen", "customer_remarksEntry  " + customer_remarksEntry);
                    Log.i("EodScreen", "machine_serialno  " + machine_serialno);
                    Log.i("EodScreen", "taskCompletedDate  " + taskCompletedDate);
                    Log.i("eod123", "observation_list  " + beanfortEod.getMultiObservation_list());
                    Log.i("eod123", "actionTaken_list  " + beanfortEod.getMultiActionTaken_list());
                    Log.i("eod123", "CustomerRemark_list " + beanfortEod.getMulticustomerRemarks_list());
                    Log.i("eod123", "Synopsis list  " + beanfortEod.getMultiSynopsis_list());
                    String selectedDate[] = taskCompletedDate.split(" ");
                    String date_s = selectedDate[0];
                    Log.i("EodScreen", "date_s  " + date_s);
                    sendStatus_webservice("10", "", customer_remarksEntry, "EOD Sent date is " + date_s, "");
                }
                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        list_all.setSelection(list_all.getAdapter().getCount() - 1);
                    }
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "onActivityResult Exception " + e.getMessage(), "WARN", null);
        }
    }

    public void forwardto(String str, TaskDetailsBean detailsBean) {
        try {
            String uri = str;
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String dateTime = dateFormat.format(new Date());
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            String dateforrow = dateFormat.format(new Date());
            Log.i("chat", " dateTime " + dateforrow);
            ArrayList<TaskDetailsBean> taskDetailsBean = VideoCallDataBase.getDB(getApplicationContext()).getChatnames(uri);
            if (taskDetailsBean != null && taskDetailsBean.size() > 0 && taskDetailsBean.get(0) != null) {
                Log.i("NewTaskConversation", "Chatetails size--->" + taskDetailsBean.get(0).getToUserId());
                Log.i("NewTaskConversation", "db datetime-->" + taskDetailsBean.get(0));
                Log.i("NewTaskConversation", "db cahtid--->" + taskDetailsBean.get(0));
                forword_bean = taskDetailsBean.get(0);
                forword_bean.setTaskDescription(detailsBean.getTaskDescription());
                String signal = Utility.getSessionID();
                forword_bean.setSignalid(signal);
                forword_bean.setFromUserName(Appreference.loginuserdetails.getUsername());
                forword_bean.setToUserName(uri);
                forword_bean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                ContactBean contactBean = VideoCallDataBase.getDB(context).getContactObject(uri);
                forword_bean.setToUserId(String.valueOf(contactBean.getUserid()));
                forword_bean.setMimeType(detailsBean.getMimeType());
                forword_bean.setDateTime(dateTime);
                forword_bean.setTasktime(dateTime);
                forword_bean.setSendStatus("0");
                forword_bean.setWs_send("0");
                forword_bean.setCatagory(category);
                forword_bean.setMsg_status(0);
                forword_bean.setCompletedPercentage("0");
                forword_bean.setCustomTagVisible(true);
                forword_bean.setTaskPriority("Medium");
                forword_bean.setTaskName(detailsBean.getTaskName());
                forword_bean.setTaskNo(detailsBean.getTaskNo());
                forword_bean.setTaskUTCTime(dateforrow);
                forword_bean.setTaskUTCDateTime(dateforrow);
                Log.i("taskconversation", "CusTome ---->>><<< 20 ");
                dataBase.insertORupdate_Task_history(forword_bean);
                dataBase.insertORupdate_TaskHistoryInfo(forword_bean);
                try {
                    JSONObject jsonObject = new JSONObject();
                    JSONObject jsonObject1 = new JSONObject();
                    jsonObject1.put("id", Integer.parseInt(forword_bean.getTaskId()));
                    jsonObject.put("task", jsonObject1);
                    JSONObject jsonObject2 = new JSONObject();
                    jsonObject2.put("id", Appreference.loginuserdetails.getId());
                    jsonObject.put("from", jsonObject2);
                    if ((!template && !project && !note) || chat) {
                        JSONObject jsonObject3 = new JSONObject();
                        jsonObject3.put("id", contactBean.getUserid());
                        if (taskType.equalsIgnoreCase("group")) {
                            jsonObject.put("group", jsonObject3);
                        } else {
                            jsonObject.put("to", jsonObject3);
                        }
                    }
                    jsonObject.put("signalId", signal);
                    jsonObject.put("parentId", getFileName());
                    jsonObject.put("createdDate", dateforrow);
                    jsonObject.put("requestType", "taskConversation");
                    jsonObject.put("requestStatus", "");
                    jsonObject.put("requestStatus", "approved");
                    jsonObject.put("taskEndDateTime", enddate);
                    jsonObject.put("taskStartDateTime", startdate);
                    jsonObject.put("remainderDateTime", reminderdate);
                    jsonObject.put("dateFrequency", "");
                    jsonObject.put("timeFrequency", reminderfreq);
                    jsonObject.put("remark", "");
                    JSONObject jsonObject5 = new JSONObject();
                    jsonObject5.put("id", Appreference.loginuserdetails.getId());
                    JSONObject jsonObject4 = new JSONObject();
                    jsonObject4.put("user", jsonObject5);
                    switch (detailsBean.getMimeType().toLowerCase().trim()) {
                        case "image":
                            jsonObject4.put("fileType", "image");
                            jsonObject4.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(detailsBean.getTaskDescription())));
                            jsonObject4.put("taskFileExt", "jpg");
                            break;
                        case "video":
                            jsonObject4.put("fileType", "video");
                            Log.i("task", "Video uploaded" + detailsBean.getMimeType());
                            jsonObject4.put("fileContent", encodeAudioVideoToBase64(detailsBean.getTaskDescription()));
                            jsonObject4.put("taskFileExt", "mp4");
                            break;
                        case "audio":
                            jsonObject4.put("fileType", "audio");
                            jsonObject4.put("fileContent", encodeAudioVideoToBase64(detailsBean.getTaskDescription()));
                            jsonObject4.put("taskFileExt", "mp3");
                            break;
                        case "document":
                            jsonObject4.put("fileType", detailsBean.getMimeType());
                            jsonObject4.put("fileContent", encodeFileToBase64Binary(detailsBean.getTaskDescription()));
                            jsonObject4.put("taskFileExt", detailsBean.getMimeType().split(".")[1]);
                            break;
                        case "text":
                            jsonObject4.put("fileType", "text");
                            jsonObject4.put("description", detailsBean.getTaskDescription());
                            break;
                        case "map":
                            jsonObject4.put("fileType", "map");
                            jsonObject4.put("description", detailsBean.getTaskDescription());
                            break;
                        case "textfile":
                            Log.i("textfile", "getExt ==  " + detailsBean.getMimeType().split(".")[1] + "   getMediaType  == " + detailsBean.getMimeType());
                            jsonObject4.put("fileType", detailsBean.getMimeType());
                            jsonObject4.put("taskFileExt", "txt");
                            jsonObject4.put("fileContent", encodeFileToBase64Binary(detailsBean.getTaskDescription()));
                            break;
                    }
                    JSONArray jsonArray = new JSONArray();
                    jsonArray.put(0, jsonObject4);
                    jsonObject.put("listTaskConversationFiles", jsonArray);
                    if (jsonObject != null) {
                        Log.i("Request", "Task date update for giver is " + jsonObject);
                        Log.i("fileuplad", "mpath" + detailsBean.getMimeType());
                        Log.i("TaskEntry", "2 taskConversationEntry 2");
                        forword_to = true;
                        Appreference.printLog("taskConversationEntry", jsonObject.toString(), "Request", null);
                        Appreference.jsonRequestSender.taskConversationEntry(EnumJsonWebservicename.taskConversationEntry, jsonObject, this, null, forword_bean);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "forwardto taskConversationEntry Exception " + e.getMessage(), "WARN", null);
                }
            } else {
                forword_bean.setTaskDescription(detailsBean.getTaskDescription());
                String signal = Utility.getSessionID();
                forword_bean.setSignalid(signal);
                forword_bean.setFromUserName(Appreference.loginuserdetails.getUsername());
                forword_bean.setToUserName(uri);
                forword_bean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                ContactBean contactBean = VideoCallDataBase.getDB(context).getContactObject(uri);
                forword_bean.setToUserId(String.valueOf(contactBean.getUserid()));
                forword_bean.setMimeType(detailsBean.getMimeType());
                forword_bean.setDateTime(dateTime);
                forword_bean.setTasktime(dateTime);
                forword_bean.setSendStatus("0");
                forword_bean.setWs_send("0");
                forword_bean.setMsg_status(0);
                forword_bean.setCompletedPercentage("0");
                forword_bean.setCustomTagVisible(true);
                forword_bean.setCatagory(category);
                forword_bean.setTaskPriority("Medium");
                forword_bean.setTaskName(detailsBean.getTaskName());
                forword_bean.setTaskNo(detailsBean.getTaskNo());
                forword_bean.setTaskUTCTime(dateforrow);
                forword_bean.setTaskUTCDateTime(dateforrow);
                taskIdWebservice(forword_bean);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "forwardto Exception : " + e.getMessage(), "WARN", null);
        }

    }

    public void confictWebservice() {
        try {
            conflict = appSharedpreferences.getBoolean("conflictTask");
            Log.i("date", "from user ID " + String.valueOf(fromId));
            Log.i("date", "To user ID " + String.valueOf(toUserId));
            Log.i("date", "start date " + startdate);
            Log.i("date", "end date " + enddate);
            Log.i("leave", "from user ID " + String.valueOf(fromId));
            Log.i("leave", "To user ID " + String.valueOf(toUserId));
            Log.i("leave", "start date " + startdate);
            Log.i("leave", "end date " + enddate);
            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(2);
            nameValuePairs.add(new BasicNameValuePair("fromUserId", String.valueOf(fromId)));
            nameValuePairs.add(new BasicNameValuePair("toUserId", String.valueOf(toUserId)));
            nameValuePairs.add(new BasicNameValuePair("plannedStartDate", startdate));
            nameValuePairs.add(new BasicNameValuePair("plannedEndDate", enddate));
            Appreference.printLog("checkConflicts", nameValuePairs.toString(), "Request", null);
            Appreference.jsonRequestSender.checkConflicts(EnumJsonWebservicename.checkConflicts, nameValuePairs, NewTaskConversation.this);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "confictWebservice Exception : " + e.getMessage(), "WARN", null);
        }

    }

    public void confictMedialistWebservice(String Start, String End, String FromId, String ToId, String Leave_Signal_id, String task_type) {
        try {
            conflict = true;
            Leave_Signal_Id = Leave_Signal_id;
            startdate = Start;
            enddate = End;
            String Fromid = FromId;
            String Toid = ToId;

            showprogress();
            List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>(4);
            if (task_type != null && task_type.equalsIgnoreCase("Group")) {
                nameValuePairs.add(new BasicNameValuePair("fromUserId", String.valueOf(Appreference.loginuserdetails.getId())));
                nameValuePairs.add(new BasicNameValuePair("toUserId", Fromid));
                nameValuePairs.add(new BasicNameValuePair("plannedStartDate", startdate));
                nameValuePairs.add(new BasicNameValuePair("plannedEndDate", enddate));
            } else {
                nameValuePairs.add(new BasicNameValuePair("fromUserId", String.valueOf(Appreference.loginuserdetails.getId())));
                nameValuePairs.add(new BasicNameValuePair("toUserId", Fromid));
                nameValuePairs.add(new BasicNameValuePair("plannedStartDate", startdate));
                nameValuePairs.add(new BasicNameValuePair("plannedEndDate", enddate));
            }
            Appreference.printLog("checkConflicts", nameValuePairs.toString(), "Request", null);
            Appreference.jsonRequestSender.checkConflicts(EnumJsonWebservicename.checkConflicts, nameValuePairs, NewTaskConversation.this);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "confictMedialistWebservice Exception : " + e.getMessage(), "WARN", null);
        }
    }

    private void dateTemplateWebService(TaskDetailsBean chatBean) {
        String rem_tone;
        try {
            JSONObject jsonObject = new JSONObject();
            JSONObject jsonObject1 = new JSONObject();
            jsonObject1.put("id", Integer.parseInt(webtaskId));
            jsonObject.put("task", jsonObject1);
            jsonObject.put("taskName", chatBean.getTaskName());
            jsonObject.put("duration", chatBean.getDuration());
            jsonObject.put("durationUnit", chatBean.getDurationUnit());
            JSONObject jsonObject4 = new JSONObject();
            jsonObject4.put("fileType", "audio");
            jsonObject4.put("taskFileExt", "mp3");
            Log.i("Request", "remainder" + remindertone);
            if (remindertone != null && !remindertone.equalsIgnoreCase(null) && !remindertone.equalsIgnoreCase("")) {
                rem_tone = encodeAudioVideoToBase64(remindertone);
                jsonObject4.put("fileContent", rem_tone);
                JSONArray jsonArray = new JSONArray();
                jsonArray.put(0, jsonObject4);
                jsonObject.put("remainderTone", jsonArray);
            }
            if (reminderquote.equalsIgnoreCase("") || reminderquote.equalsIgnoreCase(null)) {
                jsonObject.put("remainderQuotes", "");
            } else {
                jsonObject.put("remainderQuotes", reminderquote);
            }
            jsonObject.put("timeFrequency", chatBean.getTimeFrequency());
            Log.i("Request", "remainder" + reminderquote);
            Log.i("task", "Task date update for giver is " + jsonObject);
            Appreference.jsonRequestSender.remainderForTemplate(EnumJsonWebservicename.remainderForTemplate, jsonObject, NewTaskConversation.this, null, chatBean);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "remainderForTemplate Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void dateSendORApprovalORReject() {
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String dateTime = dateFormat.format(new Date());
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            String dateforrow = dateFormat.format(new Date());
            tasktime = dateTime;
            tasktime = tasktime.split(" ")[1];
            Log.i("task", "tasktime " + tasktime);
            Log.i("UTC", "sendMessage utc time " + dateforrow);
            Appreference.isOverdue.put(webtaskId, false);
            Log.i("time", "value");
            taskUTCtime = dateforrow;
            SimpleDateFormat utcdateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            final TaskDetailsBean chatBean = new TaskDetailsBean();
            chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
            chatBean.setToUserId(String.valueOf(toUserId));
            chatBean.setTaskNo(task_No);
            if (!template && !note) {
                chatBean.setCatagory(category);
            }
            chatBean.setIssueId(issueId);
            chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
            chatBean.setToUserName(toUserName);
            if (project) {
                chatBean.setProjectId(projectId);
                if (projectGroup_Mems != null) {
                    chatBean.setGroupTaskMembers(projectGroup_Mems);
                }
            }
            chatBean.setTaskDescription(date_header);
            SimpleDateFormat sdf3 = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy", Locale.ENGLISH);
            if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                if (android.text.format.DateFormat.is24HourFormat(context)) {
                    Log.d("UTC", "start date not a  utc final result    ==  " + dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(startdate)))));
                    Log.d("UTC", "end date not a  utc final result    ==  " + dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(enddate)))));
                    chatBean.setUtcPlannedStartDateTime(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(startdate)))));
                    chatBean.setPlannedStartDateTime(startdate);
                    chatBean.setUtcplannedEndDateTime(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(enddate)))));
                    chatBean.setPlannedEndDateTime(enddate);
                    chatBean.setRemainderFrequency(reminderdate);
                    Log.i("newtaskconversation", "chatBean.getRemainderFrequency : " + chatBean.getRemainderFrequency() + "reminderfreq " + reminderfreq);
                    if ((chatBean.getRemainderFrequency() == null || chatBean.getRemainderFrequency().equals(""))
                            && (reminderfreq == null || reminderfreq.equals(""))) {
                        Log.i("newtaskconversation", "chatBean.setIsRemainderRequired N : ");
                        chatBean.setIsRemainderRequired("N");
                        chatBean.setUtcPemainderFrequency("");
                    } else if (chatBean.getRemainderFrequency() != null && !chatBean.getRemainderFrequency().equals("")
                            && (reminderfreq == null || reminderfreq.equals(""))) {
                        Log.i("newtaskconversation", "chatBean.setIsRemainderRequired R : ");
                        chatBean.setIsRemainderRequired("R");
                        chatBean.setReminderQuote(reminderquote);
                        chatBean.setUtcPemainderFrequency(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(reminderdate)))));
                    } else if (chatBean.getRemainderFrequency() != null && !chatBean.getRemainderFrequency().equals("")
                            && (reminderfreq != null && !reminderfreq.equals(""))) {
                        chatBean.setIsRemainderRequired("Y");
                        chatBean.setReminderQuote(reminderquote);
                        Log.i("newtaskconversation", "chatBean.setIsRemainderRequired Y : ");
                        chatBean.setUtcPemainderFrequency(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(reminderdate)))));
                    }
                    chatBean.setDateFrequency("");
                    chatBean.setTimeFrequency(reminderfreq);
                } else {
                    Log.d("UTC", "start date not a  utc final result    ==  " + dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(startdate)))));
                    Log.d("UTC", "end date not a  utc final result    ==  " + dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(enddate)))));
                    chatBean.setUtcPlannedStartDateTime(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(startdate)))));
                    chatBean.setPlannedStartDateTime(startdate);
                    chatBean.setUtcplannedEndDateTime(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(enddate)))));
                    chatBean.setPlannedEndDateTime(enddate);
                    chatBean.setRemainderFrequency(reminderdate);
                    Log.i("newtaskconversation", "chatBean.getRemainderFrequency ** : " + chatBean.getRemainderFrequency() + "reminderfreq " + reminderfreq);
                    if ((chatBean.getRemainderFrequency() == null || chatBean.getRemainderFrequency().equals(""))
                            && (reminderfreq == null || reminderfreq.equals(""))) {
                        Log.i("newtaskconversation", "chatBean.setIsRemainderRequired N ** : ");
                        chatBean.setIsRemainderRequired("N");
                        chatBean.setUtcPemainderFrequency("");
                    } else if (chatBean.getRemainderFrequency() != null && !chatBean.getRemainderFrequency().equals("")
                            && (reminderfreq == null || reminderfreq.equals(""))) {
                        Log.i("newtaskconversation", "chatBean.setIsRemainderRequired R ** : ");
                        chatBean.setIsRemainderRequired("R");
                        chatBean.setReminderQuote(reminderquote);
                        chatBean.setUtcPemainderFrequency(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(reminderdate)))));
                    } else if (chatBean.getRemainderFrequency() != null && !chatBean.getRemainderFrequency().equals("")
                            && (reminderfreq != null || !reminderfreq.equals(""))) {
                        Log.i("newtaskconversation", "chatBean.setIsRemainderRequired Y ** : ");
                        chatBean.setIsRemainderRequired("Y");
                        chatBean.setReminderQuote(reminderquote);
                        chatBean.setUtcPemainderFrequency(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(reminderdate)))));
                    }
                    chatBean.setDateFrequency("");
                    chatBean.setTimeFrequency(reminderfreq);
                }
            } else {
                if (android.text.format.DateFormat.is24HourFormat(context)) {
                    Log.d("UTC", "start date not a  utc final result    ==  " + dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(startdate)))));
                    Log.d("UTC", "end date not a  utc final result    ==  " + dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(enddate)))));
                    chatBean.setUtcPlannedStartDateTime(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(startdate)))));
                    chatBean.setPlannedStartDateTime(startdate);
                    chatBean.setUtcplannedEndDateTime(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(enddate)))));
                    chatBean.setPlannedEndDateTime(enddate);
                    chatBean.setRemainderFrequency(reminderdate);
                    Log.i("newtaskconversation", "chatBean.getRemainderFrequency : " + chatBean.getRemainderFrequency() + "reminderfreq " + reminderfreq);
                    if ((chatBean.getRemainderFrequency() == null || chatBean.getRemainderFrequency().equals(""))
                            && (reminderfreq == null || reminderfreq.equals(""))) {
                        Log.i("newtaskconversation", "chatBean.setIsRemainderRequired N : ");
                        chatBean.setIsRemainderRequired("N");
                        chatBean.setUtcPemainderFrequency("");
                    } else if (chatBean.getRemainderFrequency() != null && !chatBean.getRemainderFrequency().equals("")
                            && (reminderfreq == null || reminderfreq.equals(""))) {
                        Log.i("newtaskconversation", "chatBean.setIsRemainderRequired R : ");
                        chatBean.setIsRemainderRequired("R");
                        chatBean.setReminderQuote(reminderquote);
                        chatBean.setUtcPemainderFrequency(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(reminderdate)))));
                    } else if (chatBean.getRemainderFrequency() != null && !chatBean.getRemainderFrequency().equals("")
                            && (reminderfreq != null && !reminderfreq.equals(""))) {
                        chatBean.setIsRemainderRequired("Y");
                        chatBean.setReminderQuote(reminderquote);
                        Log.i("newtaskconversation", "chatBean.setIsRemainderRequired Y : ");
                        chatBean.setUtcPemainderFrequency(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(reminderdate)))));
                    }
                    chatBean.setDateFrequency("");
                    chatBean.setTimeFrequency(reminderfreq);
                } else {
                    Log.d("UTC", "start date not a  utc final result    ==  " + dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(startdate)))));
                    Log.d("UTC", "end date not a  utc final result    ==  " + dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(enddate)))));
                    chatBean.setUtcPlannedStartDateTime(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(startdate)))));
                    chatBean.setPlannedStartDateTime(startdate);
                    chatBean.setUtcplannedEndDateTime(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(enddate)))));
                    chatBean.setPlannedEndDateTime(enddate);
                    chatBean.setRemainderFrequency(reminderdate);
                    Log.i("newtaskconversation", "chatBean.getRemainderFrequency ** : " + chatBean.getRemainderFrequency() + "reminderfreq " + reminderfreq);
                    if ((chatBean.getRemainderFrequency() == null || chatBean.getRemainderFrequency().equals(""))
                            && (reminderfreq == null || reminderfreq.equals(""))) {
                        Log.i("newtaskconversation", "chatBean.setIsRemainderRequired N ** : ");
                        chatBean.setIsRemainderRequired("N");
                        chatBean.setUtcPemainderFrequency("");
                    } else if (chatBean.getRemainderFrequency() != null && !chatBean.getRemainderFrequency().equals("")
                            && (reminderfreq == null || reminderfreq.equals(""))) {
                        Log.i("newtaskconversation", "chatBean.setIsRemainderRequired R ** : ");
                        chatBean.setIsRemainderRequired("R");
                        chatBean.setReminderQuote(reminderquote);
                        chatBean.setUtcPemainderFrequency(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(reminderdate)))));
                    } else if (chatBean.getRemainderFrequency() != null && !chatBean.getRemainderFrequency().equals("")
                            && (reminderfreq != null || !reminderfreq.equals(""))) {
                        Log.i("newtaskconversation", "chatBean.setIsRemainderRequired Y ** : ");
                        chatBean.setIsRemainderRequired("Y");
                        chatBean.setReminderQuote(reminderquote);
                        chatBean.setUtcPemainderFrequency(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(reminderdate)))));
                    }
                    chatBean.setDateFrequency("");
                    chatBean.setTimeFrequency(reminderfreq);
                }
            }

            if (Weekdays != null && !Weekdays.equalsIgnoreCase("")) {
                Log.i("date", "Weekdays " + Weekdays);
                chatBean.setDaysOfTheWeek(Weekdays);
                chatBean.setRepeatFrequency("1");
            }
            chatBean.setSignalid(Utility.getSessionID());
            chatBean.setMimeType("date");
            chatBean.setParentId(getFileName());
            chatBean.setTaskPriority("Medium");
            chatBean.setCompletedPercentage(percentage);
            chatBean.setDateTime(dateTime);
            chatBean.setTaskUTCDateTime(dateforrow);
            if (!isTaskName) {
                chatBean.setTaskId(webtaskId);
                chatBean.setTaskName(taskName);
                chatBean.setOwnerOfTask(ownerOfTask);
                chatBean.setCustomTagVisible(true);
            }
            chatBean.setSendStatus("0");   // send status 0 is send 1 is unsend
            chatBean.setTaskType(taskType);
            if (template) {
                if (note) {
                    chatBean.setTaskStatus("note");
                } else {
                    chatBean.setTaskStatus("draft");
                }
                chatBean.setCustomTagVisible(true);
            } else if (taskType != null && getResources().getString(R.string.task_enable).equalsIgnoreCase("enable") && !taskType.equalsIgnoreCase("Group")) {
                if (taskStatus.equalsIgnoreCase("overdue")) {
                    chatBean.setTaskStatus("inprogress");
                } else {
                    chatBean.setTaskStatus(taskStatus);
                }
                Log.i("Accept", "value datecompose " + chatBean.getTaskStatus());
            } else {
                chatBean.setTaskStatus("inprogress");
                Log.i("Accept", "value datecompose else " + chatBean.getTaskStatus());
            }
            if (date_header.equalsIgnoreCase("assigned")) {
                chatBean.setRequestStatus("assigned");
                chatBean.setTaskRequestType("taskDateChangedApproval");
            } else if (date_header.equalsIgnoreCase("requested")) {
                chatBean.setRequestStatus("requested");
                chatBean.setTaskRequestType("taskDateChangedRequest");
            } else if (date_header.equalsIgnoreCase("approved")) {
                chatBean.setRequestStatus("approved");
                chatBean.setTaskRequestType("taskDateChangedApproval");
                chatBean.setServerFileName(remindertone);
            } else if (date_header.equalsIgnoreCase("rejected")) {
                chatBean.setRequestStatus("rejected");
                chatBean.setTaskRequestType("taskDateChangedApproval");
            }
            chatBean.setRemark("");
            chatBean.setSubType("normal");
            chatBean.setRemark("");
            chatBean.setTasktime(tasktime);
            chatBean.setTaskUTCTime(taskUTCtime);
            chatBean.setTaskReceiver(taskReceiver);
            if (isTaskName) {
                ownerOfTask = Appreference.loginuserdetails.getUsername();
                chatBean.setTaskName(taskName);
                chatBean.setOwnerOfTask(ownerOfTask);
                chatBean.setCustomTagVisible(true);
            } else if (!isTaskName) {
                if (project) {
                    VideoCallDataBase.getDB(context).update_Project_history(chatBean);
                } else {
                    dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                }
                chatBean.setWs_send("0");
                Log.i("taskconversation", "CusTome ---->>><<< 21 ");
                dataBase.insertORupdate_Task_history(chatBean);
//                dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                if (chatBean.isCustomTagVisible()) {
                    taskList.add(chatBean);
                }
                sortTaskMessage();
                refresh();
            }
            Log.i("requestStatus", "date bean" + chatBean.getRequestStatus());
            Log.i("task", "Desc1 " + chatBean.getTaskDescription());
            if (subType != null && (subType.equalsIgnoreCase("normal") || subType.equalsIgnoreCase("taskDescription"))) {
                if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                    datefileWebService(chatBean);
                } else {
//                    if (getResources().getString(R.string.proxyua).equalsIgnoreCase("enable") && chatBean.getMimeType().equalsIgnoreCase("date") && chatBean.getRequestStatus().equalsIgnoreCase("assigned")) {
//                        chatBean.setRequestStatus("approved");
//                    }
                    String xml = composeChatXML(chatBean);
                    Log.d("TaskObserver", "TaskObserver list size is == " + listOfObservers.size());
                    if (listOfObservers != null && listOfObservers.size() > 0) {
                        sendMultiInstantMessage(xml, listOfObservers, 0);
                    }
                }
            }
            if (!calender)
                reminderTimerDisplay();
            calender = false;
        } catch (ParseException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "dateSendORApprovalORReject() Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "dateSendORApprovalORReject() Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void dateTemplateCreation() {
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String dateTime = dateFormat.format(new Date());
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            String dateforrow = dateFormat.format(new Date());
            tasktime = dateTime;
            tasktime = tasktime.split(" ")[1];
            Log.i("task", "tasktime" + tasktime);
            Log.i("UTC", "sendMessage utc time" + dateforrow);
            Log.i("time", "value");
            taskUTCtime = dateforrow;
            final TaskDetailsBean chatBean = new TaskDetailsBean();
            chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
            chatBean.setToUserId(String.valueOf(toUserId));
            chatBean.setTaskNo(task_No);
            if (!template && !note) {
                chatBean.setCatagory(category);
            }
            chatBean.setIssueId(issueId);
            chatBean.setFromUserName(from_UserName);
            chatBean.setSelect(false);
            chatBean.setToUserName(toUserName);
            chatBean.setReminderQuote(reminderquote);
            if (remindertone != null) {
                chatBean.setTaskDescription(remindertone);
            } else {
                chatBean.setTaskDescription("template");
            }
            chatBean.setPlannedStartDateTime("");
            chatBean.setPlannedEndDateTime("");
            chatBean.setRemainderFrequency("");
            chatBean.setIsRemainderRequired("1");
            chatBean.setDateFrequency("");
            chatBean.setTimeFrequency(repeatfreq);
            chatBean.setSignalid(Utility.getSessionID());
            chatBean.setMimeType("date");
            chatBean.setParentId(getFileName());
            chatBean.setTaskPriority("Medium");
            chatBean.setCompletedPercentage("");
            chatBean.setTaskUTCDateTime(dateforrow);
            chatBean.setDateTime(dateTime);
            if (!isTaskName) {
                chatBean.setTaskId(webtaskId);
                chatBean.setTaskName(taskName);
                chatBean.setOwnerOfTask(ownerOfTask);
                chatBean.setCustomTagVisible(true);
            }
            if (project) {
                chatBean.setProjectId(projectId);
            }
            chatBean.setSendStatus("0");   // send status 0 is send 1 is unsend
            chatBean.setTaskType(taskType);
            chatBean.setTaskStatus("draft");
            chatBean.setDuration(duration);
            chatBean.setDurationUnit(durationunit);
            chatBean.setRemark("");
            chatBean.setTaskRequestType("assigned");
            chatBean.setRequestStatus("assigned");
            chatBean.setTasktime(tasktime);
            chatBean.setTaskUTCTime(taskUTCtime);
            chatBean.setTaskReceiver(taskReceiver);
            if (!isTaskName) {
                if (project) {
                    dataBase.update_Project_history(chatBean);
                } else {
                    dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                }
                Log.i("taskconversation", "CusTome ---->>><<< 22 ");
                dataBase.insertORupdate_Task_history(chatBean);
//                dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                if (chatBean.isCustomTagVisible()) {
                    taskList.add(chatBean);
                }
                sortTaskMessage();
            }
            Log.i("date", "date template bean " + chatBean);
            Log.i("task", "Desc1 " + chatBean.getTaskDescription());
            Log.i("Request", "date file webservice called");
            dateTemplateWebService(chatBean);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "dateTemplateCreation() Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void dateNoteCreation() {
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String dateTime = dateFormat.format(new Date());
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            String dateforrow = dateFormat.format(new Date());
            SimpleDateFormat sdf3 = new SimpleDateFormat("EEE MMM dd HH:mm:ss zzz yyyy", Locale.ENGLISH);
            SimpleDateFormat utcdateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            tasktime = dateTime;
            tasktime = tasktime.split(" ")[1];
            Log.i("task", "tasktime" + tasktime);
            Log.i("UTC", "sendMessage utc time" + dateforrow);
            Log.i("time", "value");
            taskUTCtime = dateforrow;
            final TaskDetailsBean chatBean = new TaskDetailsBean();
            chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
            chatBean.setToUserId(String.valueOf(Appreference.loginuserdetails.getId()));
            Log.i("note", "getToUserId " + chatBean.getToUserId());
            chatBean.setTaskNo(task_No);
            if (!template && !note) {
                chatBean.setCatagory(category);
                Log.i("note", "catagory " + chatBean.getCatagory());
            }
            chatBean.setIssueId(issueId);
            chatBean.setFromUserName(from_UserName);
            chatBean.setSelect(false);
            chatBean.setToUserName(from_UserName);
            Log.i("note", "getToUserName " + chatBean.getToUserName());
            chatBean.setReminderQuote(reminderquote);
            if (remindertone != null) {
                chatBean.setTaskDescription(remindertone);
            } else {
                chatBean.setTaskDescription("Note");
            }
            chatBean.setPlannedStartDateTime("");
            chatBean.setPlannedEndDateTime("");
            chatBean.setRemainderFrequency(reminderdate);
            chatBean.setUtcPemainderFrequency(dateFormat.format(sdf3.parse(sdf3.format(utcdateFormat.parse(reminderdate)))));
            Log.i("note", "setRemainderFrequency " + reminderdate);
            Log.i("note", "setMsg_status " + chatBean.getMsg_status());
            chatBean.setIsRemainderRequired("1");
            chatBean.setDateFrequency("");
            chatBean.setTimeFrequency(reminderdate);
            Log.i("note", "repeatfreq " + reminderdate);
            chatBean.setSignalid(Utility.getSessionID());
            chatBean.setMimeType("note");
            chatBean.setParentId(getFileName());
            chatBean.setTaskPriority("Medium");
            chatBean.setCompletedPercentage("");
            chatBean.setTaskUTCDateTime(dateforrow);
            chatBean.setDateTime(dateTime);
            chatBean.setTaskId(webtaskId);
            chatBean.setTaskName(taskName);
            chatBean.setOwnerOfTask(ownerOfTask);
            chatBean.setCustomTagVisible(true);
            chatBean.setSendStatus("0");   // send status 0 is send 1 is unsend
            chatBean.setTaskType(taskType);
            if (note)
                chatBean.setTaskStatus("note");
            else
                chatBean.setTaskStatus(taskStatus);
            chatBean.setDuration("");
            chatBean.setDurationUnit("");
            chatBean.setRemark("");
            chatBean.setTaskRequestType("assigned");
            chatBean.setRequestStatus("assigned");
            chatBean.setTasktime(tasktime);
            chatBean.setTaskUTCTime(taskUTCtime);
            chatBean.setTaskReceiver(taskReceiver);
            Log.i("note", "taskReceiver " + taskReceiver);
            Log.i("note", "taskReceiver " + chatBean.getTaskReceiver());
            Log.i("taskconversation", "CusTome ---->>><<< 23 ");
            if (project) {
                dataBase.update_Project_history(chatBean);
            } else {
                dataBase.insertORupdate_TaskHistoryInfo(chatBean);
            }
            dataBase.insertORupdate_Task_history(chatBean);
//            dataBase.insertORupdate_TaskHistoryInfo(chatBean);
            if (chatBean.isCustomTagVisible()) {
                taskList.add(chatBean);
            }
            sortTaskMessage();
            Log.i("note", "date note bean " + chatBean);
            Log.i("task", "Desc1 " + chatBean.getTaskDescription());
            Log.i("Request", "date file webservice called ");
            dateNoteWebService(chatBean);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "dateNoteCreation() Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void TaskOverdueNotify(TaskDetailsBean taskDetailsBean) {
        try {
            Log.d("task", "TaskOverdueNotify");
            sortTaskMessage();
            refresh();
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "TaskOverdueNotify() Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void ShowHoldOrPauseTimerDisplay() {
        ArrayList<TaskDetailsBean> getTimeBean = new ArrayList<>();
        String getTimerdetailsQuery = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "') and (taskStatus='Hold' or taskStatus='Paused')";
        Log.i("timer123", "Reminder Timer query " + getTimerdetailsQuery);
        getTimeBean = VideoCallDataBase.getDB(context).getTimerDateForHoldOrPause(getTimerdetailsQuery);
        Log.i("timer123", "getTimeBean size" + getTimeBean.size());
        if (getTimeBean.size() > 0) {
            final TaskDetailsBean MyTimerBean = getTimeBean.get(getTimeBean.size() - 1);
            Log.i("timer123", "MyTimerBean.getPlannedEndDateTime()" + MyTimerBean.getPlannedEndDateTime());

            if (MyTimerBean.getPlannedEndDateTime() != null) {
                Calendar c = Calendar.getInstance();
                SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                Log.d("timer123", "Current date " + c.getTime());
                String formattedDate = df.format(c.getTime());
                Log.d("timer123", "Formatted current date " + formattedDate);
                enddate = MyTimerBean.getPlannedEndDateTime();
                Log.i("timer123", "End Date from DB " + MyTimerBean.getPlannedEndDateTime());
                try {
                    if (enddate != null && !enddate.equals(" ")) {
                        Date date2 = df.parse(enddate);
                        Date date1 = df.parse(formattedDate);
                        Log.i("timer123", "date" + date2 + " " + date1);
                        Log.i("timer123", "datetime" + date2.getTime() + " " + date1.getTime());
                        final long mills = date2.getTime() - date1.getTime();
                        final long seconds = 1000;
                        if (isRem_time && counter != null) {
                            counter.cancel();
                            isRem_time = false;
                        }
                        Log.i("timer123", "mills before " + mills);
                        Log.i("timer123", "seconds before " + seconds);
                        if (mills > 0) {
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    counter = null;
                                    Log.i("timer123", "StartTimer");
                                    counter = new CounterClass(mills, seconds);
                                    counter.taskOverdue(MyTimerBean);
                                    isTask_Over = true;
                                    counter.start();
                                }
                            });
                        } else {
                            TimeupAlert_Show();
                        }
                        Log.d("timer123", "counter started");
                    }
                } catch (Exception esx) {
                    esx.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "ShowHoldOrPauseTimerDisplay() Exception : " + esx.getMessage(), "WARN", null);
                }
            }
        }
    }

    public void ShowEstimTimerDisplay() {
        Log.i("estim123", "=================================");
        Log.i("estim123", "ShowEstimTimerDisplay");
        Log.i("estim123", "=================================");

        ArrayList<TaskDetailsBean> getTimeBean = new ArrayList<>();
        String getTimerdetailsQuery = "select * from taskDetailsInfo where (taskStatus='Started') and  (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "')";
        Log.i("estim123", "Reminder Timer query " + getTimerdetailsQuery);
        getTimeBean = VideoCallDataBase.getDB(context).getTimerDateForHoldOrPause(getTimerdetailsQuery);
        Log.i("estim123", "getTimeBean size" + getTimeBean.size());
        if (getTimeBean.size() > 0) {
            final TaskDetailsBean MyTimerBean = getTimeBean.get(getTimeBean.size() - 1);
            Log.i("estim123", "MyTimerBean.getEstimTimeForTimer()" + MyTimerBean.getEstimTimeForTimer());

            if (MyTimerBean.getEstimTimeForTimer() != null) {
                SimpleDateFormat df = null;
                String formattedDate = null;

                Calendar c = Calendar.getInstance();
                df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                Log.d("estim123", "Current date " + c.getTime());
                formattedDate = df.format(c.getTime());

                Log.d("estim123", "Formatted current date " + formattedDate);
                enddate = MyTimerBean.getEstimTimeForTimer();
                Log.i("estim123", "End Date from DB " + MyTimerBean.getEstimTimeForTimer());
                try {
                    String query = "select status from projectStatus where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "'";
                    int timer_Alert_by_current_status = VideoCallDataBase.getDB(context).getCurrentStatus(query);
                    Log.i("estim123", "timer_Alert_by_current_status DB " + timer_Alert_by_current_status);

                    if (enddate != null && !enddate.equals(" ") && timer_Alert_by_current_status != 1 && timer_Alert_by_current_status != 3) {
                        Date date2 = null;
                        Date date1 = null;
                        try {
                            date2 = df.parse(enddate);
                            date1 = df.parse(formattedDate);
                        } catch (ParseException e) {
                            e.printStackTrace();
                        }
                        Log.i("estim123", "date" + date2 + " " + date1);
                        Log.i("estim123", "datetime" + date2.getTime() + " " + date1.getTime());
                        final long mills = date2.getTime() - date1.getTime();
                        final long seconds = 1000;
                        if (isRem_time && estimCounter != null) {
                            estimCounter.cancel();
                            isRem_time = false;
                        }
                        Log.i("estim123", "mills before " + mills);
                        Log.i("estim123", "seconds before " + seconds);
                        if (mills > 0) {
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    estimCounter = null;
                                    Log.i("estim123", "StartTimer");
                                    estimCounter = new CounterClass(mills, seconds);
                                    estimCounter.taskOverdue(MyTimerBean);
                                    isTask_Over = true;
                                    estimCounter.start();
                                }
                            });
                        } else {
                            Estim_Timeup_Alert_Show();
                        }
                        Log.d("estim123", "counter started");
                    }
                } catch (Exception esx) {
                    esx.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "ShowHoldOrPauseTimerDisplay() Exception : " + esx.getMessage(), "WARN", null);
                }
            }
        }
    }

    private void Estim_Timeup_Alert_Show() {
        try {
            String query = "select status from projectStatus where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "'";
            int timer_Alert_by_current_status = VideoCallDataBase.getDB(context).getCurrentStatus(query);
            Log.i("estimtone123", "timer_Alert_by_current_status ==>" + timer_Alert_by_current_status);

            if (timer_Alert_by_current_status != 1 || timer_Alert_by_current_status != 3) {

                String taskQuery = "select EstimAlarm from taskDetailsInfo where (taskStatus='Started') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
                String getEstimetedTimeAlertShownOrNot = VideoCallDataBase.getDB(context).getAlertShownstatus(taskQuery, "EstimAlarm");

                Log.i("estimtone123", "getEstimetedTimeAlertShownOrNot taskQuery==>" + taskQuery);
                Log.i("estimtone123", "getEstimetedTimeAlertShownOrNot ==>" + getEstimetedTimeAlertShownOrNot);
                String Expected_HMS = "";
                String EstimatedRemainingTimeQuery = "update taskDetailsInfo set estimRemainingTime='" + Expected_HMS + "' where (taskStatus='Started') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
                Log.i("remain123", "updateSnoozeTime_query***********" + EstimatedRemainingTimeQuery);
                VideoCallDataBase.getDB(context).updateaccept(EstimatedRemainingTimeQuery);

                if ((getEstimetedTimeAlertShownOrNot != null && !getEstimetedTimeAlertShownOrNot.equalsIgnoreCase("")
                        && !getEstimetedTimeAlertShownOrNot.equalsIgnoreCase(null) && getEstimetedTimeAlertShownOrNot.equalsIgnoreCase("1"))) {

                    /*update query : set alarm toned*/
                    String AlarmRingedUpdateQuery = "update taskDetailsInfo set EstimAlarm='0' where projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
                    Log.i("estimtone123", "updateSnoozeTime_query***********" + AlarmRingedUpdateQuery);
                    VideoCallDataBase.getDB(context).updateaccept(AlarmRingedUpdateQuery);


                    MainActivity.startAlarmRingTone();
                    String get_OracleprojectId_query = "select oracleProjectId from projectDetails where loginuser = '" + Appreference.loginuserdetails.getEmail() + "'and projectId='" + projectId + "'";
                    String OracleIdForProjectId = VideoCallDataBase.getDB(context).getprojectIdForOracleID(get_OracleprojectId_query);
                    Intent intent = new Intent(NewTaskConversation.this, ShowEstimTimeupAlert.class);
                    intent.putExtra("projectId", projectId);
                    intent.putExtra("taskId", webtaskId);
                    intent.putExtra("OracleprojectId", OracleIdForProjectId);
                    intent.putExtra("OracletaskId", getOracleTaskIdForProjectId());
                    startActivity(intent);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void reminderTimerDisplay() {
        taskList_2 = new ArrayList<>();
        String query_2 = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "') and (mimeType='date') and (requestStatus='approved' or requestStatus='assigned')";
        Log.i("task", "Reminder Timer query " + query_2);
        taskList_2 = VideoCallDataBase.getDB(context).getTaskHistory(query_2);
        Log.i("task", "taskList_2 " + taskList_2.size());
        Appreference.isEstimTimerStarted = false;
        if (taskList_2.size() > 0) {
            final TaskDetailsBean taskDetailsBean1 = taskList_2.get(taskList_2.size() - 1);
            if (taskDetailsBean1.getMimeType().equals("date") && taskDetailsBean1.getPlannedEndDateTime() != null) {
                final Calendar c = Calendar.getInstance();
                SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                Log.d("Task", "Current date " + c.getTime());
                String formattedDate = df.format(c.getTime());
                Log.d("Task", "Formatted current date " + formattedDate);
                enddate = taskDetailsBean1.getPlannedEndDateTime();
                Log.i("Task", "End Date " + taskDetailsBean1.getPlannedEndDateTime());
                try {
                    if (enddate != null && !enddate.equals(" ")) {
                        Date date2 = df.parse(enddate);
                        Date date1 = df.parse(formattedDate);
                        Log.i("Task2", "date" + date2 + " " + date1);
                        Log.i("Task2", "datetime" + date2.getTime() + " " + date1.getTime());
                        final long mills = date2.getTime() - date1.getTime();
                        final long seconds = 1000;
                        if (isRem_time) {
                            counter.cancel();
                            isRem_time = false;
                        }
                        Log.i("task", "mills before " + mills);
                        Log.i("task", "seconds before " + seconds);
                        if (mills > 0) {
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    counter = null;
                                    Log.i("COUNTTOWNTIMER", "StartTimer");
                                    counter = new CounterClass(mills, seconds);
                                    counter.taskOverdue(taskDetailsBean1);
                                    isTask_Over = true;
                                    counter.start();
                                }
                            });
                        }
                        Log.d("Task", "counter started");
                    }
                } catch (Exception esx) {
                    esx.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "reminderTimerDisplay() Exception : " + esx.getMessage(), "WARN", null);
                }
            }
        }
    }

    public void counter_gone() {
        try {
            handler.post(new Runnable() {
                @Override
                public void run() {
                    if (isRem_time) {
                        counter.cancel();
                        Log.d("Reject", "counter rejected");
                        reminingtime.setVisibility(View.GONE);
                        isRem_time = false;
                    }
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "counter_gone() Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public boolean isNetworkAvailable() {
        ConnectivityManager connectivityManager = (ConnectivityManager) getApplicationContext().getSystemService(getApplicationContext().getApplicationContext().CONNECTIVITY_SERVICE);
        NetworkInfo activeNetworkInfo = connectivityManager.getActiveNetworkInfo();
        return activeNetworkInfo != null && activeNetworkInfo.isConnected();
    }

    public String getRealPathFromURI(Uri contentUri) {
        try {
            Log.i("profile", "===> inside getRealPathFromURI");
            String[] proj = {MediaStore.Images.Media.DATA};
            Cursor cursor = context.getContentResolver().query(contentUri,
                    proj, null, null, null);

            int column_index = cursor
                    .getColumnIndexOrThrow(MediaStore.Images.Media.DATA);
//            cursor.moveToFirst();
//            Log.i("profile", "===> inside cursor.getString(column_index) : "+cursor.getString(column_index));
            return cursor.getString(column_index);
        } catch (IllegalArgumentException e) {
            // TODO Auto-generated catch block
            Log.e("profile", "====> " + e.getMessage());
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "getRealPathFromURI Exception " + e.getMessage(), "WARN", null);
            return null;
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "getRealPathFromURI Exception " + e.getMessage(), "WARN", null);
            return null;
        }

    }

    public Bitmap convertpathToBitmap(String strIPath) {
        Bitmap bitmap = null;
        try {
            BitmapFactory.Options bmOptions = new BitmapFactory.Options();
            bitmap = BitmapFactory.decodeFile((compressImage(strIPath)), bmOptions);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "convertpathToBitmap Exception : " + e.getMessage(), "WARN", null);
        }
        return bitmap;
    }

    public void activateCall() {
        Log.d("Remove", "inside active call dialog");
        Log.i("Call Response", "activecall");
        try {
            if (MainActivity.isAudioCall) {
                makeCall(true);
            } else {
                makeCall(false);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "activateCall() Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void sendConferencecallInfomessage(boolean is_group) {
        try {

            Date strt_dt = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd hh:mm:ss");
            Appreference.callStart_time = sdf.format(strt_dt);
            String conf_callinfo[] = new String[5];
            conf_callinfo[0] = MainActivity.username;
            if (Appreference.callStart_time != null)
                conf_callinfo[1] = Appreference.callStart_time;
            conf_callinfo[2] = "";
            conf_callinfo[3] = Utility.getSessionID() + "@testconferenceuri";
            if (Appreference.broadcast_call) {
                conf_callinfo[4] = "broadcastcall";
            } else {
                conf_callinfo[4] = "normalcall";
            }
            Appreference.conference_uri = conf_callinfo[3];
            String[] participantInfo;
            int noofparticipants = 0;
            int z = 1;
            if (!is_group) {
                noofparticipants = z;
                z++;
            } else {
                if (project) {
                    ArrayList<String> project_memberlist = VideoCallDataBase.getDB(context).selectGroupmembers("select * from projectHistory where taskId= '" + toUserId + "'", "taskMemberList");
                    for (String user : project_memberlist) {
//                        if (!user.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {


                        if (user != null) {
                            if (user.contains(",")) {
                                String[] user_array = user.split(",");
                                for (String us : user_array) {
                                    noofparticipants = z;
                                    z++;
                                }
                            } else {
                                noofparticipants = z;
                                z++;
                            }
                        }


//                        }
                    }
                } else {
                    ArrayList<String> grouplist = VideoCallDataBase.getDB(context).selectGroupmembers("select * from groupmember where groupid= '" + toUserId + "'", "username");
                    for (String Name : grouplist) {
                        noofparticipants = z;
                        z++;
                    }
                }
            }
            participantInfo = new String[noofparticipants];
            int j = 0;
            if (!is_group) {
                participantInfo[j] = toUserName;
                Log.i("FT", "callerBean_Array" + toUserName);
            } else {
                if (project) {
                    ArrayList<String> project_memberlist = VideoCallDataBase.getDB(context).selectGroupmembers("select * from projectHistory where taskId= '" + toUserId + "'", "taskMemberList");
                    for (String user : project_memberlist) {
//                        if (!user.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {

                        if (user != null) {
                            if (user.contains(",")) {
                                String[] user_array = user.split(",");
                                for (String us : user_array) {
                                    participantInfo[j] = us;
                                    Log.i("FT", "callerBean_Array" + us);
                                    j++;
//                                    if(!us.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
//                                        users.add(us);
//                                    }
                                }
                            } else {
                                participantInfo[j] = user;
                                Log.i("FT", "callerBean_Array" + user);
                                j++;
                            }
                        }

//                        }
                    }
                } else {
                    ArrayList<String> grouplist = VideoCallDataBase.getDB(context).selectGroupmembers("select * from groupmember where groupid= '" + toUserId + "'", "username");
                    for (String Name : grouplist) {
                        participantInfo[j] = Name;
                        Log.i("FT", "callerBean_Array" + Name);
                        j++;
                    }
                }
            }
            String chatinfo[] = new String[9];
            chatinfo[0] = "CallGroupChat";
            chatinfo[1] = "";
            chatinfo[2] = "";
            chatinfo[3] = "";
            chatinfo[4] = "";
            SimpleDateFormat dateformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String dateforrow = dateformat.format(new Date().getTime());
            chatinfo[5] = dateforrow;
            chatinfo[6] = "";
            chatinfo[1] = "";
            chatinfo[1] = "";
            if (chatinfo[2] == null || chatinfo[2].equalsIgnoreCase("")) {
                chatinfo[2] = Utility.getSessionID();
            }
            chatinfo[3] = "";
            chatinfo[4] = MainActivity.username;
            chatinfo[6] = "callchat";
            chatinfo[7] = Appreference.conference_uri;
            chatinfo[8] = "";
            Log.i("offlinecrash", "sendconfrenceCall method 1 line");
            String confInfoXml = xmlComposer.composeConferenceInfoXML(conf_callinfo, participantInfo, chatinfo);
            sendMultiInstantMessage(confInfoXml, listOfObservers, 0);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "sendConferencecallInfomessage Exception : " + e.getMessage(), "WARN", null);
        }
    }

    @Override
    public void ErrorMethod(Object object) {
        try {
            Log.i("json", "ErrorMethod=======>");
            CommunicationBean bean = (CommunicationBean) object;
            if (bean != null && bean.getTaskDetailsBean() != null) {
                final TaskDetailsBean taskDetailsBean = bean.getTaskDetailsBean();
                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        /*if (taskDetailsBean.getSignalid() != null) {
                            VideoCallDataBase.getDB(context).taskWSStatusUpdate(taskDetailsBean.getSignalid(), "10");
                        }*/
                        if (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase("") && taskDetailsBean.getSignalid() != null) {
                            if (taskDetailsBean.getProjectStatus() != null && !taskDetailsBean.getProjectStatus().equalsIgnoreCase("")
                                    && !taskDetailsBean.getProjectStatus().equalsIgnoreCase(null) && !taskDetailsBean.getProjectStatus().equalsIgnoreCase("null")) {
                                VideoCallDataBase.getDB(context).taskWSStatusUpdateINStatus(taskDetailsBean.getSignalid(), "000");
                            } else {
                                VideoCallDataBase.getDB(context).taskWSStatusUpdate(taskDetailsBean.getSignalid(), "000");
                            }
                        } else {
                            VideoCallDataBase.getDB(context).taskWSStatusUpdate(taskDetailsBean.getSignalid(), "000");
                        }
                    }
                });
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "ErrorMethod Exception : " + e.getMessage(), "WARN", null);
        }
    }

    @Override
    public void ResponceMethod(final Object object) {
        Log.i("task", "-----getCustomHeaderValue----");
        Log.i("ws123", "NewTaskConverstaion ResponceMethod");
        handler.post(new Runnable() {
                         @Override
                         public void run() {
                             Log.i("taskresponse123", "NewTaskConversation ResponceMethod");
                             CommunicationBean communicationBean = (CommunicationBean) object;
                             cancelDialog();
                             try {
                                 String sig_id = Utility.getSessionID();
                                 final String server_Response_string = communicationBean.getEmail();
                                 Log.d("Task2", "Response Email" + server_Response_string);
                                 String WebServiceEnum_Response = communicationBean.getFirstname();
                                 Log.d("Task2", "name   == " + WebServiceEnum_Response);

                                 if (WebServiceEnum_Response != null && WebServiceEnum_Response.equalsIgnoreCase("callNotification")) {
                                     Log.i("taskresponse123", "callNotification");
                                     final JSONObject jsonObject = new JSONObject(communicationBean.getEmail());
                                     if (((int) jsonObject.get("result_code") == 0)) {
                                         Log.i("taskresponse123", "result_code 0 ");
                                         String result = (String) jsonObject.get("result_text");
                                         Log.i("taskresponse123", "result_text in response " + result);
                                         handler.post(new Runnable() {
                                             @Override
                                             public void run() {
                                                 try {
                                                     if (((String) jsonObject.get("result_text")).equalsIgnoreCase("Your Call Notification Send Successfully.") && !check_call) {
                                                         cancelDialog();
                                                         Log.d("Remove", "cancel dialog");
                                                         activateCall();
                                                         Log.d("Remove", "active call dialog");
                                                         check_call = true;
                                                     }
                                                 } catch (Exception e) {
                                                     e.printStackTrace();
                                                     Appreference.printLog("NewTaskConversation", "ResponceMethod callNotification Exception : " + e.getMessage(), "WARN", null);
                                                 }
                                             }
                                         });
                                     } else {
                                         cancelDialog();
                                         Toast.makeText(context, "call conecting failure", Toast.LENGTH_SHORT).show();
                                     }
                                 } else {
                                     if (WebServiceEnum_Response != null && WebServiceEnum_Response.equalsIgnoreCase(("taskStatus"))) {
                                         final JSONObject jsonObject1 = new JSONObject(communicationBean.getEmail());

                                         if ((int) jsonObject1.get("result_code") == 0) {
                                             Log.i("output123", "NewTaskConverstaion taskStatus ResponceMethod");
                                             try {
                                                 final JSONObject jsonObject = new JSONObject(communicationBean.getEmail());
                                                 if (((String) jsonObject.get("result_text")).equalsIgnoreCase("task started")) {
                                                     projectCurrentStatus = "start";
                                                     travel_job.setEnabled(true);
                                                 } else if (((String) jsonObject.get("result_text")).equalsIgnoreCase("task Hold")) {
                                                     projectCurrentStatus = "hold";
                                                 } else if (((String) jsonObject.get("result_text")).equalsIgnoreCase("task Resumed")) {
                                                     projectCurrentStatus = "resume";
                                                 } else if (((String) jsonObject.get("result_text")).equalsIgnoreCase("task Paused")) {
                                                     projectCurrentStatus = "pause";
                                                     isDivertedON = true;
                                                 } else if (((String) jsonObject.get("result_text")).equalsIgnoreCase("task Restarted")) {
                                                     projectCurrentStatus = "restart";
                                                 } else if (((String) jsonObject.get("result_text")).equalsIgnoreCase("task Completed")) {
                                                     projectCurrentStatus = "Completed";
                                                     status_job.setVisibility(View.GONE);
                                                     travel_job.setVisibility(View.GONE);
                                                 } else if (((String) jsonObject.get("result_text")).equalsIgnoreCase("task deassign")) {
                                                     projectCurrentStatus = "DeAssign";
                                                 }
                                                 TaskDetailsBean detailsBean = new TaskDetailsBean();
                                                 detailsBean = communicationBean.getTaskDetailsBean();

                                                 detailsBean.setMimeType("text");
                                                 detailsBean.setCustomTagVisible(true);
                                                 Log.i("taskStatus", "Signalid ==> # " + detailsBean.getSignalid());
                                                 VideoCallDataBase.getDB(context).taskWSStatusUpdateINStatus(detailsBean.getSignalid(), "1");
                                                 Log.i("Responce", "projectstatus==> " + detailsBean.getProjectStatus() + "projectCurrentStatus==>  " + projectCurrentStatus);
                                                 if (detailsBean.getProjectStatus() != null && detailsBean.getProjectStatus().equalsIgnoreCase("5")) {
                                                     Log.i("isRem_time ", "isRem_time==> " + isRem_time);
                                                     timerstop();
                                                     oracle_percentage("text", "Completed Percentage 100%", "", Utility.getSessionID(), 0);
                                                 }

                                                /* if(detailsBean.getProjectStatus().equalsIgnoreCase("1") || detailsBean.getProjectStatus().equalsIgnoreCase("3")) {
                                                     PercentageWebService("taskBreak", detailsBean.getTaskDescription(), "", detailsBean.getSignalid(), 0);
                                                 }else*/
                                                 PercentageWebService_status("text", detailsBean.getTaskDescription(), "", detailsBean.getSignalid(), 0, detailsBean);


                                                 Log.i("responce", "travel_endDate " + travel_endDate + " Remarks==> " + detailsBean.getCustomerRemarks());
                                                 if (detailsBean.getCustomerRemarks() != null && !detailsBean.getCustomerRemarks().equalsIgnoreCase("") && !detailsBean.getCustomerRemarks().equalsIgnoreCase("null")) {
                                                     if ((detailsBean.getProjectStatus() != null && !detailsBean.getProjectStatus().equalsIgnoreCase("5"))
                                                             && (detailsBean.getProjectStatus() != null && !detailsBean.getProjectStatus().equalsIgnoreCase("10"))) {
                                                         Log.i("NewTaskConversation ", "projectCurrentStatus ==> $$ " + projectCurrentStatus);
                                                         PercentageWebService_status("text", detailsBean.getCustomerRemarks(), "", Utility.getSessionID(), 0, detailsBean);
//                                                         PercentageWebService("text", detailsBean.getCustomerRemarks(), "", Utility.getSessionID(), 0);
                                                     }
                                                 }
                                                 if (detailsBean.getProjectStatus().equalsIgnoreCase("1") || detailsBean.getProjectStatus().equalsIgnoreCase("3")) {
                                                     startHoldOrPauseAlarmManager(Appreference.HoldOrPauseTimervalue, webtaskId, detailsBean.getTaskStatus(), detailsBean.getProjectId(), "IntervalTimer");
                                                     ShowHoldOrPauseTimerDisplay();
                                                 }
                                                 /*code started for estimTimer*/
                                                 if (detailsBean.getProjectStatus().equalsIgnoreCase("0")) {
                                                     String EstimatedTimeQuery = "update taskDetailsInfo set estimCompletion='0' where projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
                                                     Log.i("tone123", "updateSnoozeTime_query***********" + EstimatedTimeQuery);
                                                     VideoCallDataBase.getDB(context).updateaccept(EstimatedTimeQuery);
                                                 }
                                                 Log.i("alarm123", "NewTaskConversation ResponseMethod ==========> " + detailsBean.getProjectStatus());

                                                 if (!detailsBean.getProjectStatus().equalsIgnoreCase("1") && !detailsBean.getProjectStatus().equalsIgnoreCase("3")) {

                                                     String taskQuery = "select * from taskDetailsInfo where projectId='" + projectId + "'and taskId= '" + webtaskId + "' and estimCompletion='1'";
                                                     int getEstimatedTimerCompleted = VideoCallDataBase.getDB(context).getCountForTravelEntry(taskQuery);
                                                     if (getEstimatedTimerCompleted == 0) {
                                                         startHoldOrPauseAlarmManager(Appreference.EstimTimerValue, webtaskId, detailsBean.getTaskStatus(), detailsBean.getProjectId(), "EstimTimer");
                                                         ShowEstimTimerDisplay();
                                                     }
                                                 }
                                                 /*code ended for estimTimer*/

                                                 if (travel_date_details != null && travel_date_details.size() > 0) {
                                                     int sec = 0;
                                                     for (final String travel : travel_date_details) {
                                                         sec = sec + 2000;
                                                         final TaskDetailsBean finalDetailsBean = detailsBean;
                                                         handler.postDelayed(new Runnable() {
                                                             @Override
                                                             public void run() {
//                                                                 PercentageWebService("text", travel, "", Utility.getSessionID(), 0);
                                                                 PercentageWebService_status("text", travel, "", Utility.getSessionID(), 0, finalDetailsBean);

                                                             }
                                                         }, sec);
                                                     }
                                                 }
                                                 if (detailsBean.getProjectStatus().equalsIgnoreCase("2") || detailsBean.getProjectStatus().equalsIgnoreCase("4")) {
                                                     detailsBean.setTravelStartTime(ActivityStartdate);
                                                     detailsBean.setTaskDescription("Gathering Details...");
                                                     detailsBean.setProjectStatus("7");
                                                     detailsBean.setSignalid(Utility.getSessionID());
                                                     VideoCallDataBase.getDB(context).insertORupdateStatus(detailsBean);
                                                 }
                                                 refresh();
                                                 Log.i("ddd123", "Diverted task isDivertedON======>" + isDivertedON);
                                                 Log.i("ddd123", "Diverted task isFromPauseClick======>" + isFromPauseClick);
                                                 if (isDivertedON && isFromPauseClick) {
                                                     isDivertedON = false;
                                                     isFromPauseClick = false;
                                                     String query = "select projectId from projectDetails where isActiveStatus = '1' ";
                                                     String diverted_project_id = VideoCallDataBase.getDB(context).getDivertedProjId(query);
                                                     Log.i("ddd123", "Diverted task diverted_project_id======>" + diverted_project_id);
                                                     if (diverted_project_id != null) {
                                                         MainActivity mainActivity = (MainActivity) Appreference.context_table.get("mainactivity");
                                                         if (mainActivity != null) {
                                                             mainActivity.showprogress("please wait....");
                                                         }
                                                     }
                                                     if (diverted_project_id != null) {
                                                         try {
                                                             Appreference.isPauseStartFrom = true;
                                                             List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();
                                                             nameValuePairs.add(new BasicNameValuePair("projectId", diverted_project_id));
                                                             nameValuePairs.add(new BasicNameValuePair("userId", String.valueOf(Appreference.loginuserdetails.getId())));
                                                             Appreference.jsonRequestSender.getTaskForJobID(EnumJsonWebservicename.getTaskForJobID, nameValuePairs, ProjectsFragment.getInstance());
                                                         } catch (Exception e) {
                                                             e.printStackTrace();
                                                             Appreference.printLog("NewTaskConversation", "ResponceMethod getTaskForJobID 210 Exception : " + e.getMessage(), "WARN", null);
                                                         }
                                                     } else {
                                                         showToast("No Monthly JobCards Found...");
                                                     }
                                                     NewTaskConversation.this.finish();
                                                     final ProjectHistory projectHistory = (ProjectHistory) Appreference.context_table.get("projecthistory");
                                                     if (projectHistory != null) {
                                                         projectHistory.finish();
                                                     }
                                                 }
                                                 Log.i("desc123", "isDeassign==>" + isDeassign);

                                                 if (isDeassign) {
                                                     isDeassign = false;
                                                     Log.i("conv123", "isDeassign ProgressBarInvisible calling....===>");
                                                     handler.postDelayed(new Runnable() {
                                                         @Override
                                                         public void run() {
                                                             ProjectHistory projectHistory = (ProjectHistory) Appreference.context_table.get("projecthistory");
                                                             if (projectHistory != null) {
                                                                 Log.i("conv123", "isDeassign ProgressBarInvisible  projectHistory not null....===>");
                                                                 projectHistory.setProgressBarInvisible();
                                                             }
                                                             NewTaskConversation.this.finish();
                                                         }
                                                     }, 800);
                                                 }

                                             } catch (Exception e) {
                                                 e.printStackTrace();
                                                 Appreference.printLog("NewTaskConversation", "ResponceMethod taskStatus Exception : " + e.getMessage(), "WARN", null);
                                                 Log.i("output123", "NewTaskConv sip responce a jsonobject Exception*******" + e);
                                             }
                                         } else {
                                             String result = (String) jsonObject1.get("result_text");
                                             Toast.makeText(NewTaskConversation.this, result, Toast.LENGTH_LONG).show();
                                         }

                                     } else if (WebServiceEnum_Response != null && WebServiceEnum_Response.equalsIgnoreCase(("assignTask"))) {
                                         final JSONObject jsonObject1 = new JSONObject(communicationBean.getEmail());
                                         try {
                                             if ((int) jsonObject1.get("result_code") == 0) {
                                                 Log.i("output123", "NewTaskConv AssignTask Responce Received" + server_Response_string);
                                                 TaskDetailsBean detailsBean1 = new TaskDetailsBean();
                                                 detailsBean1 = communicationBean.getTaskDetailsBean();
                                                 // db insert method
                                                 VideoCallDataBase.getDB(context).insertORupdateStatus(detailsBean1);
                                                 listOfObservers.clear();
                                                 String projectMembers = VideoCallDataBase.getDB(context).getProjectParentTaskId("select taskMemberList from projectHistory where projectId ='" + detailsBean1.getProjectId() + "' and parentTaskId==taskId");

                                                 if (projectMembers != null) {
                                                     int counter_1 = 0;
                                                     for (int i = 0; i < projectMembers.length(); i++) {
                                                         if (projectMembers.charAt(i) == ',') {
                                                             counter_1++;
                                                         }
                                                     }
                                                     for (int j = 0; j < counter_1 + 1; j++) {
                                                         if (counter_1 == 0) {
                                                             if (!listOfObservers.contains(projectMembers)) {
                                                                 listOfObservers.add(projectMembers);
                                                             }
                                                         } else {
                                                             if (!listOfObservers.contains(projectMembers.split(",")[j])) {
                                                                 listOfObservers.add(projectMembers.split(",")[j]);
                                                             }
                                                         }
                                                     }
                                                 }
                                                 if (project && template) {
                                                     VideoCallDataBase.getDB(context).updateaccept("update taskDetailsInfo set mimeType='dates' where taskid='" + detailsBean1.getTaskId() + "' and mimeType='date' and duration!='' and durationunit!=''");
                                                     VideoCallDataBase.getDB(context).updateaccept("update taskDetailsInfo set taskStatus='Assigned' where taskid='" + detailsBean1.getTaskId() + "'");
                                                     Log.i("Rassign", "project template updated" + detailsBean1.getTaskId());
                                                 }

                                                 try {
                                                     runOnUiThread(new Runnable() {
                                                         public void run() {
                                                             if (template) {
                                                                 template = false;
                                                                 taskStatus = "assigned";
                                                                 Log.i("reassign", "istemplate==>  " + template);
                                                                 Log.i("notifyTaskReceived", "bottom_layout 20 ");
                                                                 TakerofTasks();
                                                                 Arrow.setVisibility(View.VISIBLE);
                                                                 bottom_layout.setVisibility(View.VISIBLE);
                                                                 status_job.setVisibility(View.VISIBLE);
                                                                 travel_job.setVisibility(View.VISIBLE);
                                                                 String Query = "Select * from projectHistory where projectId ='" + projectId + "' and taskId = '" + webtaskId + "'";
                                                                 TaskDetailsBean MonthlyJobBean = VideoCallDataBase.getDB(context).getDetails_to_complete_project(Query);
                                                                 if (MonthlyJobBean.getIsActiveStatus() != null && MonthlyJobBean.getIsActiveStatus().equalsIgnoreCase("1") && !MonthlyJobBean.getIsActiveStatus().equalsIgnoreCase("null")) {
                                                                     status_job.setVisibility(View.INVISIBLE);
                                                                 }
                                                             }
                                                             assign_taskview.setVisibility(View.GONE);
                                                         }
                                                     });
                                                 } catch (Exception e) {
                                                     e.printStackTrace();
                                                     Appreference.printLog("NewTaskConversation", "ResponceMethod assignTask UI Exception : " + e.getMessage(), "WARN", null);
                                                 }
                                                 Appreference.webid = webtaskId;
                                                 if (webtaskId != null) {
                                                     appSharedpreferences.saveBoolean("syncTask" + webtaskId, true);
                                                 }
                                                 PercentageWebService("assigntask", "Task Assigned to " + Appreference.loginuserdetails.getUsername(), "", Utility.getSessionID(), 0);
                                                 //                                         sendMessage("Task Assigned to " + Appreference.loginuserdetails.getUsername(), null, "assigntask", null, null, Utility.getSessionID(), null);
                                                 Self_assign = false;
                                                 refresh();
                                                 cancelDialog();
                                             } else {
                                                 String result = (String) jsonObject1.get("result_text");
                                                 Toast.makeText(NewTaskConversation.this, result, Toast.LENGTH_LONG).show();
                                             }
                                         } catch (Exception e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod assignTask Exception : " + e.getMessage(), "WARN", null);
                                         }
                                     } else if (WebServiceEnum_Response != null && WebServiceEnum_Response.equalsIgnoreCase(("getCheckListDetailsFromClient"))) {
                                         Log.i("pmsresponse123", "getCheckListDetailsFromClient" + server_Response_string);
                                         try {

                                             Type collectionType = new TypeToken<checkListDetails>() {
                                             }.getType();
                                             checkListDetails checklist = new Gson().fromJson(server_Response_string, collectionType);
                                             Log.i("pmsresponse123", "getCheckListDetailsFromClient==>" + checklist);
                                             Intent intent = new Intent(NewTaskConversation.this, CheckListActivity.class);
                                             intent.putExtra("checklistBean", checklist);
                                             intent.putExtra("isExistingView", false);
                                             intent.putExtra("PMSprojectId", projectId);
                                             intent.putExtra("PMStaskId", webtaskId);
                                             startActivity(intent);
                                         } catch (Exception e) {
                                             e.printStackTrace();
                                             Log.i("pmsresponse123", "getCheckListDetailsFromClient Error==>" + e.getMessage());

                                         }
                                     } else if (WebServiceEnum_Response != null && WebServiceEnum_Response.equalsIgnoreCase(("listGroupTaskUsers"))) {
                                         handler.post(new Runnable() {
                                             @Override
                                             public void run() {
                                                 try {
                                                     JsonElement jelement = new JsonParser().parse(server_Response_string);
                                                     JsonArray jarray = jelement.getAsJsonArray();
                                                     Log.i("GroupPercentage", "jarray size====> " + jarray.size());
                                                     OracleStatusList.clear();
                                                     if (jarray.size() > 0) {
                                                         for (int i = 0; i < jarray.size(); i++) {
                                                             String jobject1 = jarray.get(i).toString();
                                                             JSONObject jobject = new JSONObject(jobject1);
                                                             String username = jobject.getString("username");
                                                             String percentagecomplete = String.valueOf(jobject.get("percentageCompleted"));
                                                             String oracleStatus = String.valueOf(jobject.get("oracleStatus"));
                                                             Log.i("GroupPercentage-->", percentagecomplete);
                                                             Log.i("GroupPercentage-->", oracleStatus);
                                                             Log.i("GroupPercentage-->", username);
                                                             OracleStatusList.add(oracleStatus);
                                                             Log.i("GroupPercentage", "OracleStatusList ====> " + OracleStatusList.size());
                                                         }
                                                     } else {
                                                         Toast.makeText(getApplicationContext(), "No Result Found...", Toast.LENGTH_SHORT).show();
                                                     }
                                                     cancelDialog();
                                                     complete_task_check();
                                                 } catch (Exception e) {
                                                     e.printStackTrace();
                                                     Toast.makeText(getApplicationContext(), "Unable to Login...", Toast.LENGTH_SHORT).show();
                                                     Appreference.printLog("NewTaskConversation", "ResponceMethod listGroupTaskUsers Exception : " + e.getMessage(), "WARN", null);
                                                 }
                                             }
                                         });
                                     } else if (WebServiceEnum_Response != null && WebServiceEnum_Response.equalsIgnoreCase(("taskNeedAssessmentReport"))) {
                                         Log.i("output123", "NewTaskConv taskNeedAssessmentReport  Responce Received" + server_Response_string);
                                         final JSONObject jsonObject = new JSONObject(communicationBean.getEmail());
                                         try {
                                             if (((String) jsonObject.get("result_text")).equalsIgnoreCase("Task_Need_assessment_report created completed ")) {
                                                 Log.i("output123", " Filename" + jsonObject.getString("filename"));
                                                 String pdfURL = getResources().getString(R.string.task_reminder) + jsonObject.getString("filename");
                                                 Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(pdfURL));
                                                 startActivity(browserIntent);
                                                  /*  Intent intent = new Intent(context, WebViewActivity.class);
                                                    intent.putExtra("ReportFileName", jsonObject.getString("filename"));
                                                    startActivity(intent);*/
//                                                 showToast("Task_Need_assessment_report created ");
                                             } else {
                                                 String result = (String) jsonObject.get("result_text");
                                                 Toast.makeText(NewTaskConversation.this, result, Toast.LENGTH_LONG).show();
                                             }
                                         } catch (Exception e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod taskNeedAssessmentReport Exception : " + e.getMessage(), "WARN", null);
                                         }
                                     } else if (WebServiceEnum_Response != null && WebServiceEnum_Response.equalsIgnoreCase(("fieldServiceReport"))) {
                                         Log.i("output123", "NewTaskConv fieldServiceReport  Responce Received" + server_Response_string);
                                         final JSONObject jsonObject = new JSONObject(communicationBean.getEmail());
                                         try {
                                             if (((String) jsonObject.get("result_text")).equalsIgnoreCase("Field_Service_report created completed ")) {
                                                 Log.i("output123", " Filename" + jsonObject.getString("filename"));
                                                 String pdfURL = getResources().getString(R.string.task_reminder) + jsonObject.getString("filename");
                                                 Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(pdfURL));
                                                 startActivity(browserIntent);
                                                   /* Intent intent = new Intent(context, WebViewActivity.class);
                                                    intent.putExtra("ReportFileName", jsonObject.getString("filename"));
                                                    startActivity(intent);*/
                                                 showToast("Field_Service_report created ");
                                             } else {
                                                 String result = (String) jsonObject.get("result_text");
                                                 Toast.makeText(NewTaskConversation.this, result, Toast.LENGTH_LONG).show();
                                             }
                                         } catch (JSONException e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod fieldServiceReport Exception : " + e.getMessage(), "WARN", null);
                                         } catch (Exception e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod fieldServiceReport Exception : " + e.getMessage(), "WARN", null);
                                         }
                                     } else if (WebServiceEnum_Response != null && WebServiceEnum_Response.equalsIgnoreCase("getRequestType")) {
                                         try {
                                             Log.i("taskresponse123", "getRequestType");
                                             ArrayList<MoreFieldsBean> beanArrayList = new ArrayList<MoreFieldsBean>();
                                             {
                                                 Type collectionType = new TypeToken<List<MoreFieldsBean>>() {
                                                 }.getType();
                                                 List<MoreFieldsBean> lcs = new Gson().fromJson(server_Response_string, collectionType);
                                                 Log.i("CustomTag", "Value--->" + lcs.size());
                                                 for (int i = 0; i < lcs.size(); i++) {
                                                     MoreFieldsBean listUserGroupObject = lcs.get(i);
                                                     listUserGroupObject.setClientId(String.valueOf(i + 1));
                                                     beanArrayList.add(listUserGroupObject);
                                                     Log.i("CustomTag", "Value123" + "\n" + listUserGroupObject.getRequestType() + "\n" + listUserGroupObject.getClientId()
                                            /* + "\n" + listUserGroupObject.getMimeTypes().get(i+1)  + "\n" + listUserGroupObject.getRequestBys().get(i+1)*/);
                                                 }
                                                 if (beanArrayList != null) {
                                                     cancelDialog();
                                                     Intent fields = new Intent(NewTaskConversation.this, MoreFieldsEntry.class);
                                                     fields.putExtra("bean", beanValue());
                                                     fields.putExtra("userList", listOfObservers);
                                                     fields.putExtra("isProject", project);
                                                     fields.putExtra("beanList", beanArrayList);
                                                     startActivityForResult(fields, 143);
                                                     beanArrayList.clear();
                                                 }
                                             }
                                         } catch (JsonSyntaxException e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod getRequestType Exception : " + e.getMessage(), "WARN", null);
                                         } catch (Exception e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod getRequestType Exception : " + e.getMessage(), "WARN", null);
                                         }
                                     } else if (WebServiceEnum_Response != null && WebServiceEnum_Response.equalsIgnoreCase("taskObserverEntry")) {
                                         Log.i("taskresponse123", "taskObserverEntry");
//                        Toast.makeText(context, "Escalation Observer added", Toast.LENGTH_SHORT).show();
                                         try {
                                             PercentageWebService(taskObs_Bean.getTaskDescription(), Utility.getSessionID(), taskObs_Bean);
                                         } catch (Exception e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod taskObserverEntry Exception : " + e.getMessage(), "WARN", null);
                                         }
                                     } else if (communicationBean != null && communicationBean.getTaskDetailsBean() != null && !Appreference.isResponse_multifile) {
                                         try {
                                             Log.i("output123", "NewTaskConverstaion !isResponse_multifile ResponceMethod");
                                             Log.i("taskresponse123", "isResponse_multifile");
                                             TaskDetailsBean taskDetailsBean = communicationBean.getTaskDetailsBean();
                                             Log.i("task", "msg status in response" + taskDetailsBean.getMsg_status());
                                             Log.i("task", "msg status in getIsRemainderRequired" + taskDetailsBean.getIsRemainderRequired());
                                             String test1 = server_Response_string.toString();
                                             String filename_2 = null;
                                             JsonElement jelement = new JsonParser().parse(test1);
                                             if (jelement.getAsJsonObject() != null) {
                                                 JsonObject jobject = jelement.getAsJsonObject();
                                                 if (jobject.has("result_code") && jobject.has("remainderQuotes")
                                                         && (WebServiceEnum_Response != null && !WebServiceEnum_Response.equalsIgnoreCase("taskEntry"))) {
                                                     try {
                                                         //Get Date Response and send sip message here.
                                                         String fromuser = "", to__user = "null";
                                                         if (jobject.has("fromUser") && jobject.has("toUser")) {
                                                             fromuser = jobject.get("fromUser").toString();
                                                             to__user = jobject.get("toUser").toString();
                                                         }
                                                         if (fromuser.equalsIgnoreCase(to__user)) {
                                                             Log.i("taskconversation", "startSelfAlarmManager fromuser and to__user " + fromuser + " " + to__user);
                                                             updateTemplateStatus(taskDetailsBean);
                                                         } else {
                                                             if (taskDetailsBean.getTaskStatus() != null && taskDetailsBean.getTaskStatus().equalsIgnoreCase("draft")) {
                                                                 if (jobject.has("remainderQuotes")) {
                                                                     remquotes_1 = jobject.get("remainderQuotes").toString();
                                                                 }
                                                                 if (jobject.has("remainderTone")) {
                                                                     filename_2 = jobject.get("remainderTone").toString();
                                                                 }
                                                                 temp_duration = jobject.get("duration").toString();
                                                                 duration_unit = jobject.get("durationUnit").toString();
                                                             } else {
                                                                 remquotes_1 = jobject.get("remainderQuotes").toString();
                                                                 if (remquotes_1 != null && !remquotes_1.equalsIgnoreCase(null) && !remquotes_1.equalsIgnoreCase("")) {
                                                                     remquotes_1 = remquotes_1.split("\"")[1];
                                                                 }
                                                             }
                                                             if (jobject.has("fileName")) {
                                                                 JsonArray fileName_1 = jobject.getAsJsonArray("fileName");
                                                                 for (int i = 0; i < fileName_1.size(); i++) {
                                                                     filename_2 = fileName_1.get(i).toString();
                                                                     filename_2 = filename_2.split("\"")[1];
                                                                 }
                                                             }
                                                             Log.d("task", "startdate  " + taskDetailsBean.getPlannedStartDateTime());
                                                             Log.i("task", "Desc3 " + taskDetailsBean.getTaskDescription());
                                                             Log.i("task", "before db update " + taskDetailsBean.getIsRemainderRequired());
                                                             VideoCallDataBase.getDB(context).taskSendUpdate("0", task_No);
                                                             VideoCallDataBase.getDB(context).taskRemQuotesUpdate(filename_2, remquotes_1, temp_duration, duration_unit, taskDetailsBean.getSignalid(), "1");
                                                             taskDetailsBean.setReminderQuote(remquotes_1);
                                                             if (filename_2 != null && (filename_2.contains(".mp3") || filename_2.contains(".wav"))) {
                                                                 taskDetailsBean.setServerFileName(filename_2);
                                                             }
                                                             if (taskDetailsBean.getMimeType().equalsIgnoreCase("date")) {
                                                                 Log.i("task", "after db update " + taskDetailsBean.getIsRemainderRequired());
                                                                 Log.i("task", "Desc4 " + taskDetailsBean.getTaskDescription());
                                                                 Log.i("task", "servFile " + taskDetailsBean.getServerFileName());
                                                                 if (!template && !note && taskDetailsBean.getTaskStatus() != null && !taskDetailsBean.getTaskStatus().equalsIgnoreCase("draft") && !taskDetailsBean.getTaskStatus().equalsIgnoreCase("note")) {
                                                                     Log.d("task", "Desc4.1 processed  " + taskDetailsBean.getIsRemainderRequired());
                                                                     String xml = composeChatXML(taskDetailsBean);
                                                                     sendMultiInstantMessage(xml, listOfObservers, 0);
                                                                 } else if (taskDetailsBean.getTaskStatus() != null && taskDetailsBean.getTaskStatus().equalsIgnoreCase("draft")) {
                                                                     Log.i("task", "Desc4.1 " + taskDetailsBean.getTaskDescription());
                                                                     updateTemplateStatus(taskDetailsBean);
                                                                 }
                                                                 if ((ch_remarks != null && !ch_remarks.equalsIgnoreCase(null) && !ch_remarks.equalsIgnoreCase("")) && taskDetailsBean.getRequestStatus().equalsIgnoreCase("requested")) {
                                                                     sendMessage(ch_remarks, null, "text", null, null, sig_id, null);
                                                                 }
                                                             }
                                                         }
                                                     } catch (Exception e) {
                                                         e.printStackTrace();
                                                         Appreference.printLog("NewTaskConversation", "ResponceMethod remainderQuotes Exception : " + e.getMessage(), "WARN", null);
                                                     }
                                                 } else if (jobject.has("fileName") && (WebServiceEnum_Response != null && !WebServiceEnum_Response.equalsIgnoreCase("taskEntry"))) {
                                                     try {
                                                         Log.i("taskresponse123", "taskEntry ");
                                                         VideoCallDataBase.getDB(context).taskWSStatusUpdate(taskDetailsBean.getSignalid(), "1");
                                                         // Get MultiMedia Response and send sip message
                                                         if (jobject.has("result_text")) {
                                                             String result = jobject.get("result_text").toString();
                                                         }
                                                         Log.d("task", "fileName" + jobject.get("fileName").toString());
                                                         fileName = jobject.get("fileName").toString();
                                                         fileName = fileName.split("\"")[1];
                                                         if (taskList != null && taskList.size() == 1) {
                                                             Log.i("response", "Notes  13 ");
                                                             taskName = "New Task";
                                                             ownerOfTask = Appreference.loginuserdetails.getUsername();
                                                             taskDetailsBean.setServerFileName(fileName);
                                                             Log.e("audio3456", fileName);
                                                             taskDetailsBean.setTaskName(taskName);
                                                             taskDetailsBean.setOwnerOfTask(ownerOfTask);
                                                             isTaskName = false;
                                                             notifyUI();
                                                             Log.i("task", "isTask Name is false");
                                                         } else {
                                                             Log.i("response", "Notes  14 ");
                                                             taskDetailsBean.setServerFileName(fileName);
                                                             Log.e("task", "taskName" + fileName + taskDetailsBean.getSignalid());
                                                             VideoCallDataBase.getDB(context).serverFileNameUpdate(fileName, taskDetailsBean.getSignalid());
                                                             updateUploadStatus(taskDetailsBean);
                                                             if ((!template && !note) || chat) {
                                                                 if (taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(taskDetailsBean.getTaskReceiver())) {
                                                                     Log.i("response", "MM file sent");
                                                                     updateTemplateStatus(taskDetailsBean);
                                                                     String xml = composeChatXML(taskDetailsBean);
                                                                     if (listOfObservers.contains(taskDetailsBean.getOwnerOfTask()) && taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                                                         Log.i("response", "Response method removed user  " + taskDetailsBean.getOwnerOfTask());
                                                                         Log.d("TaskRemovedObserver", "Task Removed  Observer name  3 == " + taskDetailsBean.getOwnerOfTask());
                                                                         listOfObservers.remove(taskDetailsBean.getOwnerOfTask());
                                                                     }
                                                                     sendMultiInstantMessage(xml, listOfObservers, 0);
                                                                     if (!listOfObservers.contains(taskDetailsBean.getOwnerOfTask())) {
                                                                         Log.i("response", "Response method added user  " + taskDetailsBean.getOwnerOfTask());
                                                                         listOfObservers.add(taskDetailsBean.getOwnerOfTask());
                                                                     }
                                                                 } else {
                                                                     String xml = composeChatXML(taskDetailsBean);
                                                                     sendMultiInstantMessage(xml, listOfObservers, 0);
                                                                 }
                                                             } else {
                                                                 Log.i("task", "Desc4 " + taskDetailsBean.getTaskDescription());
                                                                 if (template && note && !chat) {
                                                                     if (!taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(taskDetailsBean.getTaskReceiver())) {
                                                                         String xml = composeChatXML(taskDetailsBean);
                                                                         sendMultiInstantMessage(xml, listOfObservers, 0);
                                                                         Log.i("response", "Notes message success 1 ");
                                                                     } else if (taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(taskDetailsBean.getTaskReceiver()) || listOfObservers.size() > 0) {
                                                                         String xml = composeChatXML(taskDetailsBean);
                                                                         sendMultiInstantMessage(xml, listOfObservers, 0);
                                                                         Log.i("response", "Notes message success ");
                                                                     } else {
                                                                         Log.i("response", "Notes message success---> ");
                                                                         updateTemplateStatus(taskDetailsBean);
                                                                     }
                                                                 }
                                                             }
                                                         }
                                                     } catch (Exception e) {
                                                         e.printStackTrace();
                                                         Appreference.printLog("NewTaskConversation", "ResponceMethod has fileName Exception : " + e.getMessage(), "WARN", null);
                                                     }
                                                 } else if (server_Response_string != null && server_Response_string.contains("taskAcceptedOrRejected")) {
                                                     Log.d("Accept", "acceptOrreject");
                                                     Log.i("response", "Notes  19 ");
                                                     try {
                                                         VideoCallDataBase.getDB(context).taskWSStatusUpdate(taskDetailsBean.getSignalid(), "1");
                                                         Log.i("task", "jelement.getAsJsonObject() != null 2" + communicationBean.getTaskDetailsBean().getSignalid());
                                                         if (jobject.has("requestStatus")) {
                                                             Log.i("response", "Notes  20 ");
                                                             String request_status = jobject.get("requestStatus").toString();
                                                             request_status = request_status.split("\"")[1];
                                                             Log.i("Accept", "request_status " + request_status);
                                                             if (request_status != null && request_status.equals("approved")) {
                                                                 Log.i("response", "Notes  21 ");
                                                                 sendMessage(category + " accepted", null, "text", null, "", communicationBean.getTaskDetailsBean().getSignalid(), null);
                                                             } else {
                                                                 Log.i("response", "Notes  22 ");
                                                                 sendMessage(category + " Rejected", null, "text", null, "", communicationBean.getTaskDetailsBean().getSignalid(), null);
                                                             }
                                                         }
                                                     } catch (Exception e) {
                                                         e.printStackTrace();
                                                         Appreference.printLog("NewTaskConversation", "ResponceMethod taskAcceptedOrRejected Exception : " + e.getMessage(), "WARN", null);
                                                     }
                                                 } else if (jobject.has("result_code") && (WebServiceEnum_Response != null && WebServiceEnum_Response.equalsIgnoreCase("taskConversationEntry"))) {
                                                     try {
                                                         Log.i("response", "Notes  15 ");
                                                         //Get Response for all text message
                                                         Log.d("Sarvan", "=================>>>>>>. 3" + taskDetailsBean.getToUserName());
                                                         Log.i("task", "jelement.getAsJsonObject() != null taskConversationEntry " + taskDetailsBean.getSignalid());
                                                         VideoCallDataBase.getDB(context).taskWSStatusUpdate(taskDetailsBean.getSignalid(), "1");
                                                         Log.i("task", "jelement.getAsJsonObject() != null 2 " + taskDetailsBean.getOwnerOfTask() + " " + taskDetailsBean.getTaskReceiver());
                                                         Log.i("task", "jelement.getAsJsonObject() != null 2 " + template + " " + note + " listOfObservers " + listOfObservers);
                                                         if (template && note) {
                                                             if (!taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(taskDetailsBean.getTaskReceiver())) {
                                                                 String xml = composeChatXML(taskDetailsBean);
                                                                 sendMultiInstantMessage(xml, listOfObservers, 0);
                                                                 Log.i("response", "Notes message success 1 ");
                                                             } else if (taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(taskDetailsBean.getTaskReceiver()) || listOfObservers.size() > 0) {
                                                                 String xml = composeChatXML(taskDetailsBean);
                                                                 sendMultiInstantMessage(xml, listOfObservers, 0);
                                                                 Log.i("response", "Notes message success ");
                                                             } else {
                                                                 Log.i("response", "Notes message success--->1 ");
                                                                 updateTemplateStatus(taskDetailsBean);
                                                             }
                                                         } else if (template && !chat) {
                                                             Log.i("response", "Notes  16 ");
                                                             updateTemplateStatus(taskDetailsBean);
                                                             Log.i("taskConversationEntry", "value taskStatus before compose 1 " + communicationBean.getTaskDetailsBean().getTaskDescription());
                                                         } else if (communicationBean.getTaskDetailsBean().getTaskDescription().equalsIgnoreCase("Leave Approved") ||
                                                                 communicationBean.getTaskDetailsBean().getTaskDescription().equalsIgnoreCase("leave has been rejected") ||
                                                                 communicationBean.getTaskDetailsBean().getTaskDescription().equalsIgnoreCase("Task Name is Changed") ||
                                                                 communicationBean.getTaskDetailsBean().getTaskDescription().equalsIgnoreCase("This " + category + " is closed")) {
                                                             Log.i("response", "Notes  17 ");
                                                             Log.i("taskConversationEntry", "value taskStatus before compose 2 " + communicationBean.getTaskDetailsBean().getTaskDescription());
                                                             sendMessage(communicationBean.getTaskDetailsBean().getTaskDescription(), null, "text", null, "", communicationBean.getTaskDetailsBean().getSignalid(), null);
                                                         } else if (communicationBean.getTaskDetailsBean() != null) {
                                                             Log.i("response", "Notes  18 ");
                                                             Log.d("ListOfSender  2 --- > ", listOfObservers + " ");
                                                             if (communicationBean.getTaskDetailsBean().getMimeType().equalsIgnoreCase("map")) {
                                                                 updateUploadStatus(taskDetailsBean);
                                                             }
                                                             if (communicationBean.getTaskDetailsBean().getFromUserName().equalsIgnoreCase(communicationBean.getTaskDetailsBean().getToUserName())) {
                                                                 updateTemplateStatus(taskDetailsBean);
                                                             }
                                                             //                                    Log.i("taskescalate_observers", "escalate_observers " + escalate_observers.size());
                                                             if (escalate_observers.size() > 0) {
                                                                 isTaskName = false;
                                                                 for (String str1 : escalate_observers) {
                                                                     if (!listOfObservers.contains(str1))
                                                                         listOfObservers.add(str1);
                                                                 }
                                                             }
                                                             Log.i("taskConversationEntry", "value taskStatus before compose 3 " + communicationBean.getTaskDetailsBean().getTaskDescription());
                                                             if (communicationBean.getTaskDetailsBean().getTaskDescription() != null) {
                                                                 sendMessage(communicationBean.getTaskDetailsBean().getTaskDescription(), null, communicationBean.getTaskDetailsBean().getMimeType(), null, "",
                                                                         communicationBean.getTaskDetailsBean().getSignalid(), communicationBean.getTaskDetailsBean());
                                                             }
                                                             if (communicationBean.getTaskDetailsBean().getTaskRemoveObservers() != null && remove_check) {
                                                                 //                                        RemoveObserver();
                                                             }
                                                         }
                                                     } catch (Exception e) {
                                                         e.printStackTrace();
                                                         Appreference.printLog("NewTaskConversation", "ResponceMethod taskConversationEntry Exception : " + e.getMessage(), "WARN", null);
                                                     }
                                                 } else if ((WebServiceEnum_Response != null && WebServiceEnum_Response.equalsIgnoreCase("taskEntry"))) {
                                                     try {
                                                         Log.i("taskconversation", "Task first entry");
                                                         Log.i("response", "Notes  23 ");
                                                         if (jobject.has("listTaskFiles") && jobject.getAsJsonArray("listTaskFiles").size() > 0 && jobject.getAsJsonArray("listTaskFiles").get(0).getAsJsonObject().has("fileName") && jobject.getAsJsonArray("listTaskFiles").get(0).getAsJsonObject().get("fileName") != null) {
                                                             JsonObject object = jobject.getAsJsonArray("listTaskFiles").get(0).getAsJsonObject();
                                                             fileName = object.get("fileName").toString().replaceAll("\"", "");
                                                             taskDetailsBean.setServerFileName(fileName);
                                                             taskDetailsBean.setShow_progress(1);
                                                             Log.e("task", "taskName" + fileName + taskDetailsBean.getSignalid());
                                                             VideoCallDataBase.getDB(context).serverFileNameUpdate(fileName, taskDetailsBean.getSignalid());
                                                             updateUploadStatus(taskDetailsBean);
                                                         }
                                                         webtaskId = jobject.get("id").toString();
                                                         String memberListValues = "";
                                                         String groupMemberValues = "";
                                                         Log.i("task", "webTaskId" + webtaskId);
                                                         taskDetailsBean.setTaskId(webtaskId);
                                                         Appreference.webid = webtaskId;
                                                         if (webtaskId != null) {
                                                             appSharedpreferences.saveBoolean("syncTask" + webtaskId, true);
                                                         }
                                                         try {
                                                             if (subType != null && !subType.equalsIgnoreCase("private")) {
                                                                 JSONObject jsonObject = new JSONObject(server_Response_string);
                                                                 if (jsonObject.has("group")) {
                                                                     if (!jsonObject.getString("group").equalsIgnoreCase("null")) {
                                                                         Log.i("taskconversation", "Task first entry " + jsonObject.getString("group"));
                                                                         JSONObject cast = jsonObject.getJSONObject("group");
                                                                         if (cast.has("listMember")) {
                                                                             JSONArray jsonArray = cast.getJSONArray("listMember");
                                                                             listOfObservers.clear();
                                                                             for (int i = 0; i < jsonArray.length(); i++) {
                                                                                 JSONObject actor = jsonArray.getJSONObject(i);
                                                                                 String name = actor.getString("username");
                                                                                 if (!listOfObservers.contains(name))
                                                                                     listOfObservers.add(name);
                                                                                 listObservers.add(name);
                                                                                 memberListValues = memberListValues + "" + name + ",";
                                                                             }
                                                                         }
                                                                     }
                                                                 }
                                                             } else {
                                                                 if (listOfObservers.size() > 0) {
                                                                     for (String listof : listOfObservers) {
                                                                         memberListValues = memberListValues + "" + listof + ",";
                                                                     }
                                                                 }
                                                             }
                                                         } catch (Exception e) {
                                                             e.printStackTrace();
                                                             Appreference.printLog("NewTaskConversation", "ResponceMethod taskEntry not private Exception : " + e.getMessage(), "WARN", null);
                                                         }
                                                         Log.d("taskconversation", "webTaskId  =  " + webtaskId);
                                                         taskDetailsBean.setTaskId(webtaskId);
                                                         Log.i("Accept", "value taskDetailsBean.getTaskStatus() " + taskDetailsBean.getTaskStatus());
                                                         Log.i("Accept", "value project_toUsers " + project_toUsers);
                                                         Log.i("Accept", "value issueid " + taskDetailsBean.getParentTaskId());
                                                         Log.i("Accept", "value category " + taskDetailsBean.getCatagory());
                                                         if (project) {
                                                             taskDetailsBean.setGroupTaskMembers(project_toUsers);
                                                             VideoCallDataBase.getDB(context).insert_new_Project_history(taskDetailsBean);
                                                         }
                                                         taskDetailsBean.setWs_send("1");
                                                         dataBase.insertORupdate_Task_history(taskDetailsBean);
                                                         if (taskType != null && taskType.equalsIgnoreCase("Group")) {
                                                             if (listOfObservers.size() > 0) {
                                                                 memberListValues = "";
                                                                 for (String listof : listOfObservers) {
                                                                     Log.i("TaskArrayAdapter", "New OwnerOftask---------> 1 * listof " + listof);
                                                                     memberListValues = memberListValues + "" + listof + ",";
                                                                 }
                                                                 Log.i("TaskArrayAdapter", "New OwnerOftask---------> 1 * listof 1 " + memberListValues);
                                                             }
                                                             memberListValues = memberListValues.substring(0, memberListValues.length() - 1);
                                                             taskDetailsBean.setGroupTaskMembers(memberListValues);
                                                         }
                                                         Log.i("TaskArrayAdapter", "New OwnerOftask---------> 1 *  " + memberListValues + "  taskDetailsBean.getGroupTaskMembers()  " + taskDetailsBean.getGroupTaskMembers());
                                                         if (!project) {
                                                             dataBase.insertORupdate_TaskHistoryInfo(taskDetailsBean);
                                                         }
                                                         VideoCallDataBase.getDB(context).taskIdUpdate(webtaskId, task_No);
                                                         if (!memberListValues.equalsIgnoreCase("")) {
                                                             //                                    groupMemberValues = memberListValues.substring(0, memberListValues.length() - 1);
                                                             Log.d("task", "memberListValues  =  " + groupMemberValues);
                                                             VideoCallDataBase.getDB(context).taskMembersUpdate(memberListValues, task_No);
                                                         }
                                                         if (isTaskName && webtaskId != null) {
                                                             if (taskDetailsBean.isCustomTagVisible()) {
                                                                 taskList.add(taskDetailsBean);
                                                             }
                                                             if (isTaskName && note && reminderdate != null) {
                                                                 dateNoteCreation();
                                                             }
                                                             isTaskName = false;
                                                             notifyUI();
                                                             sortTaskMessage();
                                                             refresh();
                                                         }
                                                         handler.post(new Runnable() {
                                                             @Override
                                                             public void run() {
                                                                 cancelDialog();
                                                             }
                                                         });
                                                         TaskDetailsBean bean1 = communicationBean.getTaskDetailsBean();
                                                         ownerOfTask = bean1.getOwnerOfTask();
                                                         bean1.setTaskId(webtaskId);
                                                         bean1.setGroupTaskMembers(memberListValues);
                                                         bean1.setOwnerOfTask(ownerOfTask);
                                                         bean1.setTaskName(taskName);
                                                         if (!bean1.getMimeType().equalsIgnoreCase("date")) {
                                                             updateTemplateStatus(taskDetailsBean);
                                                             if ((template && note) || chat || project || template || category.equalsIgnoreCase("task") || category.equalsIgnoreCase("issue")) {
                                                                 if (!ownerOfTask.equalsIgnoreCase(taskReceiver) && !chat) {
                                                                     Log.i("TaskArrayAdapter", "New OwnerOftask---------> 1 * bean1.getGroupTaskMembers() " + listOfObservers);
                                                                     String xml = composeChatXML(bean1);
                                                                     sendMultiInstantMessage(xml, listOfObservers, 0);
                                                                 } else if (chat) {
                                                                     ArrayList<String> list = new ArrayList<String>();
                                                                     Log.i("task", "list %% " + list);
                                                                     Log.i("task", "toUserId %% " + toUserId);
                                                                     listOfObservers.clear();
                                                                     ArrayList<String> grouplist = VideoCallDataBase.getDB(context).selectGroupmembers("select * from groupmember where groupid= '" + toUserId + "'", "username");
                                                                     Log.i("task", "user_List %% " + grouplist);
                                                                     if (bean1 != null && bean1.getTaskType() != null && bean1.getTaskType().equalsIgnoreCase("group")) {
                                                                         for (String Name : grouplist) {
                                                                             list.add(Name);
                                                                             listOfObservers.add(Name);
                                                                         }
                                                                     } else {
                                                                         list.add(taskDetailsBean.getToUserName());
                                                                         listOfObservers.add(taskDetailsBean.getToUserName());
                                                                     }
                                                                     Log.i("task", "list ##%% " + list);
                                                                     String xml = composeChatXML(bean1);
                                                                     sendMultiInstantMessage(xml, list, 0);
                                                                 }
                                                                 if (is_date) {
                                                                     dateSendORApprovalORReject();
                                                                     is_date = false;
                                                                 } else if (is_mmfile) {
                                                                     PercentageWebService(mime_Type, strIPath, "", Utility.getSessionID(), 0);
                                                                     Log.i("Task conversation", "image  * -->> " + sig_id);
                                                                     is_mmfile = false;
                                                                 }

                                                             } else {
                                                                 Log.i("response", "Notes  24 ");
                                                                 if (is_tempDate) {
                                                                     dateTemplateCreation();
                                                                     is_tempDate = false;
                                                                 } else if (is_mmfile) {
                                                                     PercentageWebService(mime_Type, strIPath, "", Utility.getSessionID(), 0);
                                                                     Log.i("Task conversation", "image  *" + sig_id);
                                                                     is_mmfile = false;
                                                                 }
                                                                 Log.i("task", "Desc4 " + taskDetailsBean.getTaskDescription());

                                                             }
                                                         } else {
                                                             if (template) {
                                                                 Log.i("task", "Desc4 " + taskDetailsBean.getTaskDescription());
                                                                 updateTemplateStatus(taskDetailsBean);
                                                             }
                                                         }
                                                         if (isLocation) {
                                                             isLocation = false;
                                                             String signal_id = Utility.getSessionID();
                                                             PercentageWebService("map", Location, "", signal_id, 0);
                                                         }
                                                     } catch (Exception e) {
                                                         e.printStackTrace();
                                                         Appreference.printLog("NewTaskConversation", "ResponceMethod taskEntry Exception : " + e.getMessage(), "WARN", null);
                                                     }
                                                 }
                                             }
                                             Log.i("task", "msg Status in the response end " + taskDetailsBean.getMsg_status());
                                         } catch (JsonSyntaxException e) {
                                             e.printStackTrace();
                                         } catch (Exception e) {
                                             e.printStackTrace();
                                         }
                                     } else if (communicationBean != null && communicationBean.getTaskDetailsBean() != null && Appreference.isResponse_multifile) {
                                         try {
                                             Log.i("output123", "NewTaskConverstaion isResponse_multifile ResponceMethod");
                                             Log.i("response", "Notes  25 ");
                                             Log.i("privatemessage", "bean.getFirstname() " + communicationBean.getFirstname());
                                             Appreference.isResponse_multifile = false;
                                             TaskDetailsBean taskDetailsBean = communicationBean.getTaskDetailsBean();
                                             Gson gson = new Gson();
                                             JSONArray jsonArray = new JSONArray(server_Response_string);
                                             if (jsonArray.length() > 0) {
                                                 for (int i = 0; i < jsonArray.length(); i++) {
                                                     MultifileUploadBean multibean = gson.fromJson(jsonArray.getString(i), MultifileUploadBean.class);
                                                     multifileUploadBeans.add(multibean);
                                                     Log.d("privatemessage", "success");
                                                 }
                                             }
                                             if (multifileUploadBeans.size() > 0) {
                                                 for (int i = 0; i < jsonArray.length(); i++) {
                                                     taskDetailsBean.setServerFileName(multifileUploadBeans.get(i).getFileNewName());
                                                     Log.i("privatemessage", "taskDetailsBean.getTaskDescription() " + taskDetailsBean.getTaskDescription());
                                                     Log.i("privatemessage", "taskDetailsBean.getServerFileName() " + taskDetailsBean.getServerFileName());
                                                 }
                                             }
                                             Log.i("privatemessage", "subtype value is " + taskDetailsBean.getSubType());
                                             multifileUploadBeans.clear();
                                             if (taskType != null && !taskType.equalsIgnoreCase("Group")) {
                                                 Log.i("observer", "list clear 10");
                                                 listOfObservers.clear();
                                                 listObservers.clear();
                                                 listObservers.add(taskDetailsBean.getToUserName());
                                                 if (!listOfObservers.contains(taskDetailsBean.getToUserName()))
                                                     listOfObservers.add(taskDetailsBean.getToUserName());
                                                 Log.i("privatemessage", "private list " + listOfObservers.get(0));
                                             }
                                             if (!isTaskName) {
                                                 VideoCallDataBase.getDB(context).uploadPrivateMMFile(taskDetailsBean.getSignalid(), taskDetailsBean.getServerFileName());
                                                 String xml = composeChatXML(taskDetailsBean);
                                                 Log.i("privatemessage", "Touser list size is ==> " + listOfObservers.size());
                                                 if (listOfObservers != null && listOfObservers.size() > 0) {
                                                     sendMultiInstantMessage(xml, listOfObservers, 0);
                                                     Log.d("privatemessage", "message send successfully");
                                                 }
                                             } else {
                                                 taskIdWebservice(taskDetailsBean);
                                             }
                                         } catch (JSONException e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod  Appreference.isResponse_multifile Exception : " + e.getMessage(), "WARN", null);
                                         } catch (JsonSyntaxException e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod  Appreference.isResponse_multifile Exception : " + e.getMessage(), "WARN", null);
                                         } catch (Exception e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod  Appreference.isResponse_multifile Exception : " + e.getMessage(), "WARN", null);
                                         }
                                     } else if (communicationBean.getFirstname() != null && communicationBean.getFirstname().equalsIgnoreCase("checkConflicts")) {
                                         try {
                                             Gson gson = new Gson();
                                             Log.i("rsponse", "inside the conflict response");
                                             Log.i("Response conflictTask", "response " + server_Response_string);
                                             JSONArray jsonArray = new JSONArray(server_Response_string);
                                             if (jsonArray.length() > 0) {
                                                 Log.i("response array", "response size" + jsonArray.length());
                                                 conflictobject.clear();
                                                 for (int i = 0; i < jsonArray.length(); i++) {
                                                     Log.i("taskConversation ", "conflict responce object 1 " + jsonArray.get(i));
                                                     ConflictCheckBean conflictCheck = gson.fromJson(jsonArray.getString(i), ConflictCheckBean.class);
                                                     conflictCheck.setIschecked(false);
                                                     conflictobject.add(conflictCheck);
                                                     Log.i("LastConflictObject", "BeanObject " + conflictCheck.ischecked() + "   " + conflictCheck.ischecked());
                                                 }
                                                 Log.i("TaskDateUpdate ", "conflictobject.size * " + conflictobject.size());
                                                 Log.i("extend", "conflict start> " + startdate);
                                                 Log.i("extend", "conflict end> " + enddate);
                                                 Leave_taskid = webtaskId;
                                                 Log.i("size", "size " + conflictobject.size());
                                                 Intent intent = new Intent(NewTaskConversation.this, ConflictList.class);
                                                 intent.putExtra("Start_Date", startdate);
                                                 intent.putExtra("End_Date", enddate);
                                                 intent.putExtra("Leave_Taskid", Leave_taskid);
                                                 intent.putExtra("Leave", "NewTaskConversation");
                                                 intent.putExtra("conflictobject", conflictobject);
                                /*intent.putExtra("taskType", taskType);*/
                                                 startActivityForResult(intent, 444);
                                             }
                                         } catch (JSONException e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod  checkConflicts Exception : " + e.getMessage(), "WARN", null);
                                         } catch (JsonSyntaxException e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod  checkConflicts Exception : " + e.getMessage(), "WARN", null);
                                         } catch (Exception e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod  checkConflicts Exception : " + e.getMessage(), "WARN", null);
                                         }
                                     } else if (server_Response_string != null && server_Response_string.contains("taskAcceptedOrRejected")
                                             && server_Response_string.contains("FCMUserId") && server_Response_string.contains("result_code")) {
                                         cancelDialog();
                                         try {
                                             Log.d("Accept", "acceptOrreject");
                                             JsonElement jelement = new JsonParser().parse(server_Response_string);
                                             if (jelement.getAsJsonObject() != null) {
                                                 Log.i("task", "jelement.getAsJsonObject() != null 3");
                                                 JsonObject jobject = jelement.getAsJsonObject();
                                                 if (jobject.has("requestStatus")) {
                                                     String request_status = jobject.get("requestStatus").toString();
                                                     request_status = request_status.split("\"")[1];
                                                     Log.i("Accept", "request_status " + request_status);
                                                     if (request_status != null && request_status.equals("approved")) {
                                                         sendMessage(category + " accepted", null, "text", null, "", communicationBean.getTaskDetailsBean().getSignalid(), null);
                                                     } else {
                                                         sendMessage(category + " Rejected", null, "text", null, "", communicationBean.getTaskDetailsBean().getSignalid(), null);
                                                     }
                                                 }
                                             }
                                         } catch (JsonSyntaxException e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod  taskAcceptedOrRejected & FCM UserId Exception : " + e.getMessage(), "WARN", null);
                                         } catch (Exception e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod  taskAcceptedOrRejected & FCM UserId Exception : " + e.getMessage(), "WARN", null);
                                         }
                                     } else if (server_Response_string != null && (WebServiceEnum_Response != null && WebServiceEnum_Response.contains("getCustomHeaderValue"))) {

                                         try {
                                             JsonElement jelement = new JsonParser().parse(server_Response_string);
                                             ArrayList<listofEscalations> listValues = new ArrayList<listofEscalations>();
                                             Gson gson = new Gson();
                                             Log.i("rsponse", "inside the conflict response");
                                             Log.i("Response conflictTask", "response " + server_Response_string);
                                             JSONArray jsonArray = new JSONArray(server_Response_string);
                                             if (jsonArray.length() > 0) {
                                                 Log.i("response array", "response size " + jsonArray.length());
                                                 for (int i = 0; i < jsonArray.length(); i++) {
                                                     Log.i("response ", "objects  " + jsonArray.get(i));
                                                     listofEscalations conflictCheck = gson.fromJson(jsonArray.getString(i), listofEscalations.class);
                                                     listValues.add(conflictCheck);
                                                 }
                                             }
                                             Log.i("response ", "objects  " + listValues.size());
                                             for (listofEscalations listofEscalations : listValues) {
                                                 TaskDetailsBean taskDetailsBean = new TaskDetailsBean();
                                                 taskDetailsBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                                                 taskDetailsBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                                                 taskDetailsBean.setToUserName(toUserName);
                                                 taskDetailsBean.setToUserId(String.valueOf(toUserId));
                                                 taskDetailsBean.setOwnerOfTask(ownerOfTask);
                                                 taskDetailsBean.setTaskReceiver(taskReceiver);
                                                 taskDetailsBean.setTaskName(taskName);
                                                 taskDetailsBean.setTaskNo(task_No);
                                                 taskDetailsBean.setTaskId(webtaskId);
                                                 taskDetailsBean.setTaskType(taskType);
                                                 taskDetailsBean.setSignalid(Utility.getSessionID());
                                                 taskDetailsBean.setPlannedStartDateTime(null);
                                                 taskDetailsBean.setUtcPlannedStartDateTime(Appreference.customLocalDateToUTC(null));
                                                 taskDetailsBean.setPlannedEndDateTime(null);
                                                 taskDetailsBean.setUtcplannedEndDateTime(Appreference.customLocalDateToUTC(null));
                                                 taskDetailsBean.setDateFrequency("");
                                                 taskDetailsBean.setTaskPriority("Medium");
                                                 taskDetailsBean.setCompletedPercentage("0");
                                                 taskDetailsBean.setTaskStatus("assigned");
                                                 taskDetailsBean.setRequestStatus("");
                                                 taskDetailsBean.setTaskRequestType("customeAttributeRequest");
                                                 taskDetailsBean.setSubType("customeAttribute");
                                                 taskDetailsBean.setSendStatus("0");   // send status 0 is send 1 is unsend
                                                 taskDetailsBean.setMsg_status(0);
                                                 taskDetailsBean.setShow_progress(1);
                                                 taskDetailsBean.setCustomTagVisible(false);
                                                 taskDetailsBean.setMimeType("text");
                                                 if (listofEscalations.getCreatedDate() != null && !listofEscalations.getCreatedDate().equalsIgnoreCase("null") && !listofEscalations.getCreatedDate().equalsIgnoreCase("")) {
                                                     taskDetailsBean.setTasktime(listofEscalations.getCreatedDate().substring(0, 19));
                                                     taskDetailsBean.setTaskUTCTime(listofEscalations.getCreatedDate().substring(0, 19));
                                                     taskDetailsBean.setDateTime(listofEscalations.getCreatedDate().substring(0, 19));
                                                     taskDetailsBean.setTaskUTCDateTime(listofEscalations.getCreatedDate().substring(0, 19));
                                                 } else {
                                                     SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                                                     dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                                                     String dateforrow = dateFormat.format(new Date());
                                                     Log.i("DB UTC", "UTC time for subtask " + dateforrow);
                                                     taskDetailsBean.setTasktime(dateforrow);
                                                     taskDetailsBean.setTaskUTCTime(dateforrow);
                                                     taskDetailsBean.setDateTime(dateforrow);
                                                     taskDetailsBean.setTaskUTCDateTime(dateforrow);
                                                 }
                                                 taskDetailsBean.setTaskTagName(listofEscalations.getHeaderTagName());
                                                 taskDetailsBean.setTaskTagValue(listofEscalations.getValue());
                                                 taskDetailsBean.setTaskDescription(listofEscalations.getValue());
                                                 Log.i("taskobserver", "DB---> " + listofEscalations.getSetId());
                                                 if (listofEscalations.getSetId() != null && !listofEscalations.getSetId().equalsIgnoreCase("null") && !listofEscalations.getSetId().equalsIgnoreCase("(null)")
                                                         && !listofEscalations.getSetId().equalsIgnoreCase(null) && !listofEscalations.getSetId().equalsIgnoreCase("")) {
                                                     taskDetailsBean.setCustomSetId(Integer.parseInt(listofEscalations.getSetId()));
                                                 }
                                                 if (taskDetailsBean.getTaskTagName() != null && taskDetailsBean.getTaskTagName().equalsIgnoreCase("date")) {
                                                     Log.i("taskconversation", "Escalation tag date details " + taskDetailsBean.getTaskTagName() + " " + taskDetailsBean.getTaskDescription());
                                                     progressListener.StartAlarmManager(taskDetailsBean);
                                                 }
                                                 if (project) {
                                                     dataBase.update_Project_history(taskDetailsBean);
                                                 } else {
                                                     VideoCallDataBase.getDB(context).insertORupdate_TaskHistoryInfo(taskDetailsBean);
                                                 }
                                                 VideoCallDataBase.getDB(context).insertORupdate_Task_history(taskDetailsBean);
                                                 //                            VideoCallDataBase.getDB(context).insertORupdate_TaskHistoryInfo(taskDetailsBean);
                                             }
                                             listValues.clear();
                                         } catch (JsonSyntaxException e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod  getCustomHeaderValueException : " + e.getMessage(), "WARN", null);
                                         } catch (JSONException e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod  getCustomHeaderValue Exception : " + e.getMessage(), "WARN", null);
                                         } catch (NumberFormatException e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod  getCustomHeaderValue Exception : " + e.getMessage(), "WARN", null);
                                         } catch (Exception e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod  getCustomHeaderValue Exception : " + e.getMessage(), "WARN", null);
                                         }
                                     } else if (server_Response_string != null && server_Response_string.contains("isInputRequired")) {
                                         try {
                                             if (rhsList == null) {
                                                 rhsList = new ArrayList<CustomBean>();
                                             }
                                             if (lhsList == null) {
                                                 lhsList = new ArrayList<ListofFileds>();
                                             }
                                             if (server_Response_string.contains("tagName")) {
                                                 Type collectionType = new TypeToken<List<ListofFileds>>() {
                                                 }.getType();
                                                 List<ListofFileds> lcs = new Gson().fromJson(server_Response_string, collectionType);
                                                 Log.i("CustomTag", "Value--->" + lcs.size());
                                                 for (int i = 0; i < lcs.size(); i++) {
                                                     ListofFileds listUserGroupObject = lcs.get(i);
                                                     listUserGroupObject.setClientId(String.valueOf(i + 1));
                                                     lhsList.add(listUserGroupObject);
                                                     Log.i("CustomTag", "Value123" + "\n" + listUserGroupObject.getId() + "\n" + listUserGroupObject.getName() +
                                                             "\n" + listUserGroupObject.getIsInputRequired());
                                                 }
                                                 if (lhsList != null) {
                                                     cancelDialog();
                                                     try {
                                                         Intent intent = new Intent(NewTaskConversation.this, CustomHeaderTagActivity.class);
                                                         intent.putExtra("LeftList", lhsList);
                                                         intent.putExtra("TaskId", webtaskId);
                                                         intent.putExtra("projectId", projectId);
                                                         intent.putExtra("TaskBean", beanValue());
                                                         intent.putExtra("group_ownerofTask", ownerOfTask);
                                                         intent.putExtra("group_taskReceiver", taskReceiver);
                                                         intent.putExtra("listOfObservers", listOfObservers);
                                                         if (project)
                                                             intent.putExtra("ProjectValue", "yes");
                                                         else
                                                             intent.putExtra("ProjectValue", "no");
                                                         startActivityForResult(intent, 787);
                                                         lhsList.clear();
                                                     } catch (Exception e) {
                                                         e.printStackTrace();
                                                         Appreference.printLog("NewTaskConversation", "ResponceMethod CustomHeaderTagActivity Exception : " + e.getMessage(), "WARN", null);
                                                     }
                                                 }
                                             } else {
                                                 Type collectionType = new TypeToken<List<ListofFileds>>() {
                                                 }.getType();
                                                 List<ListofFileds> lcs = new Gson().fromJson(server_Response_string, collectionType);
                                                 Log.i("CustomTag", "Value--->" + lcs.size());
                                                 for (int i = 0; i < lcs.size(); i++) {
                                                     ListofFileds listUserGroupObject = lcs.get(i);
                                                     listUserGroupObject.setClientId(String.valueOf(i + 1));
                                                     lhsList.add(listUserGroupObject);
                                                     Log.i("CustomTag", "Value123" + "\n" + listUserGroupObject.getId() + "\n" + listUserGroupObject.getName() +
                                                             "\n" + listUserGroupObject.getIsInputRequired());
                                                 }
                                                 if (lhsList != null) {
                                                     cancelDialog();
                                                     try {
                                                         Intent intent = new Intent(NewTaskConversation.this, MainCustomTag.class);
                                                         intent.putExtra("LeftList", lhsList);
                                                         intent.putExtra("Taskid", webtaskId);
                                                         intent.putExtra("TaskBean", beanValue());
                                                         intent.putExtra("listOfObservers", listOfObservers);
                                                         startActivityForResult(intent, 786);
                                                         lhsList.clear();
                                                     } catch (Exception e) {
                                                         e.printStackTrace();
                                                         Appreference.printLog("NewTaskConversation", "ResponceMethod MainCustomTag Exception : " + e.getMessage(), "WARN", null);
                                                     }
                                                 }
                                             }
                                         } catch (JsonSyntaxException e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod  isInputRequired Exception : " + e.getMessage(), "WARN", null);
                                         } catch (Exception e) {
                                             e.printStackTrace();
                                             Appreference.printLog("NewTaskConversation", "ResponceMethod  isInputRequired Exception : " + e.getMessage(), "WARN", null);
                                         }
                                     } else {
                                         //**********Get  percentage Response and send sip message here.
                                         cancelDialog();
                                         String test1 = server_Response_string.toString();
                                         Log.d("Task2", "Response Email sip" + test1);

                                         Log.d("values", "test 1 value" + test1);
                                         JsonElement jelement = new JsonParser().parse(test1);
                                         Log.i("response", "Notes  26 ");
                                         if (jelement.getAsJsonObject() != null) {
                                             JsonObject jobject = jelement.getAsJsonObject();
                                             if (jobject.has("result_text") && !WebServiceEnum_Response.equalsIgnoreCase("getTask")) {
                                                 Log.i("getTask123", "getTask W/S Response*************");
                                                 String result = jobject.get("result_text").toString();
                                                 Log.i("response", "Notes  27 ");
                                                 if (communicationBean.getGetTaskListforPercentage() != null) {
                                                     for (TaskDetailsBean chatBean : communicationBean.getGetTaskListforPercentage()) {
                                                         Log.d("task1", "percentage  " + chatBean.getTaskDescription());
                                                         Log.e("task", "sendStatusUpdated" + fileName);
                                                         VideoCallDataBase.getDB(context).taskSendUpdate("0", task_No);
                                                         if (isTaskName) {
                                                             taskName = "New Task";
                                                             Log.i("taskconversation", "headername 1");
                                                             ownerOfTask = Appreference.loginuserdetails.getUsername();
                                                             Log.i("task", "isTask Name is false");
                                                             taskIdWebservice(chatBean);
                                                             chatBean.setTaskName(taskName);
                                                             chatBean.setOwnerOfTask(ownerOfTask);
                                                             chatBean.setCustomTagVisible(true);
                                                             if (chatBean.getMimeType().equalsIgnoreCase("text")) {
                                                                 if ((!template && !note) || chat) {
                                                                     String xml = composeChatXML(chatBean);
                                                                     sendMultiInstantMessage(xml, listOfObservers, 0);
                                                                 } else {
                                                                     updateTemplateStatus(chatBean);
                                                                 }
                                                             }
                                                         } else {
                                                             if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) &&
                                                                     chatBean.getCompletedPercentage().equalsIgnoreCase("100")) {
                                                                 Log.i("response", "Notes  28 ");
                                                                 if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                                                                     Log.i("response", "Notes  28 A ");
                                                                     PercentageWebService("text", "This " + category + " is closed", "", Utility.getSessionID(), 0);
                                                                 } else {
                                                                     Log.i("response", "Notes  29 ");
                                                                     sendMessage("This '" + category + "' is closed", null, "text", null, "", Utility.getSessionID(), null);
                                                                 }
                                                             }
                                                             if (chatBean.getMimeType().equalsIgnoreCase("text") && !chatBean.getTaskDescription().equalsIgnoreCase("Completed Percentage 100%")) {
//
                                                                 if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {

                                                                     PercentageWebService("text", chatBean.getTaskDescription(), "", chatBean.getSignalid(), 0);
                                                                 }
                                                             } else {
                                                                 if ((!template && !note) || chat) {
                                                                     String xml = composeChatXML(chatBean);
                                                                     sendMultiInstantMessage(xml, listOfObservers, 0);
                                                                 } else {
                                                                     updateTemplateStatus(chatBean);
                                                                 }
                                                             }
                                                         }
                                                     }
                                                 } else if (Appreference.is_Priority) {
                                                     Log.i("response", "Notes  30 ");
                                                     Log.i("task", "priority---");
                                                     cancelDialog();
                                                     try {
                                                         sendMessage("The priority set as ", "priority", "text", null, null, sig_id, null);
                                                         Log.i("task", "priority---thirumal");
                                                         Appreference.is_Priority = false;
                                                     } catch (Exception e) {
                                                         e.printStackTrace();
                                                         Appreference.printLog("NewTaskConversation", "ResponceMethod  Appreference.is_Priority Exception : " + e.getMessage(), "WARN", null);
                                                     }
                                                 }
                                             } else if (jobject.has("listObserver") && (WebServiceEnum_Response != null && WebServiceEnum_Response.equalsIgnoreCase("getTask"))) {
                                                 try {
                                                     Log.i("response", "Notes  31 ");
                                                     Log.i("getTask123", "getTask Got W/S Response*************");

                                                     try {
                                                         ProjectHistory projectHistory = (ProjectHistory) Appreference.context_table.get("projecthistory");
                                                         if (projectHistory != null)
                                                             projectHistory.setProgressBarInvisible();
                                                         Gson gson = new Gson();
                                                         ListAllgetTaskDetails listAllgetTaskDetails = gson.fromJson(test1, ListAllgetTaskDetails.class);
                                                         cancelDialog();
                                                         VideoCallDataBase.getDB(context).insertORupdate_ListAllgetTaskDetails(listAllgetTaskDetails);
                                                     } catch (JsonSyntaxException e) {
                                                         e.printStackTrace();
                                                         Appreference.printLog("NewTaskConversation", "ResponceMethod getTask Exception : " + e.getMessage(), "WARN", null);
                                                     } catch (Exception e) {
                                                         e.printStackTrace();
                                                         Appreference.printLog("NewTaskConversation", "ResponceMethod getTask Exception : " + e.getMessage(), "WARN", null);
                                                     }
                                                     ArrayList<TaskDetailsBean> taskDetailsBean_gettasks = new ArrayList<TaskDetailsBean>();
                                                     int row_count = VideoCallDataBase.getDB(context).getTaskHistoryRowCount("select * from taskDetailsInfo where taskId ='" + webtaskId + "'");
                                                     boolean countAboveten = false;
                                                     Log.i("getTask123", "getTask W/S Response getTaskHistoryRowCount************* " + row_count);

                                                     if (row_count != 0 && row_count >= 10) {
                                                         row_count = row_count - 10;
                                                         taskList_count = row_count;
                                                         countAboveten = true;
                                                     } else if (row_count < 10) {
                                                         taskList_count = 0;
                                                     } else {
                                                         row_count = 0;
                                                         taskList_count = 0;
                                                     }
                                                     String query1;
                                                     if (row_count == 0 && !countAboveten) {
                                                         if (project) {
                                                             if (template) {
                                                                 query1 = "select * from taskDetailsInfo where taskId ='" + webtaskId + "' and taskStatus=='draft' and customTagVisible = '1'";
                                                             } else if (note) {
                                                                 query1 = "select * from taskDetailsInfo where taskId ='" + webtaskId + "' and taskStatus=='note' and customTagVisible = '1'";
                                                             } else {
                                                                 query1 = "select * from taskDetailsInfo where taskId ='" + webtaskId + "' and taskStatus!='draft' and customTagVisible = '1'";
                                                             }
                                                         } else {
                                                             query1 = "select * from taskDetailsInfo where taskId ='" + webtaskId + "' and customTagVisible = '1'";
                                                         }
                                                     } else if (row_count < 10 && !countAboveten) {
                                                         if (project) {
                                                             if (template) {
                                                                 query1 = "select * from taskDetailsInfo where taskId ='" + webtaskId + "' and taskStatus=='draft' and customTagVisible = '1' order by dateTime ASC LIMIT " + row_count + " OFFSET 0";
                                                             } else if (note) {
                                                                 query1 = "select * from taskDetailsInfo where taskId ='" + webtaskId + "' and taskStatus=='note' and customTagVisible = '1' order by dateTime ASC LIMIT " + row_count + " OFFSET 0";
                                                             } else {
                                                                 query1 = "select * from taskDetailsInfo where taskId ='" + webtaskId + "' and taskStatus!='draft' and customTagVisible = '1' order by dateTime ASC LIMIT " + row_count + " OFFSET 0";
                                                             }
                                                         } else {
                                                             query1 = "select * from taskDetailsInfo where taskId ='" + webtaskId + "' and customTagVisible = '1' order by dateTime ASC LIMIT " + row_count + " OFFSET 0";
                                                         }
                                                     } else {
                                                         if (project) {
                                                             if (template) {
                                                                 query1 = "select * from taskDetailsInfo where taskId ='" + webtaskId + "' and taskStatus=='draft' and customTagVisible = '1' order by dateTime ASC LIMIT 10 OFFSET " + row_count + "";
                                                             } else if (note) {
                                                                 query1 = "select * from taskDetailsInfo where taskId ='" + webtaskId + "' and taskStatus=='note' and customTagVisible = '1' order by dateTime ASC LIMIT 10 OFFSET " + row_count + "";
                                                             } else {
                                                                 query1 = "select * from taskDetailsInfo where taskId ='" + webtaskId + "' and taskStatus!='draft' and customTagVisible = '1' order by dateTime ASC LIMIT 10 OFFSET " + row_count + "";
                                                             }
                                                         } else {
                                                             query1 = "select * from taskDetailsInfo where taskId ='" + webtaskId + "' and customTagVisible = '1' order by dateTime ASC LIMIT 10 OFFSET " + row_count + "";
                                                         }
                                                     }
                                                     loadUI(query1);
                                                     if (WebServiceEnum_Response.equalsIgnoreCase("getTask")) {
                                                         Log.i("syncTask", "appSharedpreferences.saveBoolean 1");
                                                         appSharedpreferences.saveBoolean("syncTask" + webtaskId, true);
                                                     }
                                                 } catch (JsonSyntaxException e) {
                                                     e.printStackTrace();
                                                     Appreference.printLog("NewTaskConversation", "ResponceMethod getTask Exception : " + e.getMessage(), "WARN", null);
                                                 } catch (Exception e) {
                                                     e.printStackTrace();
                                                     Appreference.printLog("NewTaskConversation", "ResponceMethod getTask Exception : " + e.getMessage(), "WARN", null);
                                                 }
                                             }
                                         }
                                     }
                                 }
                                 if (communicationBean != null && communicationBean.getTaskDetailsBean() != null) {
                                     String name = communicationBean.getTaskDetailsBean().getTaskDescription().toString();
                                     if (name.contains("Completed Percentage 100")) {
                                         Log.i("response", "Notes  32 ");
                                         TaskDetailsBean taskDetailsBean = communicationBean.getTaskDetailsBean();
                                         ClosedWebService(taskDetailsBean);
                                         Log.d("task", "Closed webservice called");
                                     }
                                 }
                             } catch (JSONException e1) {
                                 e1.printStackTrace();
                                 Appreference.printLog("NewTaskConversation", "ResponceMethod  Exception : " + e1.getMessage(), "WARN", null);
                                 Log.i("getTask123", "getTask W/S Response JSONException*************" + e1.getMessage());
                                 Log.d("output123", "NewTaskConv sip responce a jsonobject Exception*******" + e1);
                             } catch (Exception e) {
                                 e.printStackTrace();
                                 Appreference.printLog("NewTaskConversation", "ResponceMethod  Exception : " + e.getMessage(), "WARN", null);
                                 Log.i("getTask123", "getTask W/S Response Exception*************" + e.getMessage());

                                 Log.d("output123", "NewTaskConv sip responce  a jsonobject Exception*******" + e);
                             }
                         }
                     }

        );

        refresh();
    }

    private void getLabelForEstimTimer(int currentStatus) {
        String result_timer = "";
        String HoldORPauseEntry_time = "";
        String ResumeORRestartEntry_time = "";
        String taskQuery = "select estimTime from taskDetailsInfo where (taskStatus='Started') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
        String Estimated_dateTime = VideoCallDataBase.getDB(context).getValuefromDBEntry(taskQuery, "estimTime");
        Log.i("estim123", "=================================");
        Log.i("estim123", "getLabelForEstimTimer");
        Log.i("estim123", "=================================");

        if (currentStatus == 1) {
            String taskholdQuery = "select * from taskDetailsInfo where (taskStatus='Hold') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
            HoldORPauseEntry_time = Appreference.utcToLocalTime(VideoCallDataBase.getDB(context).getValuefromDBEntry(taskholdQuery, "tasktime"));
        } else if (currentStatus == 3) {
            String taskpauseQuery = "select * from taskDetailsInfo where (taskStatus='Paused') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
            HoldORPauseEntry_time = Appreference.utcToLocalTime(VideoCallDataBase.getDB(context).getValuefromDBEntry(taskpauseQuery, "tasktime"));

        }
        Log.i("estim123", " getLabelForEstimTimer HoldORPauseEntry_time from DB UTC " + HoldORPauseEntry_time);
        Log.i("estim123", " getLabelForEstimTimer ResumeORRestartEntry_time from DB UTC" + ResumeORRestartEntry_time);

        if (HoldORPauseEntry_time != null) {

            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");

            try {
                Date date2 = df.parse(Estimated_dateTime);
                Date date1 = df.parse(HoldORPauseEntry_time);
                Log.i("estim123", "date" + date2 + " " + date1);
                Log.i("estim123", "datetime" + date2.getTime() + " " + date1.getTime());
                final long mills = date2.getTime() - date1.getTime();
                final long seconds = 1000;
                Log.i("estim123", "mills before " + mills);
                Log.i("estim123", "seconds before " + seconds);
                String hms = null;
                if (mills > 0) {
                    result_timer = String.format("%02d:%02d:%02d", TimeUnit.MILLISECONDS.toHours(mills), TimeUnit.MILLISECONDS.toMinutes(mills) - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(mills)), TimeUnit.MILLISECONDS.toSeconds(mills) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(mills)));
                }
                estimated_timer_tv.setVisibility(View.VISIBLE);
                estimated_timer_tv.setText(result_timer);

                Log.i("estim123", "getLabelForEstimTimer final result_timer*********" + result_timer);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private String getHoldPauseInterval(String currentStatus) {
        String result_timer = "";
        String Hold_Pause_dateTime = "";
        String HoldORPauseEntry_time = "";
        String ResumeORRestartEntry_time = "";
        String taskQuery = "select estimTime from taskDetailsInfo where (taskStatus='Started') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
        String Estimated_dateTime = VideoCallDataBase.getDB(context).getValuefromDBEntry(taskQuery, "estimTime");
        Log.i("estim123", "=================================");
        Log.i("estim123", "getHoldPauseInterval");
        Log.i("estim123", "=================================");

        if (currentStatus.equalsIgnoreCase("2")) {
            String taskholdQuery = "select * from taskDetailsInfo where (taskStatus='Hold') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
            HoldORPauseEntry_time = Appreference.utcToLocalTime(VideoCallDataBase.getDB(context).getValuefromDBEntry(taskholdQuery, "tasktime"));
            String taskresumeQuery = "select * from taskDetailsInfo where (taskStatus='Resumed') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
            ResumeORRestartEntry_time = Appreference.utcToLocalTime(VideoCallDataBase.getDB(context).getValuefromDBEntry(taskresumeQuery, "tasktime"));
        } else if (currentStatus.equalsIgnoreCase("4")) {
            String taskpauseQuery = "select * from taskDetailsInfo where (taskStatus='Paused') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
            HoldORPauseEntry_time = Appreference.utcToLocalTime(VideoCallDataBase.getDB(context).getValuefromDBEntry(taskpauseQuery, "tasktime"));
            String taskrestartQuery = "select * from taskDetailsInfo where (taskStatus='Restarted') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
            ResumeORRestartEntry_time = Appreference.utcToLocalTime(VideoCallDataBase.getDB(context).getValuefromDBEntry(taskrestartQuery, "tasktime"));
        }
        Log.i("estim123", "HoldORPauseEntry_time from DB UTC " + HoldORPauseEntry_time);
        Log.i("estim123", "ResumeORRestartEntry_time from DB UTC" + ResumeORRestartEntry_time);

//        if (HoldORPauseEntry_time != null && ResumeORRestartEntry_time != null) {
        if (HoldORPauseEntry_time != null) {

            SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            Calendar c = Calendar.getInstance();
            Log.d("timer123", "Current date " + c.getTime());
            String formattedDate = df.format(c.getTime());
            Log.d("timer123", "Formatted current date " + formattedDate);

            try {
                Date date2 = df.parse(formattedDate);
                Date date1 = df.parse(HoldORPauseEntry_time);
                Log.i("estim123", "date" + date2 + " " + date1);
                Log.i("estim123", "datetime" + date2.getTime() + " " + date1.getTime());
                final long mills = date2.getTime() - date1.getTime();
                final long seconds = 1000;
                Log.i("estim123", "mills before " + mills);
                Log.i("estim123", "seconds before " + seconds);
                String hms = null;
                if (mills > 0) {
                    hms = String.format("%02d:%02d:%02d", TimeUnit.MILLISECONDS.toHours(mills), TimeUnit.MILLISECONDS.toMinutes(mills) - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(mills)), TimeUnit.MILLISECONDS.toSeconds(mills) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(mills)));
                }
                Log.i("estim123", "hms result_timer*********" + hms);
                String time_array[] = hms.split(":");
                Date Entered_old_start_date = df.parse(Estimated_dateTime);
                Calendar calendar = Calendar.getInstance();
                Log.i("estim123", "************Entered_old_start_date *********" + Entered_old_start_date);

                calendar.setTime(Entered_old_start_date);
                if (time_array != null) {
                    try {
                        calendar.add(Calendar.HOUR, Integer.parseInt(time_array[0]));
                        calendar.add(Calendar.MINUTE, Integer.parseInt(time_array[1]));
                        calendar.add(Calendar.SECOND, Integer.parseInt(time_array[2]));
                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                    }
                }
                final SimpleDateFormat mdformat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                result_timer = mdformat.format(calendar.getTime());
                Log.i("estim123", "final result_timer*********" + result_timer);

            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        return result_timer;
    }

    public void showToast(final String msg) {
        try {
            handler.post(new Runnable() {
                @Override
                public void run() {
                    Toast.makeText(NewTaskConversation.this, msg, Toast.LENGTH_LONG).show();
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "showToast() Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void startHoldOrPauseAlarmManager(String timer, String status_taskId, String currentTaskStatus, String jobCodeNo, String TimerType) {
        SimpleDateFormat datefor = new SimpleDateFormat("yyyy-MM-dd HH:mm");
        Date enddate = null, dateFor = null, endDate = null;
        String endTime = null;
        int unicid = 0;
        Log.i("alarm123", "startHoldOrPauseAlarmManager started");
        Log.i("alarm123", "startHoldOrPauseAlarmManager timer===>" + timer);
        Log.i("alarm123", "startHoldOrPauseAlarmManager status_taskId===>" + status_taskId);
        Log.i("alarm123", "startHoldOrPauseAlarmManager currentTaskStatus===>" + currentTaskStatus);
        Log.i("alarm123", "startHoldOrPauseAlarmManager TimerType===>" + TimerType);
        try {
            enddate = datefor.parse(timer);
            Log.i("task", "End.Date " + enddate);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("alarm123", "startSelfAlarmManager Exception: " + e.getMessage(), "WARN", null);
        }
        SimpleDateFormat timeforend = new SimpleDateFormat("HH:mm");
        SimpleDateFormat Datefor = new SimpleDateFormat("yyyy-MM-dd");
        try {
            endTime = timeforend.format(enddate);
            Log.i("alarm123", "End.Time========> " + endTime);
            endDate = Datefor.parse(Datefor.format(enddate));
            Log.i("alarm123", "endDate===========> " + endDate);

        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("alarm123", "timeforend Exception : " + e.getMessage(), "WARN", null);
        }
        try {
            AlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
            Intent intent = new Intent(this, StatusAlarmManager.class);
            unicid = Integer.parseInt(status_taskId);
            intent.putExtra("id", unicid);
            intent.putExtra("endTime", endTime);
            intent.putExtra("currentProjectId", jobCodeNo);
            intent.putExtra("currentStatus", currentTaskStatus);
            intent.putExtra("timerType", TimerType);
            PendingIntent pendingIntent = PendingIntent.getBroadcast(context, unicid, intent, 0);
            Calendar cal = Calendar.getInstance();
            cal.setTime(endDate);
            cal.set(Calendar.HOUR, Integer.parseInt(endTime.split(":")[0]));
            cal.set(Calendar.MINUTE, Integer.parseInt(endTime.split(":")[1]));
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                alarmManager.setExact(AlarmManager.RTC_WAKEUP, cal.getTimeInMillis(), pendingIntent);
                Log.d("alarm123", "above kitkat");
                Log.d("alarm123", "above kitkat cal.getTimeInMillis()==>" + cal.getTimeInMillis());
            } else {
                alarmManager.set(AlarmManager.RTC_WAKEUP, cal.getTimeInMillis(), pendingIntent);
                Log.d("alarm123", "below kitkat");
            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "AlarmManager Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "AlarmManager Exception : " + e.getMessage(), "WARN", null);
        }
    }

    private void showStatusprogress() {
        handler.post(new Runnable() {
            @Override
            public void run() {
                try {
                    Log.i("expand", "inside show progress--------->");
                    if (progress == null) {
                        progress = new ProgressDialog(context);
                        progress.setCancelable(false);
                        progress.setMessage("Sending...");
                        progress.setProgressStyle(ProgressDialog.STYLE_SPINNER);
                        progress.setProgress(0);
                        progress.setMax(1000);
                        progress.show();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "showStatusprogress() Exception : " + e.getMessage(), "WARN", null);
                }
            }
        });
    }

    private void showprogress() {
        handler.post(new Runnable() {
            @Override
            public void run() {
                try {
                    Log.i("login123", "inside showProgressDialog");
                    if (progress == null)
                        progress = new ProgressDialog(context);
                    progress.setCancelable(false);
                    if (conflict) {
                        progress.setMessage("Checking Conflict.");
                        conflict = false;
                    } else if (Appreference.isRequested_date && !template) {
                        progress.setMessage("Scheduling Reminder Notifications");
                    } else if (accept_task) {
                        progress.setMessage("Please Wait");
                        accept_task = false;
                    } else if (!template && !project && !note) {
                        progress.setMessage("Creating Task");
                    } else if (!project && !note && !chat) {
                        progress.setMessage("Creating Template");
                    } else if (note) {
                        progress.setMessage("Creating Note");
                    } else if (chat) {
                        progress.setMessage("Creating Chat");
                    } else {
                        progress.setMessage("Please wait....");
                    }
                    progress.setProgressStyle(ProgressDialog.STYLE_SPINNER);
                    progress.setProgress(0);
                    progress.setMax(100);
                    progress.show();
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "showprogress() Exception : " + e.getMessage(), "WARN", null);
                }
            }


        });
    }

    public void setNewTask_StaticVariables() {
        try {
            task_No = getFileName();
            category = "Task";
            issueId = "";
            TaskDetailsBean taskDetailsBean = (TaskDetailsBean) getIntent().getSerializableExtra("newTaskBean");
            from_UserName = Appreference.loginuserdetails.getUsername();
            toUserName = taskDetailsBean.getToUserName();
            toUserId = Integer.valueOf(taskDetailsBean.getToUserId());
            ownerOfTask = Appreference.loginuserdetails.getUsername();
            taskReceiver = toUserName;
            taskType = taskDetailsBean.getTaskType();
            Log.d("taskConversation", "after long press taskReceiver  list item click event " + taskType);
            if (taskType != null && taskType.equalsIgnoreCase("Group")) {
                taskStatus = "inprogress";
                groupname = toUserName;
                headerName.setText(toUserName);
            } else {
                String first_lastname = VideoCallDataBase.getDB(context).getname(toUserName);
                headerName.setText(first_lastname);
                taskStatus = "assigned";
            }
            try {
                String node = getIntent().getExtras().getString("node");
                if (node != null && node.equalsIgnoreCase("node")) {
                    taskStatus = "inprogress";
                }
            } catch (Exception e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "setNewTask_StaticVariables  node Exception : " + e.getMessage(), "WARN", null);
            }
            if (!listOfObservers.contains(toUserName)) {
                if (taskType != null && !taskType.equalsIgnoreCase("Group")) {
                    listOfObservers.add(toUserName);
                    listObservers.add(toUserName);
                }
            }
            isTaskName = true;
            groupMemberAccess = VideoCallDataBase.getDB(context).getMemberAccessList(String.valueOf(toUserId));
            gridAccess();
            ownerofTasks();
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "setNewTask_StaticVariables  Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void setProjectHistory_StaticVariable(ProjectDetailsBean projectBean) {
        try {
            project = true;
            if (projectBean.getCatagory() != null) {
                category = projectBean.getCatagory();
                issueId = projectBean.getParentTaskId();
            } else {
                category = "Task";
                issueId = "";
            }
            if (Appreference.loginuserdetails != null && Appreference.loginuserdetails.getUsername() != null && projectBean.getTaskId() != null && !projectBean.getTaskId().equalsIgnoreCase("")) {
                if (projectBean.getToUserName() != null && !projectBean.getToUserName().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                    from_UserName = Appreference.loginuserdetails.getUsername();
                    toUserName = projectBean.getToUserName();
                } else {
                    from_UserName = Appreference.loginuserdetails.getUsername();
                    toUserName = projectBean.getFromUserName();
                }
                if (projectBean.getFromUserId() != null)
                    toUserId = Integer.parseInt(projectBean.getFromUserId());
                taskName = projectBean.getTaskName();
                task_No = projectBean.getTaskNo();
                webtaskId = projectBean.getTaskId();
                ownerOfTask = projectBean.getOwnerOfTask();
                taskType = projectBean.getTaskType();
                projectId = projectBean.getId();
                parentTaskId = projectBean.getParentTaskId();
                isParentTask = projectBean.getIsParentTask();
                taskReceiver = projectBean.getTaskReceiver();
                OracleParentTaskId = projectBean.getParentTaskId();

                if (getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                    taskType = "group";
                }

                VideoCallDataBase.getDB(context).updateBadgeStatus("0", projectId);

//                if (projectBean.getTaskStatus().equalsIgnoreCase("overdue")) {
//                    projectBean.setTaskStatus("inprogress");
//                }
                taskStatus = projectBean.getTaskStatus();
                if (projectBean.getTaskStatus() != null && projectBean.getTaskStatus().equalsIgnoreCase("note")) {
                    template = true;
                    note = true;
                    chat = false;
                    toUserId = VideoCallDataBase.getDB(context).getUserid(projectBean.getTaskObservers());
                    toUserName = projectBean.getTaskReceiver();
                    taskReceiver = projectBean.getTaskReceiver();
                    category = "Note";
                    call.setVisibility(View.GONE);
                    update.setVisibility(View.VISIBLE);
                    addTxt.setVisibility(View.GONE);
                    tagFilter.setVisibility(View.GONE);
                    savetemplate.setVisibility(View.GONE);
                    save.setVisibility(View.GONE);
                    taskGiver.setVisibility(View.GONE);
                    taskgiver.setVisibility(View.GONE);
                    Arrow.setVisibility(View.GONE);
                    Log.i("notifyTaskReceived", "bottom_layout 21 ");
                    if (isProjectFromOracle) {
                        Log.i("gone123", "bottom_layout 0002 ");
                        bottom_layout.setVisibility(View.GONE);
                    }
                    options.setVisibility(View.GONE);
                    barchart.setVisibility(View.GONE);
                    calen_picker.setVisibility(View.GONE);
                    remind_me.setVisibility(View.VISIBLE);
                    reassign_note.setVisibility(View.VISIBLE);
                } else if (projectBean.getFromUserName().equalsIgnoreCase(projectBean.getToUserName())) {
                    VideoCallDataBase.getDB(context).updateTaskNoteStatus(projectBean.getTaskId(), "1");
                } else {
                    template = false;
                    project = true;
                    note = false;
                    chat = false;
                }
                Appreference.webid = webtaskId;
                Log.d("taskConversation", "new project history page");
                Log.i("taskConversation", "appSharedpreferences.getBoolean for taskId is " + appSharedpreferences.getBoolean("syncTask" + webtaskId));
                if (!appSharedpreferences.getBoolean("syncTask" + webtaskId)) {
                    gettaskwebservice();
                    Log.i("taskConversation", "Gettaskwebservice called for taskId is " + webtaskId);
                } else {
//                gettaskwebservicewithtimestamp();
                }
                if (isTaskName) {
                    update.setEnabled(true);
                }
                Log.i("taskConversation", "isTaskName value is " + isTaskName);

                if (taskType != null && taskType.equalsIgnoreCase("Group")) {
                    Log.i("taskConversation", "Group_ToUser id is ==>  " + groupname);
                    Log.i("taskConversation", "Group_ToUser id is ==>  " + toUserId);
                    Log.i("taskConversation", "Group_ToUser id is ==> " + projectBean.getToUserId());
                    try {
                        if (projectBean.getToUserId() != null) {
                            toUserId = Integer.parseInt(projectBean.getToUserId());
                        }
                    } catch (NumberFormatException e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "setProjectHistory_StaticVariable  touserId Exception : " + e.getMessage(), "WARN", null);
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "setProjectHistory_StaticVariable  touserId Exception : " + e.getMessage(), "WARN", null);
                    }
                    try {
                        Log.i("observer", "list clear 9");
                        listOfObservers.clear();
                        projectGroup_Mems = projectBean.getTaskMemberList();
                        if (projectBean.getTaskMemberList() != null) {
                            int counter = 0;
                            for (int i = 0; i < projectGroup_Mems.length(); i++) {
                                if (projectGroup_Mems.charAt(i) == ',') {
                                    counter++;
                                }
                                Log.i("taskConversation", "project_details Task Mem's counter size is == " + counter);
                            }
                            Log.i("taskConversation", "projectBean.getFromUserName() " + projectBean.getFromUserName());
                            for (int j = 0; j < counter + 1; j++) {
                                Log.i("taskConversation", "project_details Task Mem's and position == " + projectGroup_Mems.split(",")[j] + " " + j);
                                if (counter == 0) {
                                    if (!listOfObservers.contains(projectGroup_Mems)) {
                                        listOfObservers.add(projectGroup_Mems);
                                        listObservers.add(projectGroup_Mems);
                                    }
                                } else {
                                    if (projectGroup_Mems.split(",")[j].equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                    } else {
                                        if (!listOfObservers.contains(projectGroup_Mems.split(",")[j])) {
                                            listOfObservers.add(projectGroup_Mems.split(",")[j]);
                                            listObservers.add(projectGroup_Mems.split(",")[j]);
                                        }
                                    }
                                }
                                if (!Appreference.loginuserdetails.getUsername().equalsIgnoreCase(ownerOfTask)) {
                                    if (!listOfObservers.contains(ownerOfTask)) {
                                        listOfObservers.add(ownerOfTask);
                                    }
                                }
                            }
                        }
                        Log.i("taskConversation", "project_details listOfObservers Group " + listOfObservers);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else {
                    toUserId = Integer.parseInt(projectBean.getFromUserId());
                    if (Appreference.loginuserdetails.getId() == toUserId) {
                        if (projectBean.getToUserId() != null && !projectBean.getToUserId().equalsIgnoreCase("") && !projectBean.getToUserId().equalsIgnoreCase(null))
                            toUserId = Integer.parseInt(projectBean.getToUserId());
                    }
                    Log.i("observer", "list clear 8");
                    listOfObservers.clear();
                    if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                        if (!listOfObservers.contains(taskReceiver))
                            listOfObservers.add(taskReceiver);
                        listObservers.add(taskReceiver);
                    } else {
                        if (!listOfObservers.contains(ownerOfTask))
                            listOfObservers.add(ownerOfTask);
                        listObservers.add(ownerOfTask);
                    }
                    Log.i("projects", "listOfMembers in project " + listOfObservers);
                }
                try {
                    if (listOfObservers != null && listOfObservers.size() > 0) {
                        for (int i = 0; i < listOfObservers.size(); i++) {
                            project_toUsers = project_toUsers.concat(listOfObservers.get(i)) + ",";
                        }
                    }
                    if (project_toUsers != null && project_toUsers.contains(",")) {
                        project_toUsers = project_toUsers.substring(0, project_toUsers.length() - 1);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    project_SipUser = new ArrayList<>();
                    if (MainActivity.account.buddyList != null && MainActivity.account.buddyList.size() > 0) {
                        Log.i("sipTest", "Buddy list size()--->" + MainActivity.account.buddyList.size());
                        Log.i("register", " MainActivity.account.buddyList.size()>0 && Buddy Add after register successfully");
                        for (int i = 0; i < MainActivity.account.buddyList.size(); i++) {
                            String name = MainActivity.account.buddyList.get(i).cfg.getUri();
                            tempvalue.put(name, MainActivity.account.buddyList.get(i));
                            Log.i("sipTest", "tempvalue name and values " + name + " " + tempvalue.get(name));
                        }
                        try {
                            for (String Mem_Name : listOfObservers) {
                                if (tempvalue != null && Mem_Name != null) {
                                    String name = "sip:" + Mem_Name + "@" + getResources().getString(R.string.server_ip);
                                    if (!tempvalue.containsKey(name)) {
                                        String b_uri = null;
                                        try {
                                            BuddyConfig cfg = new BuddyConfig();
                                            b_uri = "sip:" + Mem_Name + "@" + getResources().getString(R.string.server_ip);
                                            Log.i("sipTest", "buddy name not in hashmap b_uri" + b_uri);
                                            Appreference.printLog("sipregister", "NewTaskconversation Adding the buddy to hashmap b_uri--->" + b_uri, "DEBUG", null);
                                            cfg.setUri(b_uri);
                                            cfg.setSubscribe(true);
                                            MainActivity.account.addBuddy(cfg);
                                            project_SipUser.add(b_uri);
                                            Appreference.printLog("sipregister", "NewTaskconversation hashmap b_uri buddy sip Added successfully-->" + b_uri, "DEBUG", null);
                                            Log.i("sipTest", "project_SipUser " + project_SipUser.size());
                                        } catch (Resources.NotFoundException e) {
                                            e.printStackTrace();
                                            Log.i("sipTest", "project_SipUser " + project_SipUser.size());
                                            Appreference.printLog("sipregister", "buddy add in my accout-->" + b_uri, "DEBUG", null);
                                        } catch (Exception e) {
                                            e.printStackTrace();
                                            Log.i("sipTest", "project_SipUser " + project_SipUser.size());
                                            Appreference.printLog("sipregister", "buddy add in my accout-->" + b_uri, "DEBUG", null);
                                        }

                                    }
                                }
                            }
                        } catch (Resources.NotFoundException e) {
                            e.printStackTrace();
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                } catch (Resources.NotFoundException e) {
                    e.printStackTrace();
                } catch (Exception e) {
                    e.printStackTrace();
                }
           /* if (VideoCallDataBase.getDB(context).getname(toUserName) != null) {
                String first_lastname = VideoCallDataBase.getDB(context).getname(toUserName);
                headerName.setText(first_lastname);
            } else {
                headerName.setText("Me");
            }*/


                if (projectBean.getTaskName() != null) {
                    if (isProjectFromOracle)
                        headerName.setText("Job Card No :" + JobCodeNo + "\nActivity Code :" + ActivityCode);
                    else
                        headerName.setText(projectBean.getTaskName());

                } else if (taskName != null) {
                    if (isProjectFromOracle)
                        headerName.setText("Job Card No :" + JobCodeNo + "\nActivity Code :" + ActivityCode);
                    else
                        headerName.setText(taskName);

                } else {
                    headerName.setText("projectTask");
                }

                if (Appreference.loginuserdetails.getUsername().equalsIgnoreCase(ownerOfTask)) {
                    taskgiver.setText("Me");
                } else {
                    String task_giver = VideoCallDataBase.getDB(context).getname(ownerOfTask);
                    if (taskReceiver != null && !taskReceiver.equals(null)) {
                        Log.i("task", "task_giver " + task_giver);
                        Log.i("task", "taskReceiver " + taskReceiver);
                        if (task_giver == null || task_giver.equalsIgnoreCase("") || task_giver.equals(null)) {
                            taskgiver.setText(taskReceiver.split("_")[0]);
                        } else {
                            taskgiver.setText(task_giver);
                        }
                    } else {
                        taskgiver.setText(task_giver);
                    }
                }
                groupMemberAccess = VideoCallDataBase.getDB(context).getMemberAccessList(String.valueOf(toUserId));
                gridAccess();
                isTaskName = false;
                /*added for GroupAdmin Observer Start*/
                String GroupAdminObserver = getGroupAdmin_observer_DB();
                 /*added for GroupAdmin Observer End*/
                if (!template) {
                    if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()))
                        ownerofTasks();
                    else if (taskReceiver.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) || (projectBean != null && projectBean.getTaskMemberList() != null && projectBean.getTaskMemberList().contains(Appreference.loginuserdetails.getUsername())))
                        TakerofTasks();
                    else if (projectBean.getTaskObservers() != null && projectBean.getTaskObservers().contains(Appreference.loginuserdetails.getUsername()))
                        ObserverUI();
                    else if (taskType.equalsIgnoreCase("group"))
                        TakerofTasks();

                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "setProjectHistory_StaticVariable Exception : " + e.getMessage(), "WARN", null);
        }
    }

    private String getGroupAdmin_observer_DB() {
        String OraclegroupAdminObserver="";
        try {
            String get_groupAdminobserver_query = "select groupAdminobserver from projectDetails where loginuser = '" + Appreference.loginuserdetails.getEmail() + "'and projectId='" + projectId + "'";
             OraclegroupAdminObserver = VideoCallDataBase.getDB(context).getprojectIdForOracleID(get_groupAdminobserver_query);
            Log.i("observer123", "OraclegroupAdminObserver ====> " + OraclegroupAdminObserver);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return OraclegroupAdminObserver;
    }

    public void ShowApproveIcon() {
        try {
            check_spinner = false;
            if (taskType != null && ownerOfTask != null) {
                Log.i("taskconversation", "ShowApproveIcon...----> " + taskStatus);
                Log.d("task", "after notify press toUserId  list item click event " + taskType);
                if (taskType != null && taskType.equalsIgnoreCase("Group") && Appreference.loginuserdetails.getUsername().equalsIgnoreCase(ownerOfTask)) {
                    Log.i("taskconversation", "ShowApproveIcon...----> if " + taskStatus);
                    if (webtaskId != null) {
                        Log.i("popup", "WebtaskId -->" + webtaskId);
                        listMembers_1 = new ArrayList<>();
                        listMembers_2 = new ArrayList<>();
                        if (project) {
                            ListMember listMem_1 = new ListMember();
                            for (int j = 0; j < listOfObservers.size(); j++) {
                                Log.i("project_details", "Task Mem's and position == " + listOfObservers.get(j) + " " + j);
                                listMem_1.setUsername(listOfObservers.get(j));
                                listMembers_1.add(listMem_1);
                            }
                        } else {
                            listMembers_1 = VideoCallDataBase.getDB(context).getGroupmemberHistory("select * from groupmember where groupid='" + toUserId + "'");
                        }
                        Log.i("popup", "arrayList size is " + listMembers_1);
                        if (listMembers_1.size() > 0) {
                            Log.i("popup", "if inside -->" + listMembers_1.size());
                            int percent_1 = 0;
                            for (ListMember listMember : listMembers_1) {
                                Log.i("popup", "if inside -->" + listMember.getUsername());
                                if (!Appreference.loginuserdetails.getUsername().equalsIgnoreCase(listMember.getUsername())) {
                                    Log.i("popup", "before db line--> " + listMember.getUsername());
                                    if (project) {
                                        String comp_percent = VideoCallDataBase.getDB(context).getProjectParentTaskId("select completedPercentage from projectHistory where projectId='" + projectId + "' and taskId='" + webtaskId + "'");
                                        if (comp_percent != null)
                                            percent_1 = Integer.parseInt(comp_percent);
                                    } else {
                                        percent_1 = VideoCallDataBase.getDB(context).groupPercentageStatus(listMember.getUsername(), webtaskId);
                                    }
                                    Log.i("popup", "after db line percentage is --> " + listMember.getUsername() + " " + percent_1);
                                    listMembers_2.add(String.valueOf(percent_1));
                                }
                            }
                        }
                        for (int i = 0; i < listMembers_2.size(); i++) {
                            Log.i("popup", "after add list !! " + listMembers_2);
                            if (listMembers_2.get(i).equalsIgnoreCase("100")) {
                                Log.i("popup", "isGrp_Percent=true if " + listMembers_1);
                                isGrp_Percent = true;
                                Log.i("popup", "isGrp_Percent=true if " + isGrp_Percent);
                            } else {
                                Log.i("popup", "isGrp_Percent=false else " + isGrp_Percent);
                                isGrp_Percent = false;
                                Log.i("popup", "isGrp_Percent=false else " + isGrp_Percent);
                            }
                            if (!isGrp_Percent)
                                break;
                        }
                        Log.i("popup", "isGrp_Percent ** " + isGrp_Percent);
                        if (isGrp_Percent) {
                            if (project) {
                                final ProjectDetailsBean projectDetailsBean = (ProjectDetailsBean) getIntent().getSerializableExtra("projectHistoryBean");
                                taskStatus = projectDetailsBean.getTaskStatus();
                                webtaskId = projectDetailsBean.getTaskId();
                            } else {
                                final TaskDetailsBean taskDetailsBean = (TaskDetailsBean) getIntent().getSerializableExtra("taskHistoryBean");
                                taskStatus = taskDetailsBean.getTaskStatus();
                                webtaskId = taskDetailsBean.getTaskId();
                            }
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    Log.i("Entry", "handler --> 1 group " + taskStatus);
                                    Log.i("Entry", "handler --> prompt " + AppSharedpreferences.getInstance(context).getBoolean("Prompt" + webtaskId));
                                    if (taskStatus.equalsIgnoreCase("Completed") || taskStatus.equalsIgnoreCase("Closed") || taskStatus.equalsIgnoreCase("Reopen")) {
                                        if (AppSharedpreferences.getInstance(context).getBoolean("Prompt" + webtaskId)) {
//                                        if (closed != null && closed.equalsIgnoreCase("This task is closed") && AppSharedpreferences.getInstance(context).getBoolean("closed" + webtaskId)) {
                                            Log.i("ApproveTask", "handler --> group " + webtaskId);
                                            AppSharedpreferences.getInstance(context).clearBoolean("Prompt" + webtaskId, false);
                                            Log.i("ApproveTask", "percent UI group 30 " + taskStatus);
//                                        }
                                        }
                                        if (taskStatus.equalsIgnoreCase("Completed") || taskStatus.equalsIgnoreCase("Reopen")) {
                                            if (!AppSharedpreferences.getInstance(context).getBoolean("Prompt" + webtaskId)) {
                                                handler.post(new Runnable() {
                                                    @Override
                                                    public void run() {
                                                        if (isParentTask != null && isParentTask.equalsIgnoreCase("Y")) {
                                                            task_approve.setVisibility(View.GONE);
                                                            actorrej.setVisibility(View.GONE);
                                                        } else {
                                                            if (!isProjectFromOracle) {
                                                                Log.i("ApproveTask", "percent UI 4*" + taskStatus);
                                                                task_approve.setVisibility(View.VISIBLE);
                                                                actorrej.setVisibility(View.VISIBLE);
                                                            }
                                                        }
                                                        Log.i("ApproveTask", "percent UI group 3 " + taskStatus);
                                                    }
                                                });
                                            }
                                        } else if (taskStatus.equalsIgnoreCase("Closed")) {
                                            if (!AppSharedpreferences.getInstance(context).getBoolean("Prompt" + webtaskId)) {
                                                handler.post(new Runnable() {
                                                    @Override
                                                    public void run() {
                                                        if (isParentTask != null && isParentTask.equalsIgnoreCase("Y")) {
                                                            task_approve.setVisibility(View.GONE);
                                                            actorrej.setVisibility(View.GONE);
                                                        } else {
                                                            task_approve.setVisibility(View.GONE);
                                                            if (!isProjectFromOracle)
                                                                task_issue.setVisibility(View.VISIBLE);
                                                        }
                                                        Log.i("ApproveTask", "percent individual closed 3 " + taskStatus);
                                                    }
                                                });
                                            }
                                        }
                                    }
                                    /*if (!AppSharedpreferences.getInstance(context).getBoolean("Prompt" + webtaskId)) {
                                        if (isParentTask != null && isParentTask.equalsIgnoreCase("Y")) {
                                            task_approve.setVisibility(View.GONE);
                                            actorrej.setVisibility(View.GONE);
                                        } else {
                                            task_approve.setVisibility(View.VISIBLE);
                                            actorrej.setVisibility(View.VISIBLE);
                                        }
                                        Log.i("ApproveTask", "percent UI 4 " + taskStatus);
                                    }*/
                                }
                            });
                        }
                    }
                } else {
                    Log.i("taskconversation", "ShowApproveIcon...----> else  " + taskStatus);
                    String percent_1 = VideoCallDataBase.getDB(context).getlastCompletedParcentage(webtaskId);
                    Log.i("taskconversation", "ShowApproveIcon...----> else  " + percent_1 + " " + ownerOfTask);
                    if (percent_1 != null && percent_1.equalsIgnoreCase("100") && ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                Log.i("popup", "handler --> 1 " + taskStatus);
//                                String closed = VideoCallDataBase.getDB(context).ClosedChecker(webtaskId);
                                if (taskStatus.equalsIgnoreCase("Completed") || taskStatus.equalsIgnoreCase("Closed") || taskStatus.equalsIgnoreCase("Reopen")) {
                                    Log.i("popup", "handler --> 11 " + AppSharedpreferences.getInstance(context).getBoolean("Prompt" + webtaskId));
                                    if (AppSharedpreferences.getInstance(context).getBoolean("Prompt" + webtaskId)) {
//                                        if (closed != null && closed.equalsIgnoreCase("This task is closed") && AppSharedpreferences.getInstance(context).getBoolean("closed" + webtaskId)) {
                                        Log.i("ApproveTask", "handler --> 1. " + webtaskId);
                                        AppSharedpreferences.getInstance(context).clearBoolean("Prompt" + webtaskId, false);
                                        Log.i("ApproveTask", "percent UI 30 " + taskStatus);
//                                        }
                                    }
                                    if (taskStatus.equalsIgnoreCase("Completed") || taskStatus.equalsIgnoreCase("Reopen")) {
                                        if (!AppSharedpreferences.getInstance(context).getBoolean("Prompt" + webtaskId)) {
                                            handler.post(new Runnable() {
                                                @Override
                                                public void run() {
                                                    if (isParentTask != null && isParentTask.equalsIgnoreCase("Y")) {
                                                        task_approve.setVisibility(View.GONE);
                                                        actorrej.setVisibility(View.GONE);
                                                    } else {
                                                        if (!isProjectFromOracle) {
                                                            Log.i("ApproveTask", "percent UI 5*" + taskStatus);
                                                            task_approve.setVisibility(View.VISIBLE);
                                                            actorrej.setVisibility(View.VISIBLE);
                                                        }
                                                    }
                                                    Log.i("ApproveTask", "percent individual completed 3 " + taskStatus);
                                                }
                                            });
                                        }
                                    } else if (taskStatus.equalsIgnoreCase("Closed")) {
                                        Log.i("popup", "handler --> 12 " + AppSharedpreferences.getInstance(context).getBoolean("Prompt" + webtaskId));
                                        if (!AppSharedpreferences.getInstance(context).getBoolean("Prompt" + webtaskId)) {
                                            handler.post(new Runnable() {
                                                @Override
                                                public void run() {
                                                    if (isParentTask != null && isParentTask.equalsIgnoreCase("Y")) {
                                                        task_approve.setVisibility(View.GONE);
                                                        actorrej.setVisibility(View.GONE);
                                                    } else {
                                                        task_approve.setVisibility(View.GONE);
                                                        if (!isProjectFromOracle)
                                                            task_issue.setVisibility(View.VISIBLE);
                                                    }
                                                    Log.i("ApproveTask", "percent individual closed 3 " + taskStatus);
                                                }
                                            });
                                        }
                                    }
                                }
                            }
                        });
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "ShowApproveIcon Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void addObserverForProject(ProjectDetailsBean projectBean) {
        try {
            String observers;
            Log.i("taskConversation", "Group_ToUser id is " + groupname);
//            toUserId = Integer.parseInt(projectBean.getToUserId());
            observers = projectBean.getTaskObservers();
            if (projectBean.getTaskObservers() != null) {
                int counter = 0;
                for (int i = 0; i < observers.length(); i++) {
                    if (observers.charAt(i) == ',') {
                        counter++;
                    }
                    Log.i("taskConversation", "project_details Task Mem's counter size is == " + counter);
                }
                Log.i("taskConversation", "projectBean.getFromUserName() " + projectBean.getFromUserName());
                for (int j = 0; j < counter + 1; j++) {
                    Log.i("taskConversation", "project_details Task Mem's and position == " + observers.split(",")[j] + " " + j);
                    if (counter == 0) {
                        if (!listOfObservers.contains(observers)) {
                            listOfObservers.add(observers);
                            listObservers.add(observers);
                        }
                    } else {

                        if (!listOfObservers.contains(observers.split(",")[j])) {
                            listOfObservers.add(observers.split(",")[j]);
                            listObservers.add(observers.split(",")[j]);
                        }
                    }
                }
            }

            if (projectBean.getTaskMemberList() != null) {
                int counter_1 = 0;
                for (int i = 0; i < projectBean.getTaskMemberList().length(); i++) {
                    if (projectBean.getTaskMemberList().charAt(i) == ',') {
                        counter_1++;
                    }
                    Log.i("taskConversation", "project_details Task Mem's counter size is == " + counter);
                }
                Log.i("taskConversation", "projectBean.getFromUserName() " + projectBean.getFromUserName());
                for (int j = 0; j < counter_1 + 1; j++) {
                    //                Log.i("taskConversation", "project_details Task Mem's and position == " + observers.split(",")[j] + " " + j);
                    if (counter_1 == 0) {
                        if (!listOfObservers.contains(projectBean.getTaskMemberList())) {
                            listOfObservers.add(projectBean.getTaskMemberList());
                            listObservers.add(projectBean.getTaskMemberList());
                        }
                    } else {

                        if (!listOfObservers.contains(projectBean.getTaskMemberList().split(",")[j])) {
                            listOfObservers.add(projectBean.getTaskMemberList().split(",")[j]);
                            listObservers.add(projectBean.getTaskMemberList().split(",")[j]);
                        }

                    }

                }

            }
            if (Appreference.loginuserdetails != null && !Appreference.loginuserdetails.getUsername().equalsIgnoreCase(ownerOfTask)) {
                if (!listOfObservers.contains(ownerOfTask)) {
                    listOfObservers.add(ownerOfTask);
                }
            }
            if (Appreference.loginuserdetails != null && !Appreference.loginuserdetails.getUsername().equalsIgnoreCase(taskReceiver)) {
                if (!listOfObservers.contains(taskReceiver)) {
                    listOfObservers.add(taskReceiver);
                }
            }
            if (listOfObservers.contains(Appreference.loginuserdetails.getUsername())) {
                listOfObservers.remove(Appreference.loginuserdetails.getUsername());
            }
            Log.i("taskConversation", "project_details listOfObservers Group " + listOfObservers);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "addObserverForProject Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void addNewProjectNote() {
        try {
            fromId = Appreference.loginuserdetails.getId();
            from_UserName = Appreference.loginuserdetails.getUsername();
            ownerOfTask = Appreference.loginuserdetails.getUsername();
            projectId = getIntent().getStringExtra("projectid");
            Log.i("newprojectnote", "project_id * " + projectId);
            category = "note";
            taskStatus = "note";
            Log.i("observer", "list clear 7");
            listOfObservers.clear();
            call.setVisibility(View.GONE);
            update.setVisibility(View.VISIBLE);
            addTxt.setVisibility(View.GONE);
            tagFilter.setVisibility(View.GONE);
            savetemplate.setVisibility(View.GONE);
            save.setVisibility(View.GONE);
            taskGiver.setVisibility(View.GONE);
            taskgiver.setVisibility(View.GONE);
            Arrow.setVisibility(View.GONE);
            Log.i("notifyTaskReceived", "bottom_layout 22 ");
            if (isProjectFromOracle) {
                Log.i("gone123", "bottom_layout 0003 ");
                bottom_layout.setVisibility(View.GONE);
            }
            options.setVisibility(View.GONE);
            if (!isProjectFromOracle)
                sendTemplate.setVisibility(View.VISIBLE);
            calen_picker.setVisibility(View.GONE);
            remind_me.setVisibility(View.VISIBLE);
            reassign_note.setVisibility(View.VISIBLE);
            Log.i("barchat", "visibility 7 **  --> ");
            head.setClickable(false);
            project = true;
            template = true;
            note = true;
            chat = false;
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "addNewProjectNote Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void addNewSubTask() {
        try {
            Log.i("task", "project newsubtask");
            task_No = getFileName();
            fromId = Appreference.loginuserdetails.getId();
            from_UserName = Appreference.loginuserdetails.getUsername();
            ownerOfTask = Appreference.loginuserdetails.getUsername();
            projectId = getIntent().getStringExtra("projectid");
            parentTaskId = getIntent().getStringExtra("parenttaskid");
            project_toUser = new ArrayList<>();
            toUserListOfId = new ArrayList<>();
            project_toUser = (ArrayList<ContactBean>) getIntent().getSerializableExtra("taskMemberList");
            taskReceiver = null;
            toUserId = 0;
            toUserName = null;
            Log.i("observer", "list clear 6");
            listOfObservers.clear();
            taskStatus = "inprogress";
            category = "task";
            headerName.setText("Sub task");
            taskType = "Group";
            if (taskType != null && taskType.equalsIgnoreCase("Individual")) {
                taskReceiver = project_toUser.get(0).getUsername();
                int toid = VideoCallDataBase.getDB(context).getUserid(taskReceiver);
                toUserId = toid;
                toUserName = taskReceiver;
                toUserListOfId.add(toid);
                project_toUsers = taskReceiver;
                listOfObservers.add(taskReceiver);
                listObservers.add(taskReceiver);
                Log.i("taskconversation", "taskReceiver @@  " + taskReceiver + "  " + toUserId + " " + toUserName);
            } else {
                for (ContactBean contactBean : project_toUser) {
//                if (!contactBean.getUsername().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                    listOfObservers.add(contactBean.getUsername());
                    listObservers.add(contactBean.getUsername());
                    int toid = VideoCallDataBase.getDB(context).getUserid(contactBean.getUsername());
                    toUserListOfId.add(toid);
                    project_toUsers = project_toUsers.concat(contactBean.getUsername()) + ",";
//                }
                }
                project_toUsers = project_toUsers.substring(0, project_toUsers.length() - 1);
            }
            Log.i("taskconversation", "project_toUsers " + project_toUsers);
            template = false;
            note = false;
            chat = false;
            project = true;
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "addNewSubTask Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void addIssuesEntry() {
        try {
            task_No = getFileName();
            Log.d("task", "task_No   auto generate " + task_No);
            Log.i("task", "New task");
            Log.i("taskconversation", "getIntent @@@@@  " + taskStatus);
            toUserId = getIntent().getExtras().getInt("toUserId");
            toUserName = getIntent().getExtras().getString("toUserName");
            from_UserName = getIntent().getExtras().getString("userName");
            String val = getIntent().getExtras().getString("chvalue");
            taskType = getIntent().getExtras().getString("type");
            task_catagory = getIntent().getExtras().getString("task");
            ownerOfTask = Appreference.loginuserdetails.getUsername();
            taskReceiver = toUserName;
            groupname = toUserName;
            taskStatus = "assigned";
            if (task_catagory != null && task_catagory.equalsIgnoreCase("newissue")) {
                category = "issue";
                issueId = getIntent().getExtras().getString("parentId");
                String vlaue = getIntent().getExtras().getString("project");
                if (vlaue.equalsIgnoreCase("true")) {
                    project = true;
                    projectId = getIntent().getExtras().getString("projectid");
                } else
                    project = false;
            } else {
                category = "Task";
            }
            if (!listOfObservers.contains(toUserName) && !taskType.equalsIgnoreCase("Group")) {
                listOfObservers.add(toUserName);
                listObservers.add(toUserName);
            }

            Log.d("taskConversation", " project check  2  " + project + " taskType   " + taskType);
            toUserListOfId = new ArrayList<>();
            if (project) {
//                int toid = VideoCallDataBase.getDB(context).getUserid(taskReceiver);
//                toUserId = toid;
//                toUserName = taskReceiver;
                project_toUsers = taskReceiver;
                String tousers = VideoCallDataBase.getDB(context).getProjectParentTaskId("select taskMemberList from projectHistory where taskId='" + issueId + "'");
                if (tousers != null) {
                    int counter = 0;
                    for (int i = 0; i < tousers.length(); i++) {
                        if (tousers.charAt(i) == ',') {
                            counter++;
                        }
                        Log.i("taskConversation", "project_details Task Mem's counter size is == " + counter);
                    }
                    Log.i("taskConversation", "projectBean.getFromUserName() " + tousers);
                    project_toUsers = "";
                    toUserListOfId.clear();
                    for (int j = 0; j < counter + 1; j++) {
                        if (counter == 0) {
                            if (!listOfObservers.contains(tousers)) {
                                toUserListOfId.add(VideoCallDataBase.getDB(context).getUserid(tousers));
                                project_toUsers = tousers;
                                listOfObservers.add(tousers);
                                listObservers.add(tousers);
                            }
                        } else {
                            Log.i("taskConversation", "project_details Task Mem's and position == " + tousers.split(",")[j] + " " + j);
                            if (tousers.split(",")[j].equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                            } else {
                                if (!listOfObservers.contains(tousers.split(",")[j])) {
                                    toUserListOfId.add(VideoCallDataBase.getDB(context).getUserid(tousers.split(",")[j]));
                                    project_toUsers = project_toUsers.concat(tousers.split(",")[j]) + ",";
                                    listOfObservers.add(tousers.split(",")[j]);
                                    listObservers.add(tousers.split(",")[j]);
                                }
                            }
                        }
                        if (!Appreference.loginuserdetails.getUsername().equalsIgnoreCase(ownerOfTask)) {
                            if (!listOfObservers.contains(ownerOfTask)) {
                                listOfObservers.add(ownerOfTask);
                            }
                        }
                    }
                    if (project_toUsers != null && project_toUsers.contains(",")) {
                        project_toUsers = project_toUsers.substring(0, project_toUsers.length() - 1);
                    }
                }
                taskStatus = "inprogress";
                if (!listOfObservers.contains(taskReceiver)) {
                    listOfObservers.add(taskReceiver);
                    listObservers.add(taskReceiver);
                }
            } else if (taskType != null && taskType.equalsIgnoreCase("Group")) {
                taskStatus = "inprogress";
            }
            Log.d("taskConversation", "new project history below page 2");
            ownerOfTask = Appreference.loginuserdetails.getUsername();
            Log.d("taskConversation", "new project history below page 2");
            Log.d("task", "after long press toUserId  list item click event " + toUserId);
            Log.d("task", "after long press toUserName  list item click event " + toUserName);
            Log.d("task", "after long press toUserName  list item click event " + from_UserName);
            Log.d("task", "after long press taskReceiver  list item click event " + taskReceiver);
            Log.d("task", "after long press " + toUserName);

            if (!taskType.equalsIgnoreCase("Group")) {
                String first_lastname = VideoCallDataBase.getDB(context).getname(toUserName);
                headerName.setText(first_lastname);
            } else {
                String header_name = VideoCallDataBase.getDB(context).getProjectParentTaskId("select groupname from group1 where groupid='" + toUserId + "';");
                Log.d("task", "header_name ## " + header_name);
                headerName.setText(header_name);
                addObserver.setVisibility(View.GONE);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "addIssuesEntry Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void setTaskHistory_StaticVariables(TaskDetailsBean tasksBean) {
        try {
            groupname = tasksBean.getToUserId();
            Log.i("taskConversation", "group name" + groupname);
            category = tasksBean.getCatagory();
            task_catagory = category;
            issueId = tasksBean.getIssueId();
            if (tasksBean.getTaskType() != null && tasksBean.getTaskType().equalsIgnoreCase("Group")) {
                tasksBean.setToUserName(VideoCallDataBase.getDB(context).getGroupName(groupname));
            }
            if (tasksBean.getTaskId() != null && !tasksBean.getTaskId().equalsIgnoreCase("")) {
                if (tasksBean.getToUserName() != null && !tasksBean.getToUserName().equalsIgnoreCase("") && !tasksBean.getToUserName().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                    from_UserName = Appreference.loginuserdetails.getUsername();
                    toUserName = tasksBean.getToUserName();
                } else {
                    from_UserName = Appreference.loginuserdetails.getUsername();
                    toUserName = tasksBean.getFromUserName();
                }
                if (tasksBean.getToUserId() != null && !tasksBean.getToUserId().equalsIgnoreCase(""))
                    toUserId = Integer.parseInt(tasksBean.getToUserId());
                taskName = tasksBean.getTaskName();
                task_No = tasksBean.getTaskNo();
                webtaskId = tasksBean.getTaskId();
                ownerOfTask = tasksBean.getOwnerOfTask();
                if (tasksBean.getTaskReceiver() != null && !tasksBean.getTaskReceiver().equalsIgnoreCase("")) {
                    taskReceiver = tasksBean.getTaskReceiver();
                } else {
                    taskReceiver = tasksBean.getOwnerOfTask();
                }
                if (tasksBean.getCatagory() != null && tasksBean.getCatagory().equalsIgnoreCase("note")) {
                    template = true;
                    note = true;
                    chat = false;
                    toUserId = VideoCallDataBase.getDB(context).getUserid(tasksBean.getTaskObservers());
                    toUserName = tasksBean.getTaskReceiver();
                    taskReceiver = tasksBean.getTaskReceiver();
                }
//            taskReceiver = tasksBean.getTaskReceiver();
                taskStatus = tasksBean.getTaskStatus();
                taskType = tasksBean.getTaskType();
                Log.d("taskConversation", "new task history page");
                Appreference.webid = webtaskId;
                Log.i("taskConversation", "appSharedpreferences.getBoolean for taskId is " + appSharedpreferences.getBoolean("syncTask" + webtaskId));
                if (!appSharedpreferences.getBoolean("syncTask" + webtaskId)) {
                    gettaskwebservice();
                    if (category != null && category.equalsIgnoreCase("null")) {
                        category = "Task";
                    }
                    Log.i("taskConversation", "Gettaskwebservice called for taskId is " + webtaskId);
                } else {
//                gettaskwebservicewithtimestamp();
                }
                Log.i("taskConversation", "isTaskName value is " + isTaskName);
                if (!Appreference.loginuserdetails.getUsername().equals(ownerOfTask)) {
                    if (!listOfObservers.contains(ownerOfTask))
                        listOfObservers.add(ownerOfTask);
                    listObservers.add(ownerOfTask);
                }
                if (!Appreference.loginuserdetails.getUsername().equals(taskReceiver)) {
                    if (!listOfObservers.contains(taskReceiver))
                        listOfObservers.add(taskReceiver);
                    listObservers.add(taskReceiver);
                }
                ContactBean contactBean;
                if (taskReceiver.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                    contactBean = VideoCallDataBase.getDB(context).getContactObject(ownerOfTask);
                    Log.i("taskConversation", "query is ownerOfTask userId is " + contactBean.getUserid());
                } else if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                    contactBean = VideoCallDataBase.getDB(context).getContactObject(taskReceiver);
                    Log.i("taskConversation", "query is taskReceiver userId is " + contactBean.getUserid());
                } else {
                    contactBean = VideoCallDataBase.getDB(context).getContactObject(ownerOfTask);
                    Log.i("taskConversation", "query is userId is " + contactBean.getUserid());
                }
                toUserId = contactBean.getUserid();
                if (taskType.equalsIgnoreCase("Group")) {
                    Log.i("taskConversation", "Group_ToUser id" + groupname);
                    toUserId = Integer.parseInt(groupname);
                } else {
                    toUserId = contactBean.getUserid();
                }
                head.setText(tasksBean.getTaskName());
                if (Appreference.loginuserdetails.getUsername().equalsIgnoreCase(ownerOfTask)) {
                    taskgiver.setText("Me");
                } else {
                    String task_giver = VideoCallDataBase.getDB(context).getname(ownerOfTask);
                    if (taskReceiver != null && !taskReceiver.equals(null)) {
                        Log.i("task", "task_giver " + task_giver);
                        Log.i("task", "taskReceiver " + taskReceiver);
                        if (task_giver == null || task_giver.equalsIgnoreCase("") || task_giver.equals(null)) {
                            taskgiver.setText(taskReceiver.split("_")[0]);
                        } else {
                            taskgiver.setText(task_giver);
                        }
                    } else {
                        taskgiver.setText(task_giver);
                    }
                }
                if (toUserId > 0) {
                    toUserName = VideoCallDataBase.getDB(context).getTemplateTouserName(String.valueOf(toUserId));
                }
                isTaskName = false;
                groupMemberAccess = VideoCallDataBase.getDB(context).getMemberAccessList(String.valueOf(toUserId));
                gridAccess();

//            if (!template) {
                if (ownerOfTask != null && ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()))
                    ownerofTasks();
                else if (taskReceiver != null && taskReceiver.equalsIgnoreCase((Appreference.loginuserdetails.getUsername())))
                    TakerofTasks();
                else if (tasksBean.getTaskObservers() != null && tasksBean.getTaskObservers().contains(Appreference.loginuserdetails.getUsername()))
                    ObserverUI();
                else if (taskType.equalsIgnoreCase("group"))
                    TakerofTasks();
//            } else {
//                ObserverUI();
//            }

                if (tasksBean.getProjectId() != null && !tasksBean.getProjectId().equalsIgnoreCase("") && !tasksBean.getProjectId().equalsIgnoreCase("null")) {
                    project = true;
                    template = false;
                    note = false;
                    chat = false;
                    isTaskName = false;
                    projectId = tasksBean.getProjectId();
                    Log.i("task", "project isTaskName inside " + project + " " + isTaskName);
                }
                Log.i("task", "project isTaskName " + project + " " + isTaskName);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "setTaskHistory_StaticVariables Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void setTemplate_StaticVariables() {
        try {
            fromId = Appreference.loginuserdetails.getId();
            from_UserName = Appreference.loginuserdetails.getUsername();
            toUserId = 0;
            toUserName = null;
            taskReceiver = null;
            Log.i("observer", "list clear 5");
            listOfObservers.clear();
            call.setVisibility(View.GONE);
            update.setVisibility(View.GONE);
            addTxt.setVisibility(View.GONE);
            tagFilter.setVisibility(View.GONE);
            addObserver.setVisibility(View.GONE);
            savetemplate.setVisibility(View.GONE);
            save.setVisibility(View.GONE);
            if (isProjectFromOracle) {
                taskGiver.setVisibility(View.VISIBLE);
                taskgiver.setVisibility(View.VISIBLE);
            } else {
                ownerOfTask = Appreference.loginuserdetails.getUsername();
                taskGiver.setVisibility(View.GONE);
                taskgiver.setVisibility(View.GONE);
            }
            if (Appreference.loginuserdetails.getUsername().equalsIgnoreCase(ownerOfTask)) {
                taskgiver.setText("Me");
                Log.i("task", "ownerOfTask 3 " + ownerOfTask);
            } else {
                String task_giver = VideoCallDataBase.getDB(context).getname(ownerOfTask);
                if (taskReceiver != null && !taskReceiver.equals(null)) {
                    Log.i("task", "task_giver " + task_giver);
                    Log.i("task", "taskReceiver " + taskReceiver);
                    if (task_giver == null || task_giver.equalsIgnoreCase("") || task_giver.equals(null)) {
                        taskgiver.setText(taskReceiver.split("_")[0]);
                    } else {
                        taskgiver.setText(task_giver);
                    }
                } else {
                    taskgiver.setText(task_giver);
                }
            }
            Arrow.setVisibility(View.GONE);
            Log.i("notifyTaskReceived", "bottom_layout 23 ");
            if (isProjectFromOracle) {
                Log.i("gone123", "bottom_layout 0004 ");
                bottom_layout.setVisibility(View.GONE);
            }
            options.setVisibility(View.GONE);
            head.setClickable(false);
            template = true;
            note = false;
            chat = false;
            template_form.setVisibility(View.VISIBLE);
            notifyUI();
            taskStatus = "draft";
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "setTemplate_StaticVariables Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void setNote_StaticVariables() {
        try {
            fromId = Appreference.loginuserdetails.getId();
            from_UserName = Appreference.loginuserdetails.getUsername();
            ownerOfTask = Appreference.loginuserdetails.getUsername();
            category = "note";
            Log.i("observer", "list clear 4");
            listOfObservers.clear();
            listOfObservers.add(ownerOfTask);
            call.setVisibility(View.GONE);
            update.setVisibility(View.VISIBLE);
            addTxt.setVisibility(View.GONE);
            tagFilter.setVisibility(View.GONE);
            savetemplate.setVisibility(View.GONE);
            save.setVisibility(View.GONE);
            taskGiver.setVisibility(View.GONE);
            taskgiver.setVisibility(View.GONE);
            Arrow.setVisibility(View.GONE);
            options.setVisibility(View.GONE);
            barchart.setVisibility(View.GONE);
            calen_picker.setVisibility(View.GONE);
            remind_me.setVisibility(View.VISIBLE);
            reassign_note.setVisibility(View.VISIBLE);
            notifyUI();
            head.setClickable(false);
            template = true;
            note = true;
            chat = false;
            taskStatus = "inprogress";
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "setNote_StaticVariables Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void setChat_StaticVariables() {
        try {
            fromId = Appreference.loginuserdetails.getId();
            from_UserName = Appreference.loginuserdetails.getUsername();
            ownerOfTask = Appreference.loginuserdetails.getUsername();
            Log.i("observer", "list clear 3");
            listOfObservers.clear();
            subType = "normal";
            if (taskType.equalsIgnoreCase("individual")) {
                toUserId = Integer.parseInt(getIntent().getExtras().getString("touserid"));
                toUserName = getIntent().getExtras().getString("touser");
                taskReceiver = getIntent().getExtras().getString("touser");
                headerName.setText(VideoCallDataBase.getDB(context).getName(toUserName));
                listOfObservers.add(toUserName);
            } else {
                groupname = toUserName;
                toUserId = Integer.parseInt(getIntent().getExtras().getString("touserid"));
                toUserName = getIntent().getExtras().getString("touser");
                taskReceiver = getIntent().getExtras().getString("touser");
                headerName.setText(toUserName);
                if (!listOfObservers.contains(toUserName)) {
                    listOfObservers.add(toUserName);
                    listObservers.add(toUserName);
                }
            }
            call.setVisibility(View.VISIBLE);
            update.setVisibility(View.GONE);
            addTxt.setVisibility(View.GONE);
            tagFilter.setVisibility(View.GONE);
            addObserver.setVisibility(View.GONE);
            savetemplate.setVisibility(View.GONE);
            save.setVisibility(View.GONE);
            taskGiver.setVisibility(View.GONE);
            taskgiver.setVisibility(View.GONE);
            Arrow.setVisibility(View.GONE);
            options.setVisibility(View.GONE);
            head.setClickable(false);
            calen_picker.setVisibility(View.GONE);
            task_accept_layout.setVisibility(View.GONE);
            remind_me.setVisibility(View.GONE);
            template = true;
            note = false;
            chat = true;
            taskStatus = "assigned";
            Log.i("chat", "inside touserid" + toUserId);
            Log.i("chat", "inside listobserver" + listOfObservers.size());
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "setChat_StaticVariables Exception : " + e.getMessage(), "WARN", null);
        }
    }


    public void setChat_StaticVariables(TaskDetailsBean chat_staticVariables) {
        try {
            groupname = chat_staticVariables.getToUserId();
            subType = "normal";
            if (chat_staticVariables.getTaskType().equalsIgnoreCase("group")) {
                chat_staticVariables.setToUserName(VideoCallDataBase.getDB(context).getGroupName(groupname));
                headerName.setText(VideoCallDataBase.getDB(context).getGroupName(groupname));
            } else {
                headerName.setText(VideoCallDataBase.getDB(context).getName(chat_staticVariables.getToUserName()));
            }
            if (chat_staticVariables.getTaskId() != null && !chat_staticVariables.getTaskId().equalsIgnoreCase("")) {
                if (!chat_staticVariables.getToUserName().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                    from_UserName = Appreference.loginuserdetails.getUsername();
                    toUserName = chat_staticVariables.getToUserName();
                } else {
                    from_UserName = Appreference.loginuserdetails.getUsername();
                    toUserName = chat_staticVariables.getFromUserName();
                }
                if (chat_staticVariables.getFromUserId() != null)
                    toUserId = Integer.parseInt(chat_staticVariables.getToUserId());
                taskName = chat_staticVariables.getTaskName();
                task_No = chat_staticVariables.getTaskNo();
                webtaskId = chat_staticVariables.getTaskId();
                ownerOfTask = chat_staticVariables.getOwnerOfTask();
                taskReceiver = chat_staticVariables.getTaskReceiver();
                taskStatus = chat_staticVariables.getTaskStatus();
                taskType = chat_staticVariables.getTaskType();
                Log.d("taskConversation", "new task history page");
                Appreference.webid = webtaskId;
                Log.i("taskConversation", "appSharedpreferences.getBoolean for taskId is " + appSharedpreferences.getBoolean("syncTask" + webtaskId));
                if (!appSharedpreferences.getBoolean("syncTask" + webtaskId)) {
                    if (category != null && category.equalsIgnoreCase("null")) {
                        category = "Task";
                    }
                    Log.i("taskConversation", "Gettaskwebservice called for taskId is " + webtaskId);
                }

                if (!Appreference.loginuserdetails.getUsername().equals(ownerOfTask)) {
                    if (!listOfObservers.contains(ownerOfTask))
                        listOfObservers.add(ownerOfTask);
                    listObservers.add(ownerOfTask);
                }
                if (!Appreference.loginuserdetails.getUsername().equals(taskReceiver)) {
                    if (!listOfObservers.contains(taskReceiver))
                        listOfObservers.add(taskReceiver);
                    listObservers.add(taskReceiver);
                }
                ContactBean contactBean;
                if (taskReceiver.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                    contactBean = VideoCallDataBase.getDB(context).getContactObject(ownerOfTask);
                    Log.i("taskConversation", "query is ownerOfTask userId is ! " + contactBean.getUserid());
                } else if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                    contactBean = VideoCallDataBase.getDB(context).getContactObject(taskReceiver);
                    Log.i("taskConversation", "query is taskReceiver userId is ! " + contactBean.getUserid());
                } else {
                    contactBean = VideoCallDataBase.getDB(context).getContactObject(ownerOfTask);
                    Log.i("taskConversation", "query is userId is " + contactBean.getUserid());
                }
                toUserId = contactBean.getUserid();
                if (taskType.equalsIgnoreCase("Group")) {
                    Log.i("taskConversation", "Group_ToUser id" + groupname);
                    toUserId = Integer.parseInt(groupname);
                } else {
                    toUserId = contactBean.getUserid();
                }
            }
            fromId = Appreference.loginuserdetails.getId();

            call.setVisibility(View.VISIBLE);
            update.setVisibility(View.GONE);
            addTxt.setVisibility(View.GONE);
            tagFilter.setVisibility(View.GONE);
            addObserver.setVisibility(View.GONE);
            savetemplate.setVisibility(View.GONE);
            save.setVisibility(View.GONE);
            taskGiver.setVisibility(View.GONE);
            taskgiver.setVisibility(View.GONE);
            Arrow.setVisibility(View.GONE);
            options.setVisibility(View.GONE);
            head.setClickable(false);
            calen_picker.setVisibility(View.GONE);
            task_accept_layout.setVisibility(View.GONE);
            sendTemplate.setVisibility(View.GONE);
            barchart.setVisibility(View.GONE);
            template = true;
            note = false;
            chat = true;
            Log.i("chat", "inside touserid" + toUserId);
            Log.i("chat", "inside listobserver" + listOfObservers.size());
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "setChat_StaticVariables Exception : " + e.getMessage(), "WARN", null);
        }
    }


    private void showprogressforpriority(final String name) {
        Log.i("getTask123", "gettaskwebservice showprogressforpriority*************");

        handler.post(new Runnable() {
            @Override
            public void run() {
                try {
                    if (progress == null || !progress.isShowing()) {
                        Log.i("login123", "inside showProgressDialog");
                        progress = new ProgressDialog(NewTaskConversation.this);
                        progress.setCancelable(false);
                        progress.setMessage(name);
                        progress.setProgressStyle(ProgressDialog.STYLE_SPINNER);
                        progress.setProgress(0);
                        progress.setMax(100);
                        progress.show();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Log.i("getTask123", "Exception showprogressforpriority*************" + e.getMessage());
                    Appreference.printLog("NewTaskConversation", "showprogressforpriority Exception : " + e.getMessage(), "WARN", null);
                }
            }
        });
    }

    private void show_CallProgress(final String msg) {
        handler.post(new Runnable() {
            @Override
            public void run() {
                try {
                    Log.i("login123", "inside showProgressDialog");
                    progress = new ProgressDialog(NewTaskConversation.this);
                    progress.setCancelable(false);
                    progress.setMessage(msg);
                    progress.setProgressStyle(ProgressDialog.STYLE_SPINNER);
                    progress.setProgress(0);
                    progress.setMax(100);
                    progress.show();
                } catch (Exception e) {
                    e.printStackTrace();
                    Log.i("getTask123", "Exception show_CallProgress*************" + e.getMessage());
                    Appreference.printLog("NewTaskConversation", "show_CallProgress Exception : " + e.getMessage(), "WARN", null);
                }
            }
        });
    }

    public void cancelDialog() {
        try {
            if (progress != null && progress.isShowing()) {
                Log.i("register", "--progress bar end-----");
                Log.i("getTask123", "getTask cancelDialog*************");
                progress.dismiss();
                Appreference.isRequested_date = false;
                progress = null;
            }
        } catch (Exception e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "cancelDialog Exception : " + e.getMessage(), "WARN", null);
            Log.i("getTask123", "getTask cancelDialog Exception*************" + e.getMessage());
        }

    }

    public void notifypostEntryResponse(final String values) {
        Log.i("postEntry", "NewTaskactivity  notifypostEntryResponse method");
        try {
            handler.post(new Runnable() {
                @Override
                public void run() {
                    cancelDialog();
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "notifypostEntryResponse Exception : " + e.getMessage(), "WARN", null);
        }
    }

    private void sendTaskInformationMessage(final String val) {
        handler.post(new Runnable() {
            @Override
            public void run() {
                xmlparser xmlParser = new xmlparser();
                TaskDetailsBean taskDetailsBean = xmlParser.parsePositiveTaskResponse(val);
                if (xmlComposer == null) {
                    xmlComposer = new xmlcomposer();
                }
                String tasksipxml = xmlComposer.composeTaskDetailsinfo(common_taskDetailsBean);
                Log.i("Task", "composed tasksipxml : " + tasksipxml + " \n to user " + toUserName);
                String tousersipendpoint = "sip:" + toUserName + "@" + getResources().getString(R.string.server_ip);
                for (int i = 0; i < MainActivity.account.buddyList.size(); i++) {
                    String name = MainActivity.account.buddyList.get(i).cfg.getUri();
                    if (name.equalsIgnoreCase(tousersipendpoint)) {
                        MyBuddy myBuddy = MainActivity.account.buddyList.get(i);
                        SendInstantMessageParam prm = new SendInstantMessageParam();
                        prm.setContent(tasksipxml);
                        boolean valid = myBuddy.isValid();
                        Log.i("Task", "valid ======= " + valid);
                        try {
                            myBuddy.sendInstantMessage(prm);
                        } catch (Exception e) {
                            e.printStackTrace();
                            Appreference.printLog("NewTaskConversation", "sendTaskInformationMessage Exception : " + e.getMessage(), "WARN", null);
                        }
                    }
                }
                NewTaskConversation.this.finish();
            }
        });
    }

    private String encodeFileToBase64Binary(String fileName) throws IOException {
        String encodedString = null;
        try {
            File file = new File(fileName);
            byte[] bytes = loadFile(file);
            byte[] encoded = org.apache.commons.codec.binary.Base64.encodeBase64(bytes);
            encodedString = new String(encoded);
        } catch (IOException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "encodeFileToBase64Binary Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "encodeFileToBase64Binary Exception : " + e.getMessage(), "WARN", null);
        }
        return encodedString;
    }

    private String encodeTobase64(Bitmap image) {
        String imageEncoded = null;
        try {
            Bitmap immagex = image;
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            immagex.compress(Bitmap.CompressFormat.JPEG, 75, baos);
            byte[] b = baos.toByteArray();
            imageEncoded = Base64.encodeToString(b, Base64.DEFAULT);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "encodeTobase64 Exception : " + e.getMessage(), "WARN", null);
        }
        return imageEncoded;
    }

    private String encodeAudioVideoToBase64(String path) {
        String strFile = null;
        try {
            strFile = null;
            File file = new File(path);
            FileInputStream file1 = new FileInputStream(file);
            byte[] Bytearray = new byte[(int) file.length()];
            file1.read(Bytearray);
            strFile = Base64.encodeToString(Bytearray, Base64.DEFAULT);//Convert byte array into string

        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "encodeAudioVideoToBase64 Exception : " + e.getMessage(), "WARN", null);
        }
        return strFile;
    }

    private Bitmap reduceFileSize(File f) {
        try {
            //Decode image size
            BitmapFactory.Options o = new BitmapFactory.Options();
            o.inJustDecodeBounds = true;
            BitmapFactory.decodeStream(new FileInputStream(f), null, o);
            //The new size we want to scale to
            final int REQUIRED_SIZE = 70;
            //Find the correct scale value. It should be the power of 2.
            int scale = 1;
            while (o.outWidth / scale / 2 >= REQUIRED_SIZE && o.outHeight / scale / 2 >= REQUIRED_SIZE)
                scale *= 2;
            //Decode with inSampleSize
            BitmapFactory.Options o2 = new BitmapFactory.Options();
            o2.inSampleSize = scale;
            return BitmapFactory.decodeStream(new FileInputStream(f), null, o2);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "reduceFileSize Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "reduceFileSize Exception : " + e.getMessage(), "WARN", null);
        }
        return null;
    }

    public String compressImage(String imageUri) {
        String filename = null;
        try {
            String filePath = imageUri;
            Bitmap scaledBitmap = null;
            BitmapFactory.Options options = new BitmapFactory.Options();
//      by setting this field as true, the actual bitmap pixels are not loaded in the memory. Just the bounds are loaded. If
//      you try the use the bitmap here, you will get null.
            options.inJustDecodeBounds = true;
            Bitmap bmp = BitmapFactory.decodeFile(filePath, options);
            int actualHeight = options.outHeight;
            int actualWidth = options.outWidth;
//      max Height and width values of the compressed image is taken as 816x612
            float maxHeight = 816.0f;
            float maxWidth = 612.0f;
            float imgRatio = actualWidth / actualHeight;
            float maxRatio = maxWidth / maxHeight;
//      width and height values are set maintaining the aspect ratio of the image
            if (actualHeight > maxHeight || actualWidth > maxWidth) {
                if (imgRatio < maxRatio) {
                    imgRatio = maxHeight / actualHeight;
                    actualWidth = (int) (imgRatio * actualWidth);
                    actualHeight = (int) maxHeight;
                } else if (imgRatio > maxRatio) {
                    imgRatio = maxWidth / actualWidth;
                    actualHeight = (int) (imgRatio * actualHeight);
                    actualWidth = (int) maxWidth;
                } else {
                    actualHeight = (int) maxHeight;
                    actualWidth = (int) maxWidth;
                }
            }
            //      setting inSampleSize value allows to load a scaled down version of the original image
            options.inSampleSize = calculateInSampleSize(options, actualWidth, actualHeight);
//      inJustDecodeBounds set to false to load the actual bitmap
            options.inJustDecodeBounds = false;
//      this options allow android to claim the bitmap memory if it runs low on memory
            options.inPurgeable = true;
            options.inInputShareable = true;
            options.inTempStorage = new byte[16 * 1024];
            try {
                //          load the bitmap from its path
                bmp = BitmapFactory.decodeFile(filePath, options);
            } catch (OutOfMemoryError e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "compressImage Exception : " + e.getMessage(), "WARN", null);
            } catch (Error e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "compressImage Exception : " + e.getMessage(), "WARN", null);
            }
            try {
                scaledBitmap = Bitmap.createBitmap(actualWidth, actualHeight, Bitmap.Config.ARGB_8888);
            } catch (OutOfMemoryError e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "compressImage Exception : " + e.getMessage(), "WARN", null);
            } catch (Error e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "compressImage Exception : " + e.getMessage(), "WARN", null);
            }
            float ratioX = actualWidth / (float) options.outWidth;
            float ratioY = actualHeight / (float) options.outHeight;
            float middleX = actualWidth / 2.0f;
            float middleY = actualHeight / 2.0f;
            Matrix scaleMatrix = new Matrix();
            scaleMatrix.setScale(ratioX, ratioY, middleX, middleY);
            Canvas canvas = new Canvas(scaledBitmap);
            canvas.setMatrix(scaleMatrix);
            canvas.drawBitmap(bmp, middleX - bmp.getWidth() / 2, middleY - bmp.getHeight() / 2, new Paint(Paint.FILTER_BITMAP_FLAG));
//      check the rotation of the image and display it properly
            ExifInterface exif;
            try {
                exif = new ExifInterface(filePath);
                int orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, 0);
                Log.d("EXIF", "Exif: " + orientation);
                Matrix matrix = new Matrix();
                if (orientation == 6) {
                    matrix.postRotate(90);
                    Log.d("EXIF", "Exif: " + orientation);
                } else if (orientation == 3) {
                    matrix.postRotate(180);
                    Log.d("EXIF", "Exif: " + orientation);
                } else if (orientation == 8) {
                    matrix.postRotate(270);
                    Log.d("EXIF", "Exif: " + orientation);
                }
                scaledBitmap = Bitmap.createBitmap(scaledBitmap, 0, 0,
                        scaledBitmap.getWidth(), scaledBitmap.getHeight(), matrix,
                        true);
            } catch (IOException e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "compressImage Exception : " + e.getMessage(), "WARN", null);
            } catch (Exception e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "compressImage Exception : " + e.getMessage(), "WARN", null);
            }

            FileOutputStream out = null;
            filename = imageUri;
            try {
                out = new FileOutputStream(filename);
                //          write the compressed bitmap at the destination specified by filename.
                scaledBitmap.compress(Bitmap.CompressFormat.JPEG, 80, out);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "compressImage Exception : " + e.getMessage(), "WARN", null);
            } catch (Exception e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "compressImage Exception : " + e.getMessage(), "WARN", null);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "compressImage Exception : " + e.getMessage(), "WARN", null);
        }
        return filename;
    }

    public int calculateInSampleSize(BitmapFactory.Options options, int reqWidth, int reqHeight) {
        int inSampleSize = 0;
        try {
            final int height = options.outHeight;
            final int width = options.outWidth;
            inSampleSize = 1;
            if (height > reqHeight || width > reqWidth) {
                final int heightRatio = Math.round((float) height / (float) reqHeight);
                final int widthRatio = Math.round((float) width / (float) reqWidth);
                inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio;
            }
            final float totalPixels = width * height;
            final float totalReqPixelsCap = reqWidth * reqHeight * 2;
            while (totalPixels / (inSampleSize * inSampleSize) > totalReqPixelsCap) {
                inSampleSize++;
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "calculateInSampleSize Exception : " + e.getMessage(), "WARN", null);
        }
        return inSampleSize;
    }

    public TaskDetailsBean beanValue() {
        final TaskDetailsBean chatBean = new TaskDetailsBean();
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String dateTime = dateFormat.format(new Date());
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            String dateforrow = dateFormat.format(new Date());
            tasktime = dateTime;
            tasktime = tasktime.split(" ")[1];
            Log.i("task", "tasktime" + tasktime);
            Log.i("UTC", "sendMessage utc time" + dateforrow);
            Log.i("time", "value");
            taskUTCtime = dateforrow;
            Log.i("Accept", "value 5 " + chatBean.getTaskStatus());
            chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
            chatBean.setToUserId(String.valueOf(toUserId));
            chatBean.setTaskType(taskType);
            chatBean.setTaskId(webtaskId);
            chatBean.setTaskStatus(taskStatus);
            chatBean.setTasktime(tasktime);
            chatBean.setTaskName(taskName);
            chatBean.setOwnerOfTask(ownerOfTask);
            chatBean.setCustomTagVisible(true);
            chatBean.setTaskReceiver(taskReceiver);
            chatBean.setTaskNo(task_No);
            if (!template && !note)
                chatBean.setCatagory(category);
            chatBean.setIssueId(issueId);
            chatBean.setSendStatus("0");
            chatBean.setToUserName(toUserName);
            chatBean.setUtcPlannedStartDateTime(null);
            chatBean.setUtcPlannedStartDateTime(null);
            chatBean.setUtcplannedEndDateTime(null);
            chatBean.setUtcPemainderFrequency(null);
            chatBean.setDuration(null);
            chatBean.setDurationUnit(null);
            chatBean.setTaskDescription(null);
            chatBean.setIsRemainderRequired(null);
            chatBean.setSignalid(null);
            chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
            chatBean.setCompletedPercentage("0");
            chatBean.setMimeType(null);
            chatBean.setTaskPriority(null);
            chatBean.setDateFrequency(null);
            chatBean.setTimeFrequency(null);
            chatBean.setShow_progress(1);
            chatBean.setRead_status(0);
            chatBean.setReminderQuote(null);
            chatBean.setRemark(null);
            chatBean.setTaskUTCTime(taskUTCtime);
            chatBean.setTaskObservers(null);
            chatBean.setServerFileName(null);
            chatBean.setMsg_status(1);
            chatBean.setRequestStatus(null);
            chatBean.setGroupTaskMembers(null);
            chatBean.setTaskUTCDateTime(dateforrow);
            chatBean.setDateTime(dateTime);
            chatBean.setSubType(null);
            chatBean.setDaysOfTheWeek(null);
            chatBean.setRepeatFrequency(null);
            if (project) {
                chatBean.setProjectId(projectId);
            }
            Log.i("custom project", "chatBean.getProjectId() " + chatBean.getProjectId());
            chatBean.setTaskTagName(null);
            chatBean.setCustomTagId(0);
            chatBean.setCustomTagVisible(true);
            chatBean.setCustomSetId(0);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "TaskDetailsBean Exception : " + e.getMessage(), "WARN", null);
        }
        return chatBean;
    }

    public void acceptMessage(String message) {
        try {
            Log.i("newtaskconversation", "accepttask 4 " + message);
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String dateTime = dateFormat.format(new Date());
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            String dateforrow = dateFormat.format(new Date());
            tasktime = dateTime;
            tasktime = tasktime.split(" ")[1];
            Log.i("task", "tasktime" + tasktime);
            Log.i("UTC", "sendMessage utc time" + dateforrow);
            Log.i("time", "value");
            taskUTCtime = dateforrow;
            final TaskDetailsBean acceptBean = new TaskDetailsBean();
            if (template && note) {
                Log.i("newtaskconversation", "accepttask 5 ");
                acceptBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                acceptBean.setToUserId(String.valueOf(0));
                Log.i("task", "to user id" + String.valueOf(toUserId));
                acceptBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                acceptBean.setSelect(false);
                acceptBean.setToUserName(null);
                acceptBean.setTaskDescription(message);
                Log.i("template", "message 0 " + acceptBean.getTaskDescription());
                acceptBean.setTaskPriority("Medium");
                acceptBean.setTaskReceiver(null);
                acceptBean.setTaskNo(task_No);
                acceptBean.setIssueId(issueId);
                acceptBean.setParentId(getFileName());
                acceptBean.setCompletedPercentage("0");
                acceptBean.setPlannedStartDateTime(startdate);
                acceptBean.setPlannedEndDateTime(enddate);
                acceptBean.setRemainderFrequency(reminderdate);
                acceptBean.setCustomTagVisible(true);
                acceptBean.setTaskUTCDateTime(dateforrow);
                acceptBean.setDateTime(dateTime);
                acceptBean.setSendStatus("0");
                acceptBean.setTaskType(taskType);
                acceptBean.setTaskId(webtaskId);
                acceptBean.setTasktime(tasktime);
                acceptBean.setTaskUTCTime(taskUTCtime);
                acceptBean.setSignalid(Utility.getSessionID());
                acceptBean.setTaskStatus(taskStatus);

                Log.i("Accept", "value 4" + acceptBean.getTaskStatus());
            } else {
                acceptBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                acceptBean.setToUserId(String.valueOf(toUserId));
                Log.i("task", "to user id" + String.valueOf(toUserId));
                acceptBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                acceptBean.setSelect(false);
                acceptBean.setToUserName(toUserName);
                acceptBean.setTaskStatus(taskStatus);
                acceptBean.setTaskDescription(message);
                acceptBean.setTaskPriority("Medium");
                acceptBean.setTaskReceiver(taskReceiver);
                acceptBean.setTaskNo(task_No);
                acceptBean.setCatagory(category);
                acceptBean.setIssueId(issueId);
                acceptBean.setParentId(getFileName());
                acceptBean.setPlannedStartDateTime(startdate);
                acceptBean.setPlannedEndDateTime(enddate);
                acceptBean.setRemainderFrequency(reminderdate);
                acceptBean.setDateFrequency("");
                acceptBean.setTimeFrequency(reminderfreq);
                acceptBean.setToUserName(toUserName);
                acceptBean.setServerFileName("");
                acceptBean.setTaskUTCDateTime(dateforrow);
                acceptBean.setDateTime(dateTime);
                acceptBean.setSendStatus("0");
                if (project) {
                    acceptBean.setProjectId(projectId);
                    if (projectGroup_Mems != null) {
                        acceptBean.setGroupTaskMembers(projectGroup_Mems);
                    }
                }
            }
            if (isTaskName) {
                if (!is_tempDate || !is_date) {
                    taskName = des.getText().toString();
                }
                acceptBean.setTaskName(taskName);
                Log.i("template", "Taskname 2 " + acceptBean.getTaskName());
                acceptBean.setOwnerOfTask(Appreference.loginuserdetails.getUsername());
            } else {
                acceptBean.setTaskName(taskName);
                acceptBean.setOwnerOfTask(ownerOfTask);
            }
            if (getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                if (taskacceptorreject != null && taskacceptorreject.equalsIgnoreCase("accepted")) {
                    acceptBean.setRequestStatus("accepted");
                    acceptBean.setTaskRequestType("taskAcceptedOrRejected");
                } else if (taskacceptorreject != null && taskacceptorreject.equalsIgnoreCase("rejected")) {
                    acceptBean.setRequestStatus("rejected");
                    acceptBean.setTaskRequestType("taskAcceptedOrRejected");
                }
            }
            if (!isTaskName && acceptBean.getTaskId() != null && acceptBean.getTaskId().equalsIgnoreCase(webtaskId)) {
                if (project) {
                    VideoCallDataBase.getDB(context).update_Project_history(acceptBean);
                } else {
                    dataBase.insertORupdate_TaskHistoryInfo(acceptBean);
                }
                dataBase.insertORupdate_Task_history(acceptBean);
//                dataBase.insertORupdate_TaskHistoryInfo(acceptBean);
                taskList.add(acceptBean);
                sortTaskMessage();
                refresh();
            }
            Log.d("task", "tasklist-->" + taskList.size());
            Log.d("task", "task_No is sendMessage  " + task_No + "webtaskId is sendMessage  " + webtaskId);
            if (isTaskName) {
                if (!is_date && !is_tempDate) {
                    taskName = des.getText().toString();
                }
                ownerOfTask = Appreference.loginuserdetails.getUsername();
                taskIdWebservice(acceptBean);
                Log.i("task", "isTask Name is true");
            } else {
                if (!template && !note) {
                    Log.i("Accept", "value taskStatus before compose " + acceptBean.getTaskStatus());
                    acceptBean.setSignalid(Utility.getSessionID());

                    if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                        TaskAcceptedOrRejected(acceptBean);
                    } else {
                        sendMessage(acceptBean.getTaskDescription(), null, "text", null, "", acceptBean.getSignalid(), null);
                    }
                    Log.d("TaskObserver", "TaskObserver list size is == " + listOfObservers.size());
                } else {
                    updateTemplateStatus(acceptBean);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "acceptMessage Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void sendMessage(String message, String pri, final String type1, final String imagename, final String remquotes_2, String sig_id, TaskDetailsBean chatBean) {
        try {
            Log.i("deassign123", "------sendMessage entry------");
            Log.i("taskConversation", "private sendMessage * 0 ");
            if (!forword_to) {
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                String dateTime = dateFormat.format(new Date());
                dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                String dateforrow = dateFormat.format(new Date());
                tasktime = dateTime;
                tasktime = tasktime.split(" ")[1];
                taskUTCtime = dateforrow;

                if (chatBean == null) {
                    chatBean = new TaskDetailsBean();
                }
                Log.i("taskconversation", "type of task " + template + "," + note);

                Log.i("taskconversation", "type of task " + template + "," + note);
                if (template || note || chat) {
                    Log.i("taskConversation", "private sendMessage * 1 ");
                    Log.i("Noteconversation", "if ");
                    Log.i("task", "to user id" + String.valueOf(toUserId));
                    chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                    chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                    chatBean.setSelect(false);
                    chatBean.setCustomTagVisible(true);
                    chatBean.setTaskDescription(message);
                    chatBean.setTaskPriority("Medium");
                    chatBean.setTaskReceiver(null);
                    chatBean.setTaskNo(task_No);
                    chatBean.setCatagory(category);
                    Log.i("Noteconversation", "category " + chatBean.getCatagory());
                    chatBean.setIssueId(issueId);
                    chatBean.setParentId(getFileName());
                    chatBean.setCompletedPercentage("0");
                    chatBean.setPlannedStartDateTime(startdate);
                    chatBean.setPlannedEndDateTime(enddate);
                    chatBean.setRemainderFrequency(reminderdate);
                    chatBean.setDateFrequency("");
                    chatBean.setTimeFrequency(reminderfreq);
                    chatBean.setToUserName(null);
                    chatBean.setServerFileName("");
                    chatBean.setCustomTagVisible(true);
                    chatBean.setTaskUTCDateTime(dateforrow);
                    chatBean.setDateTime(dateTime);
                    chatBean.setTasktime(tasktime);
                    chatBean.setTaskUTCTime(taskUTCtime);
                    chatBean.setSendStatus("0");
                    chatBean.setTaskType(taskType);
                    chatBean.setTaskId(webtaskId);

                    chatBean.setTaskStatus(taskStatus);
                    chatBean.setSignalid(sig_id);
                    if (remquotes_2 != null && remquotes_2.equalsIgnoreCase("")) {
                        Log.i("taskConversation", "private sendMessage * 2 ");
                        if (remquotes_2.equals("2")) {
                            chatBean.setRead_status(2);
                        } else {
                            chatBean.setReminderQuote(remquotes_2);
                        }
                    }
                    if (chatBean.getTaskDescription() != null && (chatBean.getTaskDescription().contains("www.") || chatBean.getTaskDescription().contains("https:") || chatBean.getTaskDescription().contains("http:"))) {
                        chatBean.setMimeType("url");
                    } else {
                        chatBean.setMimeType(type1);
                    }
                    Log.i("note", "headerName 4 " + chatBean.getMimeType());
                    if (isTaskName) {
                        if (!is_tempDate) {
                            taskName = des.getText().toString();
                        }
                        chatBean.setTaskName(message);
                        taskName = message;
                        Log.i("template", "Taskname 2 " + chatBean.getTaskName());
                        chatBean.setOwnerOfTask(Appreference.loginuserdetails.getUsername());
                    } else {
                        chatBean.setTaskName(taskName);
                        chatBean.setOwnerOfTask(ownerOfTask);
                    }
                    if (project) {
                        chatBean.setProjectId(projectId);
                        chatBean.setToUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                        chatBean.setToUserName(Appreference.loginuserdetails.getUsername());
                        chatBean.setTaskReceiver(taskReceiver);
                    } else if (note) {
                        chatBean.setTaskReceiver(taskReceiver);
                        chatBean.setToUserId(String.valueOf(toUserId));
                        chatBean.setToUserName(toUserName);
                    } else if (chat) {
                        chatBean.setToUserId(String.valueOf(toUserId));
                        chatBean.setTaskReceiver(taskReceiver);
                        chatBean.setToUserName(toUserName);
                    } else {
                        chatBean.setToUserId(String.valueOf(0));
                        chatBean.setToUserName(null);
                    }
                } else {
                    chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                    chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                    chatBean.setSelect(false);

                    chatBean.setToUserId(String.valueOf(toUserId));
                    chatBean.setToUserName(toUserName);
                    chatBean.setTaskReceiver(taskReceiver);
                    chatBean.setCatagory(category);

                    chatBean.setTaskNo(task_No);
                    chatBean.setIssueId(issueId);
                    chatBean.setParentId(getFileName());
                    chatBean.setPlannedStartDateTime(startdate);
                    chatBean.setPlannedEndDateTime(enddate);
                    chatBean.setRemainderFrequency(reminderdate);
                    chatBean.setDateFrequency("");
                    chatBean.setTimeFrequency(reminderfreq);
                    chatBean.setServerFileName("");
                    chatBean.setTaskUTCDateTime(dateforrow);
                    chatBean.setDateTime(dateTime);
                    chatBean.setSendStatus("0");
                    chatBean.setTaskType(taskType);
                    chatBean.setTaskId(webtaskId);
                    chatBean.setTasktime(tasktime);
                    chatBean.setTaskUTCTime(taskUTCtime);
                    chatBean.setSignalid(sig_id);
                    chatBean.setCustomTagVisible(true);
                    chatBean.setTaskStatus(taskStatus);
                    if (project) {
                        chatBean.setProjectId(projectId);
                        if (category != null && category.equalsIgnoreCase("issue")) {
                            chatBean.setParentTaskId(issueId);
                        } else {
                            chatBean.setParentTaskId(parentTaskId);
                        }
                        Log.i("userlist", "grouptaskmember() ## " + grouptaskmember());
                        if (grouptaskmember() != null) {
                            chatBean.setGroupTaskMembers(grouptaskmember());
                        }
                    }


                    if (pri != null && pri.equalsIgnoreCase("priority")) {
                        if (priority >= 0) {
                            switch (priority) {
                                case 0:
                                    pri = "Low";
                                    break;
                                case 1:
                                    pri = "Medium";
                                    break;
                                case 2:
                                    pri = "High";
                                    break;
                                default:
                                    break;
                            }
                        }
                        message = message + " " + pri;
                        chatBean.setTaskDescription(message);
                        chatBean.setTaskPriority(pri);
                    } else {
                        chatBean.setTaskDescription(message);
                        chatBean.setTaskPriority("Medium");
                    }

                    if (chatBean.getTaskDescription() != null && chatBean.getTaskDescription().equalsIgnoreCase("This " + category + " is closed")) {
                        chatBean.setCompletedPercentage("100");
                    } else {
                        if (!isTaskName && !project) {
                            percentage = VideoCallDataBase.getDB(context).getlastCompletedParcentage(webtaskId);
                        } else if (project) {
                            percentage = VideoCallDataBase.getDB(context).getlastProjectCompletedPercentage(webtaskId);
                        }
                        if (percentage != null && !percentage.equalsIgnoreCase(null) && !percentage.equalsIgnoreCase("") && !percentage.equalsIgnoreCase("null")) {
                            chatBean.setCompletedPercentage(percentage);
                        } else {
                            chatBean.setCompletedPercentage("0");
                        }
                    }

                    if (remquotes_2 != null && !remquotes_2.equalsIgnoreCase("") && !remquotes_2.equalsIgnoreCase(null)) {
                        if (remquotes_2.equalsIgnoreCase("overdue") && message.equalsIgnoreCase("This task is overdue")) {
                            chatBean.setTaskStatus(remquotes_2);
                            Log.i("Accept", "value 2.6 " + remquotes_2);
                            chatBean.setTaskPriority("high");
                        }
                    }

                    if (chatBean.getTaskDescription() != null && (chatBean.getTaskDescription().contains("www.") || chatBean.getTaskDescription().contains("https:") || chatBean.getTaskDescription().contains("http:"))) {
                        chatBean.setMimeType("url");
                    } else {
                        chatBean.setMimeType(type1);
                    }

                    if (isTaskName) {
                        if (!is_date) {
                            taskName = des.getText().toString();
                        }
                        chatBean.setTaskName(message);
                        taskName = message;
                        chatBean.setOwnerOfTask(Appreference.loginuserdetails.getUsername());
                        chatBean.setSubType("taskDescription");
                        Log.i("taskConversation", "private sendMessage * 4 ");
                        chatBean.setTaskRequestType("taskEntry");
                    } else {
                        chatBean.setTaskName(taskName);
                        chatBean.setOwnerOfTask(ownerOfTask);
                        Log.i("taskConversation", "isProjectFromOracle %%  " + isProjectFromOracle);
                        Log.i("taskConversation", "subType %% " + subType);
                        if (!isProjectFromOracle) {
                            if (pri != null && (pri.equalsIgnoreCase("Low") || pri.equalsIgnoreCase("Medium") || pri.equalsIgnoreCase("High"))) {
                                chatBean.setSubType("normal");
                            } else {
                                Log.i("taskConversation", "private_member %$ " + private_member);
                                if (subType != null && subType.equalsIgnoreCase("private")) {
                                    chatBean.setSubType(subType);
                                    chatBean.setPrivate_Member(private_member);
                                    if (taskType != null && !taskType.equalsIgnoreCase("Group")) {
                                        if (listOfObservers != null && listOfObservers.size() == 1) {
                                            chatBean.setToUserName(listOfObservers.get(0));
                                            int id_Touser = VideoCallDataBase.getDB(context).getUserid(listOfObservers.get(0));
                                            chatBean.setToUserId(String.valueOf(id_Touser));
                                        }

                                    }
                                } else if (subType != null && subType.equalsIgnoreCase("taskDescription")) {
                                    chatBean.setSubType(subType);
                                    chatBean.setTaskRequestType(subType);
                                } else if (ispercentageLocation) {
                                    chatBean.setSubType("percentageCompleted");
                                    chatBean.setTaskRequestType("percentageCompleted");
                                    ispercentageLocation = false;
                                } else {
                                    chatBean.setSubType(subType);
                                }

                                if (getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                                    if (taskacceptorreject != null && taskacceptorreject.equalsIgnoreCase("accepted")) {
                                        chatBean.setRequestStatus("accepted");
                                        chatBean.setTaskRequestType("taskAcceptedOrRejected");
                                    } else if (taskacceptorreject != null && taskacceptorreject.equalsIgnoreCase("rejected")) {
                                        chatBean.setRequestStatus("rejected");
                                        chatBean.setTaskRequestType("taskAcceptedOrRejected");
                                    } else if (chatBean.getTaskDescription() != null && chatBean.getTaskDescription().contains("Completed Percentage")) {
                                        chatBean.setRequestStatus("");
                                        chatBean.setTaskRequestType("percentageCompleted");
                                    }
                                } else if (chatBean.getTaskDescription() != null && (chatBean.getTaskDescription().contains("Completed Percentage") || chatBean.getTaskDescription().equalsIgnoreCase("This Task is closed") || chatBean.getTaskDescription().equalsIgnoreCase("This issue is closed"))) {
                                    chatBean.setRequestStatus("");
                                    chatBean.setTaskRequestType("percentageCompleted");
                                }
                            }
                        } else {
                            if (chatBean.getSubType() != null && chatBean.getSubType().equalsIgnoreCase("deassign")) {
                                chatBean.setTaskReceiver("");
                                chatBean.setToUserName("");
                                chatBean.setToUserId("");
                                chatBean.setSubType("deassign");
                                chatBean.setTaskRequestType("normal");

                                chatBean.setCompletedPercentage("0");

                                String project_deassignMems = getAllProjectMembersList();
                                Log.i("deassign123", "project_deassignMems **  " + project_deassignMems);
                                Log.i("deassign123", "------listOfObservers ==> " + listOfObservers);
                                Log.i("deassign123", "------ownerOfTask ==> " + ownerOfTask);
                                if (project_deassignMems != null && !project_deassignMems.equalsIgnoreCase("") && !project_deassignMems.equalsIgnoreCase(null)) {
                                    chatBean.setGroupTaskMembers(listTaskMembers());
                                    listOfObservers.clear();
                                    if (project_deassignMems != null && project_deassignMems.contains(",")) {
                                        String members_deassign[] = project_deassignMems.split(",");
                                        for (int i = 0; i < members_deassign.length; i++) {
                                            listOfObservers.add(members_deassign[i]);
                                        }
                                    }
                                }
                                String status_info = "select status from projectStatus where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "' and status!='7' and status!= '9'and status!= '10' and status!= '8' order by id DESC";
                                ArrayList<String> status_all = VideoCallDataBase.getDB(context).getAllCurrentStatus(status_info);
                                Log.i("output123", "project CurrentStatus from DB====>" + status_all.size());
                                String current_status_now = "";
                                if (status_all.size() > 0) {
                                    current_status_now = status_all.get(0);
                                    Log.i("output123", "project CurrentStatus from current_status " + current_status_now);
                                }
                                String status_now = getStatusForNumber(current_status_now);
                                if (listTaskMembers().length() > 0) {
                                    if (listTaskMembers().length() == 1) {
                                        chatBean.setTaskStatus(status_now);
                                        chatBean.setCatagory("Task");
                                        chatBean.setTaskType("individual");
                                        taskStatus = status_now;
                                    } else {
                                        chatBean.setTaskStatus(status_now);
                                        chatBean.setCatagory("Task");
                                        chatBean.setTaskType("Group");
                                        taskStatus = status_now;
                                    }
                                } else {
                                    chatBean.setTaskStatus("Unassigned");
                                    chatBean.setCatagory("Template");
                                    chatBean.setTaskType(taskType);
                                    taskStatus = "Unassigned";

                                }
                            } else if (isProjectFromOracle &&
                                    chatBean.getTaskDescription() != null &&
                                    (chatBean.getTaskDescription().equalsIgnoreCase("Completed Percentage 100%") || chatBean.getTaskDescription().equalsIgnoreCase("Task is Completed"))) {
                                chatBean.setCompletedPercentage("100");
                                addGroupAdminObserver_list();
                            } else if (subType != null && subType.equalsIgnoreCase("private")) {
                                chatBean.setSubType(subType);
                                chatBean.setPrivate_Member(private_member);
                                if (taskType != null && !taskType.equalsIgnoreCase("Group")) {
                                    if (listOfObservers != null && listOfObservers.size() == 1) {
                                        chatBean.setToUserName(listOfObservers.get(0));
                                        int id_Touser = VideoCallDataBase.getDB(context).getUserid(listOfObservers.get(0));
                                        chatBean.setToUserId(String.valueOf(id_Touser));
                                    }

                                }
                            } else if (chatBean.getProjectStatus() != null && !chatBean.getProjectStatus().equalsIgnoreCase("")) {
                                Log.i("status", "------projectstatus !!!** " + chatBean.getProjectStatus());
                                addGroupAdminObserver_list();
                            } else {
                                listOfObservers.clear();
                                String project_List_Mems = listTaskMembers();
                                Log.i("observer123", "************ project_List_Mems listTaskMembers************ " + project_List_Mems);

                                Log.i("deassign123", "------listOfObservers !!!$$ " + listOfObservers);
                                if (project_List_Mems != null && project_List_Mems.contains(",")) {
                                    String members_deassign[] = project_List_Mems.split(",");
                                    for (int i = 0; i < members_deassign.length; i++) {
                                        listOfObservers.add(members_deassign[i]);
                                    }
                                } else {
                                    if (project_List_Mems != null && !project_List_Mems.equalsIgnoreCase("")) {
                                        listOfObservers.add(listTaskMembers());
                                    }
                                }
                                if (!listOfObservers.contains(ownerOfTask) && !Appreference.loginuserdetails.getUsername().equalsIgnoreCase(ownerOfTask)) {
                                    listOfObservers.add(ownerOfTask);
                                }


                                /*added for groupAdmin-Observer Start*/
                                String groupAdmin_observer = getGroupAdmin_observer_DB();
                                Log.i("observer123", "************ getGroupAdmin_observer_DB************ " + groupAdmin_observer);

                                if (groupAdmin_observer != null && !groupAdmin_observer.equalsIgnoreCase("") && !groupAdmin_observer.equalsIgnoreCase(null)
                                        && groupAdmin_observer.contains(",")) {
                                    String members_groupAdmin[] = groupAdmin_observer.split(",");
                                    for (int i = 0; i < members_groupAdmin.length; i++) {
                                        if (!members_groupAdmin[i].equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                            listOfObservers.add(members_groupAdmin[i]);
                                        }
                                    }
                                } else {
                                    if (groupAdmin_observer != null && !groupAdmin_observer.equalsIgnoreCase("")) {
                                        listOfObservers.add(groupAdmin_observer);
                                    }
                                }

                                if (taskReceiver != null && !taskReceiver.equalsIgnoreCase("") && !taskReceiver.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) && !listOfObservers.contains(taskReceiver)) {
                                    listOfObservers.add(taskReceiver);
                                }
                                /* added for groupAdmin-Observer End*/

                                Log.i("deassign123", "------listOfObservers !!!** " + listOfObservers);
                                Log.i("observer123", "------Final listOfObservers !!!$$ " + listOfObservers);

                            }
                        }
                    }
                }
                if (remquotes_2 != null && !remquotes_2.equalsIgnoreCase("") && !remquotes_2.equalsIgnoreCase(null) && chatBean.getMimeType() != null) {
                    Log.i("deassign123", "map -----> " + chatBean.getTaskDescription());
                    if (remquotes_2.equalsIgnoreCase("map") && chatBean.getMimeType().equalsIgnoreCase("map")) {
                        chatBean.setSubType("percentageCompleted");
                        chatBean.setTaskStatus("Completed");
                    }
                }
                if (linearforimage != null && linearforimage.getVisibility() == View.VISIBLE) {
                    if (replymessage != null && replymessage.getText().toString().length() > 0) {
                        Log.i("taskconversation", "reply mesaage --->" + replymessage.getText().toString());
                        chatBean.setSender_reply(replymessage.getText().toString());
                        chatBean.setReply_sender_name(replymessagesendername.getText().toString());
                        chatBean.setReply_mime_type(reply_mime_type);
                        chatBean.setTaskRequestType("replyMessage");
                        chatBean.setParentId(Old_signalId);
                        linearforimage.setVisibility(View.GONE);
                    }
                }

                if (!isTaskName && chatBean.getTaskId() != null && chatBean.getTaskId().equalsIgnoreCase(webtaskId)) {
                    if (project) {
                        VideoCallDataBase.getDB(context).update_Project_history(chatBean);
                    }
                    if (VideoCallDataBase.getDB(context).insertORupdate_Task_history(chatBean)) {
                        if (chatBean.isCustomTagVisible()) {
                            taskList.add(chatBean);
                        }
                        sortTaskMessage();
                    }
                    refresh();
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            list_all.setSelection(list_all.getAdapter().getCount() - 1);
                        }
                    });
                }

                if (isTaskName) {
                    if (!is_date && !is_tempDate && !is_mmfile) {
                        taskName = des.getText().toString();
                    }
                    ownerOfTask = Appreference.loginuserdetails.getUsername();
                    if (template || note || chat || category.equalsIgnoreCase("issue")) {

                    } else {
                        chatBean.setCatagory("taskCreation");
                    }
                    taskIdWebservice(chatBean);
                } else {
                    if (imagename != null && imagename.equalsIgnoreCase("overdue")) {
                    } else {
                        if (!template || (note || chat)) {

                            if (listOfObservers != null && listOfObservers.size() > 0) {
                                if (getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {

                                    String xml = composeChatXML(chatBean);
                                    if (subType != null && subType.equalsIgnoreCase("private")) {
                                        sendMultiInstantMessage(xml, listOfObservers, 1);
                                    } else {
                                        sendMultiInstantMessage(xml, listOfObservers, 0);
                                    }
//                                    sendMultiInstantMessage(xml, listOfObservers, 0);
                                } else {
                                    Log.i("deassign123", "------sendMessage listOfObservers------" + listOfObservers);

                                    if (listOfObservers.size() == 1) {
                                        String xml = composeChatXML(chatBean);

                                        if (subType != null && subType.equalsIgnoreCase("private")) {
                                            sendMultiInstantMessage(xml, listOfObservers, 1);
                                        } else {
                                            sendMultiInstantMessage(xml, listOfObservers, 0);
                                        }
//                                    sendMultiInstantMessage(xml, listOfObservers, 0);
                                    } else {
                                        for (String buddy_username : listOfObservers) {
                                            if (!chatBean.getTaskType().equalsIgnoreCase("group")) {
                                                chatBean.setToUserName(buddy_username);
                                                int ToUserid = VideoCallDataBase.getDB(context).getUserid(buddy_username);
                                                chatBean.setToUserId(String.valueOf(ToUserid));
                                            }
                                        }
                                        String xml = composeChatXML(chatBean);
                                        if (subType != null && subType.equalsIgnoreCase("private")) {
                                            sendMultiInstantMessage(xml, listOfObservers, 1);
                                        } else {
                                            if (taskReceiver != null && taskReceiver.equalsIgnoreCase(ownerOfTask)) {
                                                if (listOfObservers.contains(taskReceiver) && taskReceiver.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                                    listOfObservers.remove(taskReceiver);
                                                    updateTemplateStatus(chatBean);
                                                }
                                            }

                                            sendMultiInstantMessage(xml, listOfObservers, 0);
                                            if (!listOfObservers.contains(taskReceiver) && !taskReceiver.equalsIgnoreCase("")) {
                                                listOfObservers.add(taskReceiver);
                                            }
                                        }
//                                    sendMultiInstantMessage(xml, listOfObservers, 0);s
                                    }
                                }
                            } else {
                                Log.i("chat", "-----------------> 2 ");
                                updateTemplateStatus(chatBean);
                            }
                            Log.i("chat", "-----------------> 1 ");
                        } else {
                            Log.i("chat", "-----------------> 2 ");
                            updateTemplateStatus(chatBean);
                        }
                    }
                }
            } else {
                Log.i("chat", "else if" + forword_to);
                forword_to = false;
                Log.i("chat", "else if" + forword_to);
                ArrayList<String> touserlist = new ArrayList<>();
                touserlist.add(forword_bean.getToUserName());
                Log.i("taskconversation", " sendMessage taskstatus 123 3 " + forword_bean.getTaskStatus());
                String xml = composeChatXML(forword_bean);
                if (subType != null && subType.equalsIgnoreCase("private")) {
                    sendMultiInstantMessage(xml, listOfObservers, 1);
                } else {
                    sendMultiInstantMessage(xml, listOfObservers, 0);
                }
//                                    sendMultiInstantMessage(xml, listOfObservers, 0);
            }
            if (remove_check) {
                remove_check = false;
                RemoveObserver();
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "sendMessage Exception : " + e.getMessage(), "WARN", null);
        }
    }

    private void addGroupAdminObserver_list() {
        /*added for groupAdmin-Observer Start*/
        String groupAdmin_observer = getGroupAdmin_observer_DB();
        if (groupAdmin_observer != null && !groupAdmin_observer.equalsIgnoreCase("") && !groupAdmin_observer.equalsIgnoreCase(null)
                && groupAdmin_observer.contains(",")) {
            String members_groupAdmin[] = groupAdmin_observer.split(",");
            for (int i = 0; i < members_groupAdmin.length; i++) {
                if (!members_groupAdmin[i].equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                    listOfObservers.add(members_groupAdmin[i]);
                }
            }
        } else {
            listOfObservers.add(groupAdmin_observer);
        }
        if (taskReceiver != null && !taskReceiver.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) && !listOfObservers.contains(taskReceiver)) {
            listOfObservers.add(taskReceiver);
        }
        /*To Remove Duplicated Start*/
        if (listOfObservers != null && listOfObservers.size() > 4) {
            HashSet<String> hashSet = new HashSet<String>();
            hashSet.addAll(listOfObservers);
            listOfObservers.clear();
            listOfObservers.addAll(hashSet);
        }
                       /*To Remove Duplicated End*/
        Log.i("observer123", "------addGroupAdminObserver_list Method!!!$$ " + listOfObservers);

        /*added for groupAdmin-Observer End*/
    }

    private String getStatusForNumber(String status) {
        String currentStatus_now = "";
        if (status.equalsIgnoreCase("0")) {
            currentStatus_now = "Started";
        } else if (status.equalsIgnoreCase("1")) {
            currentStatus_now = "Hold";
        } else if (status.equalsIgnoreCase("2")) {
            currentStatus_now = "Resumed";
        } else if (status.equalsIgnoreCase("3")) {
            currentStatus_now = "Paused";
        } else if (status.equalsIgnoreCase("4")) {
            currentStatus_now = "Restarted";
        } else if (status.equalsIgnoreCase("Assigned")) {
            currentStatus_now = "Assigned";
        }
        return currentStatus_now;
    }

    private String getAllProjectMembersList() {
        String project_deassignMems = "";
        String getProjectNameQuery = "select projectName from projectHistory where projectId='" + projectId + "'  and taskId= '" + webtaskId + "'";
        String my_project_name = VideoCallDataBase.getDB(context).getValuesForQuery(getProjectNameQuery);
        String taskMemberList_qry = "select taskMemberList from projectHistory where projectId='" + projectId + "'and taskName = '" + my_project_name + "'";
        String total_members_list = VideoCallDataBase.getDB(context).getValuesForQuery(taskMemberList_qry);
        if (total_members_list != null) {
            int counter = 0;
            for (int i = 0; i < total_members_list.length(); i++) {
                if (total_members_list.charAt(i) == ',') {
                    counter++;
                }
            }
            for (int j = 0; j < counter + 1; j++) {
                if (counter == 0) {
                    if (!total_members_list.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                        project_deassignMems = total_members_list;
                    }
                } else {
                    if (total_members_list.split(",")[j].equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                    } else {
                        project_deassignMems = project_deassignMems.concat(total_members_list.split(",")[j] + ",");
                    }
                }
            }
            if (project_deassignMems != null && project_deassignMems.contains(",")) {
                project_deassignMems = project_deassignMems.substring(0, project_deassignMems.length() - 1);
            }
        }
        return project_deassignMems;
    }

    public String grouptaskmember() {
        String taskMemberList = "";
        String taskMemberList_qry = null;
        if (projectId != null) {
            taskMemberList_qry = "select taskMemberList from projectHistory where projectId='" + projectId + "'  and taskId= '" + webtaskId + "'";
        }
        taskMemberList = VideoCallDataBase.getDB(context).getProjectParentTaskId(taskMemberList_qry);
        return taskMemberList;
    }

    public String listTaskMemberswithowner() {
        String project_deassignMems = "";
        String taskMemberList_qry = "select taskMemberList from projectHistory where projectId='" + projectId + "' and taskId='" + webtaskId + "'";
        String taskMemberList_1 = VideoCallDataBase.getDB(context).getValuesForQuery(taskMemberList_qry);
        Log.i("deassign123", "taskMemberList_1 ==> " + taskMemberList_1);
        if (taskMemberList_1 != null) {
            int counter = 0;
            for (int i = 0; i < taskMemberList_1.length(); i++) {
                if (taskMemberList_1.charAt(i) == ',') {
                    counter++;
                }
            }
            for (int j = 0; j < counter + 1; j++) {
                if (counter == 0) {
                    if (!taskMemberList_1.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                        project_deassignMems = taskMemberList_1;
                    }
                } else {
                    if (taskMemberList_1.split(",")[j].equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                    } else {
                        project_deassignMems = project_deassignMems.concat(taskMemberList_1.split(",")[j] + ",");
                    }
                }
            }
            Log.i("ProjectCall", "project_memberlist @# : " + project_deassignMems);
            if (!project_deassignMems.contains(ownerOfTask) && !Appreference.loginuserdetails.getUsername().equalsIgnoreCase(ownerOfTask)) {
                project_deassignMems = project_deassignMems.concat(ownerOfTask + ",");
                Log.i("ProjectCall", "project_memberlist @@# : " + project_deassignMems);
            }
            if (project_deassignMems != null && project_deassignMems.contains(",")) {
                project_deassignMems = project_deassignMems.substring(0, project_deassignMems.length() - 1);
            }
            Log.i("ProjectCall", "project_memberlist @@@# : " + project_deassignMems);
        }
        return project_deassignMems;
    }

    public String listTaskMembers() {
        String project_deassignMems = "";
        String taskMemberList_qry = "select taskMemberList from projectHistory where projectId='" + projectId + "' and taskId='" + webtaskId + "'";
        String taskMemberList_1 = VideoCallDataBase.getDB(context).getValuesForQuery(taskMemberList_qry);
        Log.i("deassign123", "taskMemberList_1 ==> " + taskMemberList_1);
        if (taskMemberList_1 != null) {
            int counter = 0;
            for (int i = 0; i < taskMemberList_1.length(); i++) {
                if (taskMemberList_1.charAt(i) == ',') {
                    counter++;
                }
            }
            for (int j = 0; j < counter + 1; j++) {
                if (counter == 0) {
                    if (!taskMemberList_1.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                        project_deassignMems = taskMemberList_1;
                    }
                } else {
                    if (taskMemberList_1.split(",")[j].equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                    } else {
                        project_deassignMems = project_deassignMems.concat(taskMemberList_1.split(",")[j] + ",");
                    }
                }
            }
            if (project_deassignMems != null && project_deassignMems.contains(",")) {
                project_deassignMems = project_deassignMems.substring(0, project_deassignMems.length() - 1);
            }
        }
        return project_deassignMems;
    }

    public String remove_TaskMembers(String from_UserName) {
        String project_deassignMems = "";
        String taskMemberList_qry = "select taskMemberList from projectHistory where projectId='" + projectId + "' and taskId='" + webtaskId + "'";
        String taskMemberList_1 = VideoCallDataBase.getDB(context).getValuesForQuery(taskMemberList_qry);
        Log.i("deassign123", "taskMemberList_1 ==> " + taskMemberList_1);
        if (taskMemberList_1 != null) {
            int counter = 0;
            for (int i = 0; i < taskMemberList_1.length(); i++) {
                if (taskMemberList_1.charAt(i) == ',') {
                    counter++;
                }
            }
            for (int j = 0; j < counter + 1; j++) {
                if (counter == 0) {
                    if (!taskMemberList_1.equalsIgnoreCase(from_UserName)) {
                        project_deassignMems = taskMemberList_1;
                    }
                } else {
                    if (taskMemberList_1.split(",")[j].equalsIgnoreCase(from_UserName)) {
                    } else {
                        project_deassignMems = project_deassignMems.concat(taskMemberList_1.split(",")[j] + ",");
                    }
                }
            }
            if (project_deassignMems != null && project_deassignMems.contains(",")) {
                project_deassignMems = project_deassignMems.substring(0, project_deassignMems.length() - 1);
            }
        }
        return project_deassignMems;
    }

    public void resendstatus_MessageInwebservice(TaskDetailsBean detailsBean) {
        try {
            TaskDetailsBean machineDetailsBean;
            TaskDetailsBean taskDetailsBean = new TaskDetailsBean();
            String desc_query = "Select * from projectHistory where projectId ='" + detailsBean.getProjectId() + "' and taskId = '" + detailsBean.getTaskId() + "'";
            machineDetailsBean = VideoCallDataBase.getDB(MainActivity.mainContext).getDetails_to_complete_project(desc_query);
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            SimpleDateFormat dateParse = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            SimpleDateFormat taskDateParse = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            SimpleDateFormat taskDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            taskDateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            Date date = null;
            Date date1 = null;
            Date date2 = null;
            String StartDateUTC = "", EndDateUTC = "", taskCompletedDateUTC = "";
            if (detailsBean.getTravelStartTime() != null && !detailsBean.getTravelStartTime().equalsIgnoreCase("")) {
                try {
                    date = dateParse.parse(detailsBean.getTravelStartTime());
                    StartDateUTC = dateFormat.format(date);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("OfflineSendMessage", "detailsBean.getTravelStartTime() parse Exception : " + e.getMessage(), "WARN", null);
                }
            }
            if (detailsBean.getTravelEndTime() != null && !detailsBean.getTravelEndTime().equalsIgnoreCase("")) {
                try {
                    date1 = dateParse.parse(detailsBean.getTravelEndTime());
                    EndDateUTC = dateFormat.format(date1);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("OfflineSendMessage", "detailsBean.getTravelEndTime() parse Exception : " + e.getMessage(), "WARN", null);
                }
            }
            if (detailsBean.getProjectStatus() != null && detailsBean.getProjectStatus().equalsIgnoreCase("10")
                    && detailsBean.getTaskCompletedDate() != null && !detailsBean.getTaskCompletedDate().equalsIgnoreCase("")) {
                try {
                    date2 = taskDateParse.parse(detailsBean.getTaskCompletedDate());
                    taskCompletedDateUTC = taskDateFormat.format(date2);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("OfflineSendMessage", "detailsBean.getTaskCompletedDate() parse Exception : " + e.getMessage(), "WARN", null);
                }
            }
            JSONObject jsonObject = new JSONObject();
            JSONObject jsonObject1 = new JSONObject();
            TaskDetailsBean statusBean = new TaskDetailsBean();
            String tasktime = dateFormat.format(new Date());
            String dateforrow = dateFormat.format(new Date());
            try {
                jsonObject1.put("id", Integer.parseInt(detailsBean.getProjectId()));
            } catch (Exception e) {
                e.printStackTrace();
                Appreference.printLog("OfflineSendMessage", "detailsBean.getProjectId() numberformat Exception : " + e.getMessage(), "WARN", null);
            }
            jsonObject.put("project", jsonObject1);
            statusBean.setProjectId(detailsBean.getProjectId());
            JSONObject jsonObject2 = new JSONObject();
            jsonObject2.put("id", Appreference.loginuserdetails.getId());
            statusBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
            jsonObject.put("from", jsonObject2);
            JSONObject jsonObject3 = new JSONObject();
            jsonObject3.put("id", Integer.parseInt(detailsBean.getTaskId()));
            jsonObject.put("task", jsonObject3);
            statusBean.setTaskId(detailsBean.getTaskId());
            statusBean.setSignalid(detailsBean.getSignalid());

            if (detailsBean.getTravelStartTime() != null && !detailsBean.getTravelStartTime().equalsIgnoreCase("")) {
                jsonObject.put("travelStartTime", StartDateUTC);
                jsonObject.put("startDateLatitude", detailsBean.getStartDateLatitude());
                jsonObject.put("startDateLongitude", detailsBean.getStartDateLongitude());
//                            statusBean.setTravelStartTime(detailsBean.getTravelStartTime());

            } else {
                jsonObject.put("travelStartTime", "");
                jsonObject.put("startDateLatitude", "");
                jsonObject.put("startDateLongitude", "");
            }
            if (detailsBean.getTravelEndTime() != null && !detailsBean.getTravelEndTime().equalsIgnoreCase("")) {
                jsonObject.put("travelEndTime", EndDateUTC);
                jsonObject.put("endDateLatitude", detailsBean.getEndDateLatitude());
                jsonObject.put("endDateLongitude", detailsBean.getEndDateLongitude());
//                            statusBean.setTravelEndTime(detailsBean.getTravelEndTime());
            } else {
                jsonObject.put("travelEndTime", "");
                jsonObject.put("endDateLatitude", "");
                jsonObject.put("endDateLongitude", "");
            }

            if (detailsBean.getTravelStartTime() != null && !detailsBean.getTravelStartTime().equalsIgnoreCase("")
                    && detailsBean.getEnd_dateStatus() != null && !detailsBean.getEnd_dateStatus().equalsIgnoreCase("")
                    && detailsBean.getEnd_dateStatus().equalsIgnoreCase("9")) {

            } else if (detailsBean.getTravelStartTime() != null && !detailsBean.getTravelStartTime().equalsIgnoreCase("")) {
                statusBean.setTravelStartTime(detailsBean.getTravelStartTime());
                statusBean.setStartDateLatitude(detailsBean.getStartDateLatitude());
                statusBean.setStartDateLongitude(detailsBean.getStartDateLongitude());
                Log.i("travelcheck123", "start================> added ==> " + detailsBean.getTravelStartTime());
            }
            if (detailsBean.getTravelEndTime() != null && !detailsBean.getTravelEndTime().equalsIgnoreCase("")) {
                statusBean.setTravelEndTime(detailsBean.getTravelEndTime());
                statusBean.setEndDateLatitude(detailsBean.getEndDateLatitude());
                statusBean.setEndDateLongitude(detailsBean.getEndDateLongitude());
                Log.i("travelcheck123", "end================> added ==> " + detailsBean.getTravelStartTime());
            }

            jsonObject.put("activityStartTime", "");
            jsonObject.put("activityEndTime", "");
            jsonObject.put("toTravelStartDateTime", "");
            jsonObject.put("toTravelEndDateTime", "");

            if (detailsBean.getProjectStatus() != null && !detailsBean.getProjectStatus().equalsIgnoreCase("")) {
                if (detailsBean.getEnd_dateStatus() != null && detailsBean.getEnd_dateStatus().equalsIgnoreCase("9")) {
                    jsonObject.put("status", "9");
                    statusBean.setProjectStatus("9");
                } else {
                    jsonObject.put("status", detailsBean.getProjectStatus());
                    statusBean.setProjectStatus(detailsBean.getProjectStatus());
                }
            } else {
                jsonObject.put("status", "");
            }

            if (detailsBean.getCustomerSignatureName() != null && !detailsBean.getCustomerSignatureName().equalsIgnoreCase("")) {
                jsonObject.put("customerSignatureName", detailsBean.getCustomerSignatureName());
                statusBean.setCustomerSignatureName(detailsBean.getCustomerSignatureName());
            } else {
                jsonObject.put("customerSignatureName", "");
            }
            if (detailsBean.getHMReading() != null && !detailsBean.getHMReading().equalsIgnoreCase("")) {
                jsonObject.put("hourMeterReading", detailsBean.getHMReading());
                statusBean.setHMReading(detailsBean.getHMReading());
            } else {
                jsonObject.put("hourMeterReading", "");
            }
            if (detailsBean.getTaskCompletedDate() != null && !detailsBean.getTaskCompletedDate().equalsIgnoreCase("")) {
                jsonObject.put("taskcompletedDate", taskCompletedDateUTC);
                statusBean.setTaskCompletedDate(detailsBean.getTaskCompletedDate());
            } else {
                jsonObject.put("taskcompletedDate", "");
            }
            jsonObject.put("mcModel", machineDetailsBean.getMcModel());
            statusBean.setMcModel(machineDetailsBean.getMcModel());
            jsonObject.put("mcSrNo", machineDetailsBean.getMcSrNo());
            statusBean.setMcSrNo(machineDetailsBean.getMcSrNo());
            jsonObject.put("mcDescription", machineDetailsBean.getMcDescription());
            statusBean.setMcDescription(machineDetailsBean.getMcDescription());
            jsonObject.put("machineMake", machineDetailsBean.getMachineMake());
            statusBean.setMachineMake(machineDetailsBean.getMachineMake());

            statusBean.setTaskUTCDateTime(dateforrow);
            statusBean.setDateTime(tasktime);
            statusBean.setTasktime(tasktime);
            statusBean.setTaskUTCTime(dateforrow);
            statusBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
            statusBean.setFromUserName(Appreference.loginuserdetails.getUsername());

            if (detailsBean.getProjectStatus() != null && detailsBean.getProjectStatus().equalsIgnoreCase("7")
                    || detailsBean.getProjectStatus().equalsIgnoreCase("10")) {

                String status_info = "select status from projectStatus where projectId='" + detailsBean.getProjectId() + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + detailsBean.getTaskId() + "' and status!='7' and status!= '9'and status!= '10'order by id DESC";
                ArrayList<String> status_all = VideoCallDataBase.getDB(MainActivity.mainContext).getAllCurrentStatus(status_info);
                Log.i("output123", "project CurrentStatus from DB====>" + status_all.size());
                if (status_all.size() > 0) {
                    detailsBean.setProjectStatus(status_all.get(0));
                }
            }

            if (detailsBean.getProjectStatus() != null && (detailsBean.getProjectStatus().equalsIgnoreCase("0"))) {
                statusBean.setTaskStatus("Started");
            } else if (detailsBean.getProjectStatus() != null && detailsBean.getProjectStatus().equalsIgnoreCase("1")) {
                statusBean.setTaskStatus("Hold");
            } else if (detailsBean.getProjectStatus() != null && (detailsBean.getProjectStatus().equalsIgnoreCase("2"))) {
                statusBean.setTaskStatus("Resumed");
            } else if (detailsBean.getProjectStatus() != null && (detailsBean.getProjectStatus().equalsIgnoreCase("3"))) {
                statusBean.setTaskStatus("Paused");
            } else if (detailsBean.getProjectStatus() != null && (detailsBean.getProjectStatus().equalsIgnoreCase("4"))) {
                statusBean.setTaskStatus("Restarted");
            } else if (detailsBean.getProjectStatus() != null && (detailsBean.getProjectStatus().equalsIgnoreCase("5"))) {
                statusBean.setTaskStatus("Completed");
            } else if (detailsBean.getProjectStatus() != null && detailsBean.getProjectStatus().equalsIgnoreCase("8")) {
                statusBean.setTaskStatus("DeAssign");
            }

            String userQuery = "select * from taskDetailsInfo where taskId ='" + detailsBean.getTaskId() + "' and projectId ='" + detailsBean.getProjectId() + "'";
            TaskDetailsBean memberBean = VideoCallDataBase.getDB(MainActivity.mainContext).getUserdetails(userQuery);


            statusBean.setGroupTaskMembers(machineDetailsBean.getTaskMemberList());
            statusBean.setOwnerOfTask(machineDetailsBean.getOwnerOfTask());
            statusBean.setTaskReceiver(machineDetailsBean.getTaskReceiver());
            statusBean.setTaskName(machineDetailsBean.getTaskName());
//                        statusBean.setTaskDescription(memberBean.getTaskDescription());


            statusBean.setToUserId(memberBean.getToUserId());
            statusBean.setSendStatus(memberBean.getSendStatus());
            statusBean.setTaskType(memberBean.getTaskType());
            statusBean.setTaskNo(memberBean.getTaskNo());
            statusBean.setToUserName(memberBean.getToUserName());
            statusBean.setMimeType(memberBean.getMimeType());

            statusBean.setPlannedStartDateTime("");
            statusBean.setPlannedEndDateTime("");
            statusBean.setTaskDescription(detailsBean.getTaskDescription());
            Log.i("offlilne", "memberBean.getTaskDescription() ==> " + detailsBean.getTaskDescription());


            statusBean.setUtcPlannedStartDateTime(Appreference.customLocalDateToUTC(null));
            statusBean.setUtcplannedEndDateTime(Appreference.customLocalDateToUTC(null));
            statusBean.setParentId(getFileName());
            statusBean.setTaskPriority("Medium");
            statusBean.setCompletedPercentage("");
            statusBean.setRequestStatus("");
            statusBean.setMsg_status(0);
            statusBean.setShow_progress(1);


            statusBean.setCatagory("Task");
            statusBean.setSubType("normal");
            statusBean.setTaskRequestType("normal");


            if (detailsBean.getCustomerSignature() != null && !detailsBean.getCustomerSignature().equalsIgnoreCase(null) && !detailsBean.getCustomerSignature().equalsIgnoreCase("")) {
                statusBean.setCustomerSignature(detailsBean.getCustomerSignature());
            }
            if (detailsBean.getPhotoPath() != null && !detailsBean.getPhotoPath().equalsIgnoreCase(null) && !detailsBean.getPhotoPath().equalsIgnoreCase("")) {
                statusBean.setPhotoPath(detailsBean.getPhotoPath());
            }
            if (detailsBean.getTechnicianSignature() != null && !detailsBean.getTechnicianSignature().equalsIgnoreCase(null) && !detailsBean.getTechnicianSignature().equalsIgnoreCase("")) {
                statusBean.setTechnicianSignature(detailsBean.getTechnicianSignature());
            }

            JSONObject jsonObject4 = new JSONObject();
            if (detailsBean.getCustomerSignature() != null && !detailsBean.getCustomerSignature().equalsIgnoreCase(null) && !detailsBean.getCustomerSignature().equalsIgnoreCase("")) {
                try {
                    TaskDetailsBean taskbean = (TaskDetailsBean) taskDetailsBean.clone();
                    Log.i("ws123", "taskDetailsBean1 reference signalID +++>>>   " + taskbean.getSignalid());
                    taskbean.setMimeType("image");
                    taskbean.setTaskDescription(detailsBean.getCustomerSignature());
                    taskbean.setTaskRequestType("signature");
                    jsonObject4.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(detailsBean.getCustomerSignature())));
                    jsonObject4.put("taskFileExt", "jpg");
                    jsonObject.put("signatures", jsonObject4);
                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                    Appreference.printLog("OfflineSendMessage", "detailsBean.getCustomerSignature() CloneNotSupportedException Exception : " + e.getMessage(), "WARN", null);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("OfflineSendMessage", "detailsBean.getCustomerSignature()  Exception : " + e.getMessage(), "WARN", null);
                }
            }
            JSONObject jsonObject5 = new JSONObject();
            if (detailsBean.getPhotoPath() != null && !detailsBean.getPhotoPath().equalsIgnoreCase(null) && !detailsBean.getPhotoPath().equalsIgnoreCase("")) {
                try {
                    TaskDetailsBean taskbean1 = (TaskDetailsBean) taskDetailsBean.clone();
                    taskbean1.setMimeType("image");
                    taskbean1.setTaskRequestType("photo");
                    taskbean1.setTaskDescription(detailsBean.getPhotoPath());
                    jsonObject5.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(detailsBean.getPhotoPath())));
                    jsonObject5.put("taskFileExt", "jpg");
                    jsonObject.put("photos", jsonObject5);
                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                    Appreference.printLog("OfflineSendMessage", "detailsBean.getPhotoPath() CloneNotSupportedException Exception : " + e.getMessage(), "WARN", null);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("OfflineSendMessage", "detailsBean.getPhotoPath()  Exception : " + e.getMessage(), "WARN", null);
                }
            }
            JSONObject jsonObject6 = new JSONObject();
            if (detailsBean.getTechnicianSignature() != null && !detailsBean.getTechnicianSignature().equalsIgnoreCase(null) && !detailsBean.getTechnicianSignature().equalsIgnoreCase("")) {
                try {
                    TaskDetailsBean taskbean2 = (TaskDetailsBean) taskDetailsBean.clone();
                    taskbean2.setMimeType("image");
                    taskbean2.setTaskRequestType("technicianSignature");
                    taskbean2.setTaskDescription(detailsBean.getTechnicianSignature());
                    jsonObject6.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(detailsBean.getTechnicianSignature())));
                    jsonObject6.put("taskFileExt", "jpg");
                    jsonObject.put("technicianSignatures", jsonObject6);
                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                    Appreference.printLog("OfflineSendMessage", "detailsBean.getTechnicianSignature() CloneNotSupportedException Exception : " + e.getMessage(), "WARN", null);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("OfflineSendMessage", "detailsBean.getTechnicianSignature()  Exception : " + e.getMessage(), "WARN", null);
                }
            }
            JSONObject jsonObject7 = new JSONObject();
            if (detailsBean.getObservation() != null && !detailsBean.getObservation().equalsIgnoreCase(null)
                    && !detailsBean.getObservation().equalsIgnoreCase("") && detailsBean.getObservation().contains(".jpg")) {
                try {
                    TaskDetailsBean taskbean2 = (TaskDetailsBean) taskDetailsBean.clone();
                    taskbean2.setMimeType("image");
                    taskbean2.setTaskRequestType("observation");
                    taskbean2.setTaskDescription(detailsBean.getObservation());
                    jsonObject7.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(detailsBean.getObservation())));
                    jsonObject7.put("taskFileExt", "jpg");
                    jsonObject.put("observationImage", jsonObject7);
//                                statusBean.setObservation(detailsBean.getObservation());
                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                    Appreference.printLog("OfflineSendMessage", "detailsBean.getObservation() CloneNotSupportedException Exception : " + e.getMessage(), "WARN", null);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("OfflineSendMessage", "detailsBean.getObservation() Exception : " + e.getMessage(), "WARN", null);
                }
            } else if (detailsBean.getObservation() != null && !detailsBean.getObservation().equalsIgnoreCase(null)
                    && !detailsBean.getObservation().equalsIgnoreCase("")) {
                jsonObject.put("observation", detailsBean.getObservation());
//                            statusBean.setObservation(detailsBean.getObservation());
            } else {
                jsonObject.put("observation", "");
            }
            JSONObject jsonObject8 = new JSONObject();
            if (detailsBean.getActionTaken() != null && !detailsBean.getActionTaken().equalsIgnoreCase(null)
                    && !detailsBean.getActionTaken().equalsIgnoreCase("") && detailsBean.getActionTaken().contains(".jpg")) {
                try {
                    TaskDetailsBean taskbean2 = (TaskDetailsBean) taskDetailsBean.clone();
                    taskbean2.setMimeType("image");
                    taskbean2.setTaskRequestType("actionTaken");
                    taskbean2.setTaskDescription(detailsBean.getActionTaken());
                    jsonObject8.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(detailsBean.getActionTaken())));
                    jsonObject8.put("taskFileExt", "jpg");
                    jsonObject.put("actionTakenImage", jsonObject8);
//                                statusBean.setActionTaken(detailsBean.getActionTaken());
                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                    Appreference.printLog("OfflineSendMessage", "detailsBean.getActionTaken()CloneNotSupportedException Exception : " + e.getMessage(), "WARN", null);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("OfflineSendMessage", "detailsBean.getActionTaken() Exception : " + e.getMessage(), "WARN", null);
                }
            } else if (detailsBean.getActionTaken() != null && !detailsBean.getActionTaken().equalsIgnoreCase("")) {
                jsonObject.put("actionTaken", detailsBean.getActionTaken());
//                            statusBean.setActionTaken(detailsBean.getActionTaken());
            } else {
                jsonObject.put("actionTaken", "");
            }
            JSONObject jsonObject9 = new JSONObject();
            if (detailsBean.getCustomerRemarks() != null && !detailsBean.getCustomerRemarks().equalsIgnoreCase(null)
                    && !detailsBean.getCustomerRemarks().equalsIgnoreCase("") && detailsBean.getCustomerRemarks().contains(".jpg")) {
                try {
                    TaskDetailsBean taskbean2 = (TaskDetailsBean) taskDetailsBean.clone();
                    taskbean2.setMimeType("image");
                    taskbean2.setTaskRequestType("customerRemarks");
                    taskbean2.setTaskDescription(detailsBean.getCustomerRemarks());
                    jsonObject9.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(detailsBean.getCustomerRemarks())));
                    jsonObject9.put("taskFileExt", "jpg");
                    jsonObject.put("remarksImage", jsonObject9);
//                                statusBean.setCustomerRemarks(detailsBean.getCustomerRemarks());
                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                    Appreference.printLog("OfflineSendMessage", "detailsBean.getCustomerRemarks()CloneNotSupportedException Exception : " + e.getMessage(), "WARN", null);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("OfflineSendMessage", "detailsBean.getCustomerRemarks() Exception : " + e.getMessage(), "WARN", null);
                }
            } else if (detailsBean.getCustomerRemarks() != null && !detailsBean.getCustomerRemarks().equalsIgnoreCase(null)
                    && !detailsBean.getCustomerRemarks().equalsIgnoreCase("")) {
                jsonObject.put("remarks", detailsBean.getCustomerRemarks());
                statusBean.setCustomerRemarks(detailsBean.getCustomerRemarks());
            } else {
                jsonObject.put("remarks", "");
            }
            JSONObject jsonObject10 = new JSONObject();
            if (detailsBean.getSynopsis() != null && !detailsBean.getSynopsis().equalsIgnoreCase(null)
                    && !detailsBean.getSynopsis().equalsIgnoreCase("") && detailsBean.getSynopsis().contains(".jpg")) {
                try {
                    TaskDetailsBean taskbean2 = (TaskDetailsBean) taskDetailsBean.clone();
                    taskbean2.setMimeType("image");
                    taskbean2.setTaskRequestType("synopsis");
                    taskbean2.setTaskDescription(detailsBean.getSynopsis());
                    jsonObject10.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(detailsBean.getSynopsis())));
                    jsonObject10.put("taskFileExt", "jpg");
                    jsonObject.put("synopsisImage", jsonObject10);
//                                statusBean.setCustomerRemarks(detailsBean.getCustomerRemarks());
                } catch (CloneNotSupportedException e) {
                    e.printStackTrace();
                    Appreference.printLog("OfflineSendMessage", "detailsBean.getSynopsis()CloneNotSupportedException Exception : " + e.getMessage(), "WARN", null);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("OfflineSendMessage", "detailsBean.getSynopsis() Exception : " + e.getMessage(), "WARN", null);
                }
            } else if (detailsBean.getSynopsis() != null && !detailsBean.getSynopsis().equalsIgnoreCase(null)
                    && !detailsBean.getSynopsis().equalsIgnoreCase("")) {
                jsonObject.put("synopsis", detailsBean.getSynopsis());
                statusBean.setSynopsis(detailsBean.getSynopsis());
            } else {
                jsonObject.put("synopsis", "");
            }
            Appreference.printLog("taskStatus", jsonObject.toString(), "Webservice failure", null);
            Appreference.jsonOfflineRequestSender.taskStatus(EnumJsonWebservicename.taskStatus, jsonObject, statusBean, NewTaskConversation.this);
        } catch (JSONException e) {
            e.printStackTrace();
            Appreference.printLog("OfflineSendMessage", "JSONException Exception : " + e.getMessage(), "WARN", null);
            Log.i("offline123", "ERROR-->" + e.getMessage());
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    public void resendMessageInwebservice(TaskDetailsBean detailsBean) {
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String dateTime = dateFormat.format(new Date());
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            String dateforrow = dateFormat.format(new Date());
            tasktime = dateTime;
            tasktime = tasktime.split(" ")[1];
            taskUTCtime = dateforrow;
            Log.i("task", "tasktime" + tasktime);
            Log.i("UTC", "sendMessage utc time" + dateforrow);


            JSONObject jsonObject = new JSONObject();
            JSONObject jsonObject1 = new JSONObject();
            jsonObject1.put("id", Integer.parseInt(webtaskId));
            jsonObject.put("task", jsonObject1);
            JSONObject jsonObject2 = new JSONObject();
            jsonObject2.put("id", Appreference.loginuserdetails.getId());
            jsonObject.put("from", jsonObject2);
            if ((!template && !project) || chat || note) {
                Log.i("taskconversation", "toUserId " + toUserId);
                JSONObject jsonObject3 = new JSONObject();
                jsonObject3.put("id", toUserId);
                if (taskType.equalsIgnoreCase("group")) {
                    jsonObject.put("group", jsonObject3);
                } else {
                    jsonObject.put("to", jsonObject3);
                }
            } else if (template) {
                JSONObject jsonObject6 = new JSONObject();
                jsonObject6.put("id", Appreference.loginuserdetails.getId());
                jsonObject.put("to", jsonObject6);
            }
            jsonObject.put("signalId", detailsBean.getSignalid());
            jsonObject.put("parentId", getFileName());
            jsonObject.put("createdDate", dateforrow);
            if (subType != null && subType.equalsIgnoreCase("taskDescription") && !detailsBean.getTaskDescription().contains("Completed Percentage ")) {
                jsonObject.put("requestType", "taskDescription");
            } else if ((detailsBean.getTaskDescription().equalsIgnoreCase("This Task is closed") || detailsBean.getTaskDescription().equalsIgnoreCase("This issue is closed"))) {
                jsonObject.put("requestType", "percentageCompleted");
                jsonObject.put("taskStatus", "closed");
                jsonObject.put("percentageCompleted", "100");
            } else if (isProjectFromOracle && (detailsBean.getTaskDescription() != null && detailsBean.getTaskDescription().equalsIgnoreCase("Completed Percentage 100%"))) {
                jsonObject.put("requestType", "percentageCompleted");
                jsonObject.put("taskStatus", "Completed");
                jsonObject.put("percentageCompleted", "100");
            } else if (detailsBean.getTaskStatus() != null && detailsBean.getTaskStatus().equalsIgnoreCase("percentageCompleted")) {
                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 11 " + detailsBean.getMimeType());
                jsonObject.put("requestType", "percentageCompleted");
            } else if (detailsBean.getTaskStatus() != null && detailsBean.getTaskStatus().equalsIgnoreCase("taskDateChangeRequest")) {
                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 14 " + detailsBean.getMimeType());
                jsonObject.put("requestType", "taskDateChangeRequest");
            } else if ((detailsBean.getTaskStatus() != null && detailsBean.getTaskStatus().equalsIgnoreCase("schedulingalert"))) {
                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 13 " + detailsBean.getMimeType());
                jsonObject.put("requestType", "schedulingalert");
            } else {
                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 12 " + detailsBean.getMimeType());
                jsonObject.put("requestType", "taskConversation");
            }
            Log.i("completepercentage ", "ispercentagecomplete *" + detailsBean.getTaskDescription());
            if ((detailsBean.getTaskDescription().equalsIgnoreCase("This Task is closed") || detailsBean.getTaskDescription().equalsIgnoreCase("This issue is closed"))) {
                jsonObject.put("requestStatus", "");
            } else {
                jsonObject.put("requestStatus", "approved");
            }
            jsonObject.put("taskEndDateTime", enddate);
            jsonObject.put("taskStartDateTime", startdate);
            jsonObject.put("remainderDateTime", reminderdate);
            jsonObject.put("dateFrequency", "");
            jsonObject.put("timeFrequency", reminderfreq);
            jsonObject.put("remark", "");
            JSONObject jsonObject5 = new JSONObject();
            jsonObject5.put("id", Appreference.loginuserdetails.getId());
            JSONObject jsonObject4 = new JSONObject();
            jsonObject4.put("user", jsonObject5);
            switch (detailsBean.getMimeType().toLowerCase().trim()) {
                case "image":
                    Log.i("taskconversation", "mediaListBean.getMimeType() --------> 13 " + detailsBean.getMimeType());
                    jsonObject4.put("fileType", "image");
                    jsonObject4.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(detailsBean.getTaskDescription())));
                    jsonObject4.put("taskFileExt", "jpg");
                    break;
                case "video":
                    Log.i("taskconversation", "mediaListBean.getMimeType() --------> 14 " + detailsBean.getMimeType());
                    jsonObject4.put("fileType", "video");
                    jsonObject4.put("fileContent", encodeAudioVideoToBase64(detailsBean.getTaskDescription()));
                    jsonObject4.put("taskFileExt", "mp4");
                    break;
                case "audio":
                    Log.i("taskconversation", "mediaListBean.getMimeType() --------> 15 " + detailsBean.getMimeType());
                    jsonObject4.put("fileType", "audio");
                    jsonObject4.put("fileContent", encodeAudioVideoToBase64(detailsBean.getTaskDescription()));
                    jsonObject4.put("taskFileExt", "mp3");
                    break;
                case "document":
                    Log.i("taskconversation", "mediaListBean.getMimeType() --------> 16 " + detailsBean.getMimeType());
                    Log.i("taskconversation", "mediaListBean.detailsBean.getTaskDescription().spilt() --------> 16 " + detailsBean.getTaskDescription().split(".")[1]);
                    jsonObject4.put("fileType", detailsBean.getMimeType());
                    jsonObject4.put("fileContent", encodeFileToBase64Binary(detailsBean.getTaskDescription()));
                    jsonObject4.put("taskFileExt", detailsBean.getTaskDescription().split(".")[1]);
                    break;
                case "text":
                    Log.i("taskconversation", "mediaListBean.getMimeType() --------> 17 " + detailsBean.getMimeType());
                    jsonObject4.put("fileType", "text");
                    jsonObject4.put("description", detailsBean.getTaskDescription());
                    break;
                case "assigntask":
                    Log.i("taskconversation", "mediaListBean.getMimeType() --------> 17 " + detailsBean.getTaskDescription());
                    jsonObject4.put("fileType", "assigntask");
                    jsonObject4.put("description", detailsBean.getTaskDescription());
                    break;
                case "map":
                    Log.i("taskconversation", "mediaListBean.getMimeType() --------> 18 " + detailsBean.getMimeType());
                    jsonObject4.put("fileType", "map");
                    jsonObject4.put("description", detailsBean.getTaskDescription());
                    break;
                case "textfile":
                    Log.i("taskconversation", "mediaListBean.getMimeType() --------> 19 " + detailsBean.getMimeType());
                    jsonObject4.put("fileType", detailsBean.getMimeType());
                    jsonObject4.put("taskFileExt", "txt");
                    jsonObject4.put("fileContent", encodeFileToBase64Binary(detailsBean.getTaskDescription()));
                    break;
            }
            JSONArray jsonArray = new JSONArray();
            jsonArray.put(0, jsonObject4);
            jsonObject.put("listTaskConversationFiles", jsonArray);

            Log.i("taskconversation", "mediaListBean.getMimeType() --------> 20 " + jsonArray);
            Log.i("Request", "Task date update for giver is " + jsonObject);
            Appreference.printLog("taskConversationEntry", jsonObject.toString(), "Request", null);
            listLastposition();
            Log.i("taskconversation", "mediaListBean.getMimeType() --------> 21 " + detailsBean.getMimeType());
//            if (isNetworkAvailable()) {
            Appreference.jsonRequestSender.taskConversationEntry(EnumJsonWebservicename.taskConversationEntry, jsonObject, this, null, detailsBean);
//            } else {
//                Toast.makeText(NewTaskConversation.this, "Check your internet connection", Toast.LENGTH_SHORT).show();
//            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void resendSipMessageForDate(TaskDetailsBean datebean) {
        try {
            String task_startdate = Appreference.customLocalDateToUTC(datebean.getPlannedStartDateTime());
            String task_enddate = Appreference.customLocalDateToUTC(datebean.getPlannedEndDateTime());
            String task_remindate = Appreference.customLocalDateToUTC(datebean.getRemainderFrequency());
            datebean.setUtcPlannedStartDateTime(task_startdate);
            datebean.setUtcplannedEndDateTime(task_enddate);
            datebean.setUtcPemainderFrequency(task_remindate);
            datebean.setCustomTagVisible(true);
            if (!isTaskName && datebean.getTaskId() != null && datebean.getTaskId().equalsIgnoreCase(webtaskId)) {
                if (project) {
                    VideoCallDataBase.getDB(context).update_Project_history(datebean);
                }
                if (VideoCallDataBase.getDB(context).insertORupdate_Task_history(datebean)) {
                    if (datebean.isCustomTagVisible()) {
                        taskList.add(datebean);
                    }
                    sortTaskMessage();
                }
                refresh();
            }
            Log.d("task", "tasklist-->" + taskList.size());
            Log.d("task", "taskId is sendMessage  " + task_No + "webtaskId is sendMessage  " + webtaskId);
            // send status 0 is send 1 is unsend
            if (!template && !note) {
                Log.d("TaskObserver", "TaskObserver list size is == " + listOfObservers.size());
                if (listOfObservers != null && listOfObservers.size() > 0) {
                    if (listOfObservers.size() == 1) {
                        String xml = composeChatXML(datebean);
                        Log.i("ListObserver", "buddy_username " + listOfObservers);
                        sendMultiInstantMessage(xml, listOfObservers, 0);
                    } else {
                        for (String buddy_username : listOfObservers) {
                            Log.i("ListObserver", "buddy_username " + buddy_username);
                            if (!datebean.getTaskType().equalsIgnoreCase("group")) {
                                datebean.setToUserName(buddy_username);
                                int ToUserid = VideoCallDataBase.getDB(context).getUserid(buddy_username);
                                Log.i("ListObserver", "buddy_username Id" + ToUserid);
                                datebean.setToUserId(String.valueOf(ToUserid));
                            }
                            String xml = composeChatXML(datebean);
                            sendMultiInstantMessage(xml, listOfObservers, 0);
                        }
                    }
                }
            } else {
                updateTemplateStatus(datebean);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "resendSipMessageForDate Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void taskReminderMessage(final TaskDetailsBean taskBean, final String designDate, final String type1, final String imagename, final String remquotes_1) {
        try {
            Log.d("Task", "------taskReminderMessage entry------");
            Log.i("Task", "taskReminderMessage " + taskBean.getTaskId());
            Log.i("Task", "taskReminderMessage " + Appreference.webid);
            if (webtaskId != null && webtaskId.equalsIgnoreCase(taskBean.getTaskId()) && Appreference.webid != null && taskBean.getTaskId().equalsIgnoreCase(Appreference.webid)) {
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                String dateTime = dateFormat.format(new Date());
                dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                String dateforrow = dateFormat.format(new Date());
                tasktime = dateTime;
                tasktime = tasktime.split(" ")[1];
                Log.i("task", "tasktime" + tasktime);
                Log.i("UTC", "sendMessage utc time" + dateforrow);
                Log.i("time", "value");
                taskUTCtime = dateforrow;
                final TaskDetailsBean chatBean = new TaskDetailsBean();
                chatBean.setFromUserId(taskBean.getFromUserId());
                chatBean.setToUserId(taskBean.getToUserId());
                Log.i("groupMemberAccess", "medialist taskReminderMessage ----->  " + taskBean.getToUserId());
                Log.i("task", "to user id" + String.valueOf(toUserId));
                chatBean.setFromUserName(taskBean.getFromUserName());
                chatBean.setSelect(false);
                chatBean.setToUserName(taskBean.getToUserName());
                if (isTaskName) {
                    chatBean.setTaskName(taskBean.getTaskName());
                    chatBean.setOwnerOfTask(taskBean.getOwnerOfTask());
                } else {
                    chatBean.setTaskName(taskBean.getTaskName());
                    chatBean.setOwnerOfTask(taskBean.getOwnerOfTask());
                }
                chatBean.setTaskDescription(taskBean.getTaskDescription());
                chatBean.setTaskReceiver(taskBean.getTaskReceiver());
                chatBean.setTaskNo(taskBean.getTaskNo());
                chatBean.setCatagory(taskBean.getCatagory());
                chatBean.setIssueId(taskBean.getIssueId());
                chatBean.setParentId(taskBean.getParentId());
//                chatBean.setOverdue_Msg(taskBean.getOverdue_Msg());
                chatBean.setTaskPriority("High");
                chatBean.setCompletedPercentage("0");
                chatBean.setCustomTagVisible(true);
                Log.i("Reminder", "TimeDetails taskBean.getProjectId() " + taskBean.getProjectId());
                if (taskBean.getProjectId() != null) {
                    chatBean.setProjectId(taskBean.getProjectId());
                }
                chatBean.setTaskStatus(imagename);
                if (imagename != null && !imagename.equalsIgnoreCase("reminder"))
                    taskStatus = imagename;
                chatBean.setMsg_status(taskBean.getMsg_status());
                Log.i("task", "overdue--> " + chatBean.getTaskStatus());
                chatBean.setPlannedStartDateTime(taskBean.getPlannedStartDateTime());
                chatBean.setPlannedEndDateTime(taskBean.getPlannedEndDateTime());
                chatBean.setRemainderFrequency(taskBean.getRemainderFrequency());
                chatBean.setDateFrequency("");
                chatBean.setTimeFrequency(taskBean.getTimeFrequency());
                chatBean.setToUserName(taskBean.getToUserName());
                chatBean.setServerFileName("");
                chatBean.setRead_status(taskBean.getRead_status());
                chatBean.setReminderQuote(taskBean.getTaskDescription());
                chatBean.setTaskUTCTime(taskBean.getTaskUTCTime());
                chatBean.setTaskUTCDateTime(taskBean.getTaskUTCDateTime());
                chatBean.setDateTime(taskBean.getDateTime());
                chatBean.setTasktime(taskBean.getTasktime());
                chatBean.setSendStatus("0");    // send status 0 is send 1 is unsend
                chatBean.setMimeType(type1);
                chatBean.setTaskType(taskType);
                chatBean.setTaskId(taskBean.getTaskId());
                if (taskBean.getSignalid() != null && !taskBean.getSignalid().equalsIgnoreCase("")) {
                    chatBean.setSignalid(taskBean.getSignalid());
                    Log.e("filter", "filter if " + chatBean.getSignalid());
                } else {
                    chatBean.setSignalid(Utility.getSessionID());
                    Log.e("filter", "filter else " + chatBean.getSignalid());
                }
                if (taskBean.getProjectId() != null) {
                    chatBean.setProjectId(taskBean.getProjectId());
                }
                Log.e("filter", "filter" + filter);
                Log.e("filter", "filter" + Appreference.fillter);
                Log.e("filter", "filter" + taskBean.getTaskDescription());
                chatBean.setShow_progress(12);
                if (chatBean.getMimeType().equalsIgnoreCase(Appreference.fillter) || Appreference.fillter == null || Appreference.fillter.equalsIgnoreCase("RemoveAll") || taskBean.getTaskDescription().contains("This task is overdue")) {
                    if (chatBean.isCustomTagVisible()) {
                        taskList.add(chatBean);
                    }
                }
                sortTaskMessage();
                refresh();
                if (chatBean.getTaskDescription().equalsIgnoreCase("This task is overdue") && isRem_time) {
                    counter.cancel();
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            reminingtime.setVisibility(View.GONE);
                        }
                    });
                    isRem_time = false;
                }
                Log.d("task", "task_No is sendMessage  " + task_No);
                Appreference.printLog("Reminder", "TimeDetails if method " + chatBean.getDateTime(), "DEBUG", null);
                dataBase.insertORupdate_Task_history(chatBean);
                if (taskBean.getProjectId() != null) {
                    if (chatBean.getTaskStatus() != null && chatBean.getTaskStatus().equalsIgnoreCase("overdue")) {
                        VideoCallDataBase.getDB(this).updategrouptaskstatus("update projectHistory set taskStatus='overdue' where taskId='" + chatBean.getTaskId() + "'");
                    } else {
//                        chatBean.setTaskStatus("inprogress");
                        VideoCallDataBase.getDB(context).update_Project_history(chatBean);
                    }
                } else {
                    if (chatBean.getTaskStatus() != null && chatBean.getTaskStatus().equalsIgnoreCase("overdue")) {
                        dataBase.updategrouptaskstatus("update taskHistoryInfo set taskStatus='overdue' where taskId='" + chatBean.getTaskId() + "'");
                    } else {
                        if (chatBean.getMsg_status() != 15 && !chat && !chatBean.getFromUserName().equalsIgnoreCase(chatBean.getToUserName())) {
                            Log.i("reminder", "inserted");
                            dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                        }
                    }
                }
                UnreadChatCountShow();
                if (show_unreadCount > 0) {
                    if (list_all != null)
                        list_all.setTranscriptMode(AbsListView.TRANSCRIPT_MODE_DISABLED);
                } else if (list_all != null) {
                    list_all.smoothScrollToPosition(list_all.getAdapter().getCount() - 1);
                }
                refresh();
            } else {
                taskBean.setRead_status(2);
                taskBean.setCustomTagVisible(true);
                taskBean.setShow_progress(12);
                Appreference.printLog("Reminder", "TimeDetails else method " + taskBean.getDateTime(), "DEBUG", null);
                dataBase.insertORupdate_Task_history(taskBean);

                if (taskBean.getProjectId() != null) {
                    if (taskBean.getTaskStatus() != null && taskBean.getTaskStatus().equalsIgnoreCase("overdue")) {
                        VideoCallDataBase.getDB(this).updategrouptaskstatus("update projectHistory set taskStatus='overdue' where taskId='" + taskBean.getTaskId() + "'");
                    } else {
//                        taskBean.setTaskStatus("inprogress");
                        VideoCallDataBase.getDB(context).update_Project_history(taskBean);
                    }
                } else {
                    if (taskBean.getTaskStatus() != null && taskBean.getTaskStatus().equalsIgnoreCase("overdue")) {
                        dataBase.updategrouptaskstatus("update taskHistoryInfo set taskStatus='overdue' where taskId='" + taskBean.getTaskId() + "'");
                    } else {
                        if (taskBean.getMsg_status() != 0 && taskBean.getMsg_status() != 15)
                            dataBase.insertORupdate_TaskHistoryInfo(taskBean);
                    }
                }
                ContactsFragment contactsFragment = (ContactsFragment) Appreference.context_table.get("contactsfragment");
                if (contactsFragment != null) {
                    contactsFragment.refresh();
                }
                TaskHistory taskHistory = (TaskHistory) Appreference.context_table.get("taskhistory");
                if (taskHistory != null) {
                    taskHistory.refresh();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "taskReminderMessage Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void taskOverdueMessage(final TaskDetailsBean taskBean, final String type1, final String imagename, int isSend) {
        try {

            String xml;
            Log.d("Task", "------taskOverdueMessage entry------");
            Log.i("Task", "taskOverdueMessage" + taskBean.getTaskId());
            Log.i("Task", "taskOverdueMessage" + Appreference.webid);
            if (Appreference.webid != null && taskBean.getTaskId().equalsIgnoreCase(Appreference.webid)) {
                final TaskDetailsBean chatBean = new TaskDetailsBean();
                chatBean.setFromUserId(taskBean.getFromUserId());
                chatBean.setToUserId(taskBean.getToUserId());
                Log.i("Task", "to user id" + String.valueOf(toUserId));
                chatBean.setFromUserName(taskBean.getFromUserName());
                chatBean.setSelect(false);
                chatBean.setToUserName(taskBean.getToUserName());
                if (isTaskName) {
                    chatBean.setTaskName(taskBean.getTaskName());
                    chatBean.setOwnerOfTask(taskBean.getOwnerOfTask());
                } else {
                    chatBean.setTaskName(taskBean.getTaskName());
                    chatBean.setOwnerOfTask(taskBean.getOwnerOfTask());
                }
                chatBean.setTaskDescription(taskBean.getTaskDescription());
                Log.i("Note", "getTaskDescription " + chatBean.getTaskDescription());
                chatBean.setTaskReceiver(taskBean.getTaskReceiver());
                chatBean.setTaskNo(taskBean.getTaskNo());
                chatBean.setCatagory(taskBean.getCatagory());
                chatBean.setIssueId(taskBean.getIssueId());
                chatBean.setParentId(taskBean.getParentId());
                chatBean.setTaskPriority("High");
                chatBean.setCompletedPercentage("0");
                chatBean.setCustomTagVisible(true);
                chatBean.setTaskStatus(imagename);
                Log.i("Task", "taskOverdueMessage--> " + chatBean.getTaskStatus());
                Log.i("Note", "taskOverdueMessage--> " + chatBean.getTaskStatus());
                chatBean.setPlannedStartDateTime(Appreference.utcToLocalTime(taskBean.getPlannedStartDateTime()));
                chatBean.setPlannedEndDateTime(Appreference.utcToLocalTime(taskBean.getPlannedEndDateTime()));
                chatBean.setRemainderFrequency(Appreference.utcToLocalTime(taskBean.getRemainderFrequency()));
                chatBean.setUtcPlannedStartDateTime(taskBean.getUtcPlannedStartDateTime());
                chatBean.setUtcplannedEndDateTime(taskBean.getUtcplannedEndDateTime());
                chatBean.setUtcPemainderFrequency(taskBean.getUtcPemainderFrequency());
                chatBean.setDateFrequency("");
                chatBean.setTimeFrequency(taskBean.getTimeFrequency());
                chatBean.setIsRemainderRequired(taskBean.getIsRemainderRequired());
                chatBean.setToUserName(taskBean.getToUserName());
                if (taskBean.getServerFileName() != null) {
                    chatBean.setServerFileName(taskBean.getServerFileName());
                } else {
                    chatBean.setServerFileName("");
                }
                chatBean.setRead_status(0);
                chatBean.setMsg_status(10);
                chatBean.setTaskRequestType(taskBean.getTaskRequestType());
                Log.i("Buzz", "TaskRequestType is " + chatBean.getTaskRequestType());
                if (taskBean.getTaskRequestType() != null && taskBean.getTaskRequestType().equalsIgnoreCase("buzzrequest")) {
                    chatBean.setSubType(taskBean.getTaskRequestType());
                    chatBean.setReminderQuote("");
                } else if (taskBean.getReminderQuote() != null) {
                    chatBean.setReminderQuote(taskBean.getReminderQuote());
                } else {
                    chatBean.setReminderQuote(taskBean.getTaskDescription());
                }
                chatBean.setTaskUTCTime(taskBean.getTaskUTCTime());
                chatBean.setTaskUTCDateTime(taskBean.getTaskUTCDateTime());
                chatBean.setDateTime(taskBean.getDateTime());
                chatBean.setTasktime(taskBean.getTasktime());
                chatBean.setSendStatus("0");    // send status 0 is send 1 is unsend
                chatBean.setMimeType(type1);
                chatBean.setTaskType(taskType);
                chatBean.setTaskId(taskBean.getTaskId());
                chatBean.setRequestStatus(taskBean.getRequestStatus());
                if (taskBean.getSignalid() != null) {
                    chatBean.setSignalid(taskBean.getSignalid());
                } else {
                    chatBean.setSignalid(Utility.getSessionID());
                }
                if (taskBean.getProjectId() != null) {
                    chatBean.setProjectId(taskBean.getProjectId());
                }
                Log.e("filter", "filter" + filter);
                Log.e("filter", "filter" + Appreference.fillter);
                Log.e("filter", "filter" + taskBean.getTaskDescription());
                Log.i("Note", "filter" + taskBean.getTaskDescription());
                Log.i("Note", "filter" + Appreference.fillter);
                if (chatBean.getMimeType().equalsIgnoreCase(Appreference.fillter) || Appreference.fillter == null || Appreference.fillter.equalsIgnoreCase("RemoveAll") || taskBean.getTaskDescription().contains("This task is overdue")) {
                    if (chatBean.isCustomTagVisible()) {
                        taskList.add(chatBean);
                    }
                }
                Log.d("Task", "task_No is sendMessage  " + task_No);
                Log.d("Task", "msg_status is sendMessage  " + chatBean.getMsg_status());
                Appreference.printLog("Reminder overdue", "TimeDetails if method " + chatBean.getDateTime(), "DEBUG", null);
                if (taskBean.getProjectId() != null) {
                    VideoCallDataBase.getDB(context).update_Project_history(chatBean);
                } else {
                    if (!taskBean.getTaskDescription().contains("unAnswered Reminder count"))
                        dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                }
                dataBase.insertORupdate_Task_history(chatBean);
                sortTaskMessage();
                refresh();
                xml = composeChatXML(chatBean);
            } else {
                Log.i("Task", "taskOverdueMessage else fired");
                taskBean.setRead_status(2);
                taskBean.setMsg_status(10);
                taskBean.setCustomTagVisible(true);
                Appreference.printLog("Reminder overdue", "TimeDetails else method " + taskBean.getDateTime(), "DEBUG", null);
                if (taskBean.getProjectId() != null) {
                    VideoCallDataBase.getDB(context).update_Project_history(taskBean);
                } else {
                    dataBase.insertORupdate_TaskHistoryInfo(taskBean);
                }
                dataBase.insertORupdate_Task_history(taskBean);
                refresh();
                xml = composeChatXML(taskBean);
                ContactsFragment contactsFragment = (ContactsFragment) Appreference.context_table.get("contactsfragment");
                if (contactsFragment != null) {
                    contactsFragment.refresh();
                }
                TaskHistory taskHistory = (TaskHistory) Appreference.context_table.get("taskhistory");
                if (taskHistory != null) {
                    taskHistory.refresh();
                }
                ProjectHistory project_History = (ProjectHistory) Appreference.context_table.get("projecthistory");
                if (project_History != null) {
                    Log.d("TaskHistory", "Value true refreshed-2");
                    project_History.refresh();
                }
                ProjectsFragment project_fragment = (ProjectsFragment) Appreference.context_table.get("projectfragment");
                if (project_fragment != null) {
                    Log.d("TaskHistory", "Value true refreshed-2");
                    project_fragment.refresh();
                }
            }
            Log.d("TaskObserver", "TaskObserver list size is == " + listOfObservers.size());
//            if (listOfObservers != null && listOfObservers.size() > 0 && !taskBean.getMimeType().equalsIgnoreCase("note") && isSend == 1) {
//                sendMultiInstantMessage(xml, listOfObservers, 0);
//            }
            ArrayList<String> listOfBuzzNames = new ArrayList<String>();
            if (taskBean.getTaskDescription() != null && taskBean.getTaskDescription().contains(",")) {
                int counter = 0;
                for (int i = 0; i < taskBean.getTaskDescription().length(); i++) {
                    if (taskBean.getTaskDescription().charAt(i) == ',') {
                        counter++;
                    }
                }
                for (int j = 0; j < counter + 1; j++) {
                    Log.i("project_details", "Task Mem's and position == " + taskBean.getTaskDescription().split(",")[j].trim() + " " + j);
                    listOfBuzzNames.add(taskBean.getTaskDescription().split(",")[j].trim());
                }
            } else {
                listOfBuzzNames.add(taskBean.getTaskDescription());
            }
            if (taskBean.getMsg_status() != 15)
                sendMultiInstantMessage(xml, listOfBuzzNames, 0);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "taskOverdueMessage Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void taskBeanListUpdate(TaskDetailsBean taskDetailsBean) {
        try {
            if (Appreference.webid != null && taskDetailsBean.getTaskId().equalsIgnoreCase(Appreference.webid)) {
                taskList.add(taskDetailsBean);
                dataBase.insertORupdate_Task_history(taskDetailsBean);
                sortTaskMessage();
                refresh();
                reminderTimerDisplay();
                Log.d("taskconversation", "conversation");
            } else {
                dataBase.insertORupdate_Task_history(taskDetailsBean);
                ContactsFragment contactsFragment = (ContactsFragment) Appreference.context_table.get("contactsfragment");
                if (contactsFragment != null) {
                    contactsFragment.refresh();
                }
                TaskHistory taskHistory = (TaskHistory) Appreference.context_table.get("taskhistory");
                if (taskHistory != null) {
                    taskHistory.refresh();
                }
                ProjectHistory project_History = (ProjectHistory) Appreference.context_table.get("projecthistory");
                if (project_History != null) {
                    Log.d("TaskHistory", "Value true refreshed-2");
                    project_History.refresh();
                }
                ProjectsFragment project_fragment = (ProjectsFragment) Appreference.context_table.get("projectfragment");
                if (project_fragment != null) {
                    Log.d("TaskHistory", "Value true refreshed-2");
                    project_fragment.refresh();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "taskBeanListUpdate Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void AbandTask(TaskDetailsBean taskDetailsBean) {
        try {
            taskDetailsBean.setTaskStatus("abandoned");
            JSONObject jsonObject = new JSONObject();
            Log.i("task", "taskid " + taskDetailsBean.getTaskId());
            try {
                JSONObject jsonObject1 = new JSONObject();
                jsonObject1.put("id", Integer.parseInt(taskDetailsBean.getTaskId()));
                jsonObject.put("task", jsonObject1);
                JSONObject jsonObject2 = new JSONObject();
                jsonObject2.put("id", Appreference.loginuserdetails.getId());
                jsonObject.put("from", jsonObject2);
                JSONObject jsonObject3 = new JSONObject();
                if (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase(null) && !taskDetailsBean.getProjectId().equalsIgnoreCase("null") && !taskDetailsBean.getProjectId().equalsIgnoreCase("")) {

                } else {
                    String task_receiver_1 = VideoCallDataBase.getDB(context).getProjectParentTaskId("select taskReceiver from taskHistoryInfo where taskId='" + taskDetailsBean.getTaskId() + "' order by id LIMIT 1");
                    Log.i("TaskHistory", "Abandoned toUser_id " + task_receiver_1);
                    int toUser_id = VideoCallDataBase.getDB(context).getUserid(task_receiver_1);
                    jsonObject3.put("id", String.valueOf(toUser_id));
                    jsonObject.put("to", jsonObject3);
                }
                jsonObject.put("signalId", taskDetailsBean.getSignalid());
                jsonObject.put("parentId", taskDetailsBean.getParentId());
                jsonObject.put("createdDate", taskDetailsBean.getDateTime());
                if (taskDetailsBean.getCompletedPercentage() != null && !taskDetailsBean.getCompletedPercentage().equalsIgnoreCase("") && !taskDetailsBean.getCompletedPercentage().equalsIgnoreCase(null)) {
                    jsonObject.put("percentageCompleted", taskDetailsBean.getCompletedPercentage());
                } else {
                    jsonObject.put("percentageCompleted", "0");
                }
                jsonObject.put("requestType", "percentageCompleted");
                jsonObject.put("taskStatus", "abandoned");
            } catch (JSONException e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "AbandTask Exception : " + e.getMessage(), "WARN", null);
            } catch (Exception e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "AbandTask Exception : " + e.getMessage(), "WARN", null);
            }
            Log.i("beforewebcall", taskDetailsBean.getTaskStatus());
            Log.i("jsonrequest", jsonObject.toString());
            Appreference.jsonRequestSender.taskConversationEntry(EnumJsonWebservicename.taskConversationEntry, jsonObject, NewTaskConversation.this, null, taskDetailsBean);
            Log.e("webservice ", "called.active ");
        } catch (NumberFormatException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "AbandTask taskConversationEntry Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "AbandTask taskConversationEntry Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void sendObserver(ArrayList<String> list, ArrayList<String> rejectlist) {
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String dateTime = dateFormat.format(new Date());
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            String dateforrow = dateFormat.format(new Date());
            String rejectString = null;
            tasktime = dateTime;
            tasktime = tasktime.split(" ")[1];
            Log.i("task", "tasktime" + tasktime);
            Log.i("UTC", "sendMessage utc time" + dateforrow);
            Log.i("time", "value");
            taskUTCtime = dateforrow;
            String[] stockArr = new String[list.size()];
            Log.i("observer name", "addedobserver_url " + list.size());
            Log.i("observer name", "addedobserver_url " + stockArr.length);
            stockArr = list.toArray(stockArr);
            StringBuilder builder = new StringBuilder();
            addedobserver = "";
            removedobserver = "";
            String addedobserver_url = null;
            Log.i("observer name", "addedobserver_url " + addedobserver_url);
            if (rejectlist.size() > 0) {
                String[] stockArr1 = new String[rejectlist.size()];
                stockArr1 = rejectlist.toArray(stockArr1);
                StringBuilder builder1 = new StringBuilder();
                for (String s : stockArr1) {
                    Log.d("observer", "value  == " + s);
                    removedobserver = removedobserver + VideoCallDataBase.getDB(this).getname(s) + ",";
                    Log.d("observer", "value  == " + removedobserver);
                    builder1.append(s);
                    builder1.append(",");
                }
                removedobserver = removedobserver.substring(0, removedobserver.length() - 1);
                Log.d("observer", "value  * * " + removedobserver);
                rejectString = builder1.toString().substring(0, builder1.toString().length() - 1);
                Log.i("observer", "rejected observer" + rejectString);
            }
            for (String s : stockArr) {
                Log.d("observer", "s : " + s);
                if (addedobserver_url == null) {
                    addedobserver_url = s;
                    Log.i("observer name", "addedobserver_url 1 " + addedobserver_url);
                } else {
                    addedobserver_url = addedobserver_url + "," + s;
                    Log.i("observer name", "addedobserver_url 2 " + addedobserver_url);
                }
                addedobserver = addedobserver + VideoCallDataBase.getDB(this).getname(s) + ",";
                Log.d("observer", "value  == " + addedobserver);
                Log.i("observer name", "addedobserver 1 " + addedobserver);
                builder.append(s);
                builder.append(",");
            }
            String s1 = "";
            if (list.size() > 0) {
                addedobserver = addedobserver.substring(0, addedobserver.length() - 1);
                Log.d("observer", "value  * * " + addedobserver);
                Log.i("observer name", "addedobserver 2 " + addedobserver);
                s1 = builder.toString().substring(0, builder.toString().length() - 1);
            }
            Log.d("observer", "value  == " + stockArr.toString());
            Log.d("observer", s1);
            final TaskDetailsBean chatBean = new TaskDetailsBean();
            Log.i("observerlist", "rejectlist ---->  " + rejectlist.size());
            Log.i("observerlist", "list ---->   " + list.size());
            int obj_size = rejectlist.size() + list.size();
            Log.i("observerlist", "size ---->   " + obj_size);
            String LoginUser = Appreference.loginuserdetails.getFirstName() + " " + Appreference.loginuserdetails.getLastName();
            if (rejectlist.size() > 0 && list.size() > 0) {
                chatBean.setTaskDescription(LoginUser + " added " + addedobserver + " as observer(s) \n" + LoginUser + " removed   " + removedobserver + " from observer(s)");
            } else if (rejectlist.size() == 0) {
                chatBean.setTaskDescription(LoginUser + " added " + addedobserver + " as observer(s)");
            } else if (rejectlist.size() > 0)
                chatBean.setTaskDescription(LoginUser + " removed " + removedobserver + " from observer(s) ");
            chatBean.setTaskObservers(s1);
            Log.d("observer", "value " + s1);
            if (rejectString != null) {
                Log.d("observer", "rejectString value  ---------> 1 " + rejectString);
                chatBean.setRejectedObserver(rejectString);
            }
            chatBean.setOwnerOfTask(ownerOfTask);
            chatBean.setCustomTagVisible(true);
            chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
            chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
            chatBean.setSelect(false);
            chatBean.setToUserName(toUserName);
            chatBean.setToUserId(String.valueOf(toUserId));
            chatBean.setSignalid(Utility.getSessionID());
            chatBean.setTaskNo(task_No);
            chatBean.setCatagory(category);
            chatBean.setIssueId(issueId);
            chatBean.setTaskId(webtaskId);
            chatBean.setParentId(getFileName());
            chatBean.setTaskPriority("low");
            chatBean.setCompletedPercentage("0");
            if (note) {
                chatBean.setTaskStatus("note");
            } else {
                chatBean.setTaskStatus(taskStatus);
            }
            if (project) {
                chatBean.setProjectId(projectId);
            }
            Log.i("Accept", "value 8" + chatBean.getTaskStatus());
            chatBean.setPlannedStartDateTime("");
            chatBean.setDateTime(dateforrow);
            chatBean.setTaskName(taskName);
            chatBean.setMimeType("observer");
            chatBean.setTasktime(tasktime);
            chatBean.setSendStatus("3");
            chatBean.setTaskType(taskType);
            chatBean.setTaskReceiver(taskReceiver);
            chatBean.setDateTime(dateTime);
            chatBean.setTaskUTCDateTime(dateforrow);
            chatBean.setTaskUTCTime(taskUTCtime);
            chatBean.setCustomTagVisible(true);
            chatBean.setSubType("normal");
            if (chatBean.isCustomTagVisible()) {
                taskList.add(chatBean);
            }
            refresh();
            if (project) {
                dataBase.update_Project_history(chatBean);
            } else {
                dataBase.insertORupdate_TaskHistoryInfo(chatBean);
            }
            dataBase.insertORupdate_Task_history(chatBean);
//        dataBase.insertORupdate_TaskHistoryInfo(chatBean);
            String xml = composeObserverXml(chatBean, addedobserver_url);
            if (rejectlist.size() > 0)
                sendMultiInstantMessage(xml, listOfObservers, rejectlist);
            else
                sendMultiInstantMessage(xml, listOfObservers, 1);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "sendObserver Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void PercentageWebService(String getMediaPath, String sig_id, TaskDetailsBean chatBean) {
        try {
            if (!getMediaPath.equals(null)) {
                /*
                * Newly Added
                 */
                String subType = "normal";
                String getMediaType = "text";

                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                String dateTime = dateFormat.format(new Date());
                dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                String dateforrow = dateFormat.format(new Date());
                String tasktime = dateTime;
                tasktime = tasktime.split(" ")[1];
                String taskUTCtime = dateforrow;
                Log.i("task", "tasktime" + tasktime);
                Log.i("UTC", "sendMessage utc time" + dateforrow);
                if (chatBean == null) {
                    chatBean = new TaskDetailsBean();
                }

                chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                chatBean.setSelect(false);
                chatBean.setToUserName(toUserName);
                chatBean.setToUserId((String.valueOf(toUserId)));
                chatBean.setTaskDescription(getMediaPath);
                chatBean.setSignalid(sig_id);
                chatBean.setTaskNo(task_No);
                chatBean.setIssueId(issueId);
                chatBean.setParentId(getFileName());
                chatBean.setTaskType(taskType);
                chatBean.setTaskPriority("Medium");
                chatBean.setIsRemainderRequired("");
                chatBean.setCompletedPercentage("0");
                chatBean.setPlannedStartDateTime("");
                chatBean.setPlannedEndDateTime("");
                chatBean.setRemainderFrequency("");
                chatBean.setTaskUTCDateTime(dateforrow);
                chatBean.setDateTime(dateTime);
                chatBean.setTaskReceiver(taskReceiver);
                chatBean.setTasktime(tasktime);
                chatBean.setTaskUTCTime(taskUTCtime);
                chatBean.setMimeType(getMediaType);
                chatBean.setTaskId(webtaskId);
                chatBean.setOwnerOfTask(Appreference.loginuserdetails.getUsername());
                //            chatBean.setTaskStatus(taskStatus);
                if (getResources().getString(R.string.task_enable).equalsIgnoreCase("enable")) {
                    chatBean.setTaskStatus("assigned");
                } else {
                    chatBean.setTaskStatus("inprogress");
                }
                // send status 0 is send 1 is unsend
                chatBean.setSendStatus("0");
                chatBean.setMsg_status(0);
                chatBean.setWs_send("0");
                chatBean.setCustomTagVisible(true);
                if ((template && note) || chat) {
                    chatBean.setCatagory(category);
                }
                if (getResources().getString(R.string.task_enable).equalsIgnoreCase("enable")) {
                    if (category != null && category.equalsIgnoreCase("note")) {
                        chatBean.setTaskStatus("note");
                    } else {
                        chatBean.setTaskStatus("assigned");
                    }
                    //                chatBean.setTaskStatus("assigned");
                } else {
                    if (category != null && category.equalsIgnoreCase("note")) {
                        chatBean.setTaskStatus("note");
                    } else {
                        chatBean.setTaskStatus("inprogress");
                    }
                    //                chatBean.setTaskStatus("inprogress");
                }

                if (getMediaType != null && getMediaType.equalsIgnoreCase("textfile")) {
                    chatBean.setLongmessage("0");
                }
                if (!getMediaType.equalsIgnoreCase("text")) {
                    chatBean.setShow_progress(0);
                }
                if (project) {
                    chatBean.setProjectId(projectId);
                    if (projectGroup_Mems != null) {
                        chatBean.setGroupTaskMembers(projectGroup_Mems);
                    }
                }
                chatBean.setSubType(subType);
                chatBean.setTaskRequestType("taskDescription");
                Log.i("taskconversation", "istaskName percentagewebservice else ");
                chatBean.setSubType(subType);
                chatBean.setTaskRequestType(subType);
                chatBean.setTaskName(taskName);
                Log.e("task", "taskname **" + taskName);
                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 10 " + getMediaType);

                if (chatBean.isCustomTagVisible()) {
                    taskList.add(chatBean);
                }
                refresh();

                if (project) {
                    dataBase.update_Project_history(chatBean);
                } else {
                    dataBase.insertORupdate_TaskHistoryInfo(chatBean);
                }
                dataBase.insertORupdate_Task_history(chatBean);
//            dataBase.insertORupdate_TaskHistoryInfo(chatBean);


                try {
                    JSONObject jsonObject = new JSONObject();
                    JSONObject jsonObject1 = new JSONObject();
                    jsonObject1.put("id", Integer.parseInt(webtaskId));
                    jsonObject.put("task", jsonObject1);
                    JSONObject jsonObject2 = new JSONObject();
                    jsonObject2.put("id", Appreference.loginuserdetails.getId());
                    jsonObject.put("from", jsonObject2);
                    if ((!template && !project) || chat || note) {
                        Log.i("taskconversation", "toUserId " + toUserId);
                        JSONObject jsonObject3 = new JSONObject();
                        jsonObject3.put("id", toUserId);
                        if (taskType.equalsIgnoreCase("group")) {
                            jsonObject.put("group", jsonObject3);
                        } else {
                            jsonObject.put("to", jsonObject3);
                        }
                    }
                    jsonObject.put("signalId", sig_id);
                    jsonObject.put("parentId", getFileName());
                    jsonObject.put("createdDate", dateforrow);
                    jsonObject.put("requestType", "taskConversation");

                    if (getMediaPath != null && (getMediaPath.equalsIgnoreCase("This Task is closed") || getMediaPath.equalsIgnoreCase("This issue is closed"))) {
                        jsonObject.put("requestStatus", "");
                        Log.i("completepercentage ", "requeststatus ***" + getMediaPath);
                    } else {
                        jsonObject.put("requestStatus", "approved");
                    }
                    jsonObject.put("taskEndDateTime", "");
                    jsonObject.put("taskStartDateTime", "");
                    jsonObject.put("remainderDateTime", "");
                    jsonObject.put("dateFrequency", "");
                    jsonObject.put("timeFrequency", "");
                    jsonObject.put("remark", "");
                    JSONObject jsonObject5 = new JSONObject();
                    jsonObject5.put("id", Appreference.loginuserdetails.getId());
                    JSONObject jsonObject4 = new JSONObject();
                    jsonObject4.put("user", jsonObject5);
                    switch (getMediaType.toLowerCase().trim()) {
                        case "text":
                            Log.i("taskconversation", "mediaListBean.getMimeType() --------> 17 " + getMediaType);
                            jsonObject4.put("fileType", "text");
                            jsonObject4.put("description", getMediaPath);
                            break;
                    }
                    JSONArray jsonArray = new JSONArray();
                    jsonArray.put(0, jsonObject4);
                    jsonObject.put("listTaskConversationFiles", jsonArray);

                    if (jsonObject != null) {
                        Appreference.printLog("taskConversationEntry", jsonObject.toString(), "Request", null);
                        Appreference.jsonRequestSender.taskConversationEntry(EnumJsonWebservicename.taskConversationEntry, jsonObject, this, null, chatBean);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "PercentageWebService taskConversationEntry Exception : " + e.getMessage(), "WARN", null);
                }
            }
        } catch (Resources.NotFoundException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "taskConversationEntry Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "taskConversationEntry Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public String composeChatXML(TaskDetailsBean cmbean) {
        StringBuffer buffer = new StringBuffer();
        byte[] data_1;
        String base_64 = null;
        try {
            byte[] data = cmbean.getTaskDescription().trim().getBytes("UTF-8");
            Log.d("base64value", "base64 before " + cmbean.getTaskDescription());
            String base64 = Base64.encodeToString(data, Base64.DEFAULT);
            if (cmbean.getServerFileName() != null) {
                data_1 = cmbean.getServerFileName().trim().getBytes("UTF-8");
                Log.d("base64value", "base64 before " + cmbean.getServerFileName());
                base_64 = Base64.encodeToString(data_1, Base64.DEFAULT);
            }
            buffer.append("<?xml version=\"1.0\"?>" + "<TaskDetailsinfo><TaskDetails");

            if (cmbean.getTaskObservers() != null) {
                buffer.append(" taskAddObservers=" + quotes + cmbean.getTaskObservers() + quotes);
            }

            if (cmbean.getTaskRemoveObservers() != null) {
                buffer.append(" taskRemoveObservers=" + quotes + cmbean.getTaskRemoveObservers() + quotes);
            }

            if (cmbean.getTaskName() != null && !cmbean.getTaskName().equalsIgnoreCase("") && !cmbean.getTaskName().equalsIgnoreCase(null)) {
                String taskName = cmbean.getTaskName();
                if (taskName.contains("&") || taskName.contains("<") || taskName.contains("\"")) {
                    if (taskName.contains("<")) {
                        taskName = taskName.replaceAll("<", "&lt;");
                    }
                    if (taskName.contains("&")) {
                        taskName = taskName.replaceAll("&", "&amp;");
                    }
                    if (taskName.contains("\"")) {
                        taskName = taskName.replaceAll("\"", "&quot;");
                    }
                    buffer.append(" taskName=" + quotes + taskName + quotes);
                    Log.i("URL", "value " + taskName);
                } else {
                    buffer.append(" taskName=" + quotes + cmbean.getTaskName() + quotes);
                }
//                buffer.append(" taskName=" + quotes + cmbean.getTaskName() + quotes);
            } else {
                buffer.append(" taskName=" + quotes + "New Task" + quotes);
            }
            if (!cmbean.getMimeType().equalsIgnoreCase("text") && !cmbean.getMimeType().equalsIgnoreCase("url")) {
                if ((cmbean.getServerFileName() != null) && (!cmbean.getServerFileName().equalsIgnoreCase(null)) && (!cmbean.getServerFileName().equalsIgnoreCase(""))) {
                    Log.i("URL", "SaveFilename-->" + base_64.trim());
                    buffer.append(" taskDescription=" + quotes + base_64.trim() + quotes);
                } else {
                    Log.i("URL", "TaskDes-->" + base64);
                    buffer.append(" taskDescription=" + quotes + base64.trim() + quotes);
                }
            } else {
                Log.i("URL", "value * " + cmbean.getTaskDescription());
                if (base64 != null) {
                    String s = base64.trim();
                    if (s.contains("&") || s.contains("<") || s.contains("\"")) {
                        if (s.contains("<")) {
                            s = s.replaceAll("<", "&lt;");
                        }
                        if (s.contains("&")) {
                            s = s.replaceAll("&", "&amp;");
                        }
                        if (s.contains("\"")) {
                            s = s.replaceAll("\"", "&quot;");
                        }
                        buffer.append(" taskDescription=" + quotes + s + quotes);
                        Log.i("URL", "value " + s);
                    } else {
                        buffer.append(" taskDescription=" + quotes + base64.trim() + quotes);
                    }
                }
            }
            buffer.append(" fromUserId=" + quotes + cmbean.getFromUserId() + quotes);
            buffer.append(" fromUserName=" + quotes + cmbean.getFromUserName() + quotes);
            if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                if (cmbean.getTaskStatus() != null && cmbean.getTaskStatus().equalsIgnoreCase("draft")) {
                    buffer.append(" toUserId=" + quotes + "    " + quotes);
                    buffer.append(" toUserName=" + quotes + "        " + quotes);
                } else {
                    buffer.append(" toUserId=" + quotes + cmbean.getToUserId() + quotes);
                    buffer.append(" toUserName=" + quotes + cmbean.getToUserName() + quotes);
                }
            } else {
                if (project) {
                    buffer.append(" toUserId=" + quotes + "" + quotes);
                    buffer.append(" toUserName=" + quotes + "" + quotes);
                } else {
                    buffer.append(" toUserId=" + quotes + cmbean.getToUserId() + quotes);
                    buffer.append(" toUserName=" + quotes + cmbean.getToUserName() + quotes);
                }
            }
            buffer.append(" taskNo=" + quotes + cmbean.getTaskNo() + quotes);
            buffer.append(" taskId=" + quotes + cmbean.getTaskId() + quotes);
            buffer.append(" taskType=" + quotes + cmbean.getTaskType() + quotes);
            buffer.append(" plannedStartDateTime=" + quotes + cmbean.getUtcPlannedStartDateTime() + quotes);
            buffer.append(" plannedEndDateTime=" + quotes + cmbean.getUtcplannedEndDateTime() + quotes);
            buffer.append(" isRemainderRequired=" + quotes + cmbean.getIsRemainderRequired() + quotes);
            Log.i("newtaskconversation", "remainderDateTime " + cmbean.getUtcPemainderFrequency());
            if (cmbean.getUtcPemainderFrequency() == null || (cmbean.getUtcPemainderFrequency() != null && cmbean.getUtcPemainderFrequency().equalsIgnoreCase(""))) {
                cmbean.setUtcPemainderFrequency("");
            }
            buffer.append(" remainderDateTime=" + quotes + cmbean.getUtcPemainderFrequency() + quotes);
            if (cmbean.getCompletedPercentage() != null && !cmbean.getCompletedPercentage().equalsIgnoreCase("") && Integer.parseInt(cmbean.getCompletedPercentage()) == 100) {
                if (cmbean.getTaskStatus() != null && cmbean.getTaskStatus().equalsIgnoreCase("Closed")) {
                    Log.i("newtaskconversation", " compose taskStatus 1 " + cmbean.getTaskStatus());
                    buffer.append(" taskStatus=" + quotes + "Closed" + quotes);
                } else {
                    Log.i("newtaskconversation", " compose taskStatus 2 " + cmbean.getTaskStatus());
                    if (cmbean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                        if (isProjectFromOracle)
                            buffer.append(" taskStatus=" + quotes + "Completed" + quotes);
                        else
                            buffer.append(" taskStatus=" + quotes + "Closed" + quotes);
                    } else {
                        buffer.append(" taskStatus=" + quotes + "Completed" + quotes);
                    }
//                    buffer.append(" taskStatus=" + quotes + "Completed" + quotes);
                }
            } else {
                Log.i("newtaskconversation", " compose taskStatus 3 " + cmbean.getTaskStatus());
                Log.i("Accept", "value taskStatus after compose " + cmbean.getTaskStatus());
                buffer.append(" taskStatus=" + quotes + cmbean.getTaskStatus() + quotes);
            }
            buffer.append(" signalid=" + quotes + cmbean.getSignalid() + quotes);
            buffer.append(" parentId=" + quotes + cmbean.getParentId() + quotes);
            buffer.append(" taskRequestType=" + quotes + cmbean.getTaskRequestType() + quotes);
            buffer.append(" dateFrequency=" + quotes + cmbean.getDateFrequency() + quotes);
            String TimeFrequency = "", ReminderQuotes = "";
            if (cmbean.getFromUserName() != null && cmbean.getFromUserName().equalsIgnoreCase(ownerOfTask)) {
                Log.i("newtaskconversation", "cmbean.getTimeFrequency() " + cmbean.getTimeFrequency() + " is reminderrequired " + cmbean.getIsRemainderRequired());
                if (cmbean.getTimeFrequency() != null && (cmbean.getIsRemainderRequired() != null && cmbean.getIsRemainderRequired().equalsIgnoreCase("Y"))) {
                    TimeFrequency = TimeFrequencyCalculation(cmbean.getTimeFrequency());
                } else {
                    TimeFrequency = "";
                }
            } else {
                if (cmbean.getTimeFrequency() != null && (cmbean.getIsRemainderRequired() != null && cmbean.getIsRemainderRequired().equalsIgnoreCase("Y"))) {
                    TimeFrequency = TimeFrequencyCalculation(cmbean.getTimeFrequency());
                } else {
                    TimeFrequency = "";
                }
            }
            buffer.append(" timeFrequency=" + quotes + TimeFrequency + quotes);
            buffer.append(" taskOwner=" + quotes + cmbean.getOwnerOfTask() + quotes);
            buffer.append(" mimeType=" + quotes + cmbean.getMimeType() + quotes);
            buffer.append(" dateTime=" + quotes + cmbean.getTaskUTCDateTime() + quotes);
            buffer.append(" taskPriority=" + quotes + cmbean.getTaskPriority() + quotes);
            buffer.append(" completedPercentage=" + quotes + cmbean.getCompletedPercentage() + quotes);
            buffer.append(" remainderQuotes=" + quotes + cmbean.getReminderQuote() + quotes);
            buffer.append(" remark=" + quotes + cmbean.getRemark() + quotes);
            buffer.append(" taskReceiver=" + quotes + cmbean.getTaskReceiver() + quotes);
            if (project) {
                buffer.append(" taskToUsersList=" + quotes + project_toUsers + quotes);
            } else {
                buffer.append(" taskToUsersList=" + quotes + cmbean.getGroupTaskMembers() + quotes);
            }
            buffer.append(" requestStatus=" + quotes + cmbean.getRequestStatus() + quotes);
            buffer.append(" subType=" + quotes + cmbean.getSubType() + quotes);
            buffer.append(" daysOfTheWeek=" + quotes + cmbean.getDaysOfTheWeek() + quotes);
            buffer.append(" repeatFrequency=" + quotes + cmbean.getRepeatFrequency() + quotes);
            buffer.append(" taskTagName=" + quotes + cmbean.getTaskTagName() + quotes);
            buffer.append(" taskTagId=" + quotes + cmbean.getCustomTagId() + quotes);
            buffer.append(" taskTagGroupId=" + quotes + cmbean.getCustomSetId() + quotes);
            buffer.append(" isShowOnUI=" + quotes + cmbean.isCustomTagVisible() + quotes);
            Log.i("taskconversation", "Leave Project id 3 " + projectId);
            buffer.append(" projectId=" + quotes + cmbean.getProjectId() + quotes);
            buffer.append(" taskCategory=" + quotes + cmbean.getCatagory() + quotes);
            Log.i("taskconversation", "Leave Project id 4 " + projectId);
            buffer.append(" parentTaskId=" + quotes + cmbean.getIssueId() + quotes);
            if (cmbean.getDaysOfTheWeek() != null && !cmbean.getDaysOfTheWeek().equalsIgnoreCase("") && !cmbean.getDaysOfTheWeek().equalsIgnoreCase(null)) {
                buffer.append(" isRepeatTask=" + quotes + "Y" + quotes);
            }
            if (cmbean.getProjectStatus() != null && !cmbean.getProjectStatus().equalsIgnoreCase("") && !cmbean.getProjectStatus().equalsIgnoreCase(null)) {
                buffer.append(" projectStatus=" + quotes + cmbean.getProjectStatus() + quotes);
            }
            if (cmbean.getTravelStartTime() != null && !cmbean.getTravelStartTime().equalsIgnoreCase("") && !cmbean.getTravelStartTime().equalsIgnoreCase(null)) {
                buffer.append(" travelStartTime=" + quotes + cmbean.getTravelStartTime() + quotes);
            }
            if (cmbean.getTravelEndTime() != null && !cmbean.getTravelEndTime().equalsIgnoreCase("") && !cmbean.getTravelEndTime().equalsIgnoreCase(null)) {
                buffer.append(" travelEndTime=" + quotes + cmbean.getTravelEndTime() + quotes);
            }
            buffer.append(" />");
            buffer.append("</TaskDetailsinfo>");
            Log.d("xml", "composed xml for chat======>" + buffer.toString());
            Log.d("xml", "composed xml for encode data======>" + Charset.forName("UTF-8").encode(":-)").toString());
            Log.i("xml", "composed xml for listofabservers " + listOfObservers);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "composeChatXML Exception : " + e.getMessage(), "WARN", null);
        } finally {
            return buffer.toString();
        }
    }

    public String TimeFrequencyCalculation(String timeFrequency) {
        String remainder_Frequency = null, rem_freq_min, rem_frq;
        try {
            String time = timeFrequency;
            remainder_Frequency = "";
            long total_mins;
            if (getResources().getString(R.string.TASKNOTIFICATION_FROM_SERVER).equalsIgnoreCase("0")) {
                Log.i("task", "Reminder Freq Local Changed to Lower case " + reminderfreq.toLowerCase());
                switch (time.toLowerCase()) {
                    case "none":
                        remainder_Frequency = "0";
                        break;
                    case "every minute":
                        total_mins = 60000;
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    case "every 10 min":
                        total_mins = 10 * 60000;
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    case "hourly":
                        total_mins = 60 * 60000;
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    case "daily":
                        total_mins = 1440 * 60000;
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    case "week day":
                        total_mins = 10080 * 60000;
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    case "monthly":
                        total_mins = 43200 * 60000;
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    case "yearly":
                        total_mins = 525600 * 60000;
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    default:
                        remainder_Frequency = "0";
                        break;
                }
            } else {
                Log.i("Request", "timeFrequency " + time);  // 1 Minute
                rem_freq_min = time.split(" ")[0];   // 1
                rem_frq = time.split(" ")[1];   // Minute
                Log.i("task", "Reminder Freq Minutes " + rem_freq_min);
                switch (rem_frq.toLowerCase()) {
                    case "minutes":
                        total_mins = Long.parseLong(rem_freq_min) * 60000;
                        Log.i("task", "Reminder miniute Milliseconds " + total_mins);
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    case "hours":
                        total_mins = Long.parseLong(rem_freq_min) * (60 * 60000);
                        Log.i("task", "Reminder hour Milliseconds " + total_mins);
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    case "days":
                        long day_s = Long.parseLong(rem_freq_min);
                        total_mins = day_s * (1440 * 60000);
                        Log.i("task", "Reminder day Milliseconds " + day_s + " " + total_mins);
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    default:
                        remainder_Frequency = "0";
                        break;
                }
            }
        } catch (Resources.NotFoundException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "TimeFrequencyCalculation Exception : " + e.getMessage(), "WARN", null);
        } catch (NumberFormatException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "TimeFrequencyCalculation Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "TimeFrequencyCalculation Exception : " + e.getMessage(), "WARN", null);
        }
        return remainder_Frequency;
    }

    public String composeChatWithDrawXML(TaskDetailsBean cmbean) {
        StringBuffer buffer = new StringBuffer();
        try {
            buffer.append("<?xml version=\"1.0\"?>" + "<TaskDetailsinfo><WithdrawTaskDetails");
            buffer.append(" fromUserName=" + quotes + cmbean.getFromUserName() + quotes);
            buffer.append(" toUserName=" + quotes + cmbean.getToUserName() + quotes);
            buffer.append(" taskNo=" + quotes + cmbean.getTaskNo() + quotes);
            buffer.append(" taskId=" + quotes + cmbean.getTaskId() + quotes);
            buffer.append(" signalid=" + quotes + cmbean.getSignalid() + quotes);
            buffer.append(" parentId=" + quotes + cmbean.getParentId() + quotes);
            buffer.append(" mimeType=" + quotes + cmbean.getMimeType() + quotes);
            buffer.append(" />");
            buffer.append("</TaskDetailsinfo>");
            Log.d("xml", "composed xml for chat======>" + buffer.toString());
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "composeChatWithDrawXML Exception : " + e.getMessage(), "WARN", null);
        } finally {
            return buffer.toString();
        }
    }

    public String composeObserverXml(TaskDetailsBean cmbean, String addedobserver_url) {
        StringBuffer buffer = new StringBuffer();
        try {
            buffer.append("<?xml version=\"1.0\"?>" + "<TaskDetailsAddObserver><AddObserver");
            buffer.append(" taskOwner=" + quotes + cmbean.getOwnerOfTask() + quotes);
            buffer.append(" taskReceiver=" + quotes + cmbean.getToUserName() + quotes);
            buffer.append(" taskRemoveObservers=" + quotes + cmbean.getRejectedObserver() + quotes);
            buffer.append(" taskNo=" + quotes + cmbean.getTaskNo() + quotes);
            buffer.append(" taskId=" + quotes + cmbean.getTaskId() + quotes);
            if (cmbean.getTaskName() != null && !cmbean.getTaskName().equalsIgnoreCase("") && !cmbean.getTaskName().equalsIgnoreCase(null)) {
                String taskName = cmbean.getTaskName();
                if (taskName.contains("&") || taskName.contains("<") || taskName.contains("\"")) {
                    if (taskName.contains("<")) {
                        taskName = taskName.replaceAll("<", "&lt;");
                    }
                    if (taskName.contains("&")) {
                        taskName = taskName.replaceAll("&", "&amp;");
                    }
                    if (taskName.contains("\"")) {
                        taskName = taskName.replaceAll("\"", "&quot;");
                    }
                    buffer.append(" taskName=" + quotes + taskName + quotes);
                    Log.i("URL", "value " + taskName);
                } else {
                    buffer.append(" taskName=" + quotes + cmbean.getTaskName() + quotes);
                }
//                buffer.append(" taskName=" + quotes + cmbean.getTaskName() + quotes);
            } else {
                buffer.append(" taskName=" + quotes + "New Task" + quotes);
            }
//            buffer.append(" taskName=" + quotes + cmbean.getTaskName() + quotes);
            buffer.append(" taskAddObservers=" + quotes + addedobserver_url + quotes);
            buffer.append(" taskStatus=" + quotes + cmbean.getTaskStatus() + quotes);
            buffer.append(" signalid=" + quotes + cmbean.getSignalid() + quotes);
            buffer.append(" parentId=" + quotes + cmbean.getParentId() + quotes);
            buffer.append(" dateTime=" + quotes + cmbean.getTaskUTCDateTime() + quotes);
            buffer.append(" taskPriority=" + quotes + cmbean.getTaskPriority() + quotes);
            buffer.append(" completedPercentage=" + quotes + cmbean.getCompletedPercentage() + quotes);
            buffer.append(" taskCategory=" + quotes + cmbean.getCatagory() + quotes);
            buffer.append(" projectId=" + quotes + cmbean.getProjectId() + quotes);
            buffer.append(" taskType=" + quotes + cmbean.getTaskType() + quotes);
            Log.i("", "");
            buffer.append(" />");
            buffer.append("</TaskDetailsAddObserver>");
            Log.d("xml", "composed xml for chat======>" + buffer.toString());
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "composeObserverXml Exception : " + e.getMessage(), "WARN", null);
        } finally {
            return buffer.toString();
        }

    }

    public void sendInstantMessage(String msgBody) {
        Log.i("task", "ready to send");
        for (int i = 0; i < MainActivity.account.buddyList.size(); i++) {
            String name = MainActivity.account.buddyList.get(i).cfg.getUri();
            Log.i("task", "buddyname--> ! " + name);
            String nn = "sip:" + toUserName + "@" + getResources().getString(R.string.server_ip);
            Log.i("task", "selected user-->" + nn);
            if (nn.equalsIgnoreCase(name)) {
                Log.i("task", "both users are same");
                Appreference.printLog("Sipmessage", msgBody, "DEBUG", null);
                MyBuddy myBuddy = MainActivity.account.buddyList.get(i);
                SendInstantMessageParam prm = new SendInstantMessageParam();
                prm.setContent(msgBody);
                boolean valid = myBuddy.isValid();
                Log.i("task", "valid ======= " + valid);
                try {
                    myBuddy.sendInstantMessage(prm);
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendInstantMessage Exception : " + e.getMessage(), "WARN", null);
                }
                break;
            }
        }
    }

    public void sendMultiInstantMessage(String msgBody, ArrayList<String> userlist, ArrayList<String> rejected) {
        try {
            userlist.addAll(rejected);
            for (String name : userlist) {
                Log.i("task observer", "observer 1 " + name);
            }
            for (int i = 0; i < MainActivity.account.buddyList.size(); i++) {
                String name = MainActivity.account.buddyList.get(i).cfg.getUri();
                Log.i("task", "buddyname-->" + name);
                for (String username : userlist) {
                    Log.i("task", "taskObservers Name-->" + username);
                    String nn = "sip:" + username + "@" + getResources().getString(R.string.server_ip);
                    Log.i("task", "selected user-->" + nn);
                    if (nn.equalsIgnoreCase(name)) {
                        Log.i("task", "both users are same");
                        Appreference.printLog("Sipmessage", msgBody, "DEBUG", null);
                        MyBuddy myBuddy = MainActivity.account.buddyList.get(i);
                        SendInstantMessageParam prm = new SendInstantMessageParam();
                        prm.setContent(msgBody);
                        boolean valid = myBuddy.isValid();
                        Log.i("task", "valid ======= " + valid);
                        try {
                            myBuddy.sendInstantMessage(prm);
                        } catch (Exception e) {
                            e.printStackTrace();
                            Appreference.printLog("NewTaskConversation", "sendMultiInstantMessage Exception : " + e.getMessage(), "WARN", null);
                        }
                        break;
                    }
                }
            }
            userlist.removeAll(rejected);
        } catch (Resources.NotFoundException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "sendMultiInstantMessage Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "sendMultiInstantMessage Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void sendMultiInstantMessage(String msgBody, ArrayList<String> userlist, int sendTo) {
        for (String name : userlist) {
            Log.i("taskConversation", "sendMultiInstantMessage 1  ");
            Log.i("task observer", "observer 1 " + name);
            Log.i("task observer", "MainActivity.account.buddyList.size() @ " + MainActivity.account.buddyList.size());
        }
        if ((taskType != null && !taskType.equalsIgnoreCase("Group")) || project) {
            Log.i("groupMemberAccess", "!group ");
            Log.i("taskConversation", "sendMultiInstantMessage 2  ");
//        if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable") || !taskType.equalsIgnoreCase("Group")) {
            if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable") || sendTo == 1) {
                Log.i("taskConversation", "sendMultiInstantMessage 3  ");
                for (int i = 0; i < MainActivity.account.buddyList.size(); i++) {
                    Log.i("taskConversation", "sendMultiInstantMessage 4  ");
                    String name = MainActivity.account.buddyList.get(i).cfg.getUri();
                    Log.i("task", "buddyname-->  " + name);
                    for (String username : userlist) {
                        Log.i("taskConversation", "sendMultiInstantMessage 5  ");
                        Log.i("task", "taskObservers Name--> " + username);
                        String nn = "sip:" + username + "@" + getResources().getString(R.string.server_ip);
                        Log.i("task", "selected user--> " + nn);
                        if (nn.equalsIgnoreCase(name)) {
                            Log.i("taskConversation", "sendMultiInstantMessage 6  ");
                            Log.i("task", "both users are same ");
                            Appreference.printLog("Sipmessage", msgBody, "DEBUG", null);
                            MyBuddy myBuddy = MainActivity.account.buddyList.get(i);
                            SendInstantMessageParam prm = new SendInstantMessageParam();
                            prm.setContent(msgBody);

                            boolean valid = myBuddy.isValid();
                            Log.i("task", "valid ======= " + valid);
                            try {
                                Log.i("taskConversation", "sendMultiInstantMessage 7  ");
                                myBuddy.sendInstantMessage(prm);
                            } catch (Exception e) {
                                e.printStackTrace();
                                Appreference.printLog("NewTaskConversation", "sendMultiInstantMessage Exception : " + e.getMessage(), "WARN", null);
                            }
                            break;
                        }
                    }
                }
            } else {
                Log.i("taskConversation", "sendMultiInstantMessage 8  ");
                BuddyConfig bCfg = new BuddyConfig();
                bCfg.setUri("sip:" + proxy_user + "@" + getResources().getString(R.string.server_ip));
                bCfg.setSubscribe(false);
//            MainActivity.account.addBuddy(bCfg);
                Buddy myBuddy = new Buddy();
                try {
                    Log.i("taskConversation", "sendMultiInstantMessage 9  ");
                    myBuddy.create(MainActivity.account, bCfg);
//                MainActivity.account.addBuddy(myBuddy);
                    Log.i("task", "proxybuddy " + bCfg.getUri());
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendMultiInstantMessage Exception : " + e.getMessage(), "WARN", null);
                }
                SendInstantMessageParam prm = new SendInstantMessageParam();
                prm.setContent(msgBody);

                boolean valid = myBuddy.isValid();
                Log.i("task", "valid ======= " + valid);
                try {
                    Log.i("taskConversation", "sendMultiInstantMessage 10  ");
                    myBuddy.sendInstantMessage(prm);
                    myBuddy.delete();
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendMultiInstantMessage Exception : " + e.getMessage(), "WARN", null);
                }

            }
        } else if (groupMemberAccess != null && groupMemberAccess.getRespondTask() != null && groupMemberAccess.getRespondTask().contains("2")) {
            Log.i("groupMemberAccess", "getRespondTask==2 ");
            Log.i("taskConversation", "sendMultiInstantMessage 11  ");
            if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                for (int i = 0; i < MainActivity.account.buddyList.size(); i++) {
                    String name = MainActivity.account.buddyList.get(i).cfg.getUri();
                    Log.i("task", "buddyname--> 1 " + name);
                    Log.i("taskConversation", "sendMultiInstantMessage 12  ");
//                    for (String username : userlist) {
                    if (!Appreference.loginuserdetails.getUsername().equalsIgnoreCase(ownerOfTask)) {
                        Log.i("task", "taskObservers Name--> 1 " + ownerOfTask);
                        Log.i("taskConversation", "sendMultiInstantMessage 13  ");
                        String nn = "sip:" + ownerOfTask + "@" + getResources().getString(R.string.server_ip);
                        Log.i("task", "selected user--> 1 " + nn);
                        if (nn.equalsIgnoreCase(name)) {
                            Log.i("taskConversation", "sendMultiInstantMessage 14  ");
                            Log.i("task", "both users are same 1 ");
                            Appreference.printLog("Sipmessage", msgBody, "DEBUG", null);
                            MyBuddy myBuddy = MainActivity.account.buddyList.get(i);
                            SendInstantMessageParam prm = new SendInstantMessageParam();
                            prm.setContent(msgBody);

                            boolean valid = myBuddy.isValid();
                            Log.i("task", "valid ======= 1  " + valid);
                            try {
                                Log.i("taskConversation", "sendMultiInstantMessage 15  ");
                                myBuddy.sendInstantMessage(prm);
                            } catch (Exception e) {
                                e.printStackTrace();
                                Appreference.printLog("NewTaskConversation", "sendMultiInstantMessage Exception : " + e.getMessage(), "WARN", null);
                            }
                            break;
                        }
                    }
                }
            } else {
                Log.i("taskConversation", "sendMultiInstantMessage 16  ");
                BuddyConfig bCfg = new BuddyConfig();
                bCfg.setUri("sip:" + proxy_user + "@" + getResources().getString(R.string.server_ip));
                bCfg.setSubscribe(false);
//            MainActivity.account.addBuddy(bCfg);
                Buddy myBuddy = new Buddy();
                try {
                    Log.i("taskConversation", "sendMultiInstantMessage 17  ");
                    myBuddy.create(MainActivity.account, bCfg);
//                MainActivity.account.addBuddy(myBuddy);
                    Log.i("task", "proxybuddy 11 " + bCfg.getUri());
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendMultiInstantMessage Exception : " + e.getMessage(), "WARN", null);
                }
                SendInstantMessageParam prm = new SendInstantMessageParam();
                prm.setContent(msgBody);

                boolean valid = myBuddy.isValid();
                Log.i("task", "valid =======  11" + valid);
                try {
                    Log.i("taskConversation", "sendMultiInstantMessage 18  ");
                    myBuddy.sendInstantMessage(prm);
                    myBuddy.delete();
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendMultiInstantMessage Exception : " + e.getMessage(), "WARN", null);
                }
            }
        } else {
            Log.i("groupMemberAccess", "getRespondTask==1 ");
            Log.i("taskConversation", "sendMultiInstantMessage 19  ");
            if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable") || subType.equalsIgnoreCase("private")) {
                Log.i("taskConversation", "sendMultiInstantMessage 20  ");
                for (int i = 0; i < MainActivity.account.buddyList.size(); i++) {
                    String name = MainActivity.account.buddyList.get(i).cfg.getUri();
                    Log.i("task", "buddyname-->  " + name);
                    Log.i("taskConversation", "sendMultiInstantMessage 21  ");
                    for (String username : userlist) {
                        Log.i("taskConversation", "sendMultiInstantMessage 22  ");
                        Log.i("task", "taskObservers Name--> " + username);
                        String nn = "sip:" + username + "@" + getResources().getString(R.string.server_ip);
                        Log.i("task", "selected user--> " + nn);
                        if (nn.equalsIgnoreCase(name)) {
                            Log.i("taskConversation", "sendMultiInstantMessage 23  ");
                            Log.i("task", "both users are same ");
                            Appreference.printLog("Sipmessage", msgBody, "DEBUG", null);
                            MyBuddy myBuddy = MainActivity.account.buddyList.get(i);
                            SendInstantMessageParam prm = new SendInstantMessageParam();
                            prm.setContent(msgBody);

                            boolean valid = myBuddy.isValid();
                            Log.i("task", "valid ======= " + valid);
                            try {
                                Log.i("taskConversation", "sendMultiInstantMessage 24  ");
                                myBuddy.sendInstantMessage(prm);
                            } catch (Exception e) {
                                e.printStackTrace();
                                Appreference.printLog("NewTaskConversation", "sendMultiInstantMessage Exception : " + e.getMessage(), "WARN", null);
                            }
                            break;
                        }
                    }
                }
            } else {
                Log.i("taskConversation", "sendMultiInstantMessage 25  ");
                BuddyConfig bCfg = new BuddyConfig();
                bCfg.setUri("sip:" + proxy_user + "@" + getResources().getString(R.string.server_ip));
                bCfg.setSubscribe(false);
//            MainActivity.account.addBuddy(bCfg);
                Buddy myBuddy = new Buddy();
                try {
                    Log.i("taskConversation", "sendMultiInstantMessage 26  ");
                    myBuddy.create(MainActivity.account, bCfg);
//                MainActivity.account.addBuddy(myBuddy);
                    Log.i("task", "proxybuddy " + bCfg.getUri());
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendMultiInstantMessage Exception : " + e.getMessage(), "WARN", null);
                }
                SendInstantMessageParam prm = new SendInstantMessageParam();
                prm.setContent(msgBody);

                boolean valid = myBuddy.isValid();
                Log.i("task", "valid ======= " + valid);
                try {
                    Log.i("taskConversation", "sendMultiInstantMessage 27  ");
                    myBuddy.sendInstantMessage(prm);
                    myBuddy.delete();
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "sendMultiInstantMessage Exception : " + e.getMessage(), "WARN", null);
                }

            }
        }
    }






    /*

    owner side task

     */

    public void ownerofTasks() {


        // UI for task
        try {
            addObserver.setVisibility(View.GONE);
            sendTemplate.setVisibility(View.GONE);
            if (isProjectFromOracle)
                update.setVisibility(View.GONE);
            else
                update.setVisibility(View.VISIBLE);
            remind_me.setVisibility(View.GONE);
            reassign_note.setVisibility(View.GONE);
            task_accept_layout.setVisibility(View.GONE);
            calen_picker.setVisibility(View.VISIBLE);
            barchart.setVisibility(View.GONE);
            if ((taskType != null && !taskType.equalsIgnoreCase("Group"))) {
                notifyUI();
            } else {
                if (webtaskId != null && parentTaskId != null && webtaskId.equalsIgnoreCase(parentTaskId)) {
                    addObserver.setVisibility(View.GONE);
                } else {
                    if ((taskType != null && !taskType.equalsIgnoreCase("Group")) && !chat && !isProjectFromOracle) {
                        addObserver.setVisibility(View.VISIBLE);
                    } else {
                        addObserver.setVisibility(View.GONE);
                    }
                }
                if (!isProjectFromOracle)
                    sendTemplate.setVisibility(View.VISIBLE);
            }

            if (taskStatus != null && (taskStatus.equalsIgnoreCase("Completed") || taskStatus.equalsIgnoreCase("closed") || taskStatus.equalsIgnoreCase("Reopen"))) {
                if (project) {
                    if (isParentTask != null && isParentTask.equalsIgnoreCase("Y")) {
                        task_approve.setVisibility(View.GONE);
                        actorrej.setVisibility(View.GONE);
                    } else {
                        if (!isProjectFromOracle) {
                            Log.i("ApproveTask", "percent UI ** " + taskStatus);
                            task_approve.setVisibility(View.VISIBLE);
                            actorrej.setVisibility(View.VISIBLE);
                        }
                    }
                } else {
                    Log.i("ApproveTask", "percent UI 1*" + taskStatus);
                    task_approve.setVisibility(View.VISIBLE);
                    actorrej.setVisibility(View.VISIBLE);
                }
            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("Template")) {
                Log.i("taskconversation", "taskStatus is template? " + taskStatus);
                taskStatus = "assigned";
            }

            if (project) {
                if (!isProjectFromOracle)
                    sendTemplate.setVisibility(View.VISIBLE);
            } else {
                getTaskObservers();
                getGroupTaskMembers();
            }

            //codelevel
            if (project)
                Project_backgroundProcess();
            else
                backgroudProcess();
            if (isProjectFromOracle && !template) {
                bottom_layout.setVisibility(View.VISIBLE);
                Log.i("notifyTaskReceived", "bottom_layout 24 ");
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "ownerofTasks() Exception : " + e.getMessage(), "WARN", null);
        }
    }

    /*
    project ui
     */

    public void projectUI() {

    }



    /*
    taskid created then ui change
     */

    public void notifyUI() {
        try {
            Handler handler = new Handler();
            handler.post(new Runnable() {
                @Override
                public void run() {
                    if ((template && !chat && !note) && !isTaskName && !project) {
                        if (!isProjectFromOracle)
                            sendTemplate.setVisibility(View.VISIBLE);
                        barchart.setVisibility(View.VISIBLE);
                        if (isProjectFromOracle)
                            head.setText("Job Card No :" + JobCodeNo + "\nActivity Code :" + ActivityCode);
                        else
                            head.setText(taskName);

                    } else if ((!template || (note || !project)) && !isTaskName && !chat) {
                        if (webtaskId != null && parentTaskId != null && webtaskId.equalsIgnoreCase(parentTaskId)) {
                            addObserver.setVisibility(View.GONE);
                        } else {
                            if ((taskType != null && !taskType.equalsIgnoreCase("Group")) && !chat && !isProjectFromOracle) {
                                Log.d("chat", "visible 2");
                                addObserver.setVisibility(View.VISIBLE);
                            } else {
                                addObserver.setVisibility(View.GONE);
                            }
                        }
                        if (!isProjectFromOracle)
                            sendTemplate.setVisibility(View.VISIBLE);
                        update.setEnabled(true);
                        if (isProjectFromOracle)
                            head.setText("Job Card No :" + JobCodeNo + "\nActivity Code :" + ActivityCode);
                        else
                            head.setText(taskName);
                    } else if (project) {
                        addObserver.setVisibility(View.GONE);
                        sendTemplate.setVisibility(View.GONE);
                        barchart.setVisibility(View.GONE);
                    }
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "notifyUI() Exception : " + e.getMessage(), "WARN", null);
        }
    }


    public void Project_backgroundProcess() {

        try {
            String query_1 = null;
            if (note) {
                query_1 = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskStatus=='note') and (taskId='" + webtaskId + "') and (projectId='" + projectId + "') and customTagVisible = '1';";
            } else if (template) {
                query_1 = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskStatus=='draft') and (taskId='" + webtaskId + "') and (projectId='" + projectId + "') and customTagVisible = '1';";
            } else {
                query_1 = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskStatus!='note' and taskStatus!='draft') and (taskId='" + webtaskId + "') and (projectId='" + projectId + "') and customTagVisible = '1';";
            }
            Log.d("task", "query " + query_1);
            taskList_1 = new ArrayList<>();
            if (!template && !note && (category != null && category.equalsIgnoreCase("issue"))) {
                task_issue.setVisibility(View.GONE);
            }
            if (webtaskId != null && !webtaskId.equalsIgnoreCase("")) {
                Log.d("task", "Updated Task Read status");
                VideoCallDataBase.getDB(context).updateprojectMsgReadStatus(webtaskId);
                VideoCallDataBase.getDB(context).updateTaskMsgReadStatus(webtaskId);
            }
            if (subType != null && subType.equalsIgnoreCase("private")) {
                icons.setBackgroundColor(getResources().getColor(R.color.grey));
                linear1.setBackgroundColor(getResources().getColor(R.color.grey));
            }
            if (VideoCallDataBase.getDB(context).getTaskHistory(query_1) != null) {
                Log.d("task", "PJ_BG TASK HISTORY NOT NULL");
                taskList = VideoCallDataBase.getDB(context).getTaskHistory(query_1);
                sortTaskMessage();
                Log.d("task", "TASK HISTORY List size  = " + taskList.size());
                String dateValue1 = "";
                if (taskList.size() > 0) {
                    for (TaskDetailsBean taskBean : taskList) {
                        taskBean.setOwnerOfTask(ownerOfTask);
                        taskBean.setTaskReceiver(taskReceiver);
                        taskBean.setTaskName(taskName);
                    }
                }
                datelist.clear();
                for (int da = 0; da < taskList.size(); da++) {
                    TaskDetailsBean taskDetailsBean = taskList.get(da);
                    String dateValue = taskDetailsBean.getDateTime().split(" ")[0];
                    if (dateValue1.equalsIgnoreCase("") || !dateValue1.equalsIgnoreCase(dateValue)) {
                        TaskDetailsBean taskDetailsBean1 = new TaskDetailsBean();
                        taskDetailsBean1.setDateTime(taskDetailsBean.getDateTime());
                        taskDetailsBean1.setTaskDescription(dateValue);
                        taskDetailsBean1.setMimeType("textdate");
                        taskDetailsBean1.setCustomTagVisible(true);
                        taskDetailsBean1.setFromUserName(taskDetailsBean.getFromUserName());
                        taskDetailsBean1.setServerFileName(dateValue);
                        taskDetailsBean1.setTaskStatus(taskDetailsBean.getTaskStatus());
                        taskDetailsBean1.setRequestStatus(taskDetailsBean.getRequestStatus());
                        taskDetailsBean1.setOwnerOfTask(taskDetailsBean.getOwnerOfTask());
                        taskDetailsBean1.setTaskReceiver(taskDetailsBean.getTaskReceiver());
                        taskDetailsBean1.setTaskType(taskDetailsBean.getTaskType());
                        taskDetailsBean1.setTaskId(taskDetailsBean.getTaskId());
                        taskDetailsBean1.setTaskName(taskDetailsBean.getTaskName());
                        taskDetailsBean1.setRequestStatus(taskDetailsBean.getRequestStatus());
                        datelist.add(taskDetailsBean1);
                    }
                    dateValue1 = dateValue;
                    datelist.add(taskDetailsBean);
                }
                taskList = datelist;
                medialistadapter = new MediaListAdapter(NewTaskConversation.this, taskList, "task", category, new onClick() {
                    @Override
                    public void onClick(final TaskDetailsBean gcBean, final MediaListAdapter.ViewHolder v, final int position, View view) {
                        Log.i("audio", String.valueOf(view.getId()));
                        Log.i("audio", String.valueOf(position));
                        holder = (MediaListAdapter.ViewHolder) view.getTag();
                        Log.i("audio", "g c " + gcBean.getTaskDescription());
                        if (gcBean.isSelect()) {
                            gcBean.setSelect(false);
                        } else {
                            gcBean.setSelect(true);
                        }
                        refresh();
                    }

                    @Override
                    public void onLongClick(int position, View view) {
                    }

                    @Override
                    public void showMedialistProgress() {
                        showprogress();
                    }

                    @Override
                    public void dateSendORApprovalORReject(TaskDetailsBean detailsBean, String approveOrReject) {
                        date_header = approveOrReject;
                        startdate = detailsBean.getPlannedStartDateTime();
                        enddate = detailsBean.getPlannedEndDateTime();
                        reminderdate = detailsBean.getRemainderFrequency();
                        reminderfreq = detailsBean.getTimeFrequency();
                        isRemainderRequired = detailsBean.getIsRemainderRequired();
                        if (approveOrReject.equalsIgnoreCase("approved")) {
                            reminderquote = detailsBean.getReminderQuote();
                        } else {
                            reminderquote = remquotes_1;
                        }
                        remindertone = detailsBean.getServerFileName();
                        Log.i("task", "remindertone " + remindertone);
                        ch_remarks = detailsBean.getRemark();
                        Log.i("date's", "startdate" + startdate);
                        Log.i("date's", "enddate" + enddate);
                        Log.i("date's", "reminderdate" + reminderdate);
                        Log.i("date's", "reminderfreq" + reminderfreq);
                        Log.i("date's", "reminderquote" + reminderquote);
                        Log.i("date's", "remindertone" + remindertone);
                        Log.i("date's", "date_header" + date_header);
                        Log.i("date's", "WeekDays" + ch_remarks);
                        NewTaskConversation.this.dateSendORApprovalORReject();
                    }
                });
                list_all.setAdapter(medialistadapter);
                if (taskList != null && taskList.size() > 0 && taskList.size() != -1) {
                    final TaskDetailsBean taskDetailsBean = taskList.get(0);
                    TaskDetailsBean task = null;
                    for (int i = taskList.size() - 1; i >= 0; i--) {
                        task = taskList.get(i);
                        Log.i("date", " task.getMimeType() :" + task.getMimeType());
                        if (task.getMimeType() != null && task.getMimeType().equalsIgnoreCase("date")) {
                            break;
                        }
                    }

                    if (Appreference.loginuserdetails.getUsername().equalsIgnoreCase(taskDetailsBean.getFromUserName())) {
                        int percentage1 = VideoCallDataBase.getDB(context).percentagechecker(webtaskId);
                        if ((task.getTaskStatus() != null && task.getRequestStatus() != null)) {
                            if (percentage1 != 100 && (!task.getTaskStatus().equalsIgnoreCase("draft") && !task.getTaskStatus().equalsIgnoreCase("abandoned") && !task.getTaskStatus().equalsIgnoreCase("rejected")) && (task.getRequestStatus().equalsIgnoreCase("approved") || task.getRequestStatus().equalsIgnoreCase("assigned") || task.getRequestStatus().equalsIgnoreCase("requested"))) {
                                if ((taskDetailsBean.getOwnerOfTask() != null && taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) || (taskDetailsBean.getTaskReceiver() != null && taskDetailsBean.getTaskReceiver().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) || (taskDetailsBean.getTaskType() != null && taskDetailsBean.getTaskType().equalsIgnoreCase("Group"))) {
                                    reminderTimerDisplay();
                                }
                            }
                        }
                        if (taskDetailsBean.getTaskId().equalsIgnoreCase(parentTaskId)) {
                            update.setVisibility(View.GONE);
                            calen_picker.setVisibility(View.GONE);
                            accept.setVisibility(View.GONE);
                            reject.setVisibility(View.GONE);
                        }
                        Log.e("Accept", "update4 " + isTaskAccept);
                        if (!isTaskName)
                            update.setEnabled(true);
                    } else {
                        Log.i("task", "from_UserName");
                        int percentage1 = VideoCallDataBase.getDB(context).percentagechecker(webtaskId);
                        if ((task.getTaskStatus() != null && task.getRequestStatus() != null)) {
                            if (percentage1 != 100 && !task.getTaskStatus().equalsIgnoreCase("abandoned") && !task.getTaskStatus().equalsIgnoreCase("rejected") && (task.getRequestStatus().equalsIgnoreCase("approved") || task.getRequestStatus().equalsIgnoreCase("assigned") || task.getRequestStatus().equalsIgnoreCase("requested"))) {
                                if ((taskDetailsBean.getOwnerOfTask() != null && taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) || (taskDetailsBean.getTaskReceiver() != null && taskDetailsBean.getTaskReceiver().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) || (taskDetailsBean.getTaskType() != null && taskDetailsBean.getTaskType().equalsIgnoreCase("Group"))) {
                                    reminderTimerDisplay();
                                }
                            }
                        }
                        String head_name = "";

                        head_name = taskDetailsBean.getTaskName();
                        Log.i("taskConversation", "loadUI parentTaskId " + parentTaskId + "     webtaskId " + taskDetailsBean.getTaskId());
                        if (taskDetailsBean.getTaskId().equalsIgnoreCase(parentTaskId)) {
                            update.setVisibility(View.GONE);
                            calen_picker.setVisibility(View.GONE);
                            remind_me.setVisibility(View.GONE);
                            reassign_note.setVisibility(View.GONE);
                            accept.setVisibility(View.GONE);
                            reject.setVisibility(View.GONE);
                            task_approve.setVisibility(View.GONE);
                            actorrej.setVisibility(View.GONE);
                        }
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                task_accept_layout.setVisibility(View.GONE);
                                Log.i("Accept", "task_accept_layout loadUI 4 " + taskStatus);
                            }
                        });
                        Log.i("task", "head_name " + head_name);
                        Log.i("Task1", "tasktyped" + taskType);
                        Log.i("Task1", "Owner" + taskDetailsBean.getOwnerOfTask() + Appreference.loginuserdetails.getUsername());
                        Log.i("Task1", "Receiver" + taskDetailsBean.getTaskReceiver() + Appreference.loginuserdetails.getUsername());
                        Log.e("Accept", "update7 " + isTaskAccept);
                        if ((taskDetailsBean.getTaskStatus() != null && taskDetailsBean.getTaskStatus().equalsIgnoreCase("rejected")) && (taskDetailsBean.getTaskDescription() != null && taskDetailsBean.getTaskDescription().equalsIgnoreCase(category + " Rejected"))) {
                            if (isRem_time) {
                                counter.cancel();
                                reminingtime.setVisibility(View.GONE);
                                isRem_time = false;
                            }
                        }
                    }

                }
            }
        } catch (Resources.NotFoundException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "Project_backgroundProcess Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "Project_backgroundProcess Exception : " + e.getMessage(), "WARN", null);
        }

    }


    public void backgroudProcess() {
        try {
            Log.i("listswipe", "backgroudProcess method");
            int row_count = VideoCallDataBase.getDB(context).getTaskHistoryRowCount("select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "')   and customTagVisible = '1';");
            Log.i("lazyloadtaskcv", "oncreate conversation page row_count--> " + row_count);
            String query_1 = null;
            boolean countAboveten = false;
            if (row_count != 0 && row_count >= 10) {
                row_count = row_count - 10;
                taskList_count = row_count;
                countAboveten = true;
            } else if (row_count < 10) {
                taskList_count = 0;
            } else {
                row_count = 0;
                taskList_count = 0;
            }
            Log.i("lazyloadtaskcv", "oncreate db count---> " + row_count);
            Log.i("lazyloadtaskcv", "buddyOrgroup_count---> " + taskList_count);
            Log.i("lazyloadtaskcv", "countAboveten " + countAboveten);
            if (row_count == 0 && !countAboveten) {
                query_1 = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "')   and customTagVisible = '1';";
            } else if (row_count < 10 && !countAboveten) {
                query_1 = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "')   and customTagVisible = '1' order by dateTime ASC LIMIT " + row_count + " OFFSET 0";
            } else {
                query_1 = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "')   and customTagVisible = '1' order by dateTime ASC LIMIT 10 OFFSET " + row_count + "";

            }
            Log.d("task", "query " + query_1);

            taskList_1 = new ArrayList<>();
            if (!template && !note && (category != null && category.equalsIgnoreCase("issue"))) {
                task_issue.setVisibility(View.GONE);
            }
            if (webtaskId != null && !webtaskId.equalsIgnoreCase("")) {
                Log.d("task", "Updated Task Read status");
                if (project) {
                    VideoCallDataBase.getDB(context).updateprojectMsgReadStatus(webtaskId);
                }
                VideoCallDataBase.getDB(context).updateTaskMsgReadStatus(webtaskId);
            }
            if (subType != null && subType.equalsIgnoreCase("private")) {
                icons.setBackgroundColor(getResources().getColor(R.color.grey));
                linear1.setBackgroundColor(getResources().getColor(R.color.grey));
            }
            if (VideoCallDataBase.getDB(context).getTaskHistory(query_1) != null) {
                Log.d("task", "TASK HISTORY NOT NULL");
                taskList = VideoCallDataBase.getDB(context).getTaskHistory(query_1);
                sortTaskMessage();
                Log.d("task", "TASK HISTORY List size  = " + taskList.size());
                String dateValue1 = "";
                if (taskList.size() > 0) {
                    for (TaskDetailsBean taskBean : taskList) {
                        taskBean.setOwnerOfTask(ownerOfTask);
                        taskBean.setTaskReceiver(taskReceiver);
                        taskBean.setTaskName(taskName);
                    }
                }
                datelist.clear();
                for (int da = 0; da < taskList.size(); da++) {
                    TaskDetailsBean taskDetailsBean = taskList.get(da);
                    String dateValue = taskDetailsBean.getDateTime().split(" ")[0];
                    Log.i("timingtask", "datevalue is " + dateValue);
                    Log.i("timingtask", "datevalue is " + dateValue1);

                    if (dateValue1.equalsIgnoreCase("") || (dateValue != null && !dateValue1.equalsIgnoreCase(dateValue))) {
                        TaskDetailsBean taskDetailsBean1 = new TaskDetailsBean();
                        taskDetailsBean1.setDateTime(taskDetailsBean.getDateTime());
                        taskDetailsBean1.setTaskDescription(dateValue);
                        taskDetailsBean1.setMimeType("textdate");
                        taskDetailsBean1.setCustomTagVisible(true);
                        taskDetailsBean1.setFromUserName(taskDetailsBean.getFromUserName());
                        taskDetailsBean1.setServerFileName(dateValue);
                        taskDetailsBean1.setTaskStatus(taskDetailsBean.getTaskStatus());
                        taskDetailsBean1.setRequestStatus(taskDetailsBean.getRequestStatus());
                        taskDetailsBean1.setOwnerOfTask(taskDetailsBean.getOwnerOfTask());
                        taskDetailsBean1.setTaskReceiver(taskDetailsBean.getTaskReceiver());
                        taskDetailsBean1.setTaskType(taskDetailsBean.getTaskType());
                        taskDetailsBean1.setTaskId(taskDetailsBean.getTaskId());
                        taskDetailsBean1.setTaskName(taskDetailsBean.getTaskName());
                        taskDetailsBean1.setRequestStatus(taskDetailsBean.getRequestStatus());
                        datelist.add(taskDetailsBean1);
                        Log.i("timingtask", "datevalue is in datelist " + dateValue);
                    }
                    dateValue1 = dateValue;
                    datelist.add(taskDetailsBean);
                }
                taskList = datelist;
                Log.d("task", "TASK HISTORY List 1 = " + taskList.size());
                medialistadapter = new MediaListAdapter(NewTaskConversation.this, taskList, "task", category, new onClick() {
                    @Override
                    public void onClick(final TaskDetailsBean gcBean, final MediaListAdapter.ViewHolder v, final int position, View view) {
                        Log.i("audio", String.valueOf(view.getId()));
                        Log.i("audio", String.valueOf(position));
                        holder = (MediaListAdapter.ViewHolder) view.getTag();
                        Log.i("audio", "g c " + gcBean.getTaskDescription());
                        if (gcBean.isSelect()) {
                            gcBean.setSelect(false);
                        } else {
                            gcBean.setSelect(true);
                        }
                        refresh();
                    }

                    @Override
                    public void onLongClick(int position, View view) {
                    }

                    @Override
                    public void showMedialistProgress() {
                        showprogress();
                    }

                    @Override
                    public void dateSendORApprovalORReject(TaskDetailsBean detailsBean, String approveOrReject) {
                        date_header = approveOrReject;
                        startdate = detailsBean.getPlannedStartDateTime();
                        enddate = detailsBean.getPlannedEndDateTime();
                        reminderdate = detailsBean.getRemainderFrequency();
                        reminderfreq = detailsBean.getTimeFrequency();
                        isRemainderRequired = detailsBean.getIsRemainderRequired();
                        if (approveOrReject.equalsIgnoreCase("approved")) {
                            reminderquote = detailsBean.getReminderQuote();
                        } else {
                            reminderquote = remquotes_1;
                        }
                        remindertone = detailsBean.getServerFileName();
                        Log.i("task", "remindertone " + remindertone);
                        ch_remarks = detailsBean.getRemark();
                        Log.i("date's", "startdate" + startdate);
                        Log.i("date's", "enddate" + enddate);
                        Log.i("date's", "reminderdate" + reminderdate);
                        Log.i("date's", "reminderfreq" + reminderfreq);
                        Log.i("date's", "reminderquote" + reminderquote);
                        Log.i("date's", "remindertone" + remindertone);
                        Log.i("date's", "date_header" + date_header);
                        Log.i("date's", "WeekDays" + ch_remarks);
                        NewTaskConversation.this.dateSendORApprovalORReject();
                    }
                });
                list_all.setAdapter(medialistadapter);
                if (taskList != null && taskList.size() > 0 && taskList.size() != -1) {
                    final TaskDetailsBean taskDetailsBean = taskList.get(0);
                    TaskDetailsBean task = null;
                    for (int i = taskList.size() - 1; i >= 0; i--) {
                        task = taskList.get(i);
                        Log.i("date", " task.getMimeType() :" + task.getMimeType());
                        if (task.getMimeType() != null && task.getMimeType().equalsIgnoreCase("date")) {
                            break;
                        }
                    }

                    if (Appreference.loginuserdetails.getUsername().equalsIgnoreCase(taskDetailsBean.getFromUserName())) {
                        int percentage1 = VideoCallDataBase.getDB(context).percentagechecker(webtaskId);
                        if ((task.getTaskStatus() != null && task.getRequestStatus() != null)) {
                            if (percentage1 != 100 && (!task.getTaskStatus().equalsIgnoreCase("draft") && !task.getTaskStatus().equalsIgnoreCase("abandoned") && !task.getTaskStatus().equalsIgnoreCase("rejected")) && (task.getRequestStatus().equalsIgnoreCase("approved") || task.getRequestStatus().equalsIgnoreCase("assigned") || task.getRequestStatus().equalsIgnoreCase("requested"))) {
                                if ((taskDetailsBean.getOwnerOfTask() != null && taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) || (taskDetailsBean.getTaskReceiver() != null && taskDetailsBean.getTaskReceiver().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) || (taskDetailsBean.getTaskType() != null && taskDetailsBean.getTaskType().equalsIgnoreCase("Group"))) {
                                    reminderTimerDisplay();
                                }
                            }
                        }

                        Log.e("Accept", "update4 " + isTaskAccept);
                        if (!isTaskName)
                            update.setEnabled(true);
                    } else {
                        Log.i("task", "from_UserName");
                        int percentage1 = VideoCallDataBase.getDB(context).percentagechecker(webtaskId);
                        if ((task.getTaskStatus() != null && task.getRequestStatus() != null)) {
                            if (percentage1 != 100 && !task.getTaskStatus().equalsIgnoreCase("abandoned") && !task.getTaskStatus().equalsIgnoreCase("rejected") && (task.getRequestStatus().equalsIgnoreCase("approved") || task.getRequestStatus().equalsIgnoreCase("assigned") || task.getRequestStatus().equalsIgnoreCase("requested"))) {
                                if ((taskDetailsBean.getOwnerOfTask() != null && taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) || (taskDetailsBean.getTaskReceiver() != null && taskDetailsBean.getTaskReceiver().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) || (taskDetailsBean.getTaskType() != null && taskDetailsBean.getTaskType().equalsIgnoreCase("Group"))) {
                                    reminderTimerDisplay();
                                }
                            }
                        }
                        String head_name = "";

                        head_name = VideoCallDataBase.getDB(context).getReminderTaskname(taskDetailsBean.getTaskId());

                        Log.i("task", "head_name " + head_name);
                        Log.i("Task1", "tasktyped" + taskType);
                        Log.i("Task1", "Owner" + taskDetailsBean.getOwnerOfTask() + Appreference.loginuserdetails.getUsername());
                        Log.i("Task1", "Receiver" + taskDetailsBean.getTaskReceiver() + Appreference.loginuserdetails.getUsername());
                        Log.e("Accept", "update7 " + isTaskAccept);
                        if ((taskDetailsBean.getTaskStatus() != null && taskDetailsBean.getTaskStatus().equalsIgnoreCase("rejected")) && (taskDetailsBean.getTaskDescription() != null && taskDetailsBean.getTaskDescription().equalsIgnoreCase(category + " Rejected"))) {
                            if (isRem_time) {
                                counter.cancel();
                                reminingtime.setVisibility(View.GONE);
                                isRem_time = false;
                            }
                        }
                    }

                }
            }
        } catch (Resources.NotFoundException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "backgroudProcess Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "backgroudProcess Exception : " + e.getMessage(), "WARN", null);
        }
    }


    /*

    Taker side task

     */

    public void TakerofTasks() {


        // UI for task
        try {
            addObserver.setVisibility(View.GONE);
            sendTemplate.setVisibility(View.GONE);
            barchart.setVisibility(View.GONE);
            update.setVisibility(View.VISIBLE);
            remind_me.setVisibility(View.GONE);
            reassign_note.setVisibility(View.GONE);
            tab_datechangerequest.setVisibility(View.GONE);
            calen_picker.setVisibility(View.GONE);

            if (dataBase.getProjectParentTaskId("select mimetype from taskDetailsInfo where ((mimeType = 'Remove')  or (mimeType = 'Reassign')) and taskId ='" + webtaskId + "' order by id desc limit 1").equalsIgnoreCase("Remove")) {
                if (dataBase.getProjectParentTaskId("select mimetype from taskDetailsInfo where ((mimeType = 'Remove')  or (mimeType = 'Reassign')) and taskId ='" + webtaskId + "' order by id desc limit 1").equalsIgnoreCase("Remove"))
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            Log.i("notifyTaskReceived", "bottom_layout 25 ");
                            addObserver.setVisibility(View.GONE);
                            Log.i("gone123", "bottom_layout 0005 ");
                            bottom_layout.setVisibility(View.GONE);
                            if (!taskReceiver.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                bottom_layout.setVisibility(View.GONE);
                                Log.i("gone123", "bottom_layout 0006");
                                Log.i("notifyTaskReceived", "bottom_layout 26 ");
                            } else {
                                bottom_layout.setVisibility(View.VISIBLE);
                                Log.i("notifyTaskReceived", "bottom_layout 27 else ");
                            }
                        }
                    });
            }
            Log.i("taskconversation", "task_accept_layout 1 " + taskStatus);
            if (taskStatus.equalsIgnoreCase("template")) {
                taskStatus = "assigned";
            }
            if (taskStatus.equalsIgnoreCase("assigned") && !taskType.equalsIgnoreCase("Group")) {
                if (!isProjectFromOracle) {
                    runOnUiThread(new Runnable() {
                        @Override
                        public void run() {
                            task_accept_layout.setVisibility(View.VISIBLE);
                            accept.setVisibility(View.VISIBLE);
                            reject.setVisibility(View.VISIBLE);
                        }
                    });
                }
            } else {
                runOnUiThread(new Runnable() {
                    @Override
                    public void run() {
                        task_accept_layout.setVisibility(View.GONE);
                    }
                });
            }
            getTaskObservers();
            getGroupTaskMembers();


            if (project)
                Project_backgroundProcess();
            else
                backgroudProcess();

            for (int i = 0; i < taskList.size(); i++) {
                TaskDetailsBean taskbeen = taskList.get(i);
                if (taskbeen.getMimeType() != null && taskbeen.getMimeType().equalsIgnoreCase("date") && (!Appreference.loginuserdetails.getUsername().equalsIgnoreCase(taskbeen.getOwnerOfTask()))) {
                    Log.i("tab_datechangerequest", "tab_datechangerequest 2 ");
                    tab_datechangerequest.setVisibility(View.VISIBLE);
                    calen_picker.setVisibility(View.GONE);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "TakerofTasks Exception : " + e.getMessage(), "WARN", null);
        }
    }

    /*
    Oberver side task
     */

    public void ObserverUI() {

        // UI for task
        try {
            addObserver.setVisibility(View.GONE);
            sendTemplate.setVisibility(View.GONE);
            barchart.setVisibility(View.GONE);
            update.setVisibility(View.GONE);
            remind_me.setVisibility(View.GONE);
            reassign_note.setVisibility(View.GONE);
            tab_datechangerequest.setVisibility(View.GONE);
            calen_picker.setVisibility(View.GONE);
            task_accept_layout.setVisibility(View.GONE);

            gridviewObserver.add("Audio");
            gridviewObserver.add("Photo");
            gridviewObserver.add("Sketch");
            gridviewObserver.add("Video");
            gridviewObserver.add("File");
            gridviewObserver.add("Call");
            gridviewObserver.add("Chat");
            gridviewObserver.add("Forms");
            gridviewObserver.add("Scheduled Call");
            gridviewObserver.add("Private");
            gridviewObserver.add("MoreFields");
            if (category != null && category.equalsIgnoreCase("issue")) {
                gridviewObserver.add("ViewTask");
            }
            gridviewObserver_thump.add(R.drawable.audiofilefilled_32);
            gridviewObserver_thump.add(R.drawable.photo_grid);
            gridviewObserver_thump.add(R.drawable.sketch_grid);
            gridviewObserver_thump.add(R.drawable.video_grid);
            gridviewObserver_thump.add(R.drawable.file_grid);
            gridviewObserver_thump.add(R.drawable.call_grid);
            gridviewObserver_thump.add(R.drawable.chat_grid_icon);
            gridviewObserver_thump.add(R.drawable.forms);
            gridviewObserver_thump.add(R.drawable.missedcall_32);
            gridviewObserver_thump.add(R.drawable.private_chat);
            gridviewObserver_thump.add(R.drawable.morefields_grid_icon);
            if (category != null && category.equalsIgnoreCase("issue")) {
                gridviewObserver_thump.add(R.drawable.ic_view_task);
            }

            texts_observer = gridviewObserver.toArray(new String[gridviewObserver.size()]);
            mthumbIds_observer = gridviewObserver_thump.toArray(new Integer[gridviewObserver_thump.size()]);
            Log.i("Gridadapter", "observer adapter");
            gridview_observer.setAdapter(new ImageTakerAdapter(texts_observer, mthumbIds_observer, context));

            if (dataBase.getProjectParentTaskId("select mimetype from taskDetailsInfo where ((mimeType = 'Remove')  or (mimeType = 'Reassign')) and taskId ='" + webtaskId + "' order by id desc limit 1").equalsIgnoreCase("Remove")) {
                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        if (dataBase.getProjectParentTaskId("select taskObservers from taskHistoryInfo where taskId ='" + webtaskId + "' order by id desc limit 1").contains(Appreference.loginuserdetails.getUsername())) {
                            bottom_layout.setVisibility(View.VISIBLE);
                            Log.i("notifyTaskReceived", "bottom_layout 28 ");
                        } else {
                            addObserver.setVisibility(View.GONE);
                            Log.i("notifyTaskReceived", "bottom_layout 29 ");
                            Log.i("gone123", "bottom_layout 0007");
                            bottom_layout.setVisibility(View.GONE);
                        }
                        addObserver.setVisibility(View.GONE);
//                    bottom_layout.setVisibility(View.GONE);
                    }
                });
            }
            getTaskObservers();
            getGroupTaskMembers();


            if (project)
                Project_backgroundProcess();
            else
                backgroudProcess();
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "ObserverUI Exception : " + e.getMessage(), "WARN", null);
        }

    }

    public void loadUI(String query) {
        Log.i("getTask123", "loadUI************* ");
        Log.i("gcm", "loadUI query  ==  " + query);
        try {
            taskList_1 = new ArrayList<>();
            if (!template && !note && (category != null && category.equalsIgnoreCase("issue"))) {
                task_issue.setVisibility(View.GONE);
            }
            if (webtaskId != null && !webtaskId.equalsIgnoreCase("")) {
                Log.d("task", "Updated Task Read status");
                if (project) {
                    VideoCallDataBase.getDB(context).updateprojectMsgReadStatus(webtaskId);
                }
                VideoCallDataBase.getDB(context).updateTaskMsgReadStatus(webtaskId);
            }
            if (subType != null && subType.equalsIgnoreCase("private")) {
                icons.setBackgroundColor(getResources().getColor(R.color.grey));
                linear1.setBackgroundColor(getResources().getColor(R.color.grey));
            }
            if (VideoCallDataBase.getDB(context).getTaskHistory(query) != null) {
                Log.d("task", "LOAD UI TASK HISTORY NOT NULL");
                taskList = VideoCallDataBase.getDB(context).getTaskHistory(query);
                sortTaskMessage();
                Log.d("task", "TASK HISTORY List size  = " + taskList.size());
                String dateValue1 = "";
                if (taskList.size() > 0) {
                    for (TaskDetailsBean taskBean : taskList) {
                        taskBean.setOwnerOfTask(ownerOfTask);
                        taskBean.setTaskReceiver(taskReceiver);
                        taskBean.setTaskName(taskName);
                    }
                    isTaskName = false;
                }

                if (template) {
                    if (note) {
                        calen_picker.setVisibility(View.GONE);
                        remind_me.setVisibility(View.VISIBLE);
                        reassign_note.setVisibility(View.VISIBLE);
                    } else if (chat) {
                        update.setVisibility(View.GONE);
                        calen_picker.setVisibility(View.GONE);
                        remind_me.setVisibility(View.GONE);
                        reassign_note.setVisibility(View.GONE);
                    } else if (project && (project_temp != null && project_temp.equalsIgnoreCase("ProjectTemplate"))) {
                        calen_picker.setVisibility(View.VISIBLE);
                        reassign_note.setVisibility(View.VISIBLE);
                    } else {
                        calen_picker.setVisibility(View.VISIBLE);
                        remind_me.setVisibility(View.GONE);
                        reassign_note.setVisibility(View.GONE);
                    }
                } else {
                    //                calen_picker.setVisibility(View.VISIBLE);
                    remind_me.setVisibility(View.GONE);
                    if (project_temp != null && project_temp.equalsIgnoreCase("ProjectTemplate")) {
                        reassign_note.setVisibility(View.VISIBLE);
                    } else {
                        reassign_note.setVisibility(View.GONE);
                    }
                }
                if (taskList != null && taskList.size() == 0) {
                    if (webtaskId != null) {
                        Log.i("chat", "taskid " + webtaskId);
                        isTaskName = false;
                    } else {
                        Log.i("chat", "taskid 1" + webtaskId);
                        isTaskName = true;
                    }
                    update.setEnabled(true);
                    ownerOfTask = Appreference.loginuserdetails.getUsername();
                }
                if (taskReceiver != null && taskReceiver.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                    if (dataBase.getProjectParentTaskId("select mimetype from taskDetailsInfo where mimeType = 'Remove' and taskId ='" + webtaskId + "' order by id desc limit 1").equalsIgnoreCase("Remove")) {
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                Log.i("notifyTaskReceived", "bottom_layout 30 ");
                                addObserver.setVisibility(View.GONE);
                                Log.i("gone123", "bottom_layout 0008");
                                bottom_layout.setVisibility(View.GONE);
                            }
                        });
                    }
                } else if (taskReceiver != null && !taskReceiver.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) && !ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                    if ((dataBase.getProjectParentTaskId("select subType from taskDetailsInfo where subType = 'reassignTask' and taskId ='" + webtaskId + "' order by id desc limit 1").equalsIgnoreCase("reassignTask"))) {
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                Log.i("notifyTaskReceived", "bottom_layout 31 ");
                                Log.i("gone123", "bottom_layout 0009");
                                bottom_layout.setVisibility(View.GONE);
                            }
                        });
                    }
                }
                try {
                    if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) || taskReceiver != null && taskReceiver.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                        if (!ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                            Log.i("updaeicon", "recviver 0");
                            addObserver.setVisibility(View.GONE);
                            sendTemplate.setVisibility(View.GONE);
                            if (!chat)
                                update.setVisibility(View.VISIBLE);
                        } else {
                            Log.i("updaeicon", "owner 0");
                        }
                    } else {
                        Log.i("updaeicon", "observer 0 ");
                        if (taskType != null && taskType.equalsIgnoreCase("Group")) {
                            if (!chat)
                                update.setVisibility(View.VISIBLE);
                            addObserver.setVisibility(View.GONE);
                        } else {
                            update.setVisibility(View.GONE);
                            addObserver.setVisibility(View.GONE);
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "loadUI Exception : " + e.getMessage(), "WARN", null);
                }
                if ((!project && !template && !note) || chat) {
                    getTaskObservers();
                    getGroupTaskMembers();
                }
                medialistadapter = new MediaListAdapter(NewTaskConversation.this, taskList, "task", category, new onClick() {
                    @Override
                    public void onClick(final TaskDetailsBean gcBean, final MediaListAdapter.ViewHolder v, final int position, View view) {
                        Log.i("audio", String.valueOf(view.getId()));
                        Log.i("audio", String.valueOf(position));
                        holder = (MediaListAdapter.ViewHolder) view.getTag();
                        Log.i("audio", "g c " + gcBean.getTaskDescription());
                        if (gcBean.isSelect()) {
                            gcBean.setSelect(false);
                        } else {
                            gcBean.setSelect(true);
                        }
                        refresh();
                    }

                    @Override
                    public void onLongClick(int position, View view) {
                    }

                    @Override
                    public void showMedialistProgress() {
                        showprogress();
                    }

                    @Override
                    public void dateSendORApprovalORReject(TaskDetailsBean detailsBean, String approveOrReject) {
                        date_header = approveOrReject;
                        startdate = detailsBean.getPlannedStartDateTime();
                        enddate = detailsBean.getPlannedEndDateTime();
                        reminderdate = detailsBean.getRemainderFrequency();
                        reminderfreq = detailsBean.getTimeFrequency();
                        isRemainderRequired = detailsBean.getIsRemainderRequired();
                        if (approveOrReject.equalsIgnoreCase("approved")) {
                            reminderquote = detailsBean.getReminderQuote();
                        } else {
                            reminderquote = remquotes_1;
                        }
                        remindertone = detailsBean.getServerFileName();
                        ch_remarks = detailsBean.getRemark();
                        NewTaskConversation.this.dateSendORApprovalORReject();
                    }
                });
                if (taskList != null && taskList.size() > 0 && taskList.size() != -1) {
                    final TaskDetailsBean taskDetailsBean = taskList.get(0);
                    TaskDetailsBean task = null;
                    for (int i = taskList.size() - 1; i >= 0; i--) {
                        task = taskList.get(i);
                        Log.i("date", " task.getMimeType() :" + task.getMimeType());
                        if (task.getMimeType() != null && task.getMimeType().equalsIgnoreCase("date")) {
                            break;
                        }
                    }
                    if (Appreference.loginuserdetails.getUsername().equalsIgnoreCase(taskDetailsBean.getFromUserName())) {
                        if (!chat) {
                            if (taskDetailsBean.getTaskName() != null && !taskDetailsBean.getTaskName().equalsIgnoreCase("") && !taskDetailsBean.getTaskName().equalsIgnoreCase(null)) {
                                if (isProjectFromOracle) {
                                    headerName.setText("Job Card No :" + JobCodeNo + "\nActivity Code :" + ActivityCode);
                                } else {
                                    headerName.setText(taskDetailsBean.getTaskName());
                                }
                                Log.i("taskconversation", "headername 2 ");
                            } else {
                                if (isProjectFromOracle) {
                                    headerName.setText("Job Card No :" + JobCodeNo + "\nActivityCode :" + ActivityCode);
                                } else {
                                    headerName.setText("New Task");
                                }
                                Log.i("taskconversation", "headername 3 ");
                            }
                        }
                        if (Appreference.loginuserdetails.getUsername().equalsIgnoreCase(ownerOfTask)) {
                            taskgiver.setText("Me");
                        } else {
                            String task_giver = VideoCallDataBase.getDB(context).getname(ownerOfTask);
                            if (taskReceiver != null && !taskReceiver.equals(null)) {
                                Log.i("task", "task_giver " + task_giver);
                                Log.i("task", "taskReceiver " + taskReceiver);
                                if (task_giver == null || task_giver.equalsIgnoreCase("") || task_giver.equals(null)) {
                                    taskgiver.setText(taskReceiver.split("_")[0]);
                                } else {
                                    taskgiver.setText(task_giver);
                                }
                            } else {
                                taskgiver.setText(task_giver);
                            }
                        }
                        String currentDateTimeString = DateFormat.getDateTimeInstance().format(new Date());
                        int percentage1 = VideoCallDataBase.getDB(context).percentagechecker(webtaskId);
                        if ((task.getTaskStatus() != null && task.getRequestStatus() != null)) {
                            if (percentage1 != 100 && (!task.getTaskStatus().equalsIgnoreCase("draft") && !task.getTaskStatus().equalsIgnoreCase("abandoned") && !task.getTaskStatus().equalsIgnoreCase("rejected")) && (task.getRequestStatus().equalsIgnoreCase("approved") || task.getRequestStatus().equalsIgnoreCase("assigned") || task.getRequestStatus().equalsIgnoreCase("requested"))) {
                                if ((taskDetailsBean.getOwnerOfTask() != null && taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) || (taskDetailsBean.getTaskReceiver() != null && taskDetailsBean.getTaskReceiver().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) || (taskDetailsBean.getTaskType() != null && taskDetailsBean.getTaskType().equalsIgnoreCase("Group"))) {
                                    reminderTimerDisplay();
                                }
                            }
                        }
                        if (project) {
                            if (taskDetailsBean.getTaskId().equalsIgnoreCase(parentTaskId)) {
                                update.setVisibility(View.GONE);
                                calen_picker.setVisibility(View.GONE);
                                accept.setVisibility(View.GONE);
                                reject.setVisibility(View.GONE);
                                addObserver.setVisibility(View.GONE);
                            }
                        }
                        Log.e("Accept", "update4 " + isTaskAccept);
                        if (getResources().getString(R.string.task_enable).equalsIgnoreCase("enable") && (taskType != null && !taskType.equalsIgnoreCase("Group")))
                            if (!isTaskAccept) {
                                Log.e("Accept", "update5 " + isTaskAccept);
                                Log.e("Accept", "update6 ");
                            }
                        if (!isTaskName)
                            update.setEnabled(true);
                    } else {
                        Log.e("calen_picker", "visibility 14 ");
//                        calen_picker.setVisibility(View.GONE);
                        remind_me.setVisibility(View.GONE);
                        Log.i("task", "project_temp " + project_temp);
                        if (project_temp != null && project_temp.equalsIgnoreCase("ProjectTemplate")) {
                            reassign_note.setVisibility(View.VISIBLE);
                        } else {
                            reassign_note.setVisibility(View.GONE);
                        }
                        Log.i("task", "from_UserName");
                        int percentage1 = VideoCallDataBase.getDB(context).percentagechecker(webtaskId);
                        if ((task.getTaskStatus() != null && task.getRequestStatus() != null)) {
                            if (percentage1 != 100 && !task.getTaskStatus().equalsIgnoreCase("abandoned") && !task.getTaskStatus().equalsIgnoreCase("rejected") && (task.getRequestStatus().equalsIgnoreCase("approved") || task.getRequestStatus().equalsIgnoreCase("assigned") || task.getRequestStatus().equalsIgnoreCase("requested"))) {
                                if ((taskDetailsBean.getOwnerOfTask() != null && taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) || (taskDetailsBean.getTaskReceiver() != null && taskDetailsBean.getTaskReceiver().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) || (taskDetailsBean.getTaskType() != null && taskDetailsBean.getTaskType().equalsIgnoreCase("Group"))) {
                                    reminderTimerDisplay();
                                }
                            }
                        }
                        if (taskStatus != null && taskStatus.equalsIgnoreCase("Template")) {
                            Log.i("taskconversation", "taskStatus is template? " + taskStatus);
                            taskStatus = "assigned";
                        } else if (taskStatus != null && (!taskStatus.equalsIgnoreCase("assigned") || (task.getTaskStatus() != null && !task.getTaskStatus().equalsIgnoreCase("assigned")))) {
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    task_accept_layout.setVisibility(View.GONE);
                                    Log.i("Accept", "task_accept_layout loadUI 6 " + taskStatus);
                                }
                            });
                        } else if (category != null && !category.equalsIgnoreCase("chat") && taskType != null && !taskType.equalsIgnoreCase("Group") && (taskReceiver.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) || ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()))) {
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    Log.i("taskconversation", "task_accept_layout 2 " + taskStatus);
                                    if (!isProjectFromOracle)
                                        task_accept_layout.setVisibility(View.VISIBLE);
                                    Log.i("Accept", "task_accept_layout loadUI 6 " + taskStatus);
                                }
                            });
                        }
                        if (project) {
                            Log.i("taskConversation", "loadUI parentTaskId " + parentTaskId + "     webtaskId " + taskDetailsBean.getTaskId());
                            if (taskDetailsBean.getTaskId().equalsIgnoreCase(parentTaskId)) {
                                update.setVisibility(View.GONE);
                                calen_picker.setVisibility(View.GONE);
                                remind_me.setVisibility(View.GONE);
                                reassign_note.setVisibility(View.GONE);
                                accept.setVisibility(View.GONE);
                                reject.setVisibility(View.GONE);
                                task_approve.setVisibility(View.GONE);
                                actorrej.setVisibility(View.GONE);
                                addObserver.setVisibility(View.GONE);
                            }
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    task_accept_layout.setVisibility(View.GONE);
                                    Log.i("Accept", "task_accept_layout loadUI 4 " + taskStatus);
                                }
                            });
                        }
                        String head_name = "";
                        if (project) {
                            head_name = taskDetailsBean.getTaskName();
                        } else {
                            head_name = VideoCallDataBase.getDB(context).getReminderTaskname(taskDetailsBean.getTaskId());
                        }
                        if (!chat) {
                            if (head_name != null) {
                                if (isProjectFromOracle) {
                                    headerName.setText("Job Card No :" + JobCodeNo + "\nActivity Code :" + ActivityCode);
                                } else {
                                    headerName.setText(head_name);
                                }
                            } else {
                                if (isProjectFromOracle) {
                                    headerName.setText("Job Card No :" + JobCodeNo + "\nActivity Code :" + ActivityCode);
                                } else {
                                    headerName.setText("New Task");
                                }
                            }
                        }
                        if (taskDetailsBean.getTaskReceiver() != null && !taskDetailsBean.getTaskReceiver().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                            if (!taskType.equalsIgnoreCase("Group")) {
                                Log.e("calen_picker", "visibility 16 ");
//                                calen_picker.setVisibility(View.GONE);
                                remind_me.setVisibility(View.GONE);
                                if (project_temp != null && project_temp.equalsIgnoreCase("ProjectTemplate")) {
                                    reassign_note.setVisibility(View.VISIBLE);
                                } else {
                                    reassign_note.setVisibility(View.GONE);
                                }
                            }
                        }
                        if (taskType != null && getResources().getString(R.string.task_enable).equalsIgnoreCase("enable") && !taskType.equalsIgnoreCase("Group"))
                            if (!isTaskAccept) {
                            }
                        if ((taskDetailsBean.getTaskStatus() != null && taskDetailsBean.getTaskStatus().equalsIgnoreCase("rejected")) && (taskDetailsBean.getTaskDescription() != null && taskDetailsBean.getTaskDescription().equalsIgnoreCase(category + " Rejected"))) {
                            if (isRem_time) {
                                counter.cancel();
                                reminingtime.setVisibility(View.GONE);
                                isRem_time = false;
                            }
                        }
                    }
                    if (Appreference.loginuserdetails.getUsername().equalsIgnoreCase(ownerOfTask)) {
                        taskgiver.setText("Me");
                    } else {
                        String task_giver = VideoCallDataBase.getDB(context).getname(ownerOfTask);
                        if (taskReceiver != null && !taskReceiver.equals(null)) {
                            Log.i("task", "task_giver " + task_giver);
                            Log.i("task", "taskReceiver " + taskReceiver);
                            if (task_giver == null || task_giver.equalsIgnoreCase("") || task_giver.equals(null)) {
                                taskgiver.setText(taskReceiver.split("_")[0]);
                            } else {
                                taskgiver.setText(task_giver);
                            }
                        } else {
                            taskgiver.setText(task_giver);
                        }
                    }
                }
                if (taskList != null && taskList.size() == 0) {
                    if (chat) {
                        if (webtaskId != null) {
                            Log.i("chat", "taskid " + webtaskId);
                            isTaskName = false;
                        } else {
                            Log.i("chat", "taskid 1" + webtaskId);
                            isTaskName = true;
                        }
                    } else if (template && project) {
                        isTaskName = false;
                    }
                    if (template) {
                        if (note) {
                            calen_picker.setVisibility(View.GONE);
                            remind_me.setVisibility(View.VISIBLE);
                            reassign_note.setVisibility(View.VISIBLE);
                        } else if (chat) {
                            calen_picker.setVisibility(View.GONE);
                            remind_me.setVisibility(View.GONE);
                            reassign_note.setVisibility(View.GONE);
                        } else if (project && (project_temp != null && project_temp.equalsIgnoreCase("ProjectTemplate"))) {
                            calen_picker.setVisibility(View.VISIBLE);
                            reassign_note.setVisibility(View.VISIBLE);
                        } else {
                            calen_picker.setVisibility(View.VISIBLE);
                            remind_me.setVisibility(View.GONE);
                            reassign_note.setVisibility(View.GONE);
                        }
                    } else {
                        calen_picker.setVisibility(View.VISIBLE);
                        remind_me.setVisibility(View.GONE);
                        if (project_temp != null && project_temp.equalsIgnoreCase("ProjectTemplate")) {
                            reassign_note.setVisibility(View.VISIBLE);
                        } else {
                            reassign_note.setVisibility(View.GONE);
                        }
                    }
                    Log.i("task", "isTask Name is true");
                } else if (taskList.size() > 0) {
                    for (int i = 0; i < taskList.size(); i++) {
                        TaskDetailsBean taskbeen = taskList.get(i);
                        if (taskbeen.getMimeType() != null && taskbeen.getMimeType().equalsIgnoreCase("date") && (!Appreference.loginuserdetails.getUsername().equalsIgnoreCase(taskbeen.getOwnerOfTask()))) {
                            calen_picker.setVisibility(View.GONE);
                            if ((taskType != null && taskType.equalsIgnoreCase("Group") && groupMemberAccess.getRespondDateChange() != null && groupMemberAccess.getRespondDateChange().contains("0"))) {
                                handler.post(new Runnable() {
                                    @Override
                                    public void run() {
                                        tab_datechangerequest.setVisibility(View.GONE);
                                    }
                                });
                            } else if ((taskbeen.getTaskReceiver() != null && taskbeen.getTaskReceiver().contains(Appreference.loginuserdetails.getUsername()))) {
                                tab_datechangerequest.setVisibility(View.VISIBLE);
                                Log.i("groupMemberAccess", "groupMemberAccess.tab_datechangerequest()!! ");
                            }
                        }
                    }
                }
            }
            list_all.setAdapter(medialistadapter);
            refresh();
            handler.post(new Runnable() {
                @Override
                public void run() {
                    list_all.setSelection(list_all.getAdapter().getCount() - 1);
                }
            });

            if (VideoCallDataBase.getDB(context).getAccept(webtaskId)) {
                Log.e("Accept", "update111 " + isTaskAccept);
                task_accept_layout.setVisibility(View.GONE);
                Log.i("Accept", "value **---> " + taskStatus);
                isTaskAccept = true;
                Log.e("Accept", "update1 " + isTaskAccept);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "loadUI Exception : " + e.getMessage(), "WARN", null);
            Log.i("getTask123", "getTask W/S Response loadUI Exception*************" + e.getMessage());
        }
    }

    public void getTaskConversationListFromDBWhenScroll(int row_count) {
        try {
            boolean countAboveten = false;
            if (row_count != 0 && row_count >= 10) {
                row_count = row_count - 10;
                taskList_count = row_count;
                countAboveten = true;
            } else if (row_count < 10) {
                taskList_count = 0;
            } else {
                row_count = 0;
                taskList_count = 0;
            }
            String query;
            if (row_count == 0 && !countAboveten) {
                Log.i("names", "1nd query");
                query = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "')   and customTagVisible = '1';";
            } else if (row_count < 10 && !countAboveten) {
                Log.i("names", "2nd query");
                query = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "')   and customTagVisible = '1' order by dateTime ASC LIMIT " + row_count + " OFFSET 0";
            } else {
                Log.i("names", "3nd query");
                query = "select * from taskDetailsInfo where (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + webtaskId + "')   and customTagVisible = '1' order by dateTime ASC LIMIT 10 OFFSET " + row_count + "";
            }
            if (VideoCallDataBase.getDB(context).getTaskHistory(query) != null) {
                Log.d("task", "SCROLL TASK HISTORY NOT NULL");
                ArrayList<TaskDetailsBean> taskList = VideoCallDataBase.getDB(context).getTaskHistory(query);
                Log.d("task", "TASK HISTORY List size  = " + taskList.size());
                String dateValue1 = "";
                if (taskList.size() > 0) {
                    for (TaskDetailsBean taskBean : taskList) {
                        taskBean.setOwnerOfTask(ownerOfTask);
                        taskBean.setTaskReceiver(taskReceiver);
                        taskBean.setTaskName(taskName);
                    }
                }
                ArrayList<TaskDetailsBean> tempValues = new ArrayList<>();
                for (int da = 0; da < taskList.size(); da++) {
                    TaskDetailsBean taskDetailsBean = taskList.get(da);
                    String dateValue = taskDetailsBean.getDateTime().split(" ")[0];
                    if (dateValue1.equalsIgnoreCase("") || !dateValue1.equalsIgnoreCase(dateValue)) {
                        TaskDetailsBean taskDetailsBean1 = new TaskDetailsBean();
                        taskDetailsBean1.setDateTime(taskDetailsBean.getDateTime());
                        taskDetailsBean1.setTaskDescription(dateValue);
                        taskDetailsBean1.setMimeType("textdate");
                        taskDetailsBean1.setCustomTagVisible(true);
                        taskDetailsBean1.setFromUserName(taskDetailsBean.getFromUserName());
                        taskDetailsBean1.setServerFileName(dateValue);
                        taskDetailsBean1.setTaskStatus(taskDetailsBean.getTaskStatus());
                        taskDetailsBean1.setRequestStatus(taskDetailsBean.getRequestStatus());
                        taskDetailsBean1.setOwnerOfTask(taskDetailsBean.getOwnerOfTask());
                        taskDetailsBean1.setTaskReceiver(taskDetailsBean.getTaskReceiver());
                        taskDetailsBean1.setTaskType(taskDetailsBean.getTaskType());
                        taskDetailsBean1.setTaskId(taskDetailsBean.getTaskId());
                        taskDetailsBean1.setTaskName(taskDetailsBean.getTaskName());
                        taskDetailsBean1.setRequestStatus(taskDetailsBean.getRequestStatus());
                        datelist.add(taskDetailsBean1);
                        tempValues.add(taskDetailsBean1);
                    }
                    dateValue1 = dateValue;
                    datelist.add(taskDetailsBean);
                    tempValues.add(taskDetailsBean);
                }
                taskList.addAll(tempValues);
            }
            try {
                Collections.sort(taskList, new Comparator<TaskDetailsBean>() {
                    public int compare(TaskDetailsBean o1, TaskDetailsBean o2) {
                        if (o1.getDateTime() == null || o2.getDateTime() == null)
                            return 0;
                        return o1.getDateTime().compareTo(o2.getDateTime());
                    }
                });
            } catch (Exception e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "getTaskConversationListFromDBWhenScroll Exception : " + e.getMessage(), "WARN", null);
                Log.d("Sorting", "Sorting problem");
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "getTaskConversationListFromDBWhenScroll Exception : " + e.getMessage(), "WARN", null);
        }
    }

    private void saveNote() {
        try {
            if (category != null && category.equalsIgnoreCase("issue")) {
                AlertDialog alertDialog = new AlertDialog.Builder(NewTaskConversation.this).create();
                alertDialog.setTitle("Would you like to close this issue");
                alertDialog.setCancelable(false);
                alertDialog.setMessage("This issue is set as 100% Completed and can be closed. Upon closure you will be unable to add new dates to the issue");
                alertDialog.setButton(AlertDialog.BUTTON_NEGATIVE, "Ignore",
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                dialog.dismiss();
                            }
                        });
                alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "Close Issue",
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                taskpercentcomplete();
                                Log.i("ApproveTask", "percent UI 7 " + taskStatus);
                                task_approve.setVisibility(View.GONE);
                                //                        actorrej.setVisibility(View.GONE);
                                if (isRem_time) {
                                    counter.cancel();
                                    reminingtime.setVisibility(View.GONE);
                                }
                                isRem_time = false;
                            }
                        });

                alertDialog.show();
            } else {
                AlertDialog alertDialog = new AlertDialog.Builder(NewTaskConversation.this).create();
                alertDialog.setTitle("Would you like to close this task");
                alertDialog.setCancelable(false);
                alertDialog.setMessage("This task is set as 100% Completed and can be closed. Upon closure you will be unable to add new dates to the task.You may raise issues in this task using the Add Issue option");
                alertDialog.setButton(AlertDialog.BUTTON_NEGATIVE, "Ignore",
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                dialog.dismiss();
                            }
                        });
                alertDialog.setButton(AlertDialog.BUTTON_POSITIVE, "Close Task",
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int which) {
                                taskpercentcomplete();
                                Log.i("ApproveTask", "percent UI 7 " + taskStatus);
                                task_approve.setVisibility(View.GONE);
                                //                        actorrej.setVisibility(View.GONE);
                                if (isRem_time) {
                                    counter.cancel();
                                    reminingtime.setVisibility(View.GONE);
                                }
                                isRem_time = false;
                            }
                        });
                alertDialog.show();
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "saveNote Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void showAlertDialog(final String title, String message,
                                final Context context) {
        if (alertDialog != null && alertDialog.isShowing()) {
            // A dialog is already open, wait for it to be dismissed, do nothing
        } else {
            alertbox = new AlertDialog.Builder(context);
            alertbox.setMessage(message);
            alertbox.setTitle(title);
            alertbox.setPositiveButton("Yes", new DialogInterface.OnClickListener() {
                public void onClick(DialogInterface dialog, int which) {
                    sendStatus_webservice("5", "", "", "Completed", "Completed");
                    dialog.dismiss();
                }
            });
            alertbox.setNegativeButton("No",
                    new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int which) {
                            dialog.dismiss();
                        }
                    });
            alertDialog = alertbox.create();
            alertDialog.show();
        }
    }

    public void accepttask() {
        try {
            isTaskAccept = true;
            Log.i("newtaskconversation", "accepttask 1 ");
            Log.d("Accept", "webtaskid 0 " + webtaskId);
            Appreference.isRem_Enable_details.put(webtaskId, true);
            taskStatus = "inprogress";
            VideoCallDataBase.getDB(context).updateaccept("update taskDetailsInfo set taskStatus='inprogress' where taskId='" + webtaskId + "'");
            VideoCallDataBase.getDB(context).updateaccept("update taskHistoryInfo set taskStatus='inprogress' where taskId='" + webtaskId + "'");
            String sig_id = Utility.getSessionID();
            if (category != null) {
                Log.i("newtaskconversation", "accepttask 2 ");
                acceptMessage(category + " accepted");
            } else {
                Log.i("newtaskconversation", "accepttask 3 ");
                acceptMessage("Task accepted");
            }
            VideoCallDataBase.getDB(context).updateReminderTaskStatus(webtaskId);
            task_accept_layout.setVisibility(View.GONE);
            Log.i("Accept", "task_accept_layout accepttask 3 " + taskStatus);
            accept_task = true;
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "accepttask Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void rejecttask() {
        try {
            taskStatus = "rejected";
            VideoCallDataBase.getDB(context).updateaccept("update taskDetailsInfo set taskStatus='rejected' where taskId='" + webtaskId + "'");
            VideoCallDataBase.getDB(context).updateaccept("update taskHistoryInfo set taskStatus='rejected' where taskId='" + webtaskId + "'");
            isTaskAccept = false;
            acceptMessage(category + " Rejected");
            task_accept_layout.setVisibility(View.GONE);
            Log.i("Accept", "task_accept_layout rejecttask 2 " + taskStatus);
            accept_task = true;
            timerstop();
            if (getResources().getString(R.string.TASKNOTIFICATION_FROM_SERVER).equalsIgnoreCase("0")) {
                Log.i("Task", "Push Notification from client - value is " + getResources().getString(R.string.TASKNOTIFICATION_FROM_SERVER));
                try {
                    AlarmManager am = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
                    Intent it = new Intent(NewTaskConversation.this, ScheduleManager.class);
                    PendingIntent pi = PendingIntent.getBroadcast(NewTaskConversation.this, Integer.parseInt(webtaskId),
                            it, PendingIntent.FLAG_CANCEL_CURRENT);
                    if (pi != null) {
                        Log.i("TaskHistory", "Value true alarm cancelled " + pi);
                        am.cancel(pi);
                        pi.cancel();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "rejecttask Exception : " + e.getMessage(), "WARN", null);
                }
            }
        } catch (Resources.NotFoundException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "rejecttask Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "rejecttask Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void taskpercentcomplete() {
        try {
            taskStatus = "closed";
            VideoCallDataBase.getDB(context).updategrouptaskstatus("update taskHistoryInfo set taskStatus='Closed' where taskId='" + webtaskId + "'");
            VideoCallDataBase.getDB(context).updategrouptaskstatus("update taskDetailsInfo set taskStatus='Closed' where taskId='" + webtaskId + "' and (taskStatus = 'Completed' or taskStatus ='inprogress')");
            Log.d("percent", "closed ");
            Log.d("percent", "closed " + taskStatus);
            AppSharedpreferences.getInstance(context).saveBoolean("closed" + webtaskId, true);
            AppSharedpreferences.getInstance(context).saveBoolean("Prompt" + webtaskId, true);
            String sig_id = Utility.getSessionID();
            if (!getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                PercentageWebService("text", "This " + category + " is closed", "", sig_id, 0);
            } else {
                sendMessage("This '" + category + "' is closed", null, "text", null, "", sig_id, null);
            }
        } catch (Resources.NotFoundException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "taskpercentcomplete Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "taskpercentcomplete Exception : " + e.getMessage(), "WARN", null);
        }
    }


    public void popupmenu(final TaskDetailsBean mediaListBean, View view, final Context adapter_context) {
        Log.i("popupmenu", "resend 1 " + adapter_context);
        Log.i("popupmenu", "resend 1 " + view);
        handler.post(new Runnable() {
            public void run() {
                try {
                    String query0 = "select * from taskDetailsInfo where taskId='" + webtaskId + "' and wssendstatus='" + 10 + "' and fromUserId='" + Appreference.loginuserdetails.getId() + "'";
                    Log.i("popupmenu", "query0==> " + query0);
                    ArrayList<TaskDetailsBean> taskDetailsBeans_list0 = VideoCallDataBase.getDB(context).getTaskHistory(query0);
                    Log.i("popupmenu", "taskDetailsBeans_list.size() 1 : " + taskDetailsBeans_list0.size());
                    for (TaskDetailsBean detailsBean : taskDetailsBeans_list0) {
                        if (detailsBean.getMimeType().equalsIgnoreCase("date")) {
                        } else {
                            Log.i("popupmenu", "taskConversationEntry resend 1 ");
                        }
                    }
                    String query = "select * from taskDetailsInfo where taskId='" + webtaskId + "' and msgstatus='" + 0 + "' and wssendstatus='" + 1 + "' and fromUserId='" + Appreference.loginuserdetails.getId() + "'";
                    Log.i("popupmenu", "query0==> !! " + query0);
                    ArrayList<TaskDetailsBean> taskDetailsBeans_list = VideoCallDataBase.getDB(context).getTaskHistory(query);
                    Log.i("popupmenu", "taskDetailsBeans_list.size() 1 : " + taskDetailsBeans_list.size());
                    for (TaskDetailsBean detailsBean : taskDetailsBeans_list) {
                        Log.i("popupmenu", "mimeType" + detailsBean.getMimeType());
                        if (detailsBean.getMimeType() != null && detailsBean.getMimeType().equalsIgnoreCase("text")) {
                            sendMessage(detailsBean.getTaskDescription(), null, detailsBean.getMimeType(), null, "", detailsBean.getSignalid(), null);
                        } else {
                            sendMessage(detailsBean.getServerFileName(), null, detailsBean.getMimeType(), null, "", detailsBean.getSignalid(), null);
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "popupmenu Exception : " + e.getMessage(), "WARN", null);
                }
            }
        });
    }


    public void ignoremenu(final TaskDetailsBean mediaListBean, View view, final Context adapter_context) {

        try {
            VideoCallDataBase.getDB(context).updateEscalationText(mediaListBean);
            PercentageWebService("text", "Task Escalation Ignored", " ", Utility.getSessionID(), 0);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "ignoremenu Exception : " + e.getMessage(), "WARN", null);
        }

    }

    public void popupwithdrawmenu(final TaskDetailsBean mediaListBean, View view, final Context adapter_context) {
        try {
            Log.i("popupmenu", "withdraw " + adapter_context);
            Log.i("popupmenu", "withdraw " + view);
            String xml = composeChatWithDrawXML(mediaListBean);
            sendMultiInstantMessage(xml, newTaskConversation.listOfObservers, 1);
            if (!mediaListBean.getMimeType().equalsIgnoreCase("text")) {
                mediaListBean.setMimeType("text");
                mediaListBean.setTaskDescription("Message has been Removed");
                Log.i("popupmenu", "withdraw popup  ");
                Log.i("popupmenu", "withdraw " + mediaListBean.getTaskDescription());
                Log.i("popupmenu", "withdraw 11 " + mediaListBean.getMimeType());
            } else {
                mediaListBean.setTaskDescription("Message has been Removed");
                Log.i("popupmenu", "withdraw popup1  ");
                Log.i("popupmenu", "withdraw " + mediaListBean.getTaskDescription());
                Log.i("popupmenu", "withdraw 111 " + mediaListBean.getMimeType());
            }
            VideoCallDataBase.getDB(context).updateaccept("update taskDetailsInfo set taskDescription='" + mediaListBean.getTaskDescription() + "' where signalid='" + mediaListBean.getSignalid() + "'");
            VideoCallDataBase.getDB(context).updateaccept("update taskHistoryInfo set taskDescription='" + mediaListBean.getTaskDescription() + "' where taskId='" + webtaskId + "'");
            for (TaskDetailsBean taskDetailsBean2 : taskList) {
                if (mediaListBean.getSignalid().equalsIgnoreCase(taskDetailsBean2.getSignalid())) {
                    Log.i("task1234", "taskDetailsBean_1.getRequestStatus() " + mediaListBean.getRequestStatus());
                    taskDetailsBean2.setMimeType("text");
                    taskDetailsBean2.setTaskDescription("Message has been Removed");
                    Log.i("popupmenu", "withdraw popup2  ");
                    Log.i("popupmenu", "withdraw 1 " + mediaListBean.getTaskDescription());
                    Log.i("popupmenu", "withdraw 1 " + mediaListBean.getMimeType());
                }
            }
            refresh();
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "popupwithdrawmenu Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void deletemenu(final TaskDetailsBean mediaListBean, String str, View view, final Context adapter_context) {
        try {
            Log.i("popupmenu", "delete " + adapter_context);
            Log.i("popupmenu", "delete " + view);
            Log.i("popupmenu", "view " + mediaListBean.getSignalid());
            Log.i("popupmenu", "view taskList.size " + taskList.size());
            if (str.equalsIgnoreCase("delete")) {
                VideoCallDataBase.getDB(adapter_context).deletetask(mediaListBean.getTaskId(), mediaListBean.getSignalid(), str);
                for (int i = 0; i < taskList.size(); i++) {
                    TaskDetailsBean taskDetailsBean_1 = taskList.get(i);
                    Log.i("popupmenu", "view inside list " + taskDetailsBean_1.getSignalid());
                    if (mediaListBean.getSignalid().equalsIgnoreCase(taskDetailsBean_1.getSignalid())) {
                        taskList.remove(taskDetailsBean_1);
                    }
                }
            } else if (str.equalsIgnoreCase("deleteall")) {
                VideoCallDataBase.getDB(adapter_context).deletetask(mediaListBean.getTaskId(), mediaListBean.getSignalid(), str);
                taskList.clear();
            }
            Log.i("popupmenu", "view taskList.size after delete " + taskList.size());
            refresh();
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "deletemenu Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void RemoveObserver() {

        handler.post(new Runnable() {
            @Override
            public void run() {
                try {
                    for (String name1 : rejected) {
                        Log.i("observer", "rejected " + name1);

                        for (int i = 0; i < listOfObservers.size(); i++) {
                            String name = listOfObservers.get(i);
                            for (String rejectname : rejected) {
                                Log.i("observer", "rejected 1 " + name);
                                Log.i("observer", "rejected 2 " + rejectname);
                                if (rejectname.equalsIgnoreCase(name)) {
                                    Log.d("TaskRemovedObserver", "Task Removed  Observer name  6 == " + i);
                                    listOfObservers.remove(name);
                                    remove_check = false;
                                    //                            listObservers.remove(i);
                                    Log.i("task_observer", "removed_name **  " + name);
                                    Log.i("task_observer", "removed_rejectname ***  " + rejectname);
                                    Log.i("task_observer", "removed listOfObservers  " + listOfObservers);
                                    Log.i("task_observer", "removed listObservers  " + listOfObservers);
                                }
                            }
                        }
                    }
                    rejected.clear();
                } catch (Exception e) {
                    e.printStackTrace();
                    Appreference.printLog("NewTaskConversation", "RemoveObserver Exception : " + e.getMessage(), "WARN", null);
                }
                handler.postDelayed(this, 10000);
            }
        });

    }

    public void replymenu(final TaskDetailsBean mediaListBean, View view, final Context adapter_context) {
        try {
            Log.i("popupmenu", "reply " + adapter_context);
            Log.i("popupmenu", "reply " + view);
            Log.i("popupmenu", "reply view " + mediaListBean.getSignalid());
            Log.i("popupmenu", "reply view taskList.size " + taskList.size());
            mediaListBean.setSubType("reply");
            Old_signalId = mediaListBean.getSignalid();
            if (mediaListBean.getMimeType().equalsIgnoreCase("text")) {
                linearforimage.setVisibility(View.VISIBLE);
                replyimageview.setVisibility(View.GONE);
                cancelreply.setVisibility(View.VISIBLE);
                replymessagesendername.setText(VideoCallDataBase.getDB(adapter_context).getName(mediaListBean.getFromUserName()));
                replymessage.setCompoundDrawablesWithIntrinsicBounds(0, 0, 0, 0);
                replymessage.setText(mediaListBean.getTaskDescription());
                reply_mime_type = mediaListBean.getMimeType();
                //            des.setText("FromUser :" + VideoCallDataBase.getDB(adapter_context).getName(mediaListBean.getFromUserName()) + "@"
                //                    + mediaListBean.getDateTime() + "\n" + "Message Deatails :" + mediaListBean.getTaskDescription() + "\n" + "\n");
                des.setSelection(des.getText().toString().length());
            } else {
                linearforimage.setVisibility(View.VISIBLE);
                replyimageview.setVisibility(View.VISIBLE);
                Log.i("ReplyTask", "Image taskdescription is------>" + mediaListBean.getTaskDescription());
                String path = Environment.getExternalStorageDirectory() + "/High Message/";
                String imagefile = " ";
                if (mediaListBean.getTaskDescription().contains(path)) {
                    imagefile = mediaListBean.getTaskDescription();
                    Log.i("ReplyTask", "Image taskdescription inside if is------>" + imagefile);
                } else {
                    imagefile = path + "downloads/" + mediaListBean.getTaskDescription();
                    Log.i("ReplyTask", "Image taskdescription inside else is------>" + imagefile);
                }
                Log.i("ReplyTask", "Image taskdescription is------>" + imagefile);
                replymessagesendername.setText(VideoCallDataBase.getDB(adapter_context).getName(mediaListBean.getFromUserName()));
                //            replymessage.setCompoundDrawables(R.drawable.ic_opencamera1,null,null,null);
                replymessage.setCompoundDrawablesWithIntrinsicBounds(R.drawable.ic_opencamera1, 0, 0, 0);
                replymessage.setSingleLine(true);
                replymessage.setEllipsize(TextUtils.TruncateAt.END);
                replymessage.setText(imagefile);
                //            reply_mime_type=mediaListBean.getMimeType();
                Bitmap bit = BitmapFactory.decodeFile(imagefile);
                replyimageview.setImageBitmap(bit);
                des.setSelection(0);
                Toast.makeText(getApplicationContext(), imagefile, Toast.LENGTH_SHORT).show();
            }
            Log.i("ReplyTask", "reply mime type is " + reply_mime_type);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "replymenu Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void editmenu(final TaskDetailsBean mediaListBean, View view, final Context adapter_context) {
        try {
            Log.i("popupmenu", "reply " + adapter_context);
            Log.i("popupmenu", "reply " + view);
            Log.i("popupmenu", "reply view " + mediaListBean.getSignalid());
            Log.i("popupmenu", "reply view taskList.size " + taskList.size());
            des.setText(mediaListBean.getTaskDescription());
            des.setSelection(des.getText().toString().length());

            forword_bean = mediaListBean;
            edit = true;
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "editmenu Exception : " + e.getMessage(), "WARN", null);
        }
    }


    public void dateNoteWebService(TaskDetailsBean detailsBean1) {
        String rem_tone = "";
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String dateTime = dateFormat.format(new Date());
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            String dateforrow = dateFormat.format(new Date());
            tasktime = dateTime;
            tasktime = tasktime.split(" ")[1];
            Log.i("task", "tasktime" + tasktime);
            Log.i("UTC", "sendMessage utc time" + dateforrow);
            taskUTCtime = dateforrow;
            TaskDetailsBean taskDetails = detailsBean1;
            JSONObject jsonObject = new JSONObject();
            JSONObject jsonObject1 = new JSONObject();
            jsonObject1.put("id", Integer.parseInt(webtaskId));
            jsonObject.put("task", jsonObject1);
            JSONObject jsonObject2 = new JSONObject();
            jsonObject2.put("id", Appreference.loginuserdetails.getId());
            jsonObject.put("from", jsonObject2);
            JSONObject jsonObject3 = new JSONObject();
            jsonObject3.put("id", Appreference.loginuserdetails.getId());
            jsonObject.put("to", jsonObject3);
            jsonObject.put("signalId", Utility.getSessionID());
            jsonObject.put("parentId", getFileName());
            jsonObject.put("createdDate", taskUTCtime);
            jsonObject.put("requestType", "giverTaskReminder");
            jsonObject.put("remainderDateTime", taskDetails.getUtcPemainderFrequency());
            if (taskDetails.getReminderQuote() != null && !taskDetails.getReminderQuote().equalsIgnoreCase("")) {
                jsonObject.put("remainderQuotes", taskDetails.getReminderQuote());
            } else {
                jsonObject.put("remainderQuotes", "Remind Me");
            }
            Log.i("Request", "taskDetails.getTaskDescription() " + taskDetails.getTaskDescription());
            Log.i("Request", " RemainderTone " + remindertone);
            JSONObject jsonObject4 = new JSONObject();
            JSONObject jsonObject5 = new JSONObject();
            jsonObject5.put("id", Appreference.loginuserdetails.getId());
            jsonObject4.put("user", jsonObject5);
            jsonObject4.put("fileType", "audio");
            jsonObject4.put("taskFileExt", "mp3");
            Log.i("Request", "remainder" + remindertone);
            if (remindertone != null && !remindertone.equalsIgnoreCase(null) && !remindertone.equalsIgnoreCase("") && (remindertone.contains(".mp3") || remindertone.contains(".wav"))) {
                rem_tone = encodeAudioVideoToBase64(remindertone);
                jsonObject4.put("fileContent", rem_tone);
                JSONArray jsonArray = new JSONArray();
                jsonArray.put(0, jsonObject4);
                jsonObject.put("listTaskConversationFiles", jsonArray);
            }
            jsonObject.put("requestStatus", "approved");
            if (jsonObject != null) {
                Log.i("Request", "Task date update for giver is " + jsonObject);
                Log.i("TaskEntry", "3 taskConversationEntry 2");
                Appreference.jsonRequestSender.taskConversationEntry(EnumJsonWebservicename.taskConversationEntry, jsonObject, this, null, taskDetails);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "dateNoteWebService Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void NOInternet_InsertConversaion(String getMediaType, String getMediaPath, String getExt, String sig_id, int isDateorUpdateorNormal) {
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String dateTime = dateFormat.format(new Date());
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            String dateforrow = dateFormat.format(new Date());
            tasktime = dateTime;
            tasktime = tasktime.split(" ")[1];
            taskUTCtime = dateforrow;
            final TaskDetailsBean chatBean = new TaskDetailsBean();

            chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
            chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
            chatBean.setSelect(false);
            chatBean.setTaskDescription(getMediaPath);
            chatBean.setSignalid(sig_id);
            chatBean.setTaskNo(task_No);
            chatBean.setIssueId(issueId);
            chatBean.setParentId(getFileName());
            chatBean.setTaskType(taskType);
            chatBean.setTaskPriority("Medium");
            chatBean.setIsRemainderRequired("");
            if (isProjectFromOracle && getMediaPath.equalsIgnoreCase("Completed Percentage 100 %")) {
                chatBean.setCompletedPercentage("100");
            } else {
                chatBean.setCompletedPercentage("0");
            }
            chatBean.setPlannedStartDateTime("");
            chatBean.setPlannedEndDateTime("");
            chatBean.setUtcplannedEndDateTime(Appreference.HoldOrPauseTimervalue);
            chatBean.setEstimTimeForTimer(Appreference.EstimTimerValue);
            chatBean.setEstimRemainingAlarmTime("0");
            chatBean.setTaskPlannedLatestEndDate("1");
            chatBean.setEstimAlarm("1");
            chatBean.setRemainderFrequency("");
            chatBean.setTaskUTCDateTime(dateforrow);
            chatBean.setDateTime(dateTime);
            String project_deassignMems = "";
            Log.i("selfassign", "Self_assign==> " + Self_assign + " oracleProjectOwner --> " + oracleProjectOwner);
            if (Self_assign && oracleProjectOwner != null && !oracleProjectOwner.equalsIgnoreCase("")) {
                chatBean.setOwnerOfTask(oracleProjectOwner);
                chatBean.setTaskStatus("Assigned");
                ownerOfTask = oracleProjectOwner;
            } else {
                chatBean.setOwnerOfTask(ownerOfTask);
                chatBean.setTaskStatus(taskStatus);
                Log.i("NoInternet", "taskStatus===> ## " + taskStatus);
            }
            if (isDeassign) {
                chatBean.setTaskStatus("Unassigned");
                taskStatus = "Unassigned";
                chatBean.setTaskReceiver("");
                chatBean.setToUserName("");
                chatBean.setToUserId("");
                chatBean.setCompletedPercentage("0");
                if (projectGroup_Mems != null) {
                    int counter = 0;
                    for (int i = 0; i < projectGroup_Mems.length(); i++) {
                        if (projectGroup_Mems.charAt(i) == ',') {
                            counter++;
                        }
                    }
                    for (int j = 0; j < counter + 1; j++) {
                        if (counter == 0) {
                            if (!projectGroup_Mems.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                project_deassignMems = projectGroup_Mems;
                            }
                        } else {
                            if (projectGroup_Mems.split(",")[j].equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                            } else {
                                project_deassignMems = project_deassignMems.concat(projectGroup_Mems.split(",")[j] + ",");
                            }
                        }
                    }
                    if (project_deassignMems != null && project_deassignMems.contains(",")) {
                        project_deassignMems = project_deassignMems.substring(0, project_deassignMems.length() - 1);
                    }
                }
                Log.i("taskConversation", "project_deassignMems " + project_deassignMems);
            } else {
                chatBean.setTaskReceiver(taskReceiver);
                chatBean.setToUserName(toUserName);
                chatBean.setToUserId(String.valueOf(toUserId));
            }
            chatBean.setTasktime(tasktime);
            chatBean.setTaskUTCTime(taskUTCtime);
            chatBean.setMimeType(getMediaType);
            chatBean.setTaskId(webtaskId);


            // send status 0 is send 1 is unsend
            chatBean.setSendStatus("0");
            chatBean.setMsg_status(0);
//        chatBean.setWs_send("000");
            chatBean.setCustomTagVisible(true);
            chatBean.setCatagory(category);
            if (getMediaType != null && getMediaType.equalsIgnoreCase("textfile")) {
                chatBean.setLongmessage("0");
            }
            if (!getMediaType.equalsIgnoreCase("text")) {
                chatBean.setShow_progress(0);
            }
            if (project) {
                chatBean.setProjectId(projectId);
                if (isDeassign) {
                    Log.i("taskConversation", "project_deassignMems success");
                    chatBean.setGroupTaskMembers(project_deassignMems);
                } else if (projectGroup_Mems != null) {
                    chatBean.setGroupTaskMembers(projectGroup_Mems);
                }
            }
            if ((subType != null && subType.equalsIgnoreCase("taskDescription")) && !chatBean.getTaskDescription().contains("Completed Percentage")) {
                chatBean.setSubType(subType);
                chatBean.setTaskRequestType(subType);
            } else {
                if (!isTaskName) {
                    if (isDateorUpdateorNormal == 1) {
                        chatBean.setSubType("percentageCompleted");
                        chatBean.setTaskRequestType("percentageCompleted");
                    }
                    if (isDateorUpdateorNormal == 2) {
                        chatBean.setSubType("taskDateChangedRequest");
                        chatBean.setTaskRequestType("taskDateChangedRequest");
                    }
                    if (isDateorUpdateorNormal == 3) {
                        chatBean.setSubType("SchedulingAlert");
                        chatBean.setTaskRequestType("SchedulingAlert");
                        chatBean.setRequestStatus("Resolved");
                    } else {
                        chatBean.setTaskRequestType("taskConversation");
                    }
                }
            }
            Log.i("conv123", "taskList will add-------->  ");

            if (!getExt.equalsIgnoreCase("message")) {
                if (!isTaskName) {
                    if (project) {
                        VideoCallDataBase.getDB(context).update_Project_history(chatBean);
                        Log.i("NoInternet", "DBINsert");
                    }
                    if (VideoCallDataBase.getDB(context).insertORupdate_Task_history(chatBean)) {
                        if (chatBean.isCustomTagVisible()) {
                            taskList.add(chatBean);
                            cancelDialog();
                            Log.i("NoInternet", "taskList ==> " + taskList.size());
                        }
                        Log.i("NoInternet", "DBINsert ==> ");
                        Log.i("task", "msg Status " + chatBean.getMsg_status());

                        refresh();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "NOInternet_InsertConversaion Exception : " + e.getMessage(), "WARN", null);
        }
    }

    /* the parameter value isDateorUpdateorNormal is used for following
    * isDateorUpdateorNormal=0 is normal MM files send
    * isDateorUpdateorNormal=1 is normal  % MM files send
    * isDateorUpdateorNormal=2 is normal  DateChangeRequest MM files send
    * */
    public void PercentageWebService(String getMediaType, String getMediaPath, String getExt, String sig_id, int isDateorUpdateorNormal) {
        try {
            if (!getMediaPath.equals(null)) {
                Log.i("conv123", "PercentageWebService taskStatus --------> 4 " + taskStatus);
                Log.i("conv123", "isDeassign is -------->  " + isDeassign);

                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                String dateTime = dateFormat.format(new Date());
                dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                String dateforrow = dateFormat.format(new Date());
                tasktime = dateTime;
                tasktime = tasktime.split(" ")[1];
                taskUTCtime = dateforrow;
                String project_deassignMems = "";
                final TaskDetailsBean chatBean = new TaskDetailsBean();

                chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                chatBean.setSelect(false);
                chatBean.setTaskDescription(getMediaPath);
                chatBean.setSignalid(sig_id);
                chatBean.setTaskNo(task_No);
                chatBean.setIssueId(issueId);
                chatBean.setParentId(getFileName());
                chatBean.setTaskType(taskType);
                chatBean.setTaskPriority("Medium");
                chatBean.setIsRemainderRequired("");
                if (isProjectFromOracle && getMediaPath.equalsIgnoreCase("Completed Percentage 100 %")) {
                    chatBean.setCompletedPercentage("100");
                } else {
                    chatBean.setCompletedPercentage("0");
                }
                chatBean.setPlannedStartDateTime("");
                chatBean.setPlannedEndDateTime("");
                Log.i("timer123", "Appreference.HoldOrPauseTimervalue percentageWEbservice===>" + Appreference.HoldOrPauseTimervalue);
                chatBean.setUtcplannedEndDateTime(Appreference.HoldOrPauseTimervalue);
                chatBean.setEstimTimeForTimer(Appreference.EstimTimerValue);
                chatBean.setTaskPlannedLatestEndDate("1");
                chatBean.setEstimAlarm("1");
                chatBean.setEstimRemainingAlarmTime("0");
                chatBean.setRemainderFrequency("");
                chatBean.setTaskUTCDateTime(dateforrow);
                chatBean.setDateTime(dateTime);
                Log.i("selfassign", "Self_assign==> " + Self_assign + " oracleProjectOwner --> " + oracleProjectOwner);
                if (Self_assign && oracleProjectOwner != null && !oracleProjectOwner.equalsIgnoreCase("")) {
                    chatBean.setOwnerOfTask(oracleProjectOwner);
                    chatBean.setTaskStatus("Assigned");
                    taskStatus = "Assigned";
                    ownerOfTask = oracleProjectOwner;
                } else {
                    chatBean.setOwnerOfTask(ownerOfTask);
                    chatBean.setTaskStatus(taskStatus);
                }
                if (isDeassign) {
                    chatBean.setTaskStatus("Unassigned");
                    taskStatus = "Unassigned";
                    chatBean.setTaskReceiver("");
                    chatBean.setToUserName("");
                    chatBean.setToUserId("");
                    chatBean.setCompletedPercentage("0");
                    project_deassignMems = listTaskMembers();
                    Log.i("taskConversation", "project_deassignMems " + project_deassignMems);
                } else {
                    chatBean.setTaskReceiver(taskReceiver);
                    chatBean.setToUserName(toUserName);
                    chatBean.setToUserId(String.valueOf(toUserId));
                }
                chatBean.setTasktime(tasktime);
                chatBean.setTaskUTCTime(taskUTCtime);
                chatBean.setMimeType(getMediaType);
                chatBean.setTaskId(webtaskId);


                // send status 0 is send 1 is unsend
                chatBean.setSendStatus("0");
                chatBean.setMsg_status(0);
                chatBean.setWs_send("0");
                chatBean.setCustomTagVisible(true);
//            if ((template && note) || chat) {
                chatBean.setCatagory(category);
//            }
                if (getMediaType != null && getMediaType.equalsIgnoreCase("textfile")) {
                    chatBean.setLongmessage("0");
                }
                if (getMediaType != null && !getMediaType.equalsIgnoreCase("text")) {
                    chatBean.setShow_progress(0);
                }
                if (project) {
                    chatBean.setProjectId(projectId);
                    if (isDeassign) {
                        Log.i("taskConversation", "project_deassignMems success");
                        chatBean.setGroupTaskMembers(project_deassignMems);
                    } else if (grouptaskmember() != null) {
                        chatBean.setGroupTaskMembers(grouptaskmember());
                    }
                }
                if ((subType != null && subType.equalsIgnoreCase("taskDescription")) && !chatBean.getTaskDescription().contains("Completed Percentage ")) {
                    chatBean.setSubType(subType);
                    chatBean.setTaskRequestType(subType);
                } else {
                    if (!isTaskName) {
                        if (isDateorUpdateorNormal == 1) {
                            chatBean.setSubType("percentageCompleted");
                            chatBean.setTaskRequestType("percentageCompleted");
                        }
                        if (isDateorUpdateorNormal == 2) {
                            chatBean.setSubType("taskDateChangedRequest");
                            chatBean.setTaskRequestType("taskDateChangedRequest");
                        }
                        if (isDateorUpdateorNormal == 3) {
                            chatBean.setSubType("SchedulingAlert");
                            chatBean.setTaskRequestType("SchedulingAlert");
                            chatBean.setRequestStatus("Resolved");
                        } else {
                            chatBean.setTaskRequestType("taskConversation");
                        }
                    }
                }
                Log.i("conv123", "taskList will add ==>  " + isNetworkAvailable());
                if (!isNetworkAvailable()) {
                    Log.i("conv123", "isNetworkAvailable-------->  " + isNetworkAvailable());
                    chatBean.setWs_send("000");
                    chatBean.setShow_progress(1);
                }
                if (!getExt.equalsIgnoreCase("message")) {
                    if (!isTaskName) {
                        if (project) {
                            VideoCallDataBase.getDB(context).update_Project_history(chatBean);
                        }
                        if (VideoCallDataBase.getDB(context).insertORupdate_Task_history(chatBean)) {
                            if (chatBean.isCustomTagVisible()) {
                                taskList.add(chatBean);
                                cancelDialog();
                                Log.i("conv123", "" + getMediaPath + "added DB successfully=====>" + taskList.size());
                                Log.i("conv123", "taskList  added successfully-------->  ");
                                Log.i("conv123", "taskList  Description added is-------->  " + getMediaPath);
                            }
                            Log.i("task", "msg Status " + chatBean.getMsg_status());
                            refresh();
                        }
                    }
                }
                if (isTaskName) {
                    Log.i("taskconversation", "istaskName percentagewebservice **  ");
                    if (!template && !note) {
                        chatBean.setTaskName("New Task");
                        Log.i("taskconversation", "headername  9 ");
                    } else if (note) {
                        chatBean.setTaskName("New Note");
                        Log.i("taskconversation", "headername  10 ");
                    } else if (chat) {
                        chatBean.setTaskName("New chat");
                    } else {
                        chatBean.setTaskName("New Template");
                        Log.i("taskconversation", "headername  11 ");
                    }
                    chatBean.setSubType("taskDescription");
                    chatBean.setTaskRequestType("taskDescription");
                    Log.i("task", "setting task name ");
                    ownerOfTask = Appreference.loginuserdetails.getUsername();
                    taskReceiver = toUserName;
                    taskIdWebservice(chatBean);
                    Log.i("task", "isTask Name is false ");
                } else {
                    chatBean.setSubType(subType);
                    if (isDateorUpdateorNormal == 1) {
                        chatBean.setSubType("percentageCompleted");
                        chatBean.setTaskRequestType("percentageCompleted");
                    }
                    if (isDateorUpdateorNormal == 2) {
                        chatBean.setSubType("taskDateChangedRequest");
                        chatBean.setTaskRequestType("taskDateChangedRequest");
                    }
                    if (isDateorUpdateorNormal == 3) {
                        chatBean.setSubType("SchedulingAlert");
                        chatBean.setTaskRequestType("SchedulingAlert");
                        chatBean.setRequestStatus("Resolved");
                    } else {
                        chatBean.setTaskRequestType(subType);
                    }
                    chatBean.setTaskName(taskName);
                    if (isProjectFromOracle) {
                        chatBean.setTaskRequestType("normal");
                        chatBean.setRequestStatus("normal");
                        chatBean.setSubType("normal");
                        if (isDeassign)
                            chatBean.setSubType("deassign");
                    }

                    Log.i("deassign123", "Deassgn flow=getSubType===>" + chatBean.getSubType());
                    Log.i("deassign123", "Deassgn flow==getTaskStatus==>" + chatBean.getTaskStatus());
                    Log.i("deassign123", "Deassgn flow===getTaskReceiver=>" + chatBean.getTaskReceiver());
                    Log.i("deassign123", "Deassgn flow==getToUserName==>" + chatBean.getToUserName());
                    Log.i("deassign123", "Deassgn flow==project_deassignMems==>" + project_deassignMems);

                    try {
                        JSONObject jsonObject = new JSONObject();
                        JSONObject jsonObject1 = new JSONObject();
                        if (webtaskId != null)
                            jsonObject1.put("id", Integer.parseInt(webtaskId));
                        jsonObject.put("task", jsonObject1);
                        JSONObject jsonObject2 = new JSONObject();
                        jsonObject2.put("id", Appreference.loginuserdetails.getId());
                        jsonObject.put("from", jsonObject2);
                        if ((!template && !project) || chat || note) {
                            Log.i("taskconversation", "toUserId " + toUserId);
                            JSONObject jsonObject3 = new JSONObject();
                            jsonObject3.put("id", toUserId);
                            if (taskType.equalsIgnoreCase("group")) {
                                jsonObject.put("group", jsonObject3);
                            } else {
                                jsonObject.put("to", jsonObject3);
                            }
                        }
                        jsonObject.put("signalId", sig_id);
                        jsonObject.put("parentId", getFileName());
                        jsonObject.put("createdDate", dateforrow);
                        if (subType != null && subType.equalsIgnoreCase("taskDescription") && !chatBean.getTaskDescription().contains("Completed Percentage ")) {
                            jsonObject.put("requestType", "taskDescription");
                        } else if (getMediaPath != null && (getMediaPath.equalsIgnoreCase("This Task is closed") || getMediaPath.equalsIgnoreCase("This issue is closed"))) {
                            jsonObject.put("requestType", "percentageCompleted");
                            jsonObject.put("taskStatus", "closed");
                            jsonObject.put("percentageCompleted", "100");
                        } else if (isProjectFromOracle && (getMediaPath != null && getMediaPath.equalsIgnoreCase("Completed Percentage 100%"))) {
                            jsonObject.put("requestType", "percentageCompleted");
                            jsonObject.put("taskStatus", "Completed");
                            jsonObject.put("percentageCompleted", "100");
                        } /*else if (isDeassign) {
                        jsonObject.put("requestType", "percentageCompleted");
                        Log.i("deassign123", "isDeassign $ ==> ");
                        jsonObject.put("percentageCompleted", "0");
                    }*/ else if (isDateorUpdateorNormal == 1) {
                            jsonObject.put("requestType", "percentageCompleted");
                        } else if (isDateorUpdateorNormal == 2) {
                            jsonObject.put("requestType", "taskDateChangeRequest");
                        } else if (isDateorUpdateorNormal == 3) {
                            jsonObject.put("requestType", "SchedulingAlert");
                        } else {
                            jsonObject.put("requestType", "taskConversation");
                        }
                        if (getMediaPath != null && (getMediaPath.equalsIgnoreCase("This Task is closed") || getMediaPath.equalsIgnoreCase("This issue is closed"))) {
                            jsonObject.put("requestStatus", "");
                        } else {
                            jsonObject.put("requestStatus", "approved");
                        }
                        jsonObject.put("taskEndDateTime", enddate);
                        jsonObject.put("taskStartDateTime", startdate);
                        jsonObject.put("remainderDateTime", reminderdate);
                        jsonObject.put("dateFrequency", "");
                        jsonObject.put("timeFrequency", reminderfreq);
                        jsonObject.put("remark", "");
                        JSONObject jsonObject5 = new JSONObject();
                        jsonObject5.put("id", Appreference.loginuserdetails.getId());
                        JSONObject jsonObject4 = new JSONObject();
                        jsonObject4.put("user", jsonObject5);
                        switch (getMediaType.toLowerCase().trim()) {
                            case "image":
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 13 " + getMediaType);
                                jsonObject4.put("fileType", "image");
                                jsonObject4.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(getMediaPath)));
                                jsonObject4.put("taskFileExt", "jpg");
                                break;
                            case "video":
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 14 " + getMediaType);
                                jsonObject4.put("fileType", "video");
                                Log.i("task", "Video uploaded" + getMediaPath);
                                jsonObject4.put("fileContent", encodeAudioVideoToBase64(getMediaPath));
                                jsonObject4.put("taskFileExt", "mp4");
                                break;
                            case "audio":
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 15 " + getMediaType);
                                jsonObject4.put("fileType", "audio");
                                jsonObject4.put("fileContent", encodeAudioVideoToBase64(getMediaPath));
                                jsonObject4.put("taskFileExt", "mp3");
                                break;
                            case "document":
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 16 " + getMediaType);
                                jsonObject4.put("fileType", getMediaType);
                                jsonObject4.put("fileContent", encodeFileToBase64Binary(getMediaPath));
                                jsonObject4.put("taskFileExt", getExt);
                                break;
                            case "text":
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 17 " + getMediaType);
                                jsonObject4.put("fileType", "text");
                                jsonObject4.put("description", getMediaPath);
                                break;
                            case "assigntask":
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 17 " + getMediaType);
                                jsonObject4.put("fileType", "assigntask");
                                jsonObject4.put("description", getMediaPath);
                                break;
                            case "map":
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 19 " + getMediaType);
                                jsonObject4.put("fileType", "map");
                                jsonObject4.put("description", getMediaPath);
                                break;
                            case "textfile":
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 20 " + getMediaType);
                                Log.i("textfile", "getExt ==  " + getExt + "   getMediaType  == " + getMediaType);
                                jsonObject4.put("fileType", getMediaType);
                                jsonObject4.put("taskFileExt", "txt");
                                jsonObject4.put("fileContent", encodeFileToBase64Binary(getMediaPath));
                                break;
                        }
                        JSONArray jsonArray = new JSONArray();
                        jsonArray.put(0, jsonObject4);
                        jsonObject.put("listTaskConversationFiles", jsonArray);
                        Log.i("taskconversation", "mediaListBean.getMimeType() --------> 20 " + jsonArray);
                        if (jsonObject != null) {
                            Appreference.printLog("taskConversationEntry", jsonObject.toString(), "Request", null);
                            listLastposition();
                            Log.i("taskconversation", "mediaListBean.getMimeType() --------> 21 " + getMediaType);
                            if (isNetworkAvailable()) {
                                Appreference.jsonRequestSender.taskConversationEntry(EnumJsonWebservicename.taskConversationEntry, jsonObject, this, null, chatBean);
                            } else {
                                Toast.makeText(NewTaskConversation.this, "Check your internet connection", Toast.LENGTH_SHORT).show();
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "PercentageWebService taskConversationEntry Exception : " + e.getMessage(), "WARN", null);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "PercentageWebService Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void PercentageWebService_status(String getMediaType, String getMediaPath, String getExt, String sig_id, int isDateorUpdateorNormal, TaskDetailsBean status_bean) {
        try {
            if (!getMediaPath.equals(null)) {
                Log.i("conv123", "PercentageWebService taskStatus --------> 4 " + taskStatus);
                Log.i("conv123", "isDeassign is -------->  " + isDeassign);

                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
                String dateTime = dateFormat.format(new Date());
                dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
                String dateforrow = dateFormat.format(new Date());
                tasktime = dateTime;
                tasktime = tasktime.split(" ")[1];
                taskUTCtime = dateforrow;
                final TaskDetailsBean chatBean = new TaskDetailsBean();

                chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
                chatBean.setSelect(false);
                chatBean.setTaskDescription(getMediaPath);
                chatBean.setSignalid(sig_id);
                chatBean.setTaskNo(task_No);
                chatBean.setIssueId(issueId);
                chatBean.setParentId(getFileName());
                chatBean.setTaskType(taskType);
                chatBean.setTaskPriority("Medium");
                chatBean.setIsRemainderRequired("");

                chatBean.setProjectStatus(status_bean.getProjectStatus());
                Log.i("mystatus123", "projectStatus())-=======>" + status_bean.getProjectStatus());
                chatBean.setTravelStartTime(status_bean.getTravelStartTime());
                chatBean.setTravelEndTime(status_bean.getTravelEndTime());

                if (isProjectFromOracle && getMediaPath.equalsIgnoreCase("Completed Percentage 100 %")) {
                    chatBean.setCompletedPercentage("100");
                } else {
                    chatBean.setCompletedPercentage("0");
                }
                chatBean.setPlannedStartDateTime("");
                chatBean.setPlannedEndDateTime("");
                Log.i("timer123", "Appreference.HoldOrPauseTimervalue percentageWEbservice===>" + Appreference.HoldOrPauseTimervalue);
                chatBean.setUtcplannedEndDateTime(Appreference.HoldOrPauseTimervalue);
                chatBean.setEstimTimeForTimer(Appreference.EstimTimerValue);
                chatBean.setTaskPlannedLatestEndDate("1");
                chatBean.setEstimAlarm("1");
                chatBean.setEstimRemainingAlarmTime("0");
                chatBean.setRemainderFrequency("");
                chatBean.setTaskUTCDateTime(dateforrow);
                chatBean.setDateTime(dateTime);
                String project_deassignMems = "";
                if (Self_assign && oracleProjectOwner != null && !oracleProjectOwner.equalsIgnoreCase("")) {
                    chatBean.setOwnerOfTask(oracleProjectOwner);
                    chatBean.setTaskStatus("Assigned");
                    taskStatus = "Assigned";
                    ownerOfTask = oracleProjectOwner;
                } else {
                    chatBean.setOwnerOfTask(ownerOfTask);
                    chatBean.setTaskStatus(taskStatus);
                }
                if (isDeassign) {
                    chatBean.setTaskStatus("Unassigned");
                    taskStatus = "Unassigned";
                    chatBean.setTaskReceiver("");
                    chatBean.setToUserName("");
                    chatBean.setToUserId("");
                    chatBean.setCompletedPercentage("0");

                    project_deassignMems = listTaskMembers();
                } else {
                    chatBean.setTaskReceiver(taskReceiver);
                    chatBean.setToUserName(toUserName);
                    chatBean.setToUserId(String.valueOf(toUserId));
                }
                chatBean.setTasktime(tasktime);
                chatBean.setTaskUTCTime(taskUTCtime);
                chatBean.setMimeType(getMediaType);
                chatBean.setTaskId(webtaskId);


                // send status 0 is send 1 is unsend
                chatBean.setSendStatus("0");
                chatBean.setMsg_status(0);
                chatBean.setWs_send("0");
                chatBean.setCustomTagVisible(true);
                chatBean.setCatagory(category);
                if (getMediaType != null && getMediaType.equalsIgnoreCase("textfile")) {
                    chatBean.setLongmessage("0");
                }
                if (!getMediaType.equalsIgnoreCase("text")) {
                    chatBean.setShow_progress(0);
                }
                if (project) {
                    chatBean.setProjectId(projectId);
                    if (isDeassign) {
                        Log.i("taskConversation", "project_deassignMems success");
                        if (project_deassignMems != null && !project_deassignMems.equalsIgnoreCase("") && !project_deassignMems.equalsIgnoreCase(null)) {
                            chatBean.setGroupTaskMembers(project_deassignMems);
                        }
                    } else if (grouptaskmember() != null) {
                        chatBean.setGroupTaskMembers(grouptaskmember());
                    }
                }
                if ((subType != null && subType.equalsIgnoreCase("taskDescription")) && !chatBean.getTaskDescription().contains("Completed Percentage ")) {
                    chatBean.setSubType(subType);
                    chatBean.setTaskRequestType(subType);
                } else {
                    if (!isTaskName) {
                        if (isDateorUpdateorNormal == 1) {
                            chatBean.setSubType("percentageCompleted");
                            chatBean.setTaskRequestType("percentageCompleted");
                        }
                        if (isDateorUpdateorNormal == 2) {
                            chatBean.setSubType("taskDateChangedRequest");
                            chatBean.setTaskRequestType("taskDateChangedRequest");
                        }
                        if (isDateorUpdateorNormal == 3) {
                            chatBean.setSubType("SchedulingAlert");
                            chatBean.setTaskRequestType("SchedulingAlert");
                            chatBean.setRequestStatus("Resolved");
                        } else {
                            chatBean.setTaskRequestType("taskConversation");
                        }
                    }
                }
                Log.i("conv123", "taskList will add ==>  " + isNetworkAvailable());
                if (!isNetworkAvailable()) {
                    Log.i("conv123", "isNetworkAvailable-------->  " + isNetworkAvailable());
                    chatBean.setWs_send("000");
                    chatBean.setShow_progress(1);
                }
                if (!getExt.equalsIgnoreCase("message")) {
                    if (!isTaskName) {
                        if (project) {
                            VideoCallDataBase.getDB(context).update_Project_history(chatBean);
                        }
                        if (VideoCallDataBase.getDB(context).insertORupdate_Task_history(chatBean)) {
                            if (chatBean.isCustomTagVisible()) {
                                taskList.add(chatBean);
                                cancelDialog();
                            }
                            Log.i("task", "msg Status " + chatBean.getMsg_status());
                            refresh();
                        }
                    }
                }
                if (isTaskName) {
                    Log.i("taskconversation", "istaskName percentagewebservice **  ");
                    if (!template && !note) {
                        chatBean.setTaskName("New Task");
                        Log.i("taskconversation", "headername  9 ");
                    } else if (note) {
                        chatBean.setTaskName("New Note");
                        Log.i("taskconversation", "headername  10 ");
                    } else if (chat) {
                        chatBean.setTaskName("New chat");
                    } else {
                        chatBean.setTaskName("New Template");
                        Log.i("taskconversation", "headername  11 ");
                    }
                    chatBean.setSubType("taskDescription");
                    chatBean.setTaskRequestType("taskDescription");
                    Log.i("task", "setting task name ");
                    ownerOfTask = Appreference.loginuserdetails.getUsername();
                    taskReceiver = toUserName;
                    taskIdWebservice(chatBean);
                    Log.i("task", "isTask Name is false ");
                } else {
                    chatBean.setSubType(subType);
                    if (isDateorUpdateorNormal == 1) {
                        chatBean.setSubType("percentageCompleted");
                        chatBean.setTaskRequestType("percentageCompleted");
                    }
                    if (isDateorUpdateorNormal == 2) {
                        chatBean.setSubType("taskDateChangedRequest");
                        chatBean.setTaskRequestType("taskDateChangedRequest");
                    }
                    if (isDateorUpdateorNormal == 3) {
                        chatBean.setSubType("SchedulingAlert");
                        chatBean.setTaskRequestType("SchedulingAlert");
                        chatBean.setRequestStatus("Resolved");
                    } else {
                        chatBean.setTaskRequestType(subType);
                    }
                    chatBean.setTaskName(taskName);
                    if (isProjectFromOracle) {
                        chatBean.setTaskRequestType("normal");
                        chatBean.setRequestStatus("normal");
                        chatBean.setSubType("normal");
                        if (isDeassign)
                            chatBean.setSubType("deassign");
                    }

                    Log.i("deassign123", "Deassgn flow=getSubType===>" + chatBean.getSubType());
                    Log.i("deassign123", "Deassgn flow==getTaskStatus==>" + chatBean.getTaskStatus());
                    Log.i("deassign123", "Deassgn flow===getTaskReceiver=>" + chatBean.getTaskReceiver());
                    Log.i("deassign123", "Deassgn flow==getToUserName==>" + chatBean.getToUserName());
                    Log.i("deassign123", "Deassgn flow==project_deassignMems==>" + project_deassignMems);

                    try {
                        JSONObject jsonObject = new JSONObject();
                        JSONObject jsonObject1 = new JSONObject();
                        if (webtaskId != null)
                            jsonObject1.put("id", Integer.parseInt(webtaskId));
                        jsonObject.put("task", jsonObject1);
                        JSONObject jsonObject2 = new JSONObject();
                        jsonObject2.put("id", Appreference.loginuserdetails.getId());
                        jsonObject.put("from", jsonObject2);
                        if ((!template && !project) || chat || note) {
                            Log.i("taskconversation", "toUserId " + toUserId);
                            JSONObject jsonObject3 = new JSONObject();
                            jsonObject3.put("id", toUserId);
                            if (taskType.equalsIgnoreCase("group")) {
                                jsonObject.put("group", jsonObject3);
                            } else {
                                jsonObject.put("to", jsonObject3);
                            }
                        }
                        jsonObject.put("signalId", sig_id);
                        jsonObject.put("parentId", getFileName());
                        jsonObject.put("createdDate", dateforrow);
                        if (subType != null && subType.equalsIgnoreCase("taskDescription") && !chatBean.getTaskDescription().contains("Completed Percentage ")) {
                            jsonObject.put("requestType", "taskDescription");
                        } else if (getMediaPath != null && (getMediaPath.equalsIgnoreCase("This Task is closed") || getMediaPath.equalsIgnoreCase("This issue is closed"))) {
                            jsonObject.put("requestType", "percentageCompleted");
                            jsonObject.put("taskStatus", "closed");
                            jsonObject.put("percentageCompleted", "100");
                        } else if (isProjectFromOracle && (getMediaPath != null && getMediaPath.equalsIgnoreCase("Completed Percentage 100%"))) {
                            jsonObject.put("requestType", "percentageCompleted");
                            jsonObject.put("taskStatus", "Completed");
                            jsonObject.put("percentageCompleted", "100");
                        } else if (isDateorUpdateorNormal == 1) {
                            jsonObject.put("requestType", "percentageCompleted");
                        } else if (isDateorUpdateorNormal == 2) {
                            jsonObject.put("requestType", "taskDateChangeRequest");
                        } else if (isDateorUpdateorNormal == 3) {
                            jsonObject.put("requestType", "SchedulingAlert");
                        } else {
                            jsonObject.put("requestType", "taskConversation");
                        }
                        if (getMediaPath != null && (getMediaPath.equalsIgnoreCase("This Task is closed") || getMediaPath.equalsIgnoreCase("This issue is closed"))) {
                            jsonObject.put("requestStatus", "");
                        } else {
                            jsonObject.put("requestStatus", "approved");
                        }
                        jsonObject.put("taskEndDateTime", enddate);
                        jsonObject.put("taskStartDateTime", startdate);
                        jsonObject.put("remainderDateTime", reminderdate);
                        jsonObject.put("dateFrequency", "");
                        jsonObject.put("timeFrequency", reminderfreq);
                        jsonObject.put("remark", "");
                        JSONObject jsonObject5 = new JSONObject();
                        jsonObject5.put("id", Appreference.loginuserdetails.getId());
                        JSONObject jsonObject4 = new JSONObject();
                        jsonObject4.put("user", jsonObject5);
                        switch (getMediaType.toLowerCase().trim()) {
                            case "image":
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 13 " + getMediaType);
                                jsonObject4.put("fileType", "image");
                                jsonObject4.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(getMediaPath)));
                                jsonObject4.put("taskFileExt", "jpg");
                                break;
                            case "video":
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 14 " + getMediaType);
                                jsonObject4.put("fileType", "video");
                                Log.i("task", "Video uploaded" + getMediaPath);
                                jsonObject4.put("fileContent", encodeAudioVideoToBase64(getMediaPath));
                                jsonObject4.put("taskFileExt", "mp4");
                                break;
                            case "audio":
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 15 " + getMediaType);
                                jsonObject4.put("fileType", "audio");
                                jsonObject4.put("fileContent", encodeAudioVideoToBase64(getMediaPath));
                                jsonObject4.put("taskFileExt", "mp3");
                                break;
                            case "document":
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 16 " + getMediaType);
                                jsonObject4.put("fileType", getMediaType);
                                jsonObject4.put("fileContent", encodeFileToBase64Binary(getMediaPath));
                                jsonObject4.put("taskFileExt", getExt);
                                break;
                            case "text":
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 17 " + getMediaType);
                                jsonObject4.put("fileType", "text");
                                jsonObject4.put("description", getMediaPath);
                                break;
                            case "assigntask":
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 17 " + getMediaType);
                                jsonObject4.put("fileType", "assigntask");
                                jsonObject4.put("description", getMediaPath);
                                break;
                            case "map":
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 19 " + getMediaType);
                                jsonObject4.put("fileType", "map");
                                jsonObject4.put("description", getMediaPath);
                                break;
                            case "textfile":
                                Log.i("taskconversation", "mediaListBean.getMimeType() --------> 20 " + getMediaType);
                                Log.i("textfile", "getExt ==  " + getExt + "   getMediaType  == " + getMediaType);
                                jsonObject4.put("fileType", getMediaType);
                                jsonObject4.put("taskFileExt", "txt");
                                jsonObject4.put("fileContent", encodeFileToBase64Binary(getMediaPath));
                                break;
                        }
                        JSONArray jsonArray = new JSONArray();
                        jsonArray.put(0, jsonObject4);
                        jsonObject.put("listTaskConversationFiles", jsonArray);
                        Log.i("taskconversation", "mediaListBean.getMimeType() --------> 20 " + jsonArray);
                        if (jsonObject != null) {
                            Appreference.printLog("Completed percentage", jsonObject.toString(), "Completed percentage", null);
                            listLastposition();
                            Log.i("taskconversation", "mediaListBean.getMimeType() --------> 21 " + getMediaType);
                            if (isNetworkAvailable()) {
                                Appreference.printLog("taskConversationEntry", jsonObject.toString(), "Request", null);
                                Appreference.jsonRequestSender.taskConversationEntry(EnumJsonWebservicename.taskConversationEntry, jsonObject, this, null, chatBean);
                            } else {
                                Toast.makeText(NewTaskConversation.this, "Check your internet connection", Toast.LENGTH_SHORT).show();
                            }
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        Appreference.printLog("NewTaskConversation", "PercentageWebService taskConversationEntry Exception : " + e.getMessage(), "WARN", null);
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "PercentageWebService Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void oracle_percentage(String getMediaType, String getMediaPath, String getExt, String sig_id, int isDateorUpdateorNormal) {
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String dateTime = dateFormat.format(new Date());
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            String dateforrow = dateFormat.format(new Date());
            tasktime = dateTime;
            tasktime = tasktime.split(" ")[1];
            taskUTCtime = dateforrow;
            final TaskDetailsBean chatBean = new TaskDetailsBean();
            chatBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
            chatBean.setFromUserName(Appreference.loginuserdetails.getUsername());
            chatBean.setSelect(false);
            chatBean.setTaskDescription(getMediaPath);
            chatBean.setSignalid(sig_id);
            chatBean.setTaskNo(task_No);
            chatBean.setIssueId(issueId);
            chatBean.setParentId(getFileName());
            chatBean.setTaskType(taskType);
            chatBean.setTaskPriority("Medium");
            chatBean.setIsRemainderRequired("");
            chatBean.setCompletedPercentage("100");
            chatBean.setPlannedStartDateTime("");
            chatBean.setPlannedEndDateTime("");
            chatBean.setRemainderFrequency("");
            chatBean.setTaskUTCDateTime(dateforrow);
            chatBean.setDateTime(dateTime);
            String project_deassignMems = "";
            Log.i("selfassign", "Self_assign==> " + Self_assign + " oracleProjectOwner --> " + oracleProjectOwner);
            chatBean.setOwnerOfTask(ownerOfTask);
            chatBean.setTaskStatus("Completed");
            taskStatus = "Completed";
            chatBean.setTaskReceiver(taskReceiver);
            chatBean.setToUserName(toUserName);
            chatBean.setToUserId(String.valueOf(toUserId));
            chatBean.setTasktime(tasktime);
            chatBean.setTaskUTCTime(taskUTCtime);
            chatBean.setMimeType(getMediaType);
            chatBean.setTaskId(webtaskId);


            // send status 0 is send 1 is unsend
            chatBean.setSendStatus("0");
            chatBean.setMsg_status(0);
            chatBean.setWs_send("0");
            chatBean.setCustomTagVisible(true);
            chatBean.setCatagory(category);
            chatBean.setProjectId(projectId);
            if (projectGroup_Mems != null) {
                chatBean.setGroupTaskMembers(projectGroup_Mems);
            }
            chatBean.setSubType("percentageCompleted");
            chatBean.setTaskName(taskName);
            chatBean.setTaskRequestType("normal");
            chatBean.setRequestStatus("normal");
            chatBean.setSubType("normal");
            Log.i("oracle_status", "isNetworkAvailable ==>  " + isNetworkAvailable());
            if (!isNetworkAvailable()) {
                Log.i("conv123", "isNetworkAvailable-------->  " + isNetworkAvailable());
                chatBean.setWs_send("000");
                chatBean.setShow_progress(1);
            }
            VideoCallDataBase.getDB(context).update_Project_history(chatBean);
            if (VideoCallDataBase.getDB(context).insertORupdate_Task_history(chatBean)) {
                if (chatBean.isCustomTagVisible()) {
                    taskList.add(chatBean);
                    cancelDialog();
                    Log.i("conv123", "" + getMediaPath + "added DB successfully=====>" + taskList.size());
                }
                Log.i("task", "msg Status " + chatBean.getMsg_status());
                refresh();
            }
            String parent_id = "";
            JSONObject jsonObject = new JSONObject();
            JSONObject jsonObject1 = new JSONObject();
            jsonObject1.put("id", webtaskId);
            jsonObject.put("task", jsonObject1);
            JSONObject jsonObject2 = new JSONObject();
            jsonObject2.put("id", fromId);
            jsonObject.put("from", jsonObject2);
            JSONObject jsonObject3 = new JSONObject();
            jsonObject3.put("id", toUserId);

            jsonObject.put("signalId", sig_id);
            jsonObject.put("parentId", parent_id);
            jsonObject.put("createdDate", dateFormat.format(new Date()));
            jsonObject.put("percentageCompleted", "100");
            jsonObject.put("taskNo", task_No);
            jsonObject.put("requestType", "percentageCompleted");
            jsonObject.put("taskStatus", "Completed");
            Appreference.printLog("taskConversationEntry", jsonObject.toString(), "CompletePercentage", null);
            Appreference.jsonRequestSender.taskConversationEntry(EnumJsonWebservicename.taskConversationEntry, jsonObject, NewTaskConversation.this, null, chatBean);
        } catch (JSONException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "oracle_percentage Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "oracle_percentage Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void datefileWebService(TaskDetailsBean chatBean) {
        Log.i("task", chatBean.getTaskDescription());
        String rem_tone, rem_freq_min, rem_frq, remainder_Frequency = null, task_startdate = null, task_enddate = null, task_remindate = null;
        long total_mins;
        Log.i("task", "Leave_Approve datefilewebservice");
        if (reminderfreq != null && !reminderfreq.equalsIgnoreCase("")) {
            if (getResources().getString(R.string.TASKNOTIFICATION_FROM_SERVER).equalsIgnoreCase("0")) {
                Log.i("task", "Reminder Freq Local Changed to Lower case " + reminderfreq.toLowerCase());
                switch (reminderfreq.toLowerCase()) {
                    case "none":
                        remainder_Frequency = "0";
                        break;
                    case "every minute":
                        total_mins = 60000;
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    case "every 10 min":
                        total_mins = 10 * 60000;
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    case "hourly":
                        total_mins = 60 * 60000;
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    case "daily":
                        total_mins = 1440 * 60000;
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    case "week day":
                        total_mins = 10080 * 60000;
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    case "monthly":
                        total_mins = 43200 * 60000;
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    case "yearly":
                        total_mins = 525600 * 60000;
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    default:
                        remainder_Frequency = "60000";
                        break;
                }
            } else {
                Log.i("Request", "timeFrequency " + chatBean.getTimeFrequency());  // 1 Minute
                rem_freq_min = reminderfreq.split(" ")[0];   // 1
                rem_frq = reminderfreq.split(" ")[1];   // Minute
                Log.i("task", "Reminder Freq Minutes " + rem_freq_min);
                switch (rem_frq.toLowerCase()) {
                    case "minutes":
                        total_mins = Long.parseLong(rem_freq_min) * 60000;
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    case "hours":
                        total_mins = Long.parseLong(rem_freq_min) * 60 * 60000;
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    case "days":
                        total_mins = Long.parseLong(rem_freq_min) * 1440 * 60000;
                        remainder_Frequency = String.valueOf(total_mins);
                        break;
                    default:
                        remainder_Frequency = "60000";
                        break;
                }
            }
        } else {
            remainder_Frequency = "60000";
        }
        try {
            JSONObject jsonObject = new JSONObject();
            JSONObject jsonObject1 = new JSONObject();
            jsonObject1.put("id", Integer.parseInt(webtaskId));
            jsonObject.put("task", jsonObject1);
            JSONObject jsonObject2 = new JSONObject();
            jsonObject2.put("id", Appreference.loginuserdetails.getId());
            jsonObject.put("from", jsonObject2);
            JSONObject jsonObject3 = new JSONObject();
            jsonObject3.put("id", toUserId);
            if (project && !chatBean.getTaskType().equalsIgnoreCase("Group")) {
                Log.i("task", "tasktype project " + taskType);
                jsonObject.put("to", jsonObject3);
            } else if (!project) {
                if (taskType != null && taskType.equalsIgnoreCase("Group")) {
                    Log.i("task", "tasktype groupTask " + taskType);
                    jsonObject.put("group", jsonObject3);
                } else {
                    Log.i("task", "tasktype IndividualTask " + taskType);
                    jsonObject.put("to", jsonObject3);
                }
            }
            jsonObject.put("signalId", chatBean.getSignalid());
            jsonObject.put("parentId", getFileName());
            jsonObject.put("createdDate", chatBean.getTaskUTCTime());
            if (chatBean.getRequestStatus().equalsIgnoreCase("assigned")) {
                jsonObject.put("requestType", "taskDateChangedApproval");
//                if (project || (taskType != null && taskType.equalsIgnoreCase("Group"))) {
//                    jsonObject.put("requestStatus", "approved");
//                } else {
                jsonObject.put("requestStatus", "assigned");
//                }
            }
            if (chatBean.getRequestStatus().equalsIgnoreCase("requested")) {
                jsonObject.put("requestType", "taskDateChangedRequest");
                jsonObject.put("requestStatus", date_header);
            }
            if (chatBean.getRequestStatus().equalsIgnoreCase("approved")) {
                jsonObject.put("requestType", "taskDateChangedApproval");
                jsonObject.put("requestStatus", "approved");
            } else if (chatBean.getRequestStatus().equalsIgnoreCase("rejected")) {
                jsonObject.put("requestType", "taskDateChangedApproval");
                jsonObject.put("requestStatus", "rejected");
            }
            if (isResend) {
                task_startdate = Appreference.customLocalDateToUTC(chatBean.getPlannedStartDateTime());
                task_enddate = Appreference.customLocalDateToUTC(chatBean.getPlannedEndDateTime());
                task_remindate = Appreference.customLocalDateToUTC(chatBean.getRemainderFrequency());
                chatBean.setUtcPlannedStartDateTime(task_startdate);
                chatBean.setUtcplannedEndDateTime(task_enddate);
                chatBean.setUtcPemainderFrequency(task_remindate);
                Log.i("task", "date chatBean local getPlannedStartDateTime() " + chatBean.getPlannedStartDateTime());
                Log.i("task", "date chatBean utc getPlannedStartDateTime() " + task_startdate);
                jsonObject.put("taskStartDateTime", task_startdate);
                jsonObject.put("taskEndDateTime", task_enddate);
                if (chatBean.getIsRemainderRequired() != null && chatBean.getIsRemainderRequired().equalsIgnoreCase("R")) {
                    jsonObject.put("remainderDateTime", task_remindate);
                    jsonObject.put("isRemainderRequired", "R");
                    jsonObject.put("timeFrequency", remainder_Frequency);
                } else if (chatBean.getIsRemainderRequired() != null && chatBean.getIsRemainderRequired().equalsIgnoreCase("N")) {
                    jsonObject.put("remainderDateTime", task_remindate);
                    jsonObject.put("isRemainderRequired", "N");
                    jsonObject.put("timeFrequency", remainder_Frequency);
                } else if (chatBean.getIsRemainderRequired() != null && chatBean.getIsRemainderRequired().equalsIgnoreCase("Y")) {
                    jsonObject.put("timeFrequency", remainder_Frequency);
                    jsonObject.put("isRemainderRequired", "Y");
                    jsonObject.put("remainderDateTime", task_remindate);
                }
            } else {
                jsonObject.put("taskStartDateTime", chatBean.getUtcPlannedStartDateTime());
                jsonObject.put("taskEndDateTime", chatBean.getUtcplannedEndDateTime());
                if (chatBean.getIsRemainderRequired() != null && chatBean.getIsRemainderRequired().equalsIgnoreCase("R")) {
                    jsonObject.put("remainderDateTime", chatBean.getUtcPemainderFrequency());
                    jsonObject.put("timeFrequency", remainder_Frequency);
                    jsonObject.put("isRemainderRequired", "R");
                } else if (chatBean.getIsRemainderRequired() != null && chatBean.getIsRemainderRequired().equalsIgnoreCase("N")) {
                    jsonObject.put("remainderDateTime", chatBean.getUtcPemainderFrequency());
                    jsonObject.put("timeFrequency", remainder_Frequency);
                    jsonObject.put("isRemainderRequired", "N");
                } else if (chatBean.getIsRemainderRequired() != null && chatBean.getIsRemainderRequired().equalsIgnoreCase("Y")) {
                    jsonObject.put("timeFrequency", remainder_Frequency);
                    jsonObject.put("isRemainderRequired", "Y");
                    jsonObject.put("remainderDateTime", chatBean.getUtcPemainderFrequency());
                }
            }
            jsonObject.put("taskNo", chatBean.getTaskNo());
            jsonObject.put("dateFrequency", "");
            if (Weekdays != null && !Weekdays.equalsIgnoreCase("")) {
                jsonObject.put("repeatFrequency", "1");
                jsonObject.put("isRepeatTask", "Y");
                jsonObject.put("dayOfTheWeek", Weekdays);
            }
            if (reminderquote != null && !reminderquote.equalsIgnoreCase("") && !reminderquote.equalsIgnoreCase(null)) {
                if (chatBean.getIsRemainderRequired() != null && chatBean.getIsRemainderRequired().equalsIgnoreCase("Y")) {
                    jsonObject.put("remainderQuotes", reminderquote);
                } else if (chatBean.getIsRemainderRequired() != null && chatBean.getIsRemainderRequired().equalsIgnoreCase("R")) {
                    jsonObject.put("remainderQuotes", reminderquote);
                } else if (chatBean.getIsRemainderRequired() != null && chatBean.getIsRemainderRequired().equalsIgnoreCase("N")) {
                    jsonObject.put("remainderQuotes", reminderquote);
                }
            } else {
                if (chatBean.getIsRemainderRequired() != null && chatBean.getIsRemainderRequired().equalsIgnoreCase("Y")) {
                    jsonObject.put("remainderQuotes", "Task Reminder");
                } else if (chatBean.getIsRemainderRequired() != null && chatBean.getIsRemainderRequired().equalsIgnoreCase("R")) {
                    jsonObject.put("remainderQuotes", "Task Reminder");
                } else if (chatBean.getIsRemainderRequired() != null && chatBean.getIsRemainderRequired().equalsIgnoreCase("N")) {
                    jsonObject.put("remainderQuotes", "Task Reminder");
                }
            }
            Log.i("Request", "remainder" + reminderquote);
            jsonObject.put("remark", "");
            JSONObject jsonObject5 = new JSONObject();
            jsonObject5.put("id", Appreference.loginuserdetails.getId());
            JSONObject jsonObject4 = new JSONObject();
            jsonObject4.put("user", jsonObject5);
            jsonObject4.put("fileType", "audio");
            jsonObject4.put("taskFileExt", "mp3");
            Log.i("Request", "remainder" + remindertone);
            if (remindertone != null && !remindertone.equalsIgnoreCase(null) && !remindertone.equalsIgnoreCase("") && (remindertone.contains(".mp3") || remindertone.contains(".wav"))) {
                rem_tone = encodeAudioVideoToBase64(remindertone);
                jsonObject4.put("fileContent", rem_tone);
                JSONArray jsonArray = new JSONArray();
                jsonArray.put(0, jsonObject4);
                jsonObject.put("listTaskConversationFiles", jsonArray);
            }
            Log.i("Request", "Task date update for giver is " + jsonObject);
            Log.i("task", "Desc2 " + chatBean.getTaskDescription());
            Log.i("task", "Desc2 " + chatBean.getIsRemainderRequired());
            Appreference.jsonRequestSender.taskConversationEntry(EnumJsonWebservicename.taskConversationEntry, jsonObject, NewTaskConversation.this, null, chatBean);
            Appreference.isRequested_date = true;
            showprogress();
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "datefileWebService Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void PrivateMultifileUpload_Webservice(TaskDetailsBean taskPrivateBean) {
        taskList_8 = new ArrayList<>();
        try {
            taskList_8.add(taskPrivateBean);
            JSONObject[] listpostfiles_object1 = new JSONObject[taskList_8.size()];
            if (taskList_8 != null && taskList_8.size() > 0) {
                int i = 0;
                for (TaskDetailsBean bean : taskList_8) {
                    listpostfiles_object1[i] = new JSONObject();
                    int user_id = Appreference.loginuserdetails.getId();
                    Log.i("test", "user id   " + Appreference.loginuserdetails.getId());
                    Log.i("test", "Media Type   " + bean.getMimeType());
                    Log.i("test", "Media Path   " + bean.getTaskDescription());
                    listpostfiles_object1[i].put("userId", user_id);
                    listpostfiles_object1[i].put("fileType", bean.getMimeType());
                    File file = new File(bean.getTaskDescription());
                    String imgcontent = "";
                    if (bean.getMimeType().equalsIgnoreCase("image")) {
                        listpostfiles_object1[i].put("fileExtention", "jpg");
                        imgcontent = encodeTobase64(BitmapFactory.decodeFile(file.getPath()));
                    } else if (bean.getMimeType().equalsIgnoreCase("video")) {
                        listpostfiles_object1[i].put("fileExtention", "mp4");
                        imgcontent = encodeAudioVideoToBase64(file.getPath());
                    } else if (bean.getMimeType().equalsIgnoreCase("audio")) {
                        Log.i("test", "file Path   " + file.getPath());
                        listpostfiles_object1[i].put("fileExtention", "mp3");
                        imgcontent = encodeAudioVideoToBase64(file.getPath());
                    } else if (bean.getMimeType().equalsIgnoreCase("document")) {
                        if (fileExt != null)
                            listpostfiles_object1[i].put("fileExtention", fileExt);
                        imgcontent = encodeFileToBase64Binary(file.getPath());
                    }
                    filepath = bean.getTaskDescription();
                    fileOriginalName = filepath.substring(filepath.lastIndexOf("/") + 1);
                    listpostfiles_object1[i].put("fileOriginalName", fileOriginalName);
                    listpostfiles_object1[i].put("fileContent", imgcontent);
                    Log.i("test", "file Path   " + file.getPath());
                    Log.i("test", "image Path   " + imgcontent);
                    i++;
                }
            }
            JSONArray listpostfiles_object = new JSONArray();
            for (int i = 0; i < listpostfiles_object1.length; i++) {
                listpostfiles_object.put(listpostfiles_object1[i]);
            }
            Log.i("JSONArray", "is " + listpostfiles_object);
            Appreference.jsonRequestSender.multiFileUpload(EnumJsonWebservicename.multiFileUpload, listpostfiles_object, taskPrivateBean, NewTaskConversation.this);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "PrivateMultifileUpload_Webservice Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void TaskAcceptedOrRejected(TaskDetailsBean acceptbean) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String dateTime = dateFormat.format(new Date());
        dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
        String dateforrow = dateFormat.format(new Date());
        tasktime = dateTime;
        tasktime = tasktime.split(" ")[1];
        Log.i("task", "tasktime" + tasktime);
        Log.i("UTC", "sendMessage utc time" + dateforrow);
        taskUTCtime = dateforrow;
        try {
            JSONObject jsonObject = new JSONObject();
            JSONObject jsonObject1 = new JSONObject();
            jsonObject1.put("id", Integer.parseInt(webtaskId));
            jsonObject.put("task", jsonObject1);
            JSONObject jsonObject2 = new JSONObject();
            jsonObject2.put("id", Appreference.loginuserdetails.getId());
            jsonObject.put("from", jsonObject2);
            if (!template && !note) {
                JSONObject jsonObject3 = new JSONObject();
                jsonObject3.put("id", toUserId);
                jsonObject.put("to", jsonObject3);
            }
            jsonObject.put("signalId", acceptbean.getSignalid());
            jsonObject.put("parentId", getFileName());
            jsonObject.put("createdDate", dateforrow);
            if (isTaskAccept) {
                jsonObject.put("requestType", "taskAcceptedOrRejected");
                jsonObject.put("requestStatus", "approved");
            } else {
                jsonObject.put("requestType", "taskAcceptedOrRejected");
                jsonObject.put("requestStatus", "rejected");
            }
            JSONObject jsonObject4 = new JSONObject();
            JSONObject jsonObject5 = new JSONObject();
            jsonObject4.put("user", jsonObject5);
            jsonObject5.put("id", Appreference.loginuserdetails.getId());
            jsonObject4.put("fileType", "text");
            if (isTaskAccept) {
                jsonObject4.put("description", category + " accepted");
            } else {
                jsonObject4.put("description", category + " Rejected");
            }
            JSONArray jsonArray = new JSONArray();
            jsonArray.put(0, jsonObject4);
            jsonObject.put("listTaskConversationFiles", jsonArray);
            if (jsonObject != null) {
                Log.i("Request for task accept", "TaskAcceptedOrRejected " + jsonObject);
                Appreference.jsonRequestSender.taskConversationEntry(EnumJsonWebservicename.taskConversationEntry, jsonObject, this, null, acceptbean);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "TaskAcceptedOrRejected Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void notifyTaskDeleteReceived(final TaskDetailsBean taskDetailsBean) {
        try {
            VideoCallDataBase.getDB(context).deleteCustomTagEntry(taskDetailsBean.getTaskId(), String.valueOf(taskDetailsBean.getCustomSetId()));
            refresh();
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "notifyTaskDeleteReceived Exception : " + e.getMessage(), "WARN", null);
        }
        refresh();
    }

    public void notifyEditMessage(final TaskDetailsBean taskDetailsBean) {
        try {
            if (taskDetailsBean.getTaskId().equalsIgnoreCase(webtaskId)) {
                for (TaskDetailsBean taskDetailsBean2 : taskList) {
                    if (taskDetailsBean.getSignalid().equalsIgnoreCase(taskDetailsBean2.getSignalid())) {
                        taskDetailsBean2.setTaskDescription(taskDetailsBean.getTaskDescription());
                        Log.i("popupmenu", "withdraw notify  ");
                    }
                }
                VideoCallDataBase.getDB(context).withdrawMsg_StatusUpdate(taskDetailsBean.getSignalid(), taskDetailsBean.getTaskDescription());
                Log.i("popupmenu", "withdraw notify1  ");
            } else {
                VideoCallDataBase.getDB(context).withdrawMsg_StatusUpdate(taskDetailsBean.getSignalid(), taskDetailsBean.getTaskDescription());
                Log.i("popupmenu", "withdraw notify2  ");
            }
            refresh();
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "notifyEditMessage Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void notifyTaskWithDrawReceived(final TaskDetailsBean taskDetailsBean) {
        try {
            if (taskDetailsBean.getTaskId().equalsIgnoreCase(webtaskId)) {
                for (TaskDetailsBean taskDetailsBean2 : taskList) {
                    if (taskDetailsBean.getSignalid().equalsIgnoreCase(taskDetailsBean2.getSignalid())) {
                        taskDetailsBean2.setMimeType("text");
                        taskDetailsBean2.setTaskDescription("Message has been Removed");
                        Log.i("popupmenu", "withdraw notify  ");
                    }
                }
                VideoCallDataBase.getDB(context).withdrawMsg_StatusUpdate(taskDetailsBean.getSignalid(), "Message has been Removed");
                Log.i("popupmenu", "withdraw notify1  ");
            } else {
                VideoCallDataBase.getDB(context).withdrawMsg_StatusUpdate(taskDetailsBean.getSignalid(), "Message has been Removed");
                Log.i("popupmenu", "withdraw notify2  ");
            }
            refresh();
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "notifyTaskWithDrawReceived Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void notifyGroupNameOrMemberChanges(final SipNotification notification) {
        Log.i("Groupchat", "NewTaskcon newuseradded $$$** " + notification.getGroup_name());
        Log.i("Groupchat", "NewTaskcon newGroupName $$$** " + notification.getMember_added());
        refresh();
    }

    public void notifyGroupMemberAccess(final SipNotification notification) {
        try {
            groupMemberAccess = notification.getGroupMemberAccess();
            handler.post(new Runnable() {
                @Override
                public void run() {
                    gridAccess();
                }
            });
            refresh();
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "notifyGroupMemberAccess Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void isCameFromOffline(boolean isofflineData_Exist) {
        if (isofflineData_Exist) {
            Log.i("online123", "isofflineData_Exist********" + isofflineData_Exist);

            Appreference.isAlreadyLoadedofflineData = false;
            VideoCallDataBase.getDB(context).DB_converstion_Delete(webtaskId, projectId);
        }

        Log.i("online123", "isCameFromOffline********" + webtaskId);
        Appreference.webid = webtaskId;
        if (webtaskId != null) {
            appSharedpreferences.saveBoolean("syncTask" + webtaskId, true);
        }
        gettaskwebservice();
    }

    public void notifyTaskReceived(final TaskDetailsBean taskDetailsBean) {
        try {
            Log.i("online123", "notifyTaskReceived******** ");
            Log.i("notifyTaskReceived", "taskStatus " + taskStatus);
            Log.i("notifyTaskReceived", "TaskId  " + taskDetailsBean.getTaskId());
            Log.i("notifyTaskReceived", "webtaskId  " + webtaskId);
            Log.i("notifyTaskReceived", "taskType  " + taskType);
            Log.i("notifyTaskReceived", "chat " + chat);
            Log.i("notifyTaskReceived", "getGroupTaskMembers  " + taskDetailsBean.getGroupTaskMembers());
            Log.i("notifyTaskReceived", "getOwnerOfTask " + taskDetailsBean.getOwnerOfTask());
            Log.i("notifyTaskReceived", "getTaskReceiver " + taskDetailsBean.getTaskReceiver());
            Log.i("notifyTaskReceived", "getTaskObservers  " + taskDetailsBean.getTaskObservers());
            Log.i("notifyTaskReceived", "getSubType  " + taskDetailsBean.getSubType());
            Log.i("notifyTaskReceived", "TaskRequestType  " + taskDetailsBean.getTaskRequestType());

            Log.i("notifyTaskReceived", "Tasktime !$ " + taskDetailsBean.getTasktime());
            Log.i("notifyTaskReceived", "DateTime !$ " + taskDetailsBean.getDateTime());
            Log.i("notifyTaskReceived", "TaskUTCDateTime !$ " + taskDetailsBean.getTaskUTCDateTime());
            Log.i("notifyTaskReceived", "TaskUTCTime !$ " + taskDetailsBean.getTaskUTCTime());
            // signal id check in this method for db insertion
            dbInsertCheckSignalId(taskDetailsBean);
            if (taskDetailsBean.getTaskId().equalsIgnoreCase(webtaskId)) {
                if (!VideoCallDataBase.getDB(context).DuplicateChecker(taskDetailsBean.getSignalid(), taskDetailsBean.getTaskId()) || (taskDetailsBean.getTaskRequestType() != null && taskDetailsBean.getTaskRequestType().equalsIgnoreCase("customeAttributeRequest"))) {
                    String project_memList;
                    Log.i("notifyTaskReceived", "TaskId inside #  " + taskDetailsBean.getTaskId());
                    Log.i("notifyTaskReceived", "webtaskId inside % " + webtaskId);
                    taskDetailsBeanArrayList1 = new ArrayList<>();
                    taskDetailsBean.setRead_status(0);
                    if ((taskDetailsBean.getTaskObservers() != null && !taskDetailsBean.getTaskObservers().equalsIgnoreCase("") && !taskDetailsBean.getTaskObservers().equalsIgnoreCase("null")) && taskDetailsBean.getTaskObservers().contains(Appreference.loginuserdetails.getUsername())) {
                        if (Appreference.networkState) {
                            gettaskwebservice();
                        }
                    }
                    if (taskDetailsBean.getTaskReceiver() != null && taskDetailsBean.getTaskReceiver().equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) && taskDetailsBean.getTaskRequestType().equalsIgnoreCase("reassignTask")) {
                        Log.i("notifyTaskReceived", "syncTask !@ ");
                        if (Appreference.networkState) {
                            gettaskwebservice();
                        }
                    }
                    taskDetailsBean.setTaskPlannedLatestEndDate("1");
                    if (chat) {
                        dataBase.insertORupdate_Task_history(taskDetailsBean);
                        dataBase.insertORupdate_TaskHistoryInfo(taskDetailsBean);
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                taskList.add(taskDetailsBean);
                                refresh();
                            }
                        });
                    } else {
                        if (taskDetailsBean.getMimeType().equalsIgnoreCase("Remove")) {
                            Log.i("notifyTaskReceived", "Remove ");
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    Log.i("notifyTaskReceived", "bottom_layout 32 ");
                                    addObserver.setVisibility(View.GONE);
                                    Log.i("gone123", "bottom_layout 00010");
                                    bottom_layout.setVisibility(View.GONE);
                                    timerstop();
                                    String vars = VideoCallDataBase.getDB(context).getProjectParentTaskId("select taskObservers from taskHistoryInfo where taskId='" + taskDetailsBean.getTaskId() + "';");
                                    if (vars != null && vars.contains(taskDetailsBean.getTaskReceiver())) {
                                        if (vars.contains(",")) {
                                            String data = vars;
                                            String[] items = data.split(",");
                                            data = "";
                                            int cont = 0;
                                            for (String item : items) {
                                                cont++;
                                                if (!item.equalsIgnoreCase(taskDetailsBean.getTaskReceiver())) {
                                                    if (cont != 1) {
                                                        data = data + ",";
                                                    }
                                                    data = data + item;
                                                }
                                            }
                                            Log.d("callhistory", "enter income if");
                                            vars = data;
                                        } else {
                                            vars = "";
                                        }
                                    }
//                                    VideoCallDataBase.getDB(context).updateOberver(taskDetailsBean.getTaskId(), vars);
                                }
                            });
                        } else if (taskDetailsBean.getSubType() != null && taskDetailsBean.getSubType().equalsIgnoreCase("reassignTask") && !taskDetailsBean.getTaskReceiver().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                            String obs_name = VideoCallDataBase.getDB(context).getProjectParentTaskId("select taskObservers from taskHistoryInfo where taskId='" + taskDetailsBean.getTaskId() + "';");
                            Log.i("notifytaskReceived", "reassignTask 1 ");
                            if ((obs_name != null && !obs_name.equalsIgnoreCase("") && !obs_name.equalsIgnoreCase("null") && !obs_name.equalsIgnoreCase(null) && !obs_name.contains(Appreference.loginuserdetails.getUsername()))) {
                                Log.i("notifytaskReceived", "reassignTask 2 bottom_layout ");
                                handler.post(new Runnable() {
                                    @Override
                                    public void run() {
                                        Log.i("gone123", "bottom_layout 00011");
                                        bottom_layout.setVisibility(View.GONE);
                                        if (isRem_time) {
                                            counter.cancel();
                                            reminingtime.setVisibility(View.GONE);
                                        }
                                        isRem_time = false;
                                    }
                                });
                            } else if ((!taskDetailsBean.getTaskReceiver().equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) && obs_name == null)) {
                                Log.i("notifytaskReceived", "reassignTask 3 bottom_layout ");
                                handler.post(new Runnable() {
                                    @Override
                                    public void run() {
                                        Log.i("gone123", "bottom_layout 00012");
                                        bottom_layout.setVisibility(View.GONE);
                                        if (isRem_time) {
                                            counter.cancel();
                                            reminingtime.setVisibility(View.GONE);
                                        }
                                        isRem_time = false;
                                    }
                                });
                            } else {
                                handler.post(new Runnable() {
                                    @Override
                                    public void run() {
                                        Log.i("notifytaskReceived", "reassignTask 4 bottom_layout ");
                                        bottom_layout.setVisibility(View.VISIBLE);
                                    }
                                });
                            }
                        }
                        if (taskDetailsBean.getTaskRequestType() != null && taskDetailsBean.getTaskRequestType().equalsIgnoreCase("schedulingalert")) {
                            for (int i = 0; i < taskList.size(); i++) {
                                Log.i("notifytaskReceived", "schedulingalert ");
                                Log.i("task", "parentID if " + taskDetailsBean.getParentId());
                                Log.i("task", "signalId if " + taskList.get(i).getSignalid());
                                if (taskList.get(i).getSignalid() != null && taskDetailsBean.getParentId() != null &&
                                        taskList.get(i).getSignalid().equalsIgnoreCase(taskDetailsBean.getParentId())) {
                                    taskList.get(i).setMsg_status(22);
                                    Log.i("task", "Read status if " + taskDetailsBean.getRead_status());
                                }
                                Log.i("task", "Read status else " + taskDetailsBean.getRead_status());
                            }
                            refresh();
                        }

                        String taskMemberList = "select taskMemberList from projectHistory where projectId='" + taskDetailsBean.getProjectId() + "' and taskId='" + taskDetailsBean.getTaskId() + "'";
                        String taskMemberList_1 = VideoCallDataBase.getDB(context).getValuesForQuery(taskMemberList);

                        String taskObse_Query = "select taskObservers from projectHistory where projectId='" + taskDetailsBean.getProjectId() + "' and taskId='" + taskDetailsBean.getTaskId() + "'";
                        String taskObseList_1 = VideoCallDataBase.getDB(context).getValuesForQuery(taskObse_Query);

                        if (project) {
                            Log.i("notifytaskReceived", "taskMemberList_1 $# " + taskMemberList_1);
                            Log.i("notifytaskReceived", "taskObseList_1 $# " + taskObseList_1);
                            if ((taskMemberList_1 != null && !taskMemberList_1.equalsIgnoreCase("") && !taskMemberList_1.equalsIgnoreCase(null) && !taskMemberList_1.contains(Appreference.loginuserdetails.getUsername()))
                                    && (taskObseList_1 != null && !taskObseList_1.equalsIgnoreCase("") && !taskObseList_1.equalsIgnoreCase(null) && !taskObseList_1.contains(Appreference.loginuserdetails.getUsername()))) {
                                Log.i("notifytaskReceived", "Reassign 6");
                                handler.post(new Runnable() {
                                    @Override
                                    public void run() {
                                        Log.i("gone123", "bottom_layout 00013");
                                        bottom_layout.setVisibility(View.GONE);
                                        if (isRem_time) {
                                            counter.cancel();
                                            reminingtime.setVisibility(View.GONE);
                                        }
                                        isRem_time = false;
                                    }
                                });
                            } else if (taskMemberList_1 != null && !taskMemberList_1.equalsIgnoreCase("") && !taskMemberList_1.equalsIgnoreCase(null) && taskMemberList_1.contains(Appreference.loginuserdetails.getUsername())) {
                                handler.post(new Runnable() {
                                    @Override
                                    public void run() {
                                        Log.i("notifytaskReceived", "reassignTask @5 bottom_layout ");
                                        bottom_layout.setVisibility(View.VISIBLE);
                                    }
                                });
                            }
                        }
                        if (taskDetailsBean.getTaskStatus() != null && !taskDetailsBean.getTaskStatus().equalsIgnoreCase("") && !taskDetailsBean.getTaskStatus().equalsIgnoreCase("null") && taskDetailsBean.getTaskStatus().equalsIgnoreCase("rejected")) {
                            taskStatus = taskDetailsBean.getTaskStatus();
                        } else if (taskDetailsBean.getSubType() != null && !taskDetailsBean.getSubType().equalsIgnoreCase("") && !taskDetailsBean.getSubType().equalsIgnoreCase("null") && taskDetailsBean.getSubType().equalsIgnoreCase("reassignTask")) {
                            taskStatus = taskDetailsBean.getTaskStatus();
                            taskReceiver = taskDetailsBean.getTaskReceiver();
                            Log.i("notifytaskReceived", "taskReceiver #% " + taskReceiver);
                            Log.i("notifytaskReceived", "taskStatus %$  " + taskStatus);

                        }
                        String obs_name1;
                        if (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase(null) && !taskDetailsBean.getProjectId().equalsIgnoreCase("null") && !taskDetailsBean.getProjectId().equalsIgnoreCase("")) {
                            Log.i("notifyTaskReceived", "obs_name1 if  ==> ");
                            obs_name1 = VideoCallDataBase.getDB(context).getProjectParentTaskId("select taskObservers from projectHistory where taskId='" + taskDetailsBean.getTaskId() + "';");
                        } else {
                            Log.i("notifyTaskReceived", "obs_name1 else ==> ");
                            obs_name1 = VideoCallDataBase.getDB(context).getProjectParentTaskId("select taskObservers from taskHistoryInfo where taskId='" + taskDetailsBean.getTaskId() + "';");
                        }
                        Log.i("notifyTaskReceived", "obs_name1 %% ==>  " + obs_name1);
                        if (taskDetailsBean.getTaskDescription() != null && taskDetailsBean.getTaskDescription().contains("Users removed as observers") && !taskDetailsBean.getTaskDescription().contains("added as observer")) {
                            String ob_n = taskDetailsBean.getTaskDescription().split(":")[1];
                            String contactList = VideoCallDataBase.getDB(context).getName(Appreference.loginuserdetails.getUsername());
                            Log.i("notifyTaskReceived", "username " + contactList);
                            Log.i("notifyTaskReceived", "taskobserver !! " + taskDetailsBean.getTaskObservers());
                            Log.i("notifyTaskReceived", "ob_n " + ob_n);
                            Log.i("notifyTaskReceived", "getRejectedObserver1**# " + taskDetailsBean.getTaskDescription());
                            Log.i("notifyTaskReceived", "getRejectedObserver1** " + taskDetailsBean.getTaskDescription().split(":")[1]);
                            Log.i("notifyTaskReceived", "username1 " + Appreference.loginuserdetails.getUsername());
                            if (ob_n.contains(",")) {
                                Log.i("notifyTaskReceived", "username1 " + Appreference.loginuserdetails.getUsername());
                                String nm[] = ob_n.split(",");
                                for (String user : nm) {
                                    if (contactList.equalsIgnoreCase(user)) {
                                        handler.post(new Runnable() {
                                            @Override
                                            public void run() {
                                                Log.i("notifyTaskReceived", "bottom_layout 11");
                                                addObserver.setVisibility(View.GONE);
                                                Log.i("gone123", "bottom_layout 00014");
                                                bottom_layout.setVisibility(View.GONE);
                                            }
                                        });
                                    }
                                }
                            } else if (contactList.equalsIgnoreCase(ob_n)) {
                                handler.post(new Runnable() {
                                    @Override
                                    public void run() {
                                        Log.i("notifyTaskReceived", "bottom_layout 12 ");
                                        addObserver.setVisibility(View.GONE);
                                        Log.i("gone123", "bottom_layout 00015");
                                        bottom_layout.setVisibility(View.GONE);
                                    }
                                });
                            }
                        } else if ((taskDetailsBean.getTaskRequestType() != null && taskDetailsBean.getTaskRequestType().equalsIgnoreCase("reassignTask")) && (taskDetailsBean.getTaskReceiver() != null && !taskDetailsBean.getTaskReceiver().equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) && (obs_name1 != null && !obs_name1.equalsIgnoreCase("") && !obs_name1.equalsIgnoreCase("null")))) {
                            Log.i("notifyTaskReceived", "observers are $$" + obs_name1);
                            if (!obs_name1.contains(Appreference.loginuserdetails.getUsername())) {
                                handler.post(new Runnable() {
                                    @Override
                                    public void run() {
                                        Log.i("notifyTaskReceived", "bottom_layout 13 ");
                                        Log.i("gone123", "bottom_layout 00016");

                                        bottom_layout.setVisibility(View.GONE);
                                        accept.setVisibility(View.GONE);
                                        reject.setVisibility(View.GONE);
                                    }
                                });
                            }
                        } else if ((taskDetailsBean.getTaskRequestType() != null && taskDetailsBean.getTaskRequestType().equalsIgnoreCase("reassignTask")) && (taskDetailsBean.getTaskReceiver() != null && !taskDetailsBean.getTaskReceiver().equalsIgnoreCase(Appreference.loginuserdetails.getUsername()))) {
                            Log.i("notifyTaskReceived", "observers are $$$ " + obs_name1);
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    Log.i("notifyTaskReceived", "bottom_layout 14 ");
                                    Log.i("gone123", "bottom_layout 00017");
                                    bottom_layout.setVisibility(View.GONE);
                                    accept.setVisibility(View.GONE);
                                    reject.setVisibility(View.GONE);
                                }
                            });
                        } else if (!taskDetailsBean.getMimeType().equalsIgnoreCase("Remove")) {
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    Log.i("notifyTaskReceived", "bottom_layout 15 ");
                                    bottom_layout.setVisibility(View.VISIBLE);
                                }
                            });
                        }

                        // on ui observer add in conversation send user list

                        if (taskDetailsBean.getTaskObservers() != null && !taskDetailsBean.getTaskObservers().equalsIgnoreCase("") && !taskDetailsBean.getTaskObservers().equalsIgnoreCase(null) && !taskDetailsBean.getTaskObservers().equalsIgnoreCase("null")) {

                            int counter = 0;
                            for (int i = 0; i < taskDetailsBean.getTaskObservers().length(); i++) {
                                if (taskDetailsBean.getTaskObservers().charAt(i) == ',') {
                                    counter++;
                                }
                            }
                            Log.d("notifyTaskReceived", "Observer counter 1 " + counter);
                            for (int j = 0; j < counter + 1; j++) {
                                if (counter == 0) {
                                    listOfObservers.add(taskDetailsBean.getTaskObservers());
                                } else {
                                    if (!listOfObservers.contains(taskDetailsBean.getTaskObservers().split(",")[j])) {
                                        listOfObservers.add(taskDetailsBean.getTaskObservers().split(",")[j]);
                                        Log.d("notifyTaskReceived", "Observername not in same user == 1==> " + taskDetailsBean.getTaskObservers().split(",")[j]);

                                    }
                                }
                            }

                            if (!listOfObservers.contains(ownerOfTask)) {
                                listOfObservers.add(ownerOfTask);
                            }

                            if (!listOfObservers.contains(taskReceiver)) {
                                listOfObservers.add(taskReceiver);

                            }


                        }


                        //removed user list added

                        if (taskDetailsBean.getRejectedObserver() != null && !taskDetailsBean.getRejectedObserver().equalsIgnoreCase("") && !taskDetailsBean.getRejectedObserver().equalsIgnoreCase(null) && !taskDetailsBean.getRejectedObserver().equalsIgnoreCase("null")) {

                            int counter = 0;
                            for (int i = 0; i < taskDetailsBean.getRejectedObserver().length(); i++) {
                                if (taskDetailsBean.getRejectedObserver().charAt(i) == ',') {
                                    counter++;
                                }
                            }
                            Log.d("notifyTaskReceived", "Task getRejectedObserver counter size is == 11 " + counter);
                            for (int j = 0; j < counter + 1; j++) {
                                if (counter == 0) {
                                    if (listOfObservers.contains(taskDetailsBean.getRejectedObserver())) {
                                        Log.d("notifyTaskReceived", "Task Removed  Observer name  7 == " + taskDetailsBean.getRejectedObserver());
                                        listOfObservers.remove(taskDetailsBean.getRejectedObserver());
                                    }
                                } else {
                                    if (listOfObservers.contains(taskDetailsBean.getRejectedObserver().split(",")[j])) {
                                        Log.d("notifyTaskReceived", "Task Removed  Observer name  8 == " + taskDetailsBean.getRejectedObserver().split(",")[j]);
                                        listOfObservers.remove(taskDetailsBean.getRejectedObserver().split(",")[j]);
                                        Log.d("notifyTaskReceived", "Task getRejectedObserver Observer name not in same user== " + taskDetailsBean.getRejectedObserver().split(",")[j]);

                                    }
                                }
                            }
                        }
                        String removed_name = taskDetailsBean.getRejectedObserver();
                        Log.i("notifyTaskReceived", removed_name + "    " + Appreference.loginuserdetails.getUsername());
                        if (removed_name != null && removed_name.contains(Appreference.loginuserdetails.getUsername())) {
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    Log.i("notifyTaskReceived", "bottom_layout 16 ");
                                    addObserver.setVisibility(View.GONE);
                                    Log.i("gone123", "bottom_layout 00018");
                                    bottom_layout.setVisibility(View.GONE);
                                    if (isRem_time) {
                                        counter.cancel();
                                        reminingtime.setVisibility(View.GONE);
                                    }
                                    isRem_time = false;
                                }
                            });
                        }
                        if (!chat) {
                            if (taskDetailsBean.getTaskDescription() != null && taskDetailsBean.getTaskDescription().equalsIgnoreCase("Task Name is Changed")) {
                                handler.post(new Runnable() {
                                    @Override
                                    public void run() {
                                        if (isProjectFromOracle) {
                                            headerName.setText("Job Card No :" + JobCodeNo + "\nActivity Code :" + ActivityCode);
                                        } else {
                                            headerName.setText(taskDetailsBean.getTaskName());
                                        }
                                    }
                                });
                            }
                        }
                        Log.i("notifyTaskReceived", "Status 6 ==> " + taskDetailsBean.getMsg_status() + "  MimeType==>  " + taskDetailsBean.getMimeType());
                        if (taskDetailsBean.getMimeType() != null && taskDetailsBean.getMimeType().equalsIgnoreCase("date")) {
                            bean_list = new ArrayList<>();
                            if (taskDetailsBean.getTaskType() != null && taskDetailsBean.getTaskType().equalsIgnoreCase("Group")) {
                                String group_id = taskDetailsBean.getToUserId();
                                query_5 = "select * from taskDetailsInfo where (fromUserId='" + group_id + "' or toUserId='" + group_id + "') and loginuser='" + Appreference.loginuserdetails.getEmail() + "' and taskId='" + taskDetailsBean.getTaskId() + "' and mimeType='date'";
                            } else {
                                query_5 = "select * from taskDetailsInfo where (fromUserName='" + Appreference.loginuserdetails.getUsername() + "' or toUserName='" + Appreference.loginuserdetails.getUsername() + "') and loginuser='" + Appreference.loginuserdetails.getEmail() + "' and taskId='" + taskDetailsBean.getTaskId() + "' and mimeType='date'";
                            }
                            bean_list = VideoCallDataBase.getDB(context).getTaskHistory(query_5);
                            Log.i("notifyTaskReceived", "dates ==> $$ " + bean_list.size());
                            if (bean_list.size() > 0) {
                                for (int i = 0; i < bean_list.size(); i++) {
                                    TaskDetailsBean taskDetailsBean_1 = bean_list.get(i);
                                    Log.i("notifyTaskReceived", "RequestStatus ---> !! " + taskDetailsBean_1.getRequestStatus());
                                    for (TaskDetailsBean taskDetailsBean1 : bean_list) {
                                        for (TaskDetailsBean taskDetailsBean2 : taskList) {
                                            if (taskDetailsBean1.getSignalid().equalsIgnoreCase(taskDetailsBean2.getSignalid())) {
                                                Log.i("notifyTaskReceived", "taskDetailsBean_1.getRequestStatus()!! " + taskDetailsBean_1.getRequestStatus());
                                                taskDetailsBean2.setMsg_status(9);
                                            }
                                        }
                                    }
                                    VideoCallDataBase.getDB(context).taskMsg_StatusUpdate(taskDetailsBean_1.getSignalid());
                                }
                            }
                            taskDetailsBean.setMsg_status(10);
                        }
                        Log.i("notifyTaskReceived", "Status of task is && " + taskDetailsBean.getTaskStatus());
                        if (taskDetailsBean.getMimeType() != null && taskDetailsBean.getMimeType().equalsIgnoreCase("textfile")) {
                            Log.i("notifyTaskReceived", "MimeType 7 ##  " + taskDetailsBean.getMimeType());
                            VideoCallDataBase.getDB(context).task_LongmessageUpdateForReceiver(taskDetailsBean.getSignalid());
                        }
                        if (taskDetailsBean.getMimeType() != null && taskDetailsBean.getMimeType().equalsIgnoreCase("leaveRequest") && taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                            bean_list = new ArrayList<>();
                            if (taskDetailsBean.getTaskType() != null && taskDetailsBean.getTaskType().equalsIgnoreCase("Group")) {
                                String group_id = taskDetailsBean.getToUserId();
                                query_5 = "select * from taskDetailsInfo where (fromUserId='" + group_id + "' or toUserId='" + group_id + "') and loginuser='" + Appreference.loginuserdetails.getEmail() + "' and taskId='" + taskDetailsBean.getTaskId() + "' and mimeType='leaveRequest'";
                            } else {
                                query_5 = "select * from taskDetailsInfo where (fromUserName='" + Appreference.loginuserdetails.getUsername() + "' or toUserName='" + Appreference.loginuserdetails.getUsername() + "') and loginuser='" + Appreference.loginuserdetails.getEmail() + "' and taskNo='" + taskDetailsBean.getTaskNo() + "' and mimeType='leaveRequest'";
                            }
                            bean_list = VideoCallDataBase.getDB(context).getTaskHistory(query_5);
                            Log.i("notifyTaskReceived", "leaveRequest dates ## " + bean_list.size());
                            if (bean_list.size() > 0) {
                                for (int i = 0; i < bean_list.size(); i++) {
                                    TaskDetailsBean taskDetailsBean_1 = bean_list.get(i);
                                    Log.i("notifyTaskReceived", "RequestStatus ---> @@ " + taskDetailsBean_1.getRequestStatus());
                                    for (TaskDetailsBean taskDetailsBean1 : bean_list) {
                                        for (TaskDetailsBean taskDetailsBean2 : taskList) {
                                            if (taskDetailsBean1.getSignalid().equalsIgnoreCase(taskDetailsBean2.getSignalid())) {
                                                Log.i("notifyTaskReceived", "taskDetailsBean_1.getRequestStatus()$$  " + taskDetailsBean_1.getRequestStatus());
                                                taskDetailsBean2.setMsg_status(9);
                                            }
                                        }
                                    }
                                    VideoCallDataBase.getDB(context).leaveMsg_Status(taskDetailsBean_1.getSignalid());
                                }
                            }
                            taskDetailsBean.setMsg_status(10);
                        }
                        if (taskDetailsBean.getTaskDescription() != null && taskDetailsBean.getTaskDescription().equalsIgnoreCase("Task Name is Changed")) {
                            VideoCallDataBase.getDB(context).templateNameUpdate(taskDetailsBean.getTaskName(), taskDetailsBean.getTaskId());
                        }
                        if (ownerOfTask.equalsIgnoreCase(taskDetailsBean.getFromUserName())) {
                            if (taskDetailsBean.getTaskStatus() != null && taskDetailsBean.getTaskStatus().equalsIgnoreCase("closed")) {
                                handler.post(new Runnable() {
                                    @Override
                                    public void run() {
                                        task_accept_layout.setVisibility(View.GONE);
                                    }
                                });
                            }
                        }
                        Log.i("leaveRequest", "status 12 %% ==> " + taskDetailsBean.getTaskStatus());
                        if (taskDetailsBean.getTaskType() != null && taskDetailsBean.getTaskType().equalsIgnoreCase("Group")) {
                            Log.i("notifyTaskReceived", "percent_checker  8 " + taskDetailsBean.getTaskType());
                            checker = VideoCallDataBase.getDB(context).Statuscheker(taskDetailsBean.getTaskId());
                            Log.i("notifyTaskReceived", "checker %%%  ==> " + checker);
                            if (checker != null && checker.equalsIgnoreCase("closed")) {

                            } else {
                                if (taskDetailsBean.getTaskStatus().equalsIgnoreCase("closed")) {
                                    Log.i("notifyTaskReceived", "status 133 ==> " + checker);
                                    if (!taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername()))
                                        VideoCallDataBase.getDB(context).updateGroupCloseTaskStatus(taskDetailsBean.getTaskId(), taskDetailsBean.getCompletedPercentage());
                                } else {
                                    Log.i("notifyTaskReceived", "fromusername " + taskDetailsBean.getFromUserName() + " TaskOwner name ==>" + taskDetailsBean.getOwnerOfTask());
                                    if (taskDetailsBean.getFromUserName().equalsIgnoreCase(ownerOfTask)) {
                                        if (taskDetailsBean.getTaskDescription().contains("Completed Percentage")) {
                                            percentage = taskDetailsBean.getCompletedPercentage();
                                            Log.i("notifyTaskReceived", "percentage 11 -> $$ " + percentage);
                                        }
                                    } else if (!taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                        if (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase("null") && !taskDetailsBean.getProjectId().equalsIgnoreCase("") && !taskDetailsBean.getProjectId().equalsIgnoreCase(null) && !taskDetailsBean.getProjectId().equalsIgnoreCase("(null)")) {
                                            percentage = VideoCallDataBase.getDB(context).getlastProjectCompletedPercentage(taskDetailsBean.getTaskId());
                                            if (percentage != null && !percentage.equalsIgnoreCase(null) && !percentage.equalsIgnoreCase("") && !percentage.equalsIgnoreCase("null")) {
                                                Log.i("notifyTaskReceived", "percentage 12 -> @@ " + percentage);
                                                taskDetailsBean.setCompletedPercentage(percentage);
                                            }
                                        } else {
                                            percentage = VideoCallDataBase.getDB(context).getlastCompletedParcentage(taskDetailsBean.getTaskId());
                                            if (percentage != null && !percentage.equalsIgnoreCase(null) && !percentage.equalsIgnoreCase("") && !percentage.equalsIgnoreCase("null")) {
                                                Log.i("notifyTaskReceived", "percentage 13 -> @@ " + percentage);
                                                taskDetailsBean.setCompletedPercentage(percentage);
                                            }
                                            Log.i("notifyTaskReceived", "percentage 14 -> @@ " + percentage);
                                        }
                                    }

                                    Log.i("notifyTaskReceived", "CompletedPercentage %% ==>  " + taskDetailsBean.getCompletedPercentage());
                                    Log.i("notifyTaskReceived", "TaskStatus **  " + taskDetailsBean.getTaskStatus());
//                                    taskStatus = taskDetailsBean.getTaskStatus();
                                    Log.i("notifyTaskReceived", "listOfObservers before 111 ==> " + listOfObservers.size());
                                    if (!taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                        Log.i("notifyTaskReceived", "user checker ## ==> " + checker);
                                    } else {
                                        Log.i("notifyTaskReceived", "user checker ## ==> else " + checker);
                                        if (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase("null") && !taskDetailsBean.getProjectId().equalsIgnoreCase("") && !taskDetailsBean.getProjectId().equalsIgnoreCase(null) && !taskDetailsBean.getProjectId().equalsIgnoreCase("(null)")) {
                                            project_memList = VideoCallDataBase.getDB(context).getProjectParentTaskId("select taskMemberList from projectHistory where taskId='" + taskDetailsBean.getTaskId() + "'");
                                            int counter = 0;
                                            for (int i = 0; i < project_memList.length(); i++) {
                                                if (project_memList.charAt(i) == ',') {
                                                    counter++;
                                                }
                                                Log.d("notifyTaskReceived", "Task Mem's counter size is == " + counter);
                                            }
                                            Log.i("notifyTaskReceived", "list clear 1");
                                            listOfObservers.clear();
                                            for (int j = 0; j < counter + 1; j++) {
                                                Log.i("notifyTaskReceived", "Task Mem's and position == " + project_memList.split(",")[j] + " " + j);
                                                if (counter == 0) {
                                                    listOfObservers.add(project_memList);
                                                } else {
                                                    listOfObservers.add(project_memList.split(",")[j]);
                                                }
                                            }
                                            Log.i("notifyTaskReceived", "listOfObservers 144=>  " + listOfObservers.size());
                                            if ((taskDetailsBean.getTaskType() != null && taskDetailsBean.getTaskType().equalsIgnoreCase("Group")) && project_memList.equalsIgnoreCase("Group")) {
                                                int a = VideoCallDataBase.getDB(context).ProjectGroupPercentageChecker(listOfObservers, webtaskId, ownerOfTask);
                                                taskDetailsBean.setCompletedPercentage(String.valueOf(a));
                                                Log.i("notifyTaskReceived", "Inside project owner group project percentage " + a);
                                            }
                                        }
                                        if (taskDetailsBean.getTaskStatus().equalsIgnoreCase("Completed")) {
                                            boolean check = false;
                                            listMembers_1 = new ArrayList<>();
                                            listMembers_2 = new ArrayList<>();
                                            listofProjectMembers = new ArrayList<>();
                                            Log.i("notifyTaskReceived", "ProjectId() 144 ==> " + taskDetailsBean.getProjectId());
                                            if (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase("null") && !taskDetailsBean.getProjectId().equalsIgnoreCase("") && !taskDetailsBean.getProjectId().equalsIgnoreCase(null) && !taskDetailsBean.getProjectId().equalsIgnoreCase("(null)")) {
                                                String pjt_ListMems = VideoCallDataBase.getDB(context).getProjectListMembers(taskDetailsBean.getTaskId());
                                                int counter = 0;
                                                ListMember list_Mems = new ListMember();
                                                for (int i = 0; i < pjt_ListMems.length(); i++) {
                                                    if (pjt_ListMems.charAt(i) == ',') {
                                                        counter++;
                                                    }
                                                    Log.d("notifyTaskReceived", "Task Mem's counter size is == " + counter);
                                                }
                                                for (int j = 0; j < counter + 1; j++) {
                                                    Log.i("notifyTaskReceived", "Task Mem's and position == " + pjt_ListMems.split(",")[j] + " " + j);
                                                    if (counter == 0) {
                                                        list_Mems.setUsername(pjt_ListMems);
                                                        listMembers_1.add(list_Mems);
                                                        listofProjectMembers.add(pjt_ListMems);
                                                    } else {
                                                        list_Mems.setUsername(pjt_ListMems.split(",")[j]);
                                                        listMembers_1.add(list_Mems);
                                                        listofProjectMembers.add(pjt_ListMems.split(",")[j]);
                                                    }
                                                }
                                            } else {
                                                Log.i("notifyTaskReceived", "ToUserId 55 ==> " + taskDetailsBean.getToUserId());
                                                listMembers_1 = VideoCallDataBase.getDB(context).getGroupmemberHistory("select * from groupmember where groupid='" + taskDetailsBean.getToUserId() + "'");
                                            }
                                            Log.i("notifyTaskReceived", "listMembers_1 555 ==>  " + listMembers_1.size());
                                            if (listMembers_1.size() > 0) {
                                                Log.i("notifyTaskReceived", "listMembers_1 666 --> " + listMembers_1 + " groupname ==> " + groupname);
                                                for (ListMember listMember : listMembers_1) {
                                                    int percent_1 = 0;
                                                    Log.i("notifyTaskReceived", "memberusername 777 --> " + listMember.getUsername() + " groupname ==> " + groupname);
                                                    if (!Appreference.loginuserdetails.getUsername().equalsIgnoreCase(listMember.getUsername())) {
                                                        Log.i("notifyTaskReceived", "before db line--> " + listMember.getUsername());
                                                        if (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase("null") && !taskDetailsBean.getProjectId().equalsIgnoreCase("") && !taskDetailsBean.getProjectId().equalsIgnoreCase(null) && !taskDetailsBean.getProjectId().equalsIgnoreCase("(null)")) {
                                                            Log.i("notifyTaskReceived", "listMembers_1 if ! =>> ");
                                                            String comp_percent = VideoCallDataBase.getDB(context).getProjectParentTaskId("select completedPercentage from projectHistory where projectId='" + taskDetailsBean.getProjectId() + "' and taskId='" + taskDetailsBean.getTaskId() + "'");
                                                            if (comp_percent != null)
                                                                percent_1 = Integer.parseInt(comp_percent);
                                                        } else {
                                                            Log.i("notifyTaskReceived", "listMembers_1 else =>>> ");
                                                            percent_1 = VideoCallDataBase.getDB(context).groupPercentageStatus(listMember.getUsername(), webtaskId);
                                                        }
                                                        Log.i("notifyTaskReceived", "percent_1 # ==> " + percent_1);
                                                        listMembers_2.add(String.valueOf(percent_1));
                                                    }
                                                }
                                            }
                                            for (int i = 0; i < listMembers_2.size(); i++) {
                                                Log.i("notifyTaskReceived", "listMembers_2 1==>  " + listMembers_2.get(i));
                                                if (listMembers_2.get(i).equalsIgnoreCase("100")) {
                                                    Log.i("notifyTaskReceived", "listMembers_1 2==> " + listMembers_1);
                                                    isGrp_Percent = true;
                                                    Log.i("notifyTaskReceived", "isGrp_Percent @@@ ==> " + isGrp_Percent);
                                                } else {
                                                    Log.i("notifyTaskReceived", "isGrp_Percent ### ==> " + isGrp_Percent);
                                                    isGrp_Percent = false;

                                                    Log.i("notifyTaskReceived", "isGrp_Percent !!! ==> " + isGrp_Percent);
                                                }
                                                if (!isGrp_Percent)
                                                    break;
                                            }
                                            Log.i("notifyTaskReceived", "isGrp_Percent 666 ==>  " + isGrp_Percent);
                                            if (isGrp_Percent) {
                                                if (taskDetailsBean.getTaskStatus().equalsIgnoreCase("inprogress") && !taskDetailsBean.getCompletedPercentage().equalsIgnoreCase("100")) {
                                                    taskDetailsBean.setTaskStatus("inprogress");
                                                    taskStatus = "inprogress";
                                                } else {
                                                    taskDetailsBean.setTaskStatus("Completed");
                                                    taskStatus = "Completed";
                                                }
                                                Log.i("notifyTaskReceived", "TaskStatus() final ==> " + taskDetailsBean.getTaskStatus());
                                            } else if (!isGrp_Percent) {
                                                taskDetailsBean.setTaskStatus("inprogress");
                                                taskStatus = "inprogress";
                                                Log.i("notifyTaskReceived", "TaskStatus() not final ==> " + taskDetailsBean.getTaskStatus());
                                            }
                                        }
                                    }
                                    if (taskDetailsBean.getTaskDescription() != null && taskDetailsBean.getTaskDescription().equalsIgnoreCase("This task is overdue")) {
                                        taskDetailsBean.setTaskStatus("overdue");
                                        taskStatus = "overdue";
                                        Log.i("notifyTaskReceived", "taskDetailsBean.getTaskStatus() else overdue???? " + taskDetailsBean.getTaskStatus());
                                    }
                                }
                            }
                        } else {
                            if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) && !taskDetailsBean.getTaskType().equalsIgnoreCase("Group")) {
                                if (taskDetailsBean.getTaskDescription() != null && taskDetailsBean.getTaskDescription().equalsIgnoreCase(category + " accepted")) {
                                    isTaskAccept = true;
                                    taskStatus = taskDetailsBean.getTaskStatus();
                                    Log.i("notifyTaskReceived", "taskStatus @ 777 ==> " + taskStatus);
                                    Log.i("notifyTaskReceived", "isTaskAccept 111 --> " + isTaskAccept);
                                }
                            }
                        }
                        if (taskDetailsBean.getFromUserName().equalsIgnoreCase(ownerOfTask)) {
                            if (taskDetailsBean.getTaskStatus().equalsIgnoreCase("Closed")) {
                                taskStatus = taskDetailsBean.getTaskStatus();
                            }
                        } else {
                            if (taskDetailsBean.getTaskType().equalsIgnoreCase("Group")) {
                                taskDetailsBean.setTaskStatus(taskStatus);
                            }
                        }
                        if (taskDetailsBean.getFromUserName() != null && taskDetailsBean.getFromUserName().equalsIgnoreCase(ownerOfTask) && taskDetailsBean.getTaskStatus().equalsIgnoreCase("abandoned")) {
                            taskStatus = taskDetailsBean.getTaskStatus();
                        } else if (taskDetailsBean.getFromUserName() != null && taskDetailsBean.getFromUserName().equalsIgnoreCase(ownerOfTask) && taskDetailsBean.getTaskStatus().equalsIgnoreCase("pause")) {
                            taskStatus = taskDetailsBean.getTaskStatus();
                        }
                        if (taskDetailsBean.getTaskStatus() != null && (taskDetailsBean.getTaskStatus().equalsIgnoreCase("abandoned") || taskDetailsBean.getTaskStatus().equalsIgnoreCase("pause")) && taskDetailsBean.getTaskStatus().equalsIgnoreCase("closed")) {
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    timerstop();
                                }
                            });
                        }
                        Log.i("notifyTaskReceived", "Signalid ## 111 ==>  " + taskDetailsBean.getSignalid());
                        if (taskDetailsBean.getMimeType().equalsIgnoreCase(filter) || filter == null || filter.equalsIgnoreCase("RemoveAll")) {
                            if (taskDetailsBean.isCustomTagVisible()) {
                                taskList.add(taskDetailsBean);
                            }
                        }
                        if (taskDetailsBean.getMimeType() != null && taskDetailsBean.getMimeType().equalsIgnoreCase("assigntask")) {
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    /*code Added for groupAdmin-observer Start*/
                                    if (oracleProjectOwner != null && !oracleProjectOwner.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())
                                            && (Appreference.loginuserdetails != null && Appreference.loginuserdetails.getRoleId() != null
                                            && !Appreference.loginuserdetails.getRoleId().equalsIgnoreCase("2"))) {
                                        /*code Added for groupAdmin-observer End*/
                                        template = false;
                                        assign_taskview.setVisibility(View.GONE);
                                        status_job.setVisibility(View.VISIBLE);
                                        travel_job.setVisibility(View.VISIBLE);
                                        TakerofTasks();
                                        Log.i("notifyTaskReceived", "bottom_layout 17 ");
                                        bottom_layout.setVisibility(View.VISIBLE);
                                        Arrow.setVisibility(View.VISIBLE);

                                    } else {
                                        template = false;
                                        assign_taskview.setVisibility(View.GONE);
                                        status_job.setVisibility(View.VISIBLE);
                                        travel_job.setVisibility(View.GONE);
                                        ownerofTasks();
                                        Log.i("notifyTaskReceived", "bottom_layout 18 ");
                                        bottom_layout.setVisibility(View.VISIBLE);
                                        Arrow.setVisibility(View.VISIBLE);
                                    }
                                    taskType = taskDetailsBean.getTaskType();
                                    Log.i("notifyTaskReceived", "taskType 444 ==> " + taskDetailsBean.getTaskType());
                                    String Query = "Select * from projectHistory where projectId ='" + projectId + "' and taskId = '" + webtaskId + "'";
                                    TaskDetailsBean MonthlyJobBean = VideoCallDataBase.getDB(context).getDetails_to_complete_project(Query);
                                    if (MonthlyJobBean.getIsActiveStatus() != null && MonthlyJobBean.getIsActiveStatus().equalsIgnoreCase("1") && !MonthlyJobBean.getIsActiveStatus().equalsIgnoreCase("null")) {
                                        status_job.setVisibility(View.INVISIBLE);
                                    }
                                }
                            });
                        } else if (taskDetailsBean.getSubType() != null && taskDetailsBean.getSubType().equalsIgnoreCase("deassign")) {
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    assign_taskview.setVisibility(View.GONE);
                                    if (Appreference.loginuserdetails != null && Appreference.loginuserdetails.getRoleId() != null
                                            && Appreference.loginuserdetails.getRoleId().equalsIgnoreCase("2")
                                            && !oracleProjectOwner.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                        tv_reassign.setVisibility(View.GONE);
                                        assign_taskview.setVisibility(View.GONE);
                                    } else {
                                        String taskMemberList_qry = "select taskMemberList from projectHistory where projectId='" + projectId + "' and taskId='" + webtaskId + "'";
                                        String taskMemberList_1 = VideoCallDataBase.getDB(context).getValuesForQuery(taskMemberList_qry);
                                        Log.i("notifyTaskReceived", "taskMemberList_1  &&& ==> " + taskMemberList_1);
                                        if (taskMemberList_1 != null && !taskMemberList_1.equalsIgnoreCase("") && !taskMemberList_1.equalsIgnoreCase(null)) {
                                            tv_reassign.setVisibility(View.GONE);
                                            assign_taskview.setVisibility(View.GONE);
                                        } else {
                                            assign_taskview.setVisibility(View.VISIBLE);
                                            tv_reassign.setVisibility(View.VISIBLE);
                                            tv_reassign.setText("Assign Task");
                                        }
                                    }
//                                    status_job.setVisibility(View.GONE);
//                                    travel_job.setVisibility(View.GONE);
                                    Log.i("notifyTaskReceived", "listOfObservers @@11==> " + listOfObservers);
                                    listOfObservers.clear();
                                    String project_deassignMems = remove_TaskMembers(taskDetailsBean.getFromUserName());
                                    Log.i("notifyTaskReceived", "project_deassignMems " + project_deassignMems);
                                    if (project_deassignMems != null && !project_deassignMems.equalsIgnoreCase("") && !project_deassignMems.equalsIgnoreCase(null)) {
                                        if (!listOfObservers.contains(project_deassignMems)) {
                                            listOfObservers.add(project_deassignMems);
                                        }
                                    }
                                    Log.i("notifyTaskReceived", "listOfObservers 555 $$$ ==> " + listOfObservers);
                                    VideoCallDataBase.getDB(context).updateaccept("update projectHistory set taskMemberList='" + project_deassignMems + "' where projectId='" + taskDetailsBean.getProjectId() + "' and taskId='" + taskDetailsBean.getTaskId() + "'");
                                }
                            });
                        } else if (taskDetailsBean.getTaskStatus() != null && (taskDetailsBean.getTaskStatus().equalsIgnoreCase("Completed") || taskDetailsBean.getTaskStatus().equalsIgnoreCase("complete"))) {
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    assign_taskview.setVisibility(View.GONE);
                                    status_job.setVisibility(View.GONE);
                                    travel_job.setVisibility(View.GONE);
                                }
                            });
                        }
                        Log.i("notifyTaskReceived", "TaskStatus()  **$$ ==> " + taskDetailsBean.getTaskStatus());
                        Log.i("notifyTaskReceived", "isCustomTagVisible==>  " + taskDetailsBean.isCustomTagVisible());
                        if (taskDetailsBean.getSubType() != null && taskDetailsBean.getSubType().equalsIgnoreCase("customeAttribute")) {
                            VideoCallDataBase.getDB(context).UpdateOrInsert(taskDetailsBean);
                        } else {
                            /*8888888888888888888888888888888*/
                            Log.i("notifyTaskReceived", "ProjectId() !!##==> " + taskDetailsBean.getProjectId());
                            if (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase("null") && !taskDetailsBean.getProjectId().equalsIgnoreCase(null) && !taskDetailsBean.getProjectId().equalsIgnoreCase("") && !taskDetailsBean.getProjectId().equalsIgnoreCase("(null)")) {
//                                VideoCallDataBase.getDB(context).update_Project_history(taskDetailsBean);
//                                if (VideoCallDataBase.getDB(context).DuplicateProjectTaskIdChecker(taskDetailsBean.getTaskId())) {
                                Log.i("notifyTaskReceived", "ProjectStatus 111 ##** ==> " + taskDetailsBean.getProjectStatus());
                                if (taskDetailsBean.getProjectStatus() != null && !taskDetailsBean.getProjectStatus().equalsIgnoreCase("")) {
                                    Log.i("notifyTaskReceived", "ProjectStatus 123 ##**** ==> " + taskDetailsBean.getProjectStatus());
                                    VideoCallDataBase.getDB(context).insert_new_Project_history(taskDetailsBean);
                                }
                                Log.i("notifyTaskReceived", "getTaskStatus 345 ## ==> " + taskDetailsBean.getTaskStatus());
                                if (taskDetailsBean.getTaskStatus() != null) {
//                                    VideoCallDataBase.getDB(context).update_Project_history(taskDetailsBean);
//                                    VideoCallDataBase.getDB(context).insertORupdate_Task_history(taskDetailsBean);
                                    if ((taskDetailsBean.getProjectStatus() != null && !taskDetailsBean.getProjectStatus().equalsIgnoreCase("")
                                            && !taskDetailsBean.getProjectStatus().equalsIgnoreCase("null") && !taskDetailsBean.getProjectStatus().equalsIgnoreCase(null)
                                            && taskDetailsBean.getProjectStatus().equalsIgnoreCase("9"))
                                            && taskDetailsBean.getTravelEndTime() != null && !taskDetailsBean.getTravelEndTime().equalsIgnoreCase("")
                                            && !taskDetailsBean.getTravelEndTime().equalsIgnoreCase(null)) {
                                        Log.i("notifyTaskReceived", "projectUpdate query if # ");
                                        String queryUpdate = "update projectStatus set travelEndTime='" + taskDetailsBean.getTravelEndTime() + "' where projectId='" + projectId + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                                        Log.i("notifyTaskReceived", "projectUpdate query " + queryUpdate);
                                        VideoCallDataBase.getDB(context).updateaccept(queryUpdate);
                                    } else {
                                        Log.i("notifyTaskReceived", "projectUpdate query else # ");
                                        VideoCallDataBase.getDB(context).insertORupdateStatus(taskDetailsBean);
                                    }
                                } else if (taskDetailsBean.getMimeType().equalsIgnoreCase("assignTask")) {
//                                    VideoCallDataBase.getDB(context).insertORupdate_Task_history(taskDetailsBean);
                                    VideoCallDataBase.getDB(context).insertORupdateStatus(taskDetailsBean);
                                    Log.i("notifyTaskReceived", "projectUpdate taskmember ## ==>" + taskDetailsBean.getGroupTaskMembers());
                                    VideoCallDataBase.getDB(context).update_Project_history(taskDetailsBean);
                                }
                            } else {
                                if (!chat) {
                                    VideoCallDataBase.getDB(context).insertORupdate_TaskHistoryInfo(taskDetailsBean);
                                }
                            }
                            Log.i("notifyTaskReceived", "isCustomTagVisible 55888==>   " + taskDetailsBean.isCustomTagVisible());
                            Log.i("notifyTaskReceived", "ToUserId &&& ==>   " + taskDetailsBean.getToUserId());
                            dataBase.insertORupdate_Task_history(taskDetailsBean);
//                            dataBase.insertORupdate_TaskHistoryInfo(taskDetailsBean);
                        }

                        if (isProjectFromOracle) {
                            taskStatus = taskDetailsBean.getTaskStatus();
                        }
                        if (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase("null") && !taskDetailsBean.getProjectId().equalsIgnoreCase(null) && !taskDetailsBean.getProjectId().equalsIgnoreCase("") && !taskDetailsBean.getProjectId().equalsIgnoreCase("(null)")) {
                            if (Appreference.loginuserdetails.getUsername().equalsIgnoreCase(taskDetailsBean.getOwnerOfTask())) {
                                String touser_lists = VideoCallDataBase.getDB(context).getProjectParentTaskId("select taskMemberList from projectHistory where taskId='" + taskDetailsBean.getTaskId() + "'");
                                ArrayList<String> to_values = new ArrayList<>();
                                if (touser_lists != null) {
                                    int counter = 0;
                                    for (int i = 0; i < touser_lists.length(); i++) {
                                        if (touser_lists.charAt(i) == ',') {
                                            counter++;
                                        }
                                    }
                                    Log.i("notifyTaskReceived", "project_details Task Mem's counter size is == " + counter);
                                    for (int j = 0; j < counter + 1; j++) {
                                        if (counter == 0) {
                                            if (!to_values.contains(touser_lists)) {
                                                to_values.add(touser_lists);
                                            }
                                        } else {
                                            Log.i("notifyTaskReceived", "project_details Task Mem's and position == " + touser_lists.split(",")[j] + " " + j);
                                            if (touser_lists.split(",")[j].equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                            } else {
                                                if (!to_values.contains(touser_lists.split(",")[j])) {
                                                    to_values.add(touser_lists.split(",")[j]);
                                                }
                                            }
                                        }
                                    }
                                }
                                int a = VideoCallDataBase.getDB(context).ProjectGroupPercentageChecker(to_values, taskDetailsBean.getTaskId(), taskDetailsBean.getOwnerOfTask());
                                taskDetailsBean.setCompletedPercentage(String.valueOf(a));
                                Log.i("notifyTaskReceived", "Inside project after DB update group percentage " + a);
                                VideoCallDataBase.getDB(context).updateaccept("update projectHistory set completedPercentage='" + taskDetailsBean.getCompletedPercentage() + "' where taskId='" + taskDetailsBean.getTaskId() + "'");
                            }
                        } else {
                            if (Appreference.loginuserdetails.getUsername().equalsIgnoreCase(taskDetailsBean.getOwnerOfTask())) {
                                if ((taskDetailsBean.getTaskType() != null && taskDetailsBean.getTaskType().equalsIgnoreCase("Group"))) {
                                    int a = VideoCallDataBase.getDB(context).GroupPercentageChecker(taskDetailsBean.getToUserId(), webtaskId, ownerOfTask);
                                    taskDetailsBean.setCompletedPercentage(String.valueOf(a));
                                    Log.i("notifyTaskReceived", "Inside project after DB update group percentage " + a);
                                }
                                VideoCallDataBase.getDB(context).updateaccept("update taskHistoryInfo set completedPercentage='" + taskDetailsBean.getCompletedPercentage() + "' where taskId='" + taskDetailsBean.getTaskId() + "'");
                            }
                        }
                        Log.i("notifyTaskReceived", "same user 111 ");
                        if (!taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                            if (taskDetailsBean.getTaskStatus() != null && taskDetailsBean.getTaskStatus().equalsIgnoreCase("Completed")) {
                                taskList_12 = new ArrayList<>();
                                taskList_12 = VideoCallDataBase.getDB(context).getTaskHistory("select * from taskDetailsInfo where fromUserName='" + Appreference.loginuserdetails.getUsername() + "' and taskId='" + taskDetailsBean.getTaskId() + "' and taskDescription = 'Completed Percentage 100%' order by id desc");
                                if (taskList_12.size() > 0) {
                                    String completed_value = taskList_12.get(0).getCompletedPercentage();
                                    if (completed_value.equalsIgnoreCase("100") || completed_value.equalsIgnoreCase("100%")) {
                                        taskStatus = "Completed";
                                        Log.i("notifyTaskReceived", "status 2 " + taskStatus);
                                        Log.i("notifyTaskReceived", "value notify 12 " + taskStatus);
                                    } else {
                                        taskStatus = "inprogress";
                                        Log.i("notifyTaskReceived", "status 3 " + taskStatus);
                                        Log.i("notifyTaskReceived", "value notify 13 " + taskStatus);
                                    }
                                    VideoCallDataBase.getDB(context).groupTask_StatusUpdate(taskDetailsBean.getSignalid(), taskStatus);
                                    Log.i("notifyTaskReceived", "taskStatus 4 #@==>  " + taskStatus);
                                    Log.i("notifyTaskReceived", "taskStatus 5 #@==> " + taskStatus);
                                }
                            }
                        }
                        if (taskDetailsBean.getTaskId() != null) {
                            taskList_9 = new ArrayList<>();
                            taskList_10 = new ArrayList<>();
                            taskList_9 = VideoCallDataBase.getDB(context).getTaskHistory("select * from taskDetailsInfo where taskId='" + taskDetailsBean.getTaskId() + "' and taskDescription = '" + category + " accepted' order by id desc");
                            taskList_10 = VideoCallDataBase.getDB(context).getTaskHistory("select * from taskDetailsInfo where taskId='" + taskDetailsBean.getTaskId() + "' and mimeType = 'date' order by id desc");
                        }
                        try {
                            String percentage_1;
                            int percentage1 = 0;
                            if (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase("null") && !taskDetailsBean.getProjectId().equalsIgnoreCase("") && !taskDetailsBean.getProjectId().equalsIgnoreCase("(null)") && !taskDetailsBean.getProjectId().equalsIgnoreCase(null)) {
                                percentage_1 = VideoCallDataBase.getDB(context).getProjectParentTaskId("select completedPercentage from projectHistory where taskId='" + webtaskId + "'");
                            } else {
                                percentage_1 = VideoCallDataBase.getDB(context).getProjectParentTaskId("select completedPercentage from taskHistoryInfo where taskId='" + webtaskId + "'");
                            }
                            if (percentage_1 != null && !percentage_1.equalsIgnoreCase("null")) {
                                percentage1 = Integer.parseInt(percentage_1);
                            }
                            Log.i("notifyTaskReceived", "percentage1 $% --> " + percentage1);
                            if (isTaskAccept && !ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                Log.e("notifyTaskReceived", "isTaskAccept **** " + isTaskAccept);
                                Log.i("notifyTaskReceived", "TaskStatus **** " + taskDetailsBean.getTaskStatus());
                                if (taskDetailsBean.getTaskDescription() != null && taskDetailsBean.getTaskDescription().equalsIgnoreCase("This task is overdue")) {
                                    taskDetailsBean.setTaskStatus("overdue");
                                    Log.i("notifyTaskReceived", "TaskStatus() else overdue???? " + taskDetailsBean.getTaskStatus());
                                }
                            }
                            if (percentage1 >= 0 && percentage1 != 100) {
                                Log.e("notifyTaskReceived", "percentage(if) " + percentage1);
                                if (taskDetailsBean.getRequestStatus() != null && (taskDetailsBean.getRequestStatus().equalsIgnoreCase("approved") || taskDetailsBean.getRequestStatus().equalsIgnoreCase("assigned")) || taskDetailsBean.getTaskRequestType().equalsIgnoreCase("percentageCompleted")) {
                                    Log.e("notifyTaskReceived", "DateAssigned");
                                    if (taskDetailsBean.getTaskStatus() != null && !taskDetailsBean.getTaskStatus().equalsIgnoreCase("closed")) {
                                        reminderTimerDisplay();
                                    }
                                }
                                Log.i("notifyTaskReceived", "percentage1$$  " + percentage1);
                                if (taskStatus != null && taskStatus.equalsIgnoreCase("inprogress")) {
                                    Log.i("notifyTaskReceived", "percentage1 $$ if  " + percentage1);
                                    handler.post(new Runnable() {
                                        @Override
                                        public void run() {
                                            task_approve.setVisibility(View.GONE);
                                            actorrej.setVisibility(View.GONE);
                                        }
                                    });
                                }
                            } else {
                                if (taskDetailsBean.getTaskType() != null && !taskDetailsBean.getTaskType().equalsIgnoreCase("Group")) {
                                    Log.e("notifyTaskReceived", "percentage(else) 123 ==> " + percentage1);
                                    Log.e("notifyTaskReceived", "percentage(else) %$ -> " + taskDetailsBean.getTaskStatus());
                                    if (ownerOfTask != null && ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                        Log.i("indi", "individual 1-" + percentage1);
                                        checker = VideoCallDataBase.getDB(context).Statuscheker(taskDetailsBean.getTaskId());
                                        if (checker != null && !checker.equalsIgnoreCase("closed"))
                                            VideoCallDataBase.getDB(context).updatetaskIndiv_Owner(webtaskId);
                                        handler.post(new Runnable() {
                                            @Override
                                            public void run() {
                                                timerstop();
                                                isRem_time = false;
                                                Log.i("notifyTaskReceived", "individual 3-");
                                                Log.i("notifyTaskReceived", "handler --> " + taskDetailsBean);
                                                if (ownerOfTask != null && ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) && taskDetailsBean.getTaskStatus() != null && taskDetailsBean.getTaskStatus().equalsIgnoreCase("Completed")) {
                                                    if (AppSharedpreferences.getInstance(context).getBoolean("Prompt" + taskDetailsBean.getTaskId())) {
                                                        Log.i("notifyTaskReceived", "handler --> 3 " + taskDetailsBean);
                                                        AppSharedpreferences.getInstance(context).clearBoolean("closed" + taskDetailsBean.getTaskId(), false);
                                                        AppSharedpreferences.getInstance(context).clearBoolean("Prompt" + taskDetailsBean.getTaskId(), false);
                                                    }
                                                    taskStatus = "Completed";
                                                    if (!taskDetailsBean.getTaskStatus().equalsIgnoreCase("closed")) {
                                                        if (!AppSharedpreferences.getInstance(context).getBoolean("Prompt" + taskDetailsBean.getTaskId())) {
                                                            Log.i("notifyTaskReceived", "percent UI 1 " + taskStatus);
                                                            if (!isProjectFromOracle) {
                                                                Log.i("notifyTaskReceived", "percent UI 2* " + taskStatus);
                                                                task_approve.setVisibility(View.VISIBLE);
                                                                actorrej.setVisibility(View.VISIBLE);
                                                            }
                                                        }
                                                    }
                                                    Log.i("notifyTaskReceived", "after percentage method --> " + groupname);
                                                }
                                            }
                                        });
                                    }
                                    if (taskDetailsBean.getTaskStatus() != null && taskDetailsBean.getTaskStatus().equalsIgnoreCase("closed")) {
                                        if (isRem_time) {
                                            counter.cancel();
                                            handler.post(new Runnable() {
                                                @Override
                                                public void run() {
                                                    reminingtime.setVisibility(View.GONE);
                                                }
                                            });
                                            isRem_time = false;
                                        }
                                    }
                                    Log.i("notifyTaskReceived", "TaskStatus 501 " + taskDetailsBean.getTaskStatus());
                                    Log.i("notifyTaskReceived", "isRem_time 501 " + isRem_time);
                                } else if (taskDetailsBean.getTaskType() != null && taskDetailsBean.getTaskType().equalsIgnoreCase("Group")) {
                                    Log.d("notifyTaskReceived", "group");
                                    if (taskDetailsBean.getFromUserName().equalsIgnoreCase(taskDetailsBean.getOwnerOfTask())) {
                                        Log.e("notifyTaskReceived", "percentage(else)" + percentage1);
                                        if (taskDetailsBean.getTaskDescription().contains("Completed Percentage 100%") || taskDetailsBean.getTaskDescription().contains("Completed Percentage 100")) {
                                            VideoCallDataBase.getDB(context).updatetaskstatus(webtaskId);
                                        }
                                        if (isRem_time) {
                                            counter.cancel();
                                            handler.post(new Runnable() {
                                                @Override
                                                public void run() {
                                                    reminingtime.setVisibility(View.GONE);
                                                }
                                            });
                                            isRem_time = false;
                                        }
                                    } else {
                                        Log.d("notifyTaskReceived", "else group ");
                                        Log.i("notifyTaskReceived", "GroupTaskMembers() " + taskDetailsBean.getGroupTaskMembers());
                                        if (taskDetailsBean.getTaskType() != null && taskDetailsBean.getTaskType().equalsIgnoreCase("Group") && Appreference.loginuserdetails.getUsername().equalsIgnoreCase(taskDetailsBean.getOwnerOfTask())) {
                                            Log.e("notifyTaskReceived", "else if group ");
                                            boolean check = false;
                                            listMembers_1 = new ArrayList<>();
                                            listMembers_2 = new ArrayList<>();
                                            if (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase("") && !taskDetailsBean.getProjectId().equalsIgnoreCase(null) && !taskDetailsBean.getProjectId().equalsIgnoreCase("null") && !taskDetailsBean.getProjectId().equalsIgnoreCase("(null)")) {
                                                String pjt_ListMems = VideoCallDataBase.getDB(context).getProjectListMembers(taskDetailsBean.getTaskId());
                                                int counter = 0;
                                                ListMember list_Mems = new ListMember();
                                                for (int i = 0; i < pjt_ListMems.length(); i++) {
                                                    if (pjt_ListMems.charAt(i) == ',') {
                                                        counter++;
                                                    }
                                                    Log.d("notifyTaskReceived", "Task Mem's counter size is == " + counter);
                                                }
                                                for (int j = 0; j < counter + 1; j++) {
                                                    Log.i("notifyTaskReceived", "Task Mem's and position == " + pjt_ListMems.split(",")[j] + " " + j);
                                                    list_Mems.setUsername(pjt_ListMems.split(",")[j]);
                                                    listMembers_1.add(list_Mems);
                                                    listofProjectMembers.add(pjt_ListMems.split(",")[j]);
                                                }
                                                if (listofProjectMembers != null) {
                                                    int a = VideoCallDataBase.getDB(context).ProjectGroupPercentageChecker(listofProjectMembers, taskDetailsBean.getTaskId(), taskDetailsBean.getOwnerOfTask());
                                                    VideoCallDataBase.getDB(context).groupProject_PercentUpdate(taskDetailsBean.getTaskId(), String.valueOf(a));
                                                    Log.i("notifyTaskReceived", "OwnerPercentage " + a);
                                                }
                                            } else {
                                                listMembers_1 = VideoCallDataBase.getDB(context).getGroupmemberHistory("select * from groupmember where groupid='" + toUserId + "'");
                                            }
                                            Log.i("notifyTaskReceived", "listMembers_1 %$$99 --->> " + listMembers_1);
                                            if (listMembers_1.size() > 0) {
                                                Log.i("notifyTaskReceived", "if inside 777 --> " + listMembers_1 + " &&==> " + groupname);
                                                for (ListMember listMember : listMembers_1) {
                                                    int percent_1 = 0;
                                                    Log.i("notifyTaskReceived", "if inside 888 --> " + listMembers_1.size() + " &&**==> " + groupname);
                                                    if (!Appreference.loginuserdetails.getUsername().equalsIgnoreCase(listMember.getUsername())) {
                                                        Log.i("notifyTaskReceived", "before db line--> " + listMembers_1);
                                                        if (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase("null") && !taskDetailsBean.getProjectId().equalsIgnoreCase("") && !taskDetailsBean.getProjectId().equalsIgnoreCase(null) && !taskDetailsBean.getProjectId().equalsIgnoreCase("(null)")) {
                                                            String comp_percent = VideoCallDataBase.getDB(context).getProjectParentTaskId("select completedPercentage from projectHistory where projectId='" + taskDetailsBean.getProjectId() + "' and taskId='" + taskDetailsBean.getTaskId() + "'");
                                                            if (comp_percent != null)
                                                                percent_1 = Integer.parseInt(comp_percent);
                                                        } else {
                                                            percent_1 = VideoCallDataBase.getDB(context).groupPercentageStatus(listMember.getUsername(), webtaskId);
                                                        }
                                                        Log.i("notifyTaskReceived", "after db line--> " + listMembers_1);
                                                        listMembers_2.add(String.valueOf(percent_1));
                                                    }
                                                }
                                            }
                                            for (int i = 0; i < listMembers_2.size(); i++) {
                                                Log.i("notifyTaskReceived", "after add list  " + listMembers_2);
                                                if (listMembers_2.get(i).equalsIgnoreCase("100")) {
                                                    Log.i("notifyTaskReceived", "isGrp_Percent=true if " + listMembers_1);
                                                    isGrp_Percent = true;
                                                    Log.i("notifyTaskReceived", "isGrp_Percent=true if " + isGrp_Percent);
                                                } else {
                                                    Log.i("notifyTaskReceived", "isGrp_Percent=false else " + isGrp_Percent);
                                                    isGrp_Percent = false;

                                                    Log.i("notifyTaskReceived", "isGrp_Percent=false else " + isGrp_Percent);
                                                }
                                                if (!isGrp_Percent)
                                                    break;
                                            }
                                            if (isGrp_Percent && !taskDetailsBean.getTaskStatus().equalsIgnoreCase("Closed")) {
                                                taskDetailsBean.setTaskStatus("Completed");
                                                taskStatus = taskDetailsBean.getTaskStatus();
                                                VideoCallDataBase.getDB(context).groupTask_StatusUpdate(taskDetailsBean.getSignalid(), taskDetailsBean.getTaskStatus());
                                                VideoCallDataBase.getDB(context).updateaccept("update taskHistoryInfo set taskStatus='" + taskDetailsBean.getTaskStatus() + "' where taskId='" + taskDetailsBean.getTaskId() + "'");
                                                if (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase("null") && !taskDetailsBean.getProjectId().equalsIgnoreCase("") && !taskDetailsBean.getProjectId().equalsIgnoreCase(null) && !taskDetailsBean.getProjectId().equalsIgnoreCase("(null)")) {
                                                    VideoCallDataBase.getDB(context).updateaccept("update projectHistory set taskStatus='" + taskDetailsBean.getTaskStatus() + "' where projectId='" + taskDetailsBean.getProjectId() + "' and taskId='" + taskDetailsBean.getTaskId() + "'");
                                                }
                                                handler.post(new Runnable() {
                                                    @Override
                                                    public void run() {
                                                        if (isRem_time) {
                                                            counter.cancel();
                                                            reminingtime.setVisibility(View.GONE);
                                                            isRem_time = false;
                                                        }
                                                    }
                                                });
                                                Log.i("notifyTaskReceived", "taskDetailsBean.getTaskStatus() DB final update for group taskStatus is " + taskDetailsBean.getTaskStatus());
                                            }
                                            if (isGrp_Percent) {
                                                Log.i("notifyTaskReceived", "bean set -->" + taskDetailsBean);
                                                handler.post(new Runnable() {
                                                    @Override
                                                    public void run() {
                                                        Log.i("notifyTaskReceived", "handler -->" + taskDetailsBean);
                                                        checker = VideoCallDataBase.getDB(context).Statuscheker(taskDetailsBean.getTaskId());
                                                        if (checker != null && !checker.equalsIgnoreCase("closed")) {
                                                            if (AppSharedpreferences.getInstance(context).getBoolean("Prompt" + taskDetailsBean.getTaskId()) && AppSharedpreferences.getInstance(context).getBoolean("closed" + taskDetailsBean.getTaskId())) {
                                                                Log.i("notifyTaskReceived", "handler if getboolean true -->" + groupname);
                                                                AppSharedpreferences.getInstance(context).clearBoolean("Prompt" + taskDetailsBean.getTaskId(), false);
                                                            }
                                                            if (!AppSharedpreferences.getInstance(context).getBoolean("Prompt" + taskDetailsBean.getTaskId())) {
                                                                Log.i("notifyTaskReceived", "handler if getboolean false -->" + groupname);
                                                                if (!isProjectFromOracle) {
                                                                    task_approve.setVisibility(View.VISIBLE);
                                                                    actorrej.setVisibility(View.VISIBLE);
                                                                }
                                                                Log.i("notifyTaskReceived", "percent UI 8 " + taskStatus);
                                                            }
                                                        }
                                                        Log.i("notifyTaskReceived", "after percentage method -->" + groupname);
                                                    }
                                                });
                                            } else {
                                                Log.i("notifyreceived", "taskDetailsBean.getTaskStatus() --> " + taskDetailsBean.getTaskStatus());
                                                if (taskDetailsBean.getTaskStatus() != null && taskDetailsBean.getTaskStatus().equalsIgnoreCase("inprogress")) {
                                                    task_approve.setVisibility(View.GONE);
                                                    actorrej.setVisibility(View.GONE);
                                                }
                                                if (taskDetailsBean.getTaskStatus() != null && !taskDetailsBean.getTaskStatus().equalsIgnoreCase("closed")) {
                                                    reminderTimerDisplay();
                                                }
                                            }
                                        } else {
                                            if (percentage1 >= 0 && percentage1 != 100) {
                                                Log.d("notifyTaskReceived", "final else");
                                                reminderTimerDisplay();
                                            }
                                        }
                                    }
                                }
                            }
                        } catch (Exception e) {
                            e.printStackTrace();
                            Appreference.printLog("NewTaskConversation", "notifyTaskReceived Exception : " + e.getMessage(), "WARN", null);
                        }
                        if (taskDetailsBean.getSendStatus().trim().equalsIgnoreCase("3")) {
                            String taskObservers = taskDetailsBean.getTaskObservers();
                            Log.d("notifyTaskReceived", "4 Task Observer  == " + taskObservers);
                            Log.i("notifyTaskReceived", "list clear 16");
                            listOfObservers.clear();
                            int counter = 0;
                            if (taskObservers != null) {
                                for (int i = 0; i < taskObservers.length(); i++) {
                                    if (taskObservers.charAt(i) == ',') {
                                        counter++;
                                    }
                                    Log.d("notifyTaskReceived", "Task Observer counter size is == " + counter);
                                    for (int j = 0; j < counter + 1; j++) {
                                        if (!Appreference.loginuserdetails.getUsername().equalsIgnoreCase(taskObservers.split(",")[j])) {
                                            if (!listOfObservers.contains(taskObservers.split(",")[j]))
                                                listOfObservers.add(taskObservers.split(",")[j]);
                                            Log.d("notifyTaskReceived", "Task Observer name not in same user== " + taskObservers.split(",")[j]);
                                        } else {
                                            if (!toUserName.equalsIgnoreCase(ownerOfTask)) {
                                                if (!listOfObservers.contains(ownerOfTask)) {
                                                    listOfObservers.add(ownerOfTask);
                                                }
                                            }
                                            if (!toUserName.equalsIgnoreCase(taskReceiver)) {
                                                if (!listOfObservers.contains(taskReceiver)) {
                                                    listOfObservers.add(taskReceiver);
                                                }
                                            }
                                        }
                                        Log.d("notifyTaskReceived", "Task Observer name == " + taskObservers.split(",")[j]);
                                        Log.i("notifyTaskReceived", "task observerlist size" + listOfObservers.size());
                                    }
                                }
                            }

                            String taskRemovedObservers = taskDetailsBean.getRejectedObserver();
                            Log.d("notifyTaskReceived", "Task Observer  == " + taskObservers);
                            int counter1 = 0;
                            if (taskRemovedObservers != null) {
                                for (int i = 0; i < taskRemovedObservers.length(); i++) {
                                    if (taskRemovedObservers.charAt(i) == ',') {
                                        counter1++;
                                    }
                                    Log.d("notifyTaskReceived", "Task Observer counter size is == " + counter);
                                    for (int j = 0; j < counter1 + 1; j++) {
                                        if (listOfObservers.contains(taskRemovedObservers.split(",")[j])) {
                                            Log.d("notifyTaskReceived", "Task Removed  Observer name  9 == " + taskRemovedObservers.split(",")[j]);
                                            listOfObservers.remove(taskRemovedObservers.split(",")[j]);
                                        }
                                        Log.d("notifyTaskReceived", "Task Observer name not in same user== " + taskRemovedObservers.split(",")[j]);
                                        Log.d("notifyTaskReceived", "Task Observer name == " + taskRemovedObservers.split(",")[j]);
                                        Log.i("notifyTaskReceived", "task observerlist size" + listOfObservers.size());
                                    }
                                }
                            }
                            Log.i("notifyTaskReceived", "task observerlist size" + listOfObservers.size());
                            if (taskReceiver != null && !taskReceiver.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                boolean ch = false;
                                for (int i = 0; i < listOfObservers.size(); i++) {
                                    String name = listOfObservers.get(i);
                                    if (name.equalsIgnoreCase(taskReceiver)) {
                                        ch = true;
                                        break;
                                    }
                                }
                                if (!ch)
                                    if (!listOfObservers.contains(taskReceiver))
                                        listOfObservers.add(taskReceiver);
                            }
                            for (int h = 0; h < listObservers.size(); h++) {
                                String name = listObservers.get(h);
                                for (int m = 0; m < listOfObservers.size(); m++) {
                                    String name1 = listOfObservers.get(m);
                                    if (!name.equalsIgnoreCase(name1)) {
                                        if (!listOfObservers.contains(name))
                                            listOfObservers.add(name);
                                    }
                                }
                            }
                            for (String ob : listOfObservers) {
                                Log.i("notifyTaskReceived", "observer12" + ob);
                            }
                        }
                        if (taskDetailsBean.getGroupTaskMembers() != null && !taskDetailsBean.getGroupTaskMembers().equalsIgnoreCase("(null)") && !taskDetailsBean.getGroupTaskMembers().equalsIgnoreCase("")) {
                            String groupMembers = taskDetailsBean.getGroupTaskMembers();
                            Log.d("notifyTaskReceived", "Task groupTask  == " + groupMembers);
                            if (taskDetailsBean.getGroupTaskMembers() != null && !taskDetailsBean.getGroupTaskMembers().equalsIgnoreCase("(null)") && !taskDetailsBean.getTaskDescription().equalsIgnoreCase("")) {
                                String groupTaskMembers = taskDetailsBean.getTaskDescription();
                                Log.d("notifyTaskReceived", "3 Task Observer  == " + groupTaskMembers);
                                int counter = 0;
                                for (int i = 0; i < groupTaskMembers.length(); i++) {
                                    if (groupTaskMembers.charAt(i) == ',') {
                                        counter++;
                                    }
                                    Log.d("notifyTaskReceived", "Task Observer counter size is == " + counter);
                                    for (int j = 0; j < counter + 1; j++) {
                                        if (!Appreference.loginuserdetails.getUsername().equalsIgnoreCase(groupTaskMembers.split(",")[j])) {
                                            if (!listOfObservers.contains(groupTaskMembers.split(",")[j]))
                                                listOfObservers.add(groupTaskMembers.split(",")[j]);
                                            Log.d("notifyTaskReceived", "Task Observer name not in same user== " + groupTaskMembers.split(",")[j]);
                                        } else {
                                            if (!toUserName.equalsIgnoreCase(ownerOfTask)) {
                                                if (!listOfObservers.contains(ownerOfTask)) {
                                                    listOfObservers.add(ownerOfTask);
                                                }
                                            }
                                            if (!toUserName.equalsIgnoreCase(taskReceiver)) {
                                                if (!listOfObservers.contains(taskReceiver)) {
                                                    listOfObservers.add(taskReceiver);
                                                }
                                            }
                                        }
                                        Log.d("notifyTaskReceived", "Task Observer name == " + groupTaskMembers.split(",")[j]);
                                    }
                                }
                            }
                            if (taskDetailsBean.getMimeType().equalsIgnoreCase("Reassign")) {
                                for (String s : listOfObservers) {
                                    if (Appreference.loginuserdetails.getUsername().equalsIgnoreCase(s)) {
                                        Log.d("notifyTaskReceived", "Task Removed  Observer name  10 == " + s);
                                        listOfObservers.remove(s);
                                    }
                                }
                            }
                            refresh();
                            Log.d("notifyTaskReceived", "value " + taskDetailsBean.getTaskType());
                            Log.d("notifyTaskReceived", "value " + taskDetailsBean.getOwnerOfTask());
                            Log.d("notifyTaskReceived", "value " + taskDetailsBean.getCompletedPercentage());
                            Log.d("notifyTaskReceived", "value " + Appreference.loginuserdetails.getUsername());
                        }
                        UnreadChatCountShow();
                    }
                } else {
                    if (taskDetailsBean.getMimeType().equalsIgnoreCase("text"))
                        notifyEditMessage(taskDetailsBean);
                }
            } else {
                Log.i("notifyTaskReceived", "not same user && ");
                taskDetailsBean.setRead_status(1);
                if (!isSignalidSame || taskDetailsBean.getIsRemainderRequired().equalsIgnoreCase("1")) {
                    checker = VideoCallDataBase.getDB(context).Statuscheker(taskDetailsBean.getTaskId());
                    if (checker != null && checker.equalsIgnoreCase("closed"))
                        taskDetailsBean.setTaskStatus(checker);
                    Log.i("notifyTaskReceived", "value 81" + taskDetailsBean.getTaskStatus());
                    /*8888888888888888888888888888888*/
                    if (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase("null") && !taskDetailsBean.getProjectId().equalsIgnoreCase("") && !taskDetailsBean.getProjectId().equalsIgnoreCase("(null)") && !taskDetailsBean.getProjectId().equalsIgnoreCase(null)) {
                        VideoCallDataBase.getDB(context).update_Project_history(taskDetailsBean);
                       /* if (taskDetailsBean.getTaskStatus() != null && taskDetailsBean.getTaskStatus().equalsIgnoreCase("Started")) {
                            taskDetailsBean.setProjectStatus("0");
                        } else {
                            taskDetailsBean.setProjectStatus(taskDetailsBean.getTaskStatus());
                        }*/
                        if (taskDetailsBean.getTaskStatus() != null) {
//                            VideoCallDataBase.getDB(context).update_Project_history(taskDetailsBean);
                            VideoCallDataBase.getDB(context).insertORupdate_Task_history(taskDetailsBean);
                            if ((taskDetailsBean.getProjectStatus() != null && !taskDetailsBean.getProjectStatus().equalsIgnoreCase("")
                                    && !taskDetailsBean.getProjectStatus().equalsIgnoreCase("null") && !taskDetailsBean.getProjectStatus().equalsIgnoreCase(null)
                                    && taskDetailsBean.getProjectStatus().equalsIgnoreCase("9"))
                                    && taskDetailsBean.getTravelEndTime() != null && !taskDetailsBean.getTravelEndTime().equalsIgnoreCase("")
                                    && !taskDetailsBean.getTravelEndTime().equalsIgnoreCase(null)) {
                                String queryUpdate = "update projectStatus set travelEndTime='" + taskDetailsBean.getTravelEndTime() + "' where projectId='" + projectId + "' and taskId= '" + webtaskId + "' and travelStartTime IS NOT NULL and travelEndTime IS NULL";
                                Log.i("newtaskconversation", "projectUpdate query else " + queryUpdate);
                                Log.i("newtaskconversation", "projectUpdate query if * ");
                                VideoCallDataBase.getDB(context).updateaccept(queryUpdate);
                            } else {
                                Log.i("newtaskconversation", "projectUpdate query else * ");
                                VideoCallDataBase.getDB(context).insertORupdateStatus(taskDetailsBean);
                            }
                        } else if (taskDetailsBean.getMimeType().equalsIgnoreCase("Reassign")) {
                            VideoCallDataBase.getDB(context).insertORupdate_Task_history(taskDetailsBean);
                            VideoCallDataBase.getDB(context).insertORupdateStatus(taskDetailsBean);
                        }
                    } else {
                        if (!chat)
                            dataBase.insertORupdate_TaskHistoryInfo(taskDetailsBean);
                    }
                    Log.i("notifyTaskReceived", "schedulecall ** 10-->  " + taskDetailsBean.isCustomTagVisible());
                    Log.i("notifyTaskReceived", " taskDetailsBean.isCustomTagVisible -----------><------  " + taskDetailsBean.isCustomTagVisible());
                    dataBase.insertORupdate_Task_history(taskDetailsBean);
                    isSignalidSame = false;
                }
            }
            if (taskDetailsBean.isYouRemoved()) {
                listOfObservers.clear();
                listObservers.clear();
                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        refresh();
                        linear1.setVisibility(View.GONE);
                        icons.setVisibility(View.GONE);
                    }
                });
            }
            if (!taskDetailsBean.isYouRemoved()) {
                handler.post(new Runnable() {
                    @Override
                    public void run() {
                        linear1.setVisibility(View.VISIBLE);
                        icons.setVisibility(View.VISIBLE);
                    }
                });
            }
            String percentage_2;
            int percentage2 = 0;
            if (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase("null") && !taskDetailsBean.getProjectId().equalsIgnoreCase("") && !taskDetailsBean.getProjectId().equalsIgnoreCase("(null)") && !taskDetailsBean.getProjectId().equalsIgnoreCase(null)) {
                percentage_2 = VideoCallDataBase.getDB(context).getProjectParentTaskId("select completedPercentage from projectHistory where taskId='" + webtaskId + "'");
            } else {
                percentage_2 = VideoCallDataBase.getDB(context).getProjectParentTaskId("select completedPercentage from taskHistoryInfo where taskId='" + webtaskId + "'");
            }
            if (percentage_2 != null && !percentage_2.equalsIgnoreCase("null") && !percentage_2.equalsIgnoreCase("")) {
                percentage2 = Integer.parseInt(percentage_2);
            }
            if (percentage2 >= 0 && percentage2 != 100) {
                Log.e("notifyTaskReceived", "percentage(not) and taskStatus " + percentage2 + " " + taskDetailsBean.getTaskStatus());
                if (taskDetailsBean.getTaskStatus() != null && !taskDetailsBean.getTaskStatus().equalsIgnoreCase("closed")) {
                    if (taskDetailsBean.getRequestStatus() != null && (taskDetailsBean.getRequestStatus().equalsIgnoreCase("approved") || taskDetailsBean.getRequestStatus().equalsIgnoreCase("assigned"))) {
                        Log.e("notifyTaskReceived", "DateAssigned ");
                        if ((taskDetailsBean.getOwnerOfTask() != null && taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) || (taskDetailsBean.getTaskReceiver() != null && taskDetailsBean.getTaskReceiver().equalsIgnoreCase(Appreference.loginuserdetails.getUsername()))
                                || (taskDetailsBean.getTaskType() != null && taskDetailsBean.getTaskType().equalsIgnoreCase("Group"))
                                || (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase("null") && !taskDetailsBean.getProjectId().equalsIgnoreCase("") && !taskDetailsBean.getProjectId().equalsIgnoreCase("(null)") && !taskDetailsBean.getProjectId().equalsIgnoreCase(null))) {
                            handler.post(new Runnable() {
                                @Override
                                public void run() {
                                    if (isRem_time) {
                                        counter.cancel();
                                        reminingtime.setVisibility(View.GONE);
                                        isRem_time = false;
                                    }
                                    reminderTimerDisplay();
                                }
                            });
                        }
                    }
                }
            }
            Log.i("notifyTaskReceived", "taskList size is 111==>  " + taskList.size());
            if (taskList.size() > 0) {
                for (int i = 0; i < taskList.size(); i++) {
                    final TaskDetailsBean taskbeen = taskList.get(i);
                    if (taskbeen.getMimeType().equalsIgnoreCase("date") && (!Appreference.loginuserdetails.getUsername().equalsIgnoreCase(taskbeen.getOwnerOfTask()))) {
                        if (handler == null) {
                            handler = new Handler();
                        }
                        handler.post(new Runnable() {
                            @Override
                            public void run() {
                                calen_picker.setVisibility(View.GONE);
                                if ((taskType != null && taskType.equalsIgnoreCase("Group") && groupMemberAccess != null && groupMemberAccess.getRespondDateChange() != null && groupMemberAccess.getRespondDateChange().contains("0"))) {
                                    handler.post(new Runnable() {
                                        @Override
                                        public void run() {
                                            tab_datechangerequest.setVisibility(View.GONE);
                                        }
                                    });
                                } else if (taskReceiver != null && taskReceiver.contains(Appreference.loginuserdetails.getUsername())) {
                                    tab_datechangerequest.setVisibility(View.VISIBLE);
                                    Log.i("notifyTaskReceived", "groupMemberAccess.datechangerequest()!!@@@ ");
                                }

                            }
                        });
                    }
                }
            }
            handler.post(new Runnable() {
                @Override
                public void run() {

                    if (taskDetailsBean.getMimeType().equalsIgnoreCase("Reassign") &&
                            taskDetailsBean.getTaskReceiver().equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) &&
                            taskDetailsBean.getTaskStatus().equalsIgnoreCase("assigned")) {
                        task_accept_layout.setVisibility(View.VISIBLE);
                    }
                }
            });
            Log.i("notifyTaskReceived", "taskStatus in notify " + taskStatus);
            refresh();
            if (show_unreadCount > 0) {
                list_all.setTranscriptMode(AbsListView.TRANSCRIPT_MODE_DISABLED);
            } else if (list_all != null) {

                list_all.smoothScrollToPosition(list_all.getAdapter().getCount() - 1);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "notifyTaskReceived Exception : " + e.getMessage(), "WARN", null);
        }
    }


    public void startTimer() {
        try {
            if (timer == null) {
                //set a new Timer
                timer = new Timer();
                //initialize the TimerTask's job
                initializeTimerTask();
                //schedule the timer, after the first 15000ms the TimerTask will run every 15000ms
                timer.schedule(timerTask, 30000, 30000);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "startTimer Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void stoptimertask() {
        try {
            //stop the timer, if it's not already null
            if (timer != null) {
                timer.cancel();
                timer = null;
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "stoptimertask Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void initializeTimerTask() {

        try {
            timerTask = new TimerTask() {
                public void run() {
                    //use a handler to run a toast that shows the current timestamp
                    handler.post(new Runnable() {
                        public void run() {
                            //get the current timeStamp
                            try {
                                String query0 = "select * from taskDetailsInfo where taskId='" + webtaskId + "' and wssendstatus='10' and fromUserId='" + Appreference.loginuserdetails.getId() + "'";
                                ArrayList<TaskDetailsBean> taskDetailsBeans_list0 = VideoCallDataBase.getDB(context).getTaskHistory(query0);
                                Log.i("Timertask", "resend_webservice # " + taskDetailsBeans_list0.size());
                                for (TaskDetailsBean detailsBean : taskDetailsBeans_list0) {
                                    if (detailsBean.getMimeType().equalsIgnoreCase("date")) {
                                        isResend = true;
                                    } else {
                                        Log.i("TaskEntry", "taskConversationEntry resend 0 ");
                                    }
                                }
                                String query = "select * from taskDetailsInfo where taskId='" + webtaskId + "' and msgstatus='" + 0 + "' and wssendstatus='1' and fromUserId='" + Appreference.loginuserdetails.getId() + "'";
                                ArrayList<TaskDetailsBean> taskDetailsBeans_list = VideoCallDataBase.getDB(context).getTaskHistory(query);
                                Log.i("Timertask", "resend_webservice ##" + taskDetailsBeans_list.size());
                                for (TaskDetailsBean detailsBean : taskDetailsBeans_list) {
                                    VideoCallDataBase.getDB(context).updateTaskSentStatus(detailsBean.getSignalid(), "0");
                                    Log.i("Timertask", "mimeType" + detailsBean.getMimeType());
                                    if (detailsBean.getMimeType() != null && detailsBean.getMimeType().equalsIgnoreCase("date")) {
                                        resendSipMessageForDate(detailsBean);
                                    } else {
                                        sendMessage(detailsBean.getTaskDescription(), null, detailsBean.getMimeType(), null, "", detailsBean.getSignalid(), null);
                                    }
                                }

                                String query1 = "select * from taskDetailsInfo where taskId='" + webtaskId + "' and msgstatus='" + 0 + "' and wssendstatus='000'  and fromUserId='" + Appreference.loginuserdetails.getId() + "'";
                                Log.i("Timertask", "resend_webservice ### " + query1);
                                ArrayList<TaskDetailsBean> taskDetailsBeans_list1 = VideoCallDataBase.getDB(context).getTaskHistory(query1);
                                Log.i("Timertask", "resend_webservice #### " + taskDetailsBeans_list1.size());
                                for (TaskDetailsBean detailsBean : taskDetailsBeans_list1) {
                                    VideoCallDataBase.getDB(context).updateTaskSentStatus(detailsBean.getSignalid(), "0");
                                    Log.i("Timertask", "mimeType" + detailsBean.getMimeType());
                                    if (!detailsBean.getMimeType().equalsIgnoreCase("text") && !detailsBean.getMimeType().equalsIgnoreCase("date")) {
                                        String newQuery;
                                        if (detailsBean.getProjectId() != null && !detailsBean.getProjectId().equalsIgnoreCase("")) {
                                            newQuery = "select * from projectHistory where taskId='" + detailsBean.getTaskId() + "'";
                                        } else {
                                            newQuery = "select * from taskHistoryInfo where taskId='" + detailsBean.getTaskId() + "'";
                                        }
                                        ArrayList<TaskDetailsBean> taskDetailsBeans_list11 = VideoCallDataBase.getDB(context).getTaskHistoryInfo(newQuery);
                                        Log.i("Timertask", "newQuery $$ " + newQuery + " size is  " + taskDetailsBeans_list11.size());
                                        TaskDetailsBean taskDetailsBean = taskDetailsBeans_list11.get(0);
                                        Log.i("Timertask", "OwnerOfTask $$ " + taskDetailsBean.getOwnerOfTask() + " Receiver $$  " + taskDetailsBean.getTaskReceiver());
                                        detailsBean.setOwnerOfTask(taskDetailsBean.getOwnerOfTask());
                                        detailsBean.setTaskReceiver(taskDetailsBean.getTaskReceiver());
                                        detailsBean.setTaskObservers(taskDetailsBean.getTaskObservers());
                                        resendMessageInwebservice(detailsBean);
                                    }
                                }
                                //ase customization
                                String quer_2 = "select * from projectStatus where taskId='" + webtaskId + "' and wssendstatus='000' and userId='" + Appreference.loginuserdetails.getId() + "'";
                                ArrayList<TaskDetailsBean> taskDetailsBeans_list_2 = VideoCallDataBase.getDB(context).getofflinesendlist(quer_2);
                                Log.i("Timertask", "resend_webservice 1 " + taskDetailsBeans_list_2.size());
                                for (TaskDetailsBean detailsBean : taskDetailsBeans_list_2) {
                                    VideoCallDataBase.getDB(context).updateTaskSentStatus(detailsBean.getSignalid(), "0");
                                    Log.i("Timertask", "mimeType 1 " + detailsBean.getMimeType());
                                    String newQuery = null;
                                    if (detailsBean.getProjectId() != null && !detailsBean.getProjectId().equalsIgnoreCase("")) {
                                        newQuery = "select * from projectHistory where taskId='" + detailsBean.getTaskId() + "'";
                                    }
                                    ArrayList<TaskDetailsBean> taskDetailsBeans_list_22 = VideoCallDataBase.getDB(context).getTaskHistoryInfo(newQuery);
                                    Log.i("Timertask", "newQuery ## " + newQuery + " size is  " + taskDetailsBeans_list_22.size());
                                    TaskDetailsBean taskDetailsBean = taskDetailsBeans_list_22.get(0);
                                    Log.i("Timertask", "OwnerOfTask ## " + taskDetailsBean.getOwnerOfTask() + " TaskReceiver " + taskDetailsBean.getTaskReceiver());
                                    detailsBean.setOwnerOfTask(taskDetailsBean.getOwnerOfTask());
                                    detailsBean.setTaskReceiver(taskDetailsBean.getTaskReceiver());
                                    detailsBean.setTaskObservers(taskDetailsBean.getTaskObservers());
                                    resendstatus_MessageInwebservice(detailsBean);
                                }
                            } catch (Exception e) {
                                e.printStackTrace();
                                Appreference.printLog("NewTaskConversation", "initializeTimerTask Exception : " + e.getMessage(), "WARN", null);
                            }
                        }
                    });
                }
            };
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "initializeTimerTask Exception : " + e.getMessage(), "WARN", null);
        }
    }

    @Override
    protected void onDestroy() {
        super.onDestroy();
        try {
            InputMethodManager inputMethodManager = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
            inputMethodManager.hideSoftInputFromWindow(des.getWindowToken(), 0);
            Appreference.temconvert = false;
            Log.d("Response", "onDestroy called");
            MediaListAdapter.stop = false;
            stoptimertask();
            if (mPlayer != null && mPlayer.isPlaying())
                mPlayer.reset();
            MediaListAdapter.stop = true;
            super.onDestroy();
            Appreference.context_table.remove("taskcoversation");
            Appreference.taskId_webservice = false;
            if (isRem_time && counter != null) {
                counter.cancel();
            }
            if (isRem_time && estimCounter != null) {
                estimCounter.cancel();
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "onDestroy Exception : " + e.getMessage(), "WARN", null);
        }
    }

    @Override
    public void onBackPressed() {
        super.onBackPressed();
        Log.i("Newtaskconversation", "onBackPressed ");
        try {
            finish();
            overridePendingTransition(R.anim.left_to_right, R.anim.right_to_left);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "onBackPressed Exception : " + e.getMessage(), "WARN", null);
        }
    }

    @Override
    public boolean onKeyDown(int keyCode, KeyEvent event) {
        try {
            Log.i("Newtaskconversation", "onKeyDown ");
            if (keyCode == KeyEvent.KEYCODE_BACK) {
                Log.i("Newtaskconversation", "onKeyDown");

                Intent intent = new Intent();
                setResult(RESULT_OK, intent);
                ProjectHistory projectHistory = (ProjectHistory) Appreference.context_table.get("projecthistory");
                if (projectHistory != null)
                    projectHistory.setProgressBarInvisible();
                finish();
                overridePendingTransition(R.anim.left_to_right, R.anim.right_to_left);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "onKeyDown Exception : " + e.getMessage(), "WARN", null);
        }
        return super.onKeyDown(keyCode, event);
    }

    public void downloadFile(String uRl) {
        try {
            File direct = new File(Environment.getExternalStorageDirectory() + "/High Message/downloads");
            if (!direct.exists()) {
                direct.mkdirs();
            }
            DownloadManager mgr = (DownloadManager) context.getSystemService(Context.DOWNLOAD_SERVICE);
            Uri downloadUri = Uri.parse(uRl);
            String profile = uRl.split(".")[1];
            DownloadManager.Request request = new DownloadManager.Request(downloadUri);
            request.setAllowedNetworkTypes(
                    DownloadManager.Request.NETWORK_WIFI
                            | DownloadManager.Request.NETWORK_MOBILE)
                    .setAllowedOverRoaming(false).setTitle("Demo")
                    .setDescription("Something useful. No, really.")
                    .setDestinationInExternalPublicDir("/downloads", profile);
            mgr.enqueue(request);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "downloadFile Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void taskIdWebservice(TaskDetailsBean taskDetailsBean) {
        try {

            JSONObject jsonObject = new JSONObject();
            jsonObject.put("name", taskName);
            jsonObject.put("description", taskName);
            jsonObject.put("taskNo", task_No);
            if (project) {
                jsonObject.put("parentTask", parentTaskId);
                jsonObject.put("projectId", projectId);
                jsonObject.put("taskPriority", priority);
                jsonObject.put("status", "inprogress");
            } else if (taskType != null && taskType.equalsIgnoreCase("group")) {
                jsonObject.put("status", "inprogress");
            } else {
                jsonObject.put("status", "assigned");
            }
            jsonObject.put("taskCategory", "taskCreation");
            JSONObject jsonObject1 = new JSONObject();
            jsonObject1.put("id", fromId);
            jsonObject.put("from", jsonObject1);
            if ((!template && !note) || chat) {
                if (taskType != null && !taskType.equalsIgnoreCase("Group")) {
                    if (project) {
                        JSONArray jsonArray1 = new JSONArray();
                        JSONObject jsonObject2 = new JSONObject();
                        if (toUserListOfId != null && toUserListOfId.size() > 0) {
                            for (int i = 0; i < toUserListOfId.size(); i++) {
                                jsonObject2.put("id", toUserListOfId.get(i));
                                jsonArray1.put(i, jsonObject2);
                            }
                            jsonObject.put("listTaskToUser", jsonArray1);
                        }
                    } else {
                        jsonObject.put("to", toUserId);
                    }
                } else {
                    if (project) {
                        JSONArray jsonArray1 = new JSONArray();
                        for (int i = 0; i < toUserListOfId.size(); i++) {
                            JSONObject jsonObject2 = new JSONObject();
                            jsonObject2.put("id", toUserListOfId.get(i));
                            jsonArray1.put(i, jsonObject2);
                        }
                        jsonObject.put("listTaskToUser", jsonArray1);
                    } else {
                        JSONObject jsonObject2 = new JSONObject();
                        jsonObject2.put("id", toUserId);
                        jsonObject.put("group", jsonObject2);
                    }
                }
            }
//            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
//            String dateTime = dateFormat.format(new Date());
            String dateTime = taskDetailsBean.getTaskUTCDateTime();
            if (taskDetailsBean.getMimeType() != null && taskDetailsBean.getMimeType().equals("date")) {
                jsonObject.put("plannedStartDateTime", startdate);
                if (category != null && category.equalsIgnoreCase("issue")) {
                    jsonObject.put("taskCategory", "issue");
                    jsonObject.put("parentTask", webtaskId);
                } else {
                    jsonObject.put("taskCategory", "taskCreation");
                }
                jsonObject.put("plannedEndDateTime", enddate);
                jsonObject.put("isRemainderRequired", "");
                jsonObject.put("remainderDateTime", reminderdate);
            } else {

                if (category != null && category.equalsIgnoreCase("issue")) {
                    jsonObject.put("taskCategory", "issue");
                    jsonObject.put("parentTask", issueId);
                    jsonObject.put("plannedEndDateTime", "");
                    jsonObject.put("isRemainderRequired", "");
                    jsonObject.put("remainderDateTime", "");
                    jsonObject.put("plannedStartDateTime", "");
                } else if (note) {
                    jsonObject.put("taskCategory", "note");
                    jsonObject.put("plannedEndDateTime", "");
                    jsonObject.put("isRemainderRequired", "");
                    jsonObject.put("remainderDateTime", "");
                    jsonObject.put("plannedStartDateTime", "");
                } else if (chat) {
                    jsonObject.put("taskCategory", "chat");
                    jsonObject.put("parentId", task_No);
                    jsonObject.put("createdDate", dateTime);
                    jsonObject.put("taskPriority", 1);
                } else {
                    jsonObject.put("taskCategory", "taskCreation");
                    jsonObject.put("plannedEndDateTime", "");
                    jsonObject.put("isRemainderRequired", "");
                    jsonObject.put("remainderDateTime", "");
                    jsonObject.put("plannedStartDateTime", "");
                }

            }
            Log.d("taskIdW/S", "taskStatus **  " + taskStatus);
            jsonObject.put("status", taskStatus);
            jsonObject.put("signalId", taskDetailsBean.getSignalid());
            JSONArray listpostfiles_object = new JSONArray();
            JSONObject jsonObject2 = new JSONObject();
            JSONObject jsonObject3 = new JSONObject();
            jsonObject3.put("id", fromId);
            jsonObject2.put("user", jsonObject3);
            switch (taskDetailsBean.getMimeType().toLowerCase().trim()) {
                case "image":
                    jsonObject2.put("fileType", "image");
                    jsonObject2.put("fileContent", encodeTobase64(BitmapFactory.decodeFile(taskDetailsBean.getTaskDescription())));
                    jsonObject2.put("taskFileExt", "jpg");
                    break;
                case "video":
                    jsonObject2.put("fileType", "video");
                    Log.i("task", "Video uploaded" + taskDetailsBean.getTaskDescription());
                    jsonObject2.put("fileContent", encodeAudioVideoToBase64(taskDetailsBean.getTaskDescription()));
                    jsonObject2.put("taskFileExt", "mp4");
                    break;
                case "audio":
                    jsonObject2.put("fileType", "audio");
                    jsonObject2.put("fileContent", encodeAudioVideoToBase64(taskDetailsBean.getTaskDescription()));
                    jsonObject2.put("taskFileExt", "mp3");
                    break;
                case "document":
                    String ext = taskDetailsBean.getTaskDescription().substring(taskDetailsBean.getTaskDescription().lastIndexOf(".") + 1, taskDetailsBean.getTaskDescription().length());
                    Log.i("task", "extension" + ext);
                    jsonObject2.put("fileType", taskDetailsBean.getMimeType());
                    jsonObject2.put("fileContent", encodeFileToBase64Binary(taskDetailsBean.getTaskDescription()));
                    jsonObject2.put("taskFileExt", ext);
                    break;
                case "text":
                    jsonObject2.put("fileType", "text");
                    jsonObject2.put("description", taskDetailsBean.getTaskDescription());
                    break;
                case "textfile":
                    String extention = taskDetailsBean.getTaskDescription().substring(taskDetailsBean.getTaskDescription().lastIndexOf(".") + 1, taskDetailsBean.getTaskDescription().length());
                    Log.i("task", "extension" + extention);
                    jsonObject2.put("fileType", taskDetailsBean.getMimeType());
                    jsonObject2.put("fileContent", encodeFileToBase64Binary(taskDetailsBean.getTaskDescription()));
                    jsonObject2.put("taskFileExt", extention);
                    break;
            }
            listpostfiles_object.put(0, jsonObject2);
            jsonObject.put("listTaskFiles", listpostfiles_object);
            Log.i("Task", "Task--->>>" + jsonObject);
            Appreference.jsonRequestSender.taskEntry(EnumJsonWebservicename.taskEntry, jsonObject, taskDetailsBean, this);
            showprogress();
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "taskIdWebservice() Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void refresh() {
        try {
            handler.post(new Runnable() {
                @Override
                public void run() {
                    if (medialistadapter != null)
                        medialistadapter.notifyDataSetChanged();
                    Log.i("conv123", "Refresh medialistadapter done-----------");
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "refresh() Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void EscalationMethod(TaskDetailsBean detailsBean, View view, final Context adapter_context, TaskDetailsBean str1) {

        try {
            Log.i("taskConversation", "from bean task" + detailsBean.getTaskDescription());
            if (str1.getTaskDescription().contains("Add observer")) {
                Log.i("taskConversation", "from bean task");
                final TaskDetailsBean taskDetailsBean_1 = detailsBean;
                //        setTaskHistory_StaticVariables(taskDetailsBean_1);
                Log.d("SchedulerObserver", "Task  == " + taskDetailsBean_1.getTaskReceiver());
                Log.d("SchedulerObserver", "Task remover == " + taskDetailsBean_1.getTaskDescription());
                Log.d("SchedulerObserver", "Task projectId == " + taskDetailsBean_1.getProjectId());
                taskDetailsBean_1.setSubType("normal");
                taskDetailsBean_1.setReminderQuote("");
                taskDetailsBean_1.setServerFileName("");
                escalationObserverList(taskDetailsBean_1);

                Log.d("task", "escalate_observers notification item click event " + escalate_observers);
            } else if (str1.getTaskDescription().contains("Buzz")) {
                Log.i("taskConversation", "from bean task");
                final TaskDetailsBean taskDetailsBean_2 = detailsBean;
                Log.d("SchedulerBuzz", "TaskReceiver  == " + taskDetailsBean_2.getTaskReceiver());
                Log.d("SchedulerBuzz", "Task Remark == " + taskDetailsBean_2.getRemark());
                Log.d("SchedulerBuzz", "Task remover == " + taskDetailsBean_2.getTaskDescription());
                if (taskDetailsBean_2.getTaskDescription() != null && taskDetailsBean_2.getTaskDescription().contains(",")) {

                } else {
                    listOfObservers.add(taskDetailsBean_2.getTaskDescription());
                }
                taskDetailsBean_2.setTaskDescription(taskDetailsBean_2.getRemark());
                taskDetailsBean_2.setRemark("");
                taskDetailsBean_2.setReminderQuote("");
                taskOverdueMessage(taskDetailsBean_2, "text", taskDetailsBean_2.getTaskStatus(), 1);
                Log.d("task", "escalate_observers notification item click event " + escalate_observers);
            } else if (str1.getTaskDescription().contains("Aband")) {
                Log.i("taskConversation", "from bean task");
                final TaskDetailsBean taskDetailsBean_3 = detailsBean;
                Log.d("SchedulerAband", "TaskReceiver  == " + taskDetailsBean_3.getTaskReceiver());
                Log.d("SchedulerAband", "Task Remark == " + taskDetailsBean_3.getRemark());
                Log.d("SchedulerAband", "Task remover == " + taskDetailsBean_3.getTaskDescription());
//                    if (taskDetailsBean_3.getTaskDescription() != null && taskDetailsBean_3.getTaskDescription().contains(",")) {
//
//                    } else {
//                        listOfObservers.add(taskDetailsBean_3.getTaskDescription());
//                    }
//                    taskDetailsBean_3.setTaskDescription(taskDetailsBean_3.getRemark());
                taskDetailsBean_3.setRemark("");
                taskDetailsBean_3.setReminderQuote("");
                taskDetailsBean_3.setFromUserName(Appreference.loginuserdetails.getUsername());
                taskDetailsBean_3.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
                taskDetailsBean_3.setToUserName(toUserName);
                taskDetailsBean_3.setToUserId(String.valueOf(toUserId));
                taskDetailsBean_3.setSubType("normal");
                taskOverdueMessage(taskDetailsBean_3, "text", taskDetailsBean_3.getTaskStatus(), 0);
                AbandTask(taskDetailsBean_3);
                Log.d("task", "escalate_observers notification item click event " + escalate_observers);
            } else if (str1.getTaskDescription().contains("Audio Conference")) {
                String call_receiver_name = VideoCallDataBase.getDB(context).getProjectParentTaskId("select taskDescription from taskDetailsinfo where taskId='" + detailsBean.getTaskId() + "' and customSetId='" + detailsBean.getCustomSetId() + "' and taskTagName='To'");

                callmembers.clear();
                if (!callmembers.contains(call_receiver_name))
                    callmembers.add(call_receiver_name);
                MainActivity.isAudioCall = true;
                Appreference.broadcast_call = false;
                showprogress();
                check_call = false;
                escalation = true;
                escalation_to_users = call_receiver_name;
                ArrayList<Integer> group_list_id = new ArrayList<Integer>();
                group_list_id.add(VideoCallDataBase.getDB(context).getUserid(call_receiver_name));
                if (group_list_id.size() > 0) {
                    callNotification(group_list_id, Appreference.loginuserdetails.getId());
                    Appreference.broadcast_call = false;
                }
            } else if (str1.getTaskDescription().contains("Reassign")) {
                Log.i("taskConversation", "from bean task");
                final TaskDetailsBean intenttaskDetailsBean1 = detailsBean;
                //            setTaskHistory_StaticVariables(intenttaskDetailsBean1);
                Log.d("SchedularReAssign", "Task removered user == " + intenttaskDetailsBean1.getTaskReceiver());
                Log.d("SchedularReAssign", "Task added user == " + intenttaskDetailsBean1.getTaskDescription());
                submitClickEvent(intenttaskDetailsBean1);
                intenttaskDetailsBean1.setSubType("normal");
                intenttaskDetailsBean1.setReminderQuote("");
                intenttaskDetailsBean1.setServerFileName("");
                taskReassign(intenttaskDetailsBean1, intenttaskDetailsBean1.getTaskReceiver(), intenttaskDetailsBean1.getTaskDescription(), 2);
                Log.d("task", "after notify press toUserId  list item click event " + toUserId);
            }
            for (int i = 0; i < taskList.size(); i++) {
                if (taskList.get(i).getSignalid() != null && str1.getSignalid() != null &&
                        taskList.get(i).getSignalid().equalsIgnoreCase(str1.getSignalid())) {
                    taskList.get(i).setMsg_status(11);
                    Log.i("task", "Read status if " + str1.getRead_status());
                }
                Log.i("task", "Read status else " + str1.getRead_status());
            }
            refresh();
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "EscalationMethod Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void timerstop() {
        try {
            if (isRem_time) {
                Log.i("Precentage", "finish11" + percentage);
                counter.cancel();
                reminingtime.setVisibility(View.GONE);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "timerstop Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void EstimTimerstop() {
        try {
            if (isRem_time) {
                Log.i("estim123", "EstimTimerstop isRem_time===>" + isRem_time);
                estimCounter.cancel();
                estimated_timer_tv.setVisibility(View.GONE);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "timerstop Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void firstmmfile(String mimetype, String mediatype) {

        try {
            if (subType == null && subType.equalsIgnoreCase(null) && subType.equalsIgnoreCase("")) {
                subType = "normal";
            } else if (subType != null && !subType.equalsIgnoreCase("taskDescription")) {
                subType = "normal";
            }
            if (isTaskName) {
                is_mmfile = true;
                if (des.getText().toString().trim().length() > 0) {
                    taskName = des.getText().toString();
                } else {
                    if (!template && !note) {
                        taskName = "New Task";
                    } else if (note) {
                        taskName = "New Note";
                    } else if (chat) {
                        taskName = "New Chat";
                    } else {
                        taskName = "New Template";
                    }
                }
                String sig_id = Utility.getSessionID();
                sendMessage(taskName, null, "text", null, "", sig_id, null);
                des.setText("");
            } else {
                String sig_id = Utility.getSessionID();
                PercentageWebService(mimetype, strIPath, mediatype, sig_id, 0);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "firstmmfile Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void refreshListViewCache() {
        try {
            handler.post(new Runnable() {
                @Override
                public void run() {
                    medialistadapter.initCacheBitmap();
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "refreshListViewCache Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void gettaskwebservice() {
        try {
            Log.i("getTask123", "gettaskwebservice Method*************");
            if (isNetworkAvailable()) {
                showprogressforpriority("sync task...");
                Log.i("gettask", "get task webservice " + webtaskId);
                List<NameValuePair> nameValuePairs1 = new ArrayList<NameValuePair>(1);
                nameValuePairs1.add(new BasicNameValuePair("taskId", webtaskId));
                Appreference.jsonRequestSender.getTask(EnumJsonWebservicename.getTask, nameValuePairs1, NewTaskConversation.this);
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "gettaskwebservice Exception : " + e.getMessage(), "WARN", null);
        }
    }

    // insert and update values in table for reassign task
    public void taskReassign(TaskDetailsBean taskDetailsBean, String removeUser, String newReceiver, int isProject) {
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String dateTime = dateFormat.format(new Date());
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            String dateforrow = dateFormat.format(new Date());
            tasktime = dateTime;
            tasktime = tasktime.split(" ")[1];
            Log.i("task", "tasktime" + tasktime);
            Log.i("UTC", "sendMessage utc time" + dateforrow);
            Log.i("time", "value");
            taskUTCtime = dateforrow;
            taskDetailsBean.setRead_status(0);
            taskDetailsBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
            taskDetailsBean.setFromUserName(Appreference.loginuserdetails.getUsername());
            taskDetailsBean.setSendStatus("0");
            taskDetailsBean.setWs_send("1");
            taskDetailsBean.setMsg_status(0);
            taskDetailsBean.setTaskUTCDateTime(dateforrow);
            taskDetailsBean.setDateTime(dateTime);
            taskDetailsBean.setTasktime(tasktime);
            taskDetailsBean.setTaskUTCTime(taskUTCtime);
            taskDetailsBean.setCustomTagVisible(false);
//        taskDetailsBean.setToUserName(removeUser);
            taskDetailsBean.setTaskReceiver(newReceiver);
            if (note) {
                taskDetailsBean.setTaskStatus("note");
                taskDetailsBean.setCatagory("note");
            }
            String reassignUser = VideoCallDataBase.getDB(context).getname(taskDetailsBean.getTaskReceiver());
            if (isProject == 0) {
                taskDetailsBean.setTaskDescription("Task Reassigned to " + reassignUser);
            } else {
                taskDetailsBean.setTaskDescription("Task Assigned to " + reassignUser);
            }
            if (taskDetailsBean.getSignalid() == null || taskDetailsBean.getSignalid().trim().equals("")) {
                taskDetailsBean.setSignalid(Utility.getSessionID());
            }
            if (!listOfObservers.contains(removeUser)) {
                listOfObservers.add(removeUser);
            }
            Log.i("taskconversation", "Reassign task removed user " + removeUser + " " + listOfObservers);
            taskDetailsBean.setCustomTagVisible(true);
            taskDetailsBean.setTaskReceiver(newReceiver);
            taskDetailsBean.setToUserName(taskDetailsBean.getTaskReceiver());
            taskDetailsBean.setToUserId(dataBase.getProjectParentTaskId("select userid from contact where username = '" + taskDetailsBean.getTaskReceiver() + "'"));
            taskDetailsBean.setMimeType("Reassign");
            taskDetailsBean.setTaskRequestType("reassignTask");
            taskDetailsBean.setSubType("reassignTask");
            if (taskDetailsBean.getCatagory() != null && taskDetailsBean.getCatagory().equalsIgnoreCase("note")) {
                if (taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(taskDetailsBean.getTaskReceiver())) {
                    taskDetailsBean.setMsg_status(1);
                }
            }
            if (taskDetailsBean.getCatagory() != null && taskDetailsBean.getCatagory().equalsIgnoreCase("note")) {
                taskDetailsBean.setCatagory("note");
            } else if (category != null && category.equalsIgnoreCase("issue")) {
                taskDetailsBean.setCatagory("issue");
            } else {
                taskDetailsBean.setCatagory("Task");
            }
            Log.i("taskconversation", "db updated projectId " + taskDetailsBean.getProjectId());
            String observer_name = VideoCallDataBase.getDB(context).getProjectParentTaskId("select taskObservers from taskHistoryInfo where taskId='" + webtaskId + "'");
            if (observer_name != null && !observer_name.equalsIgnoreCase("") && !observer_name.equalsIgnoreCase(null)) {
                taskDetailsBean.setTaskObservers(observer_name);
            }
            if (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase(null) && !taskDetailsBean.getProjectId().equalsIgnoreCase("null") && !taskDetailsBean.getProjectId().equalsIgnoreCase("")) {
                taskDetailsBean.setTaskStatus("inprogress");
                taskDetailsBean.setGroupTaskMembers(taskDetailsBean.getTaskReceiver());
                dataBase.update_Project_history(taskDetailsBean);
                Log.i("taskconversation", "db updated 2");
            } else {
                if (taskDetailsBean.getTaskType() != null && taskDetailsBean.getTaskType().equalsIgnoreCase("group")) {
                    taskDetailsBean.setTaskStatus("inprogress");
                } else if (taskDetailsBean.getOwnerOfTask() != null && taskDetailsBean.getTaskReceiver() != null && taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(taskDetailsBean.getTaskReceiver())) {
                    taskDetailsBean.setTaskStatus("inprogress");
                } else {
                    taskDetailsBean.setTaskStatus("assigned");
                }
                if (!chat)
                    dataBase.insertORupdate_TaskHistoryInfo(taskDetailsBean);
            }
            dataBase.insertORupdate_Task_history(taskDetailsBean);
            String xml1 = composeChatXML(taskDetailsBean);
            if (!listOfObservers.contains(newReceiver)) {
                listOfObservers.add(newReceiver);
            }
            String query1 = "select * from taskHistoryInfo where loginuser ='" + Appreference.loginuserdetails.getEmail() + "' and taskId='" + taskDetailsBean.getTaskId() + "' order by id";
            Log.d("TaskObserver", "get Observer query %% " + query1);
            ArrayList<TaskDetailsBean> arrayList;
            arrayList = VideoCallDataBase.getDB(context).getTaskHistoryInfo(query1);
            Log.d("TaskObserver", "Task Observer list size is == " + arrayList.size());
            if (arrayList.size() > 0) {
                TaskDetailsBean taskDetailsBean1 = arrayList.get(0);
                String taskObservers = taskDetailsBean1.getTaskObservers();
                int counter = 0;
                Log.d("TaskObserver", "2 Task Observer  == " + taskObservers);
                if (taskObservers != null) {
                    for (int i = 0; i < taskObservers.length(); i++) {
                        if (taskObservers.charAt(i) == ',') {
                            counter++;
                        }
                    }
                    ArrayList<String> listOfObservers = new ArrayList<>();
                    for (int j = 0; j < counter + 1; j++) {
                        if (counter == 0) {
                            if (Appreference.loginuserdetails.getUsername().equalsIgnoreCase(taskObservers) || newReceiver.equalsIgnoreCase(taskObservers)) {
                                listOfObservers.remove(taskObservers);
                                Log.d("TaskRemovedObserver", "Task Removed  Observer name 1 == " + taskObservers);
                            }
                        }
                        if (!Appreference.loginuserdetails.getUsername().equalsIgnoreCase(taskObservers.split(",")[j]) && !newReceiver.equalsIgnoreCase(taskObservers.split(",")[j])) {
                            if (!listOfObservers.contains(taskObservers.split(",")[j]))
                                listOfObservers.add(taskObservers.split(",")[j]);
                            Log.d("TaskObserver", "Task Observer name not in same user== " + taskObservers.split(",")[j]);
                        }
                    }
                    String name = "";
                    for (String s : listOfObservers) {
                        name = name.concat(s) + ",";
                    }
                    if (name != null && !name.equalsIgnoreCase(""))
                        name = name.substring(0, name.length() - 1);

                    VideoCallDataBase.getDB(context).updateaccept("update taskHistoryInfo set taskObservers='" + name + "' where taskId='" + taskDetailsBean.getTaskId() + "'");
                    Log.i("mainactivity", "taskObservers updated " + name);
                }
            }
            Log.i("Rassign", "values " + taskDetailsBean.getToUserId() + " " + taskDetailsBean.getToUserName());
            if (taskDetailsBean.getToUserId() != null && !taskDetailsBean.getToUserId().equalsIgnoreCase("")) {
                toUserId = Integer.parseInt(taskDetailsBean.getToUserId());
            }
            toUserName = taskDetailsBean.getToUserName();
            taskReceiver = taskDetailsBean.getToUserName();
            if (project && template) {
                VideoCallDataBase.getDB(context).updateaccept("update taskDetailsInfo set mimeType='dates' where taskid='" + taskDetailsBean.getTaskId() + "' and mimeType='date' and duration!='' and durationunit!=''");
                VideoCallDataBase.getDB(context).updateaccept("update taskDetailsInfo set taskStatus='inprogress' where taskid='" + taskDetailsBean.getTaskId() + "'");
                Log.i("Rassign", "project template updated" + taskDetailsBean.getTaskId());
            }

            Log.i("TaskConversation", " Task Reassign View listOfObservers -----><----- " + listOfObservers);
            if (taskDetailsBean.getCatagory() != null && taskDetailsBean.getCatagory().equalsIgnoreCase("note")) {
                if (!taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(taskDetailsBean.getTaskReceiver())) {
                    sendMultiInstantMessage(xml1, listOfObservers, 0);
                }
            } else {
                if (getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                    sendMultiInstantMessage(xml1, listOfObservers, 1);
                } else {
                    sendMultiInstantMessage(xml1, listOfObservers, 0);
                }
            }
            if (listOfObservers.contains(removeUser)) {
                Log.d("TaskRemovedObserver", "Task Removed  Observer name 2 == " + removeUser);
                listOfObservers.remove(removeUser);
                listObservers.remove(removeUser);
            }
            Log.i("taskconversation", "Reassign task newly added user " + newReceiver + " " + listOfObservers);
            taskList.add(taskDetailsBean);
            if (template) {
                Log.i("reassign", "istemplate==>  " + template);
                template = false;
                ownerofTasks();
                Arrow.setVisibility(View.VISIBLE);
            }
            sortTaskMessage();
            refresh();
        } catch (NumberFormatException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "taskReassign Exception : " + e.getMessage(), "WARN", null);
        } catch (Resources.NotFoundException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "taskReassign Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "taskReassign Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void taskAssign(final TaskDetailsBean taskDetailsBean, String removeUser, String newReceiver, int isProject) {
        try {
            SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
            String dateTime = dateFormat.format(new Date());
            dateFormat.setTimeZone(TimeZone.getTimeZone("UTC"));
            String dateforrow = dateFormat.format(new Date());
            tasktime = dateTime;
            tasktime = tasktime.split(" ")[1];
            Log.i("task", "tasktime" + tasktime);
            Log.i("ASE", "sendMessage utc time" + dateforrow);
            Log.i("ASE", "removeUser " + removeUser);
            Log.i("ASE", "newReceiver " + newReceiver);
            Log.i("ASE", "isProject " + isProject);
            taskUTCtime = dateforrow;
            taskDetailsBean.setRead_status(0);
            taskDetailsBean.setFromUserId(String.valueOf(Appreference.loginuserdetails.getId()));
            taskDetailsBean.setFromUserName(Appreference.loginuserdetails.getUsername());
            taskDetailsBean.setSendStatus("0");
            taskDetailsBean.setWs_send("1");
            taskDetailsBean.setMsg_status(0);
            taskDetailsBean.setTaskUTCDateTime(dateforrow);
            taskDetailsBean.setDateTime(dateTime);
            taskDetailsBean.setTasktime(tasktime);
            taskDetailsBean.setTaskUTCTime(taskUTCtime);
            taskDetailsBean.setCustomTagVisible(false);

            String reassignUser1 = "";
            Log.i("ASE", "reassignUser1 ==> " + reassignUser1);

            if (taskDetailsBean.getSignalid() == null || taskDetailsBean.getSignalid().trim().equals("")) {
                taskDetailsBean.setSignalid(Utility.getSessionID());
            }
            Log.i("ASE_NTC ", "reassignUser " + taskDetailsBean.getSignalid());
            Log.i("taskconversation", "Reassign task removed user " + removeUser + " " + listOfObservers);

            taskDetailsBean.setCustomTagVisible(true);
            Log.i("ASE", "project_toUsers " + taskDetailsBean.getTaskMemberList());
            String Mem_name = "";
            String reassignUser = "";
            project_toUsers = "";

            if (!taskDetailsBean.getTaskType().equalsIgnoreCase("Group")) {
//            reassignUser = VideoCallDataBase.getDB(context).getname(taskDetailsBean.getTaskReceiver());
                Mem_name = taskDetailsBean.getTaskReceiver();
                project_toUsers = taskDetailsBean.getTaskReceiver();
            } else if (taskDetailsBean.getTaskMemberList() != null) {
                Mem_name = taskDetailsBean.getTaskMemberList();
                project_toUsers = taskDetailsBean.getTaskMemberList();
                taskType = "group";
            }
            Log.i("ASE", "reassignUser " + reassignUser);
            Log.i("ASE", "project_toUsers ?? " + project_toUsers);
            Log.i("ASE", "Mem_name ?? " + Mem_name);

            taskDetailsBean.setTaskDescription("Task Assigned to " + Mem_name);

            if (taskDetailsBean.getTaskMemberList() != null && taskDetailsBean.getTaskMemberList().contains(",")) {
                Log.i("ASE_NTC ", "reassignUser ** ");
                taskDetailsBean.setTaskType("Group");
                taskDetailsBean.setTaskMemberList(taskDetailsBean.getTaskMemberList());
                taskDetailsBean.setToUserId("");
                taskDetailsBean.setTaskReceiver("");
            } else {
                Log.i("ASE_NTC ", "reassignUser ** ");
                taskDetailsBean.setTaskReceiver(newReceiver);
                taskDetailsBean.setToUserName(taskDetailsBean.getTaskReceiver());
                taskDetailsBean.setTaskType("individual");
                taskDetailsBean.setToUserId(dataBase.getProjectParentTaskId("select userid from contact where username = '" + taskDetailsBean.getTaskReceiver() + "'"));
            }

            taskDetailsBean.setMimeType("assigntask");
            taskDetailsBean.setTaskRequestType("normal");
            taskDetailsBean.setSubType("normal");
            taskDetailsBean.setCatagory("Task");

            Log.i("taskconversation", "db updated projectId " + taskDetailsBean.getProjectId());
            if (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase(null) && !taskDetailsBean.getProjectId().equalsIgnoreCase("null") && !taskDetailsBean.getProjectId().equalsIgnoreCase("")) {
                taskDetailsBean.setTaskStatus("Assigned");
                taskStatus = "Assigned";
                if (taskDetailsBean.getTaskMemberList() != null && taskDetailsBean.getTaskMemberList().contains(",")) {
                    taskDetailsBean.setGroupTaskMembers(taskDetailsBean.getTaskMemberList());
                } else {
                    taskDetailsBean.setGroupTaskMembers(taskDetailsBean.getTaskReceiver());
                }
                dataBase.update_Project_history(taskDetailsBean);
                Log.i("taskconversation", "db updated 2");
            }/* else {
                dataBase.insertORupdate_TaskHistoryInfo(taskDetailsBean);
            }*/
            dataBase.insertORupdate_Task_history(taskDetailsBean);
//            if (!listOfObservers.contains(newReceiver)) {
//                listOfObservers.add(newReceiver);
//            }
            Log.i("Rassign", "values " + taskDetailsBean.getToUserId() + " " + taskDetailsBean.getToUserName());
            if (taskDetailsBean.getToUserId() != null && !taskDetailsBean.getToUserId().equalsIgnoreCase("")) {
                toUserId = Integer.parseInt(taskDetailsBean.getToUserId());
            }
            if (taskDetailsBean.getToUserName() != null && !taskDetailsBean.getToUserName().equalsIgnoreCase("")) {
                toUserName = taskDetailsBean.getToUserName();
                taskReceiver = taskDetailsBean.getToUserName();
            } else {
                taskReceiver = project_toUsers;
            }
            if (project && template) {
                VideoCallDataBase.getDB(context).updateaccept("update taskDetailsInfo set mimeType='dates' where taskid='" + taskDetailsBean.getTaskId() + "' and mimeType='date' and duration!='' and durationunit!=''");
                VideoCallDataBase.getDB(context).updateaccept("update taskDetailsInfo set taskStatus='Assigned' where taskid='" + taskDetailsBean.getTaskId() + "'");
                Log.i("Rassign", "project template updated" + taskDetailsBean.getTaskId());
            }

            Log.i("TaskConversation", " Task Reassign View listOfObservers -----><----- " + listOfObservers);

            // get project total members


            final ArrayList<String> arrayList1 = new ArrayList<>();
            String projectMembers = VideoCallDataBase.getDB(context).getProjectParentTaskId("select taskMemberList from projectHistory where projectId ='" + taskDetailsBean.getProjectId() + "' and parentTaskId==taskId");

            if (projectMembers != null) {
                int counter_1 = 0;
                for (int i = 0; i < projectMembers.length(); i++) {
                    if (projectMembers.charAt(i) == ',') {
                        counter_1++;
                    }
                    Log.i("taskConversation", "project_details Task Mem's counter size is == " + counter_1);
                }
                Log.i("taskConversation", "projectBean.getFromUserName() " + projectMembers);
                for (int j = 0; j < counter_1 + 1; j++) {
                    //                Log.i("taskConversation", "project_details Task Mem's and position == " + observers.split(",")[j] + " " + j);
                    if (counter_1 == 0) {
                        if (!arrayList1.contains(projectMembers)) {
                            arrayList1.add(projectMembers);
                        }
                    } else {
                        if (!arrayList1.contains(projectMembers.split(",")[j])) {
                            arrayList1.add(projectMembers.split(",")[j]);
                        }
                    }
                }
            }
            if (!Appreference.loginuserdetails.getUsername().equalsIgnoreCase(taskDetailsBean.getOwnerOfTask())) {
                if (!arrayList1.contains(taskDetailsBean.getOwnerOfTask())) {
                    arrayList1.add(taskDetailsBean.getOwnerOfTask());
                }
            }
//            if (!Appreference.loginuserdetails.getUsername().equalsIgnoreCase(taskReceiver)) {
//                if (!arrayList1.contains(taskReceiver)) {
//                    arrayList1.add(taskReceiver);
//                }
//            }
            if (arrayList1.size() > 0) {
                listOfObservers = arrayList1;
            }
            Log.i("ASE", "arrayList1 ==> " + arrayList1.size() + " listOfObservers ==>" + listOfObservers.size());
            Log.i("observer", "listOfObservers 3* => " + listOfObservers);
            taskList.add(taskDetailsBean);
            sortTaskMessage();
            refresh();
            final String xml1 = composeChatXML(taskDetailsBean);

            int timeLimit = 2000;
            handler.postDelayed(new Runnable() {
                @Override
                public void run() {
                    if (taskDetailsBean.getCatagory() != null && taskDetailsBean.getCatagory().equalsIgnoreCase("note")) {
                        if (!taskDetailsBean.getOwnerOfTask().equalsIgnoreCase(taskDetailsBean.getTaskReceiver())) {
                            sendMultiInstantMessage(xml1, listOfObservers, 0);
                        }
                    } else {
                        if (getResources().getString(R.string.proxyua).equalsIgnoreCase("enable")) {
                            sendMultiInstantMessage(xml1, listOfObservers, 1);
                        } else {
//                sendMultiInstantMessage(xml1, listOfObservers, 0);
                            Log.i("ASE", "project total meber list size in Reassign Method is == " + arrayList1.size());
                            sendMultiInstantMessage(xml1, arrayList1, 1);
                        }
                    }
                }
            }, timeLimit);

            Log.i("taskconversation", "Reassign task newly added user " + newReceiver + " " + listOfObservers);
            assign_taskview.setVisibility(View.GONE);
            options.setVisibility(View.GONE);
            status_job.setVisibility(View.VISIBLE);

            String Query = "Select * from projectHistory where projectId ='" + projectId + "' and taskId = '" + webtaskId + "'";
            TaskDetailsBean MonthlyJobBean = VideoCallDataBase.getDB(context).getDetails_to_complete_project(Query);
            if (MonthlyJobBean.getIsActiveStatus() != null && MonthlyJobBean.getIsActiveStatus().equalsIgnoreCase("1") && !MonthlyJobBean.getIsActiveStatus().equalsIgnoreCase("null")) {
                status_job.setVisibility(View.INVISIBLE);
            }
            Appreference.webid = webtaskId;
            if (webtaskId != null) {
                appSharedpreferences.saveBoolean("syncTask" + webtaskId, true);
            }
            if (template) {
                Log.i("reassign", "istemplate==> 3 " + template);
                template = false;
                ownerofTasks();
                Arrow.setVisibility(View.VISIBLE);

            }
        } catch (NumberFormatException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "taskAssign Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "taskAssign Exception : " + e.getMessage(), "WARN", null);
        }

    }

    public void MMdownloadCompleted(final TaskDetailsBean taskDetailsBean) {
        try {
            if (taskList != null) {
                for (TaskDetailsBean detailsBean : taskList) {
                    Log.d("DownloadProgress", "Progress 1");
                    if (detailsBean.getTaskDescription() != null) {
                        Log.d("DownloadProgress", "Progress 2");
                        if (Appreference.taskMultimediaDownload.containsKey(detailsBean.getTaskDescription())) {
                            File imageFile = new File(Environment.getExternalStorageDirectory() + "/HighMessage/downloads/" + detailsBean.getTaskDescription());
                            if (imageFile.exists()) {
                                detailsBean.setShow_progress(1);
                            }
                        }
                    }
                }

            }
            Log.i("Task", "404 MMdownloadCompleted : taskList" + taskList.size());
            refresh();
            handler.post(new Runnable() {
                @Override
                public void run() {
                    medialistadapter.notifyImageThumb(taskDetailsBean);
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "MMdownloadCompleted Exception : " + e.getMessage(), "WARN", null);
        }
    }

    /*
        public void updateMessageStatus(TaskDetailsBean taskDetailsBean) {
            if (taskDetailsBean != null) {
                Log.d("TaskObserver", "Inside message recived area 3");
                for (TaskDetailsBean detailsBean : taskList) {
                    if (detailsBean.getSignalid() != null && detailsBean.getSignalid().equalsIgnoreCase(taskDetailsBean.getSignalid())) {
                        Log.i("TaskObserver", "task " + detailsBean.getMsg_status());
                        if (detailsBean.getMsg_status() <= 0) {
                            detailsBean.setMsg_status(1);
                            Log.i("TaskObserver", "task if " + detailsBean.getMsg_status());
                        }
                        break;
                    }
                    break;
                }
                refresh();
                if (down_icon != null && down_icon.getVisibility() == View.VISIBLE) {
                    if (list_all != null)
                        list_all.setTranscriptMode(AbsListView.TRANSCRIPT_MODE_DISABLED);
                } else if (list_all != null) {
                    list_all.smoothScrollToPosition(list_all.getAdapter().getCount() - 1);
                }
            }
        }
    */
    public void updateMessageStatus(TaskDetailsBean taskDetailsBean) {
        try {
            if (taskDetailsBean != null) {
                Log.d("TaskObserver", "Inside message recived area 3");
                for (TaskDetailsBean detailsBean : taskList) {
                    if (detailsBean.getSignalid() != null && detailsBean.getSignalid().equalsIgnoreCase(taskDetailsBean.getSignalid())) {
                        Log.i("TaskObserver", "task " + detailsBean.getMsg_status());
                        Log.i("TaskObserver", "getSignalid ==>  " + taskDetailsBean.getSignalid());
                        Log.i("TaskObserver", "getSignalid ==>  " + detailsBean.getSignalid());
                        if (detailsBean.getMsg_status() <= 0 && taskDetailsBean.getMsg_status() != 24) {
                            detailsBean.setMsg_status(1);
                            Log.i("TaskObserver", "task if " + detailsBean.getMsg_status());
                        } else if (taskDetailsBean.getMsg_status() == 24) {
                            detailsBean.setMsg_status(24);
                        }
                        break;
                    } else if (taskDetailsBean.getMsg_status() == 1) {
                        if (detailsBean.getMsg_status() == 24) {
                            detailsBean.setMsg_status(1);
                        }
                    }
                }
                refresh();
                if (down_icon != null && down_icon.getVisibility() == View.VISIBLE) {
                    if (list_all != null)
                        list_all.setTranscriptMode(AbsListView.TRANSCRIPT_MODE_DISABLED);
                } else if (list_all != null) {
                    list_all.smoothScrollToPosition(list_all.getAdapter().getCount() - 1);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "updateMessageStatus Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void updateUploadStatus(TaskDetailsBean taskDetailsBean) {
        try {
            if (taskDetailsBean != null) {
                Log.d("TaskObserver", "Inside message recived area 3");
                for (TaskDetailsBean detailsBean : taskList) {
                    if (detailsBean.getSignalid() != null && detailsBean.getSignalid().equalsIgnoreCase(taskDetailsBean.getSignalid())) {
                        Log.i("TaskObserver", "task " + detailsBean.getMsg_status());
                        if (detailsBean.getShow_progress() <= 0) {
                            detailsBean.setShow_progress(1);
                            Log.i("TaskObserver", "task if " + detailsBean.getShow_progress());
                        }
                        break;
                    }
                }
                refresh();
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "updateUploadStatus Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void updateTemplateStatus(TaskDetailsBean taskDetailsBean) {
        try {
            if (taskDetailsBean != null) {
                Log.d("template", "status for template ");
                VideoCallDataBase.getDB(context).updateTaskSentStatus(taskDetailsBean.getSignalid());
                for (TaskDetailsBean detailsBean : taskList) {
                    if (detailsBean.getSignalid() != null && detailsBean.getSignalid().equalsIgnoreCase(taskDetailsBean.getSignalid())) {
                        detailsBean.setMsg_status(1);
                        break;
                    }
                }
                refresh();
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "updateTemplateStatus Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void addObserverClickEvent() {
        try {
            if (subType != null && subType.equalsIgnoreCase("private")) {
                Toast.makeText(NewTaskConversation.this, "This is a Private Message.Please Change to Normal Task ", Toast.LENGTH_SHORT).show();
            } else if (taskStatus != null && !taskStatus.equalsIgnoreCase("abandoned") && !taskStatus.equalsIgnoreCase("rejected")) {
                Intent intent = new Intent(context, AddObserver.class);
                intent.putExtra("taskId", webtaskId);
                intent.putExtra("taskType", taskType);
                if (project) {
                    intent.putExtra("Project", "yes");
                    intent.putExtra("ProjectParentId", parentTaskId);
                } else {
                    intent.putExtra("Project", "no");
                    intent.putExtra("ProjectParentId", parentTaskId);
                }
                if (taskType != null && taskType.equalsIgnoreCase("Group")) {
                    if (toUserId > -1) {
                        Log.i("addobserver", "userid -->" + toUserId);
                        intent.putExtra("groupname", String.valueOf(toUserId));
                    } else {
                        Log.i("addobserver", "userid -1->" + groupname);
                        intent.putExtra("groupname", groupname);
                    }
                } else {
                    intent.putExtra("taskReceiver", taskReceiver);
                }
                startActivityForResult(intent, 101);
            } else if (taskStatus != null && taskStatus.equalsIgnoreCase("rejected")) {
                Toast.makeText(context, "Unable to Add Observer task is in Rejected state ", Toast.LENGTH_SHORT).show();
            } else {
                Toast.makeText(context, "Unable to Add Observer task is in abandoned state ", Toast.LENGTH_SHORT).show();
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "addObserverClickEvent Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void addTaskReassignClickEvent() {
        try {
            Intent intent = new Intent(context, AddTaskReassign.class);
            intent.putExtra("taskId", webtaskId);
            intent.putExtra("taskType", taskType);
            intent.putExtra("Taker", "Assigned Task");
            intent.putExtra("jobcodeno", JobCodeNo);
            intent.putExtra("Clickposition", clickPosition);
            intent.putExtra("activitycode", ActivityCode);
            if (isProjectFromOracle)
                intent.putExtra("isProjectFromOracle1", true);
            if (Self_assign)
                intent.putExtra("selfAssign", true);

            if (taskType != null && taskType.equalsIgnoreCase("Group")) {
                TaskDetailsBean taskDetailsBean = new TaskDetailsBean();
                taskDetailsBean.setOwnerOfTask(ownerOfTask);
                taskDetailsBean.setTaskReceiver(taskReceiver);
                taskDetailsBean.setTaskName(taskName);
                taskDetailsBean.setTaskNo(task_No);
                taskDetailsBean.setTaskType(taskType);
                taskDetailsBean.setCatagory(category);
                taskDetailsBean.setTaskId(webtaskId);
                taskDetailsBean.setTaskStatus(taskStatus);
                taskDetailsBean.setParentTaskId(OracleParentTaskId);

                if (toUserId > -1) {
                    intent.putExtra("groupname", String.valueOf(toUserId));
                } else {
                    intent.putExtra("groupname", groupname);
                }
                if (project) {
                    intent.putExtra("isProject", "Yes");
                    taskDetailsBean.setProjectId(projectId);
                } else {
                    intent.putExtra("isProject", "No");
                }
                intent.putExtra("taskReceiver", taskReceiver);
                intent.putExtra("taskBean", taskDetailsBean);
            } else {
                Log.i("taskConversation", "projectId reassign else");
                TaskDetailsBean taskDetailsBean = new TaskDetailsBean();
                taskDetailsBean.setOwnerOfTask(ownerOfTask);
                taskDetailsBean.setTaskReceiver(taskReceiver);
                taskDetailsBean.setTaskName(taskName);
                taskDetailsBean.setTaskNo(task_No);
                taskDetailsBean.setTaskType(taskType);
                taskDetailsBean.setCatagory(category);
                taskDetailsBean.setTaskId(webtaskId);
                taskDetailsBean.setTaskStatus(taskStatus);
                taskDetailsBean.setParentTaskId(OracleParentTaskId);
                if (project) {
                    taskDetailsBean.setProjectId(projectId);
                    intent.putExtra("isProject", "Yes");
                } else {
                    intent.putExtra("isProject", "No");
                }
                intent.putExtra("taskReceiver", taskReceiver);
                if (taskDetailsBean != null)
                    Log.i("ws123", "Bean============4411" + taskDetailsBean.getParentTaskId() + "getProjectId=========>" + taskDetailsBean.getProjectId());
                else
                    Log.i("ws123", "Bean null============> 4411");

                intent.putExtra("taskBean", taskDetailsBean);
                Log.i("taskConversation", "projectId " + taskDetailsBean.getProjectId());
            }
            startActivityForResult(intent, 105);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "addTaskReassignClickEvent Exception " + e.getMessage(), "WARN", null);
        }
    }

    public void makeCall(boolean audiocall) {
        try {
            ArrayList<String> users = new ArrayList<String>();
            if (escalation) {
                escalation = false;
                List<String> grouplist = new ArrayList<>();
                sendConferencecallInfomessage(true);
                if (escalation_to_users != null) {
                    if (escalation_to_users.contains(",")) {
                        grouplist = new ArrayList<String>(Arrays.asList(escalation_to_users.split(",")));
                    } else {
                        grouplist.add(escalation_to_users);
                    }
                } else {
                    grouplist = VideoCallDataBase.getDB(context).selectGroupmembers("select * from groupmember where groupid= '" + toUserId + "'", "username");
                }
                if (grouplist != null && grouplist.size() > 4) {
                    Toast.makeText(context, "Call Not allowed for More than 4 members", Toast.LENGTH_LONG).show();
                } else {
                    for (String buddyName : grouplist) {
                        if (!Appreference.loginuserdetails.getUsername().equalsIgnoreCase(buddyName)) {
                            String buddy_uri = "sip:" + buddyName + "@" + getResources().getString(R.string.server_ip);
                            MyCall call = new MyCall(MainActivity.account, -1);
                            CallOpParam prm = new CallOpParam(true);
                            CallSetting opt = prm.getOpt();
                            opt.setAudioCount(1);
                            if (audiocall) {
                                opt.setVideoCount(0);
                                MainActivity.isAudioCall = true;
                            } else {
                                opt.setVideoCount(1);
                                MainActivity.isAudioCall = false;
                            }
                            Log.i("SipVideo", "make group call : " + buddy_uri);
                            try {
                                call.makeCall(buddy_uri, prm);
                            } catch (Exception e) {
                                e.printStackTrace();
                                Appreference.printLog("NewTaskConversation", "makeCall Exception : " + e.getMessage(), "WARN", null);
                                Log.i("SipVideo", " delete: b21");
                                call.delete();
                                //                        return;
                            }
                            MainActivity.currentCallArrayList.add(call);
                            MainActivity.currentCall = call;
                            Log.i("SipVideo", "ContactFragment Make Call MainActivity.currentCall");
                        }
                    }
                }
            } else {
                if (taskType != null && taskType.equalsIgnoreCase("Group")) {
                    if (project) {
                        ArrayList<String> project_memberlist = VideoCallDataBase.getDB(context).selectGroupmembers("select * from projectHistory where taskId= '" + toUserId + "'", "taskMemberList");
                        if (!project_memberlist.contains(ownerOfTask) && !Appreference.loginuserdetails.getUsername().equalsIgnoreCase(ownerOfTask)) {
                            project_memberlist.add(ownerOfTask);
                            Log.i("ProjectCall", "project_memberlist !!!! : " + project_memberlist);
                        }
                        for (String user : project_memberlist) {
                            if (user != null) {
                                if (user.contains(",")) {
                                    String[] user_array = user.split(",");
                                    for (String us : user_array) {
                                        if (!us.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                            users.add(us);
                                        }
                                    }
                                } else {
                                    if (!user.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                                        users.add(user);
                                    }
                                }
                            }

                        }
                    } else {
                        users = VideoCallDataBase.getDB(context).getGroupMembers(String.valueOf(toUserId));
                    }
                    sendConferencecallInfomessage(true);
                } else {
                    /*code added forGroupAdmin Observer Start*/
                    String groupAdmin_observer = getGroupAdmin_observer_DB();
                    if (groupAdmin_observer != null && !groupAdmin_observer.equalsIgnoreCase("") && !groupAdmin_observer.equalsIgnoreCase(null)
                            && groupAdmin_observer.contains(",")) {
                        String members_groupAdmin[] = groupAdmin_observer.split(",");
                        for (int i = 0; i < members_groupAdmin.length; i++) {
                            if (listOfObservers.contains(members_groupAdmin[i])) {
                                listOfObservers.remove(members_groupAdmin[i]);
                            }
                        }
                    }


                    /*code added forGroupAdmin Observer End*/
                    Log.i("observer123", "*******call listof observers***********===>" + listOfObservers);

                    for (int i = 0; i < listOfObservers.size(); i++) {
                        if (listOfObservers.get(i) != null && !listOfObservers.get(i).equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) &&
                                !listOfObservers.get(i).trim().equalsIgnoreCase("") && listOfObservers.get(i).trim().contains("_")) {
                            users.add(listOfObservers.get(i));
                        }
                    }
                    if (users.size() == 0) {
                        showToast("Call Not allowed for ME");
                    } else if (users.size() == 1) {
//                users.add(toUserName);
                        sendConferencecallInfomessage(false);
                    } else {
                        sendConferencecallInfomessage(true);
                    }
                }

                if (users != null && users.size() > 4) {
                    showToast("Call Not allowed for More than 4 members");
                } else {
                    for (String user : users) {
                        String buddy_uri = "sip:" + user + "@" + getResources().getString(R.string.server_ip);
                        MyCall call = new MyCall(MainActivity.account, -1);
                        CallOpParam prm = new CallOpParam(true);
                        CallSetting opt = prm.getOpt();
                        opt.setAudioCount(1);
                        if (audiocall) {
                            opt.setVideoCount(0);
                            MainActivity.isAudioCall = true;
                        } else {
                            opt.setVideoCount(1);
                            MainActivity.isAudioCall = false;
                        }
                        Log.i("SipVideo", "make call : " + buddy_uri);
                        try {
                            call.makeCall(buddy_uri, prm);
                        } catch (Exception e) {
                            e.printStackTrace();
                            Appreference.printLog("NewTaskConversation", "makeCall call.makeCall Exception : " + e.getMessage(), "WARN", null);
                            Log.i("SipVideo", " delete: b22");
                            call.delete();
                            return;
                        }
                        MainActivity.currentCallArrayList.add(call);
                        MainActivity.currentCall = call;
                        Log.i("SipVideo", "ContactFragment Make Call MainActivity.currentCall");
                    }
                }
            }
            if (MainActivity.currentCallArrayList.size() > 0) {
                Appreference.play_call_dial_tone = true;
                showCallActivity();
            }
        } catch (Resources.NotFoundException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "makeCall Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "makeCall Exception : " + e.getMessage(), "WARN", null);
        }

    }

    private void showCallActivity() {
        try {
            Log.i("SipVideo", "showCallActivity method");
            Intent intent = new Intent(context, CallActivity.class);
            intent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
            String par_name = Appreference.loginuserdetails.getFirstName() + " " + Appreference.loginuserdetails.getLastName();
            intent.putExtra("host", par_name);
            startActivity(intent);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "showCallActivity Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void showNetworkStateUI() {
        try {
            if (ll_networkUI != null && tv_networkstate != null) {
                if (Appreference.networkState) {
                    if (Appreference.sipRegistrationState) {
                    } else if (!Appreference.sipRegistrationState) {
                        ll_networkUI.setVisibility(View.VISIBLE);
                        ll_networkUI.setBackgroundColor(getResources().getColor(R.color.orange));
                        tv_networkstate.setText("Connecting...");
                    }
                } else if (!Appreference.networkState) {
                    ll_networkUI.setVisibility(View.VISIBLE);
                    ll_networkUI.setBackgroundColor(getResources().getColor(R.color.red_color));
                    tv_networkstate.setText("No Internet Connection");
                }
            }
        } catch (Resources.NotFoundException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "showNetworkStateUI Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "showNetworkStateUI Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void showNetWorkConnectedState() {
        try {
            handler.post(new Runnable() {
                @Override
                public void run() {
                    if (ll_networkUI != null && tv_networkstate != null) {
                        Log.i("network", "ll_networkUI!=null");
                        if (Appreference.networkState) {
                            Log.i("network", "Appreference.networkState");
                            if (Appreference.sipRegistrationState) {
                                Log.i("network", "Appreference.sipRegistrationState");
                                ll_networkUI.setVisibility(View.VISIBLE);
                                ll_networkUI.setBackgroundColor(getResources().getColor(R.color.connected));
                                tv_networkstate.setText("Connected");
                                handler.postDelayed(new Runnable() {
                                    @Override
                                    public void run() {
                                        ll_networkUI.setVisibility(View.GONE);
                                    }
                                }, 2000);
                            }
                        }
                    }
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "showNetWorkConnectedState Exception : " + e.getMessage(), "WARN", null);
        }
    }

    /**
     * This Method
     * Return TaskObserver list
     */
    public void getTaskObservers() {
        try {
            String query1 = "select * from taskHistoryInfo where loginuser ='" + Appreference.loginuserdetails.getEmail() + "' and taskId='" + webtaskId + "' order by id";
            Log.d("TaskObserver", "get Observer query $$ " + query1);
            ArrayList<TaskDetailsBean> arrayList;
            arrayList = VideoCallDataBase.getDB(context).getTaskHistoryInfo(query1);
            Log.d("TaskObserver", "Task Observer list size is == " + arrayList.size());
            if (arrayList.size() > 0) {
                TaskDetailsBean taskDetailsBean = arrayList.get(0);
                String taskObservers = taskDetailsBean.getTaskObservers();
                Log.d("TaskObserver", " 1 Task Observer  == " + taskObservers);
                if (taskObservers != null) {
                    boolean check = false;
                    if (taskObservers.contains(Appreference.loginuserdetails.getUsername())) {
                        check = false;
                    } else if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                        check = false;
                    } else
                        check = !taskReceiver.equalsIgnoreCase(Appreference.loginuserdetails.getUsername());

                    int counter = 0;
                    for (int i = 0; i < taskObservers.length(); i++) {
                        if (taskObservers.charAt(i) == ',') {
                            counter++;
                        }
                    }
                    Log.d("TaskObserver", "Task Observer counter size is == " + counter);
                    for (int j = 0; j < counter + 1; j++) {
                        if (taskObservers != null && !Appreference.loginuserdetails.getUsername().equalsIgnoreCase(taskObservers.split(",")[j])) {
                            if (!listOfObservers.contains(taskObservers.split(",")[j]))
                                listOfObservers.add(taskObservers.split(",")[j]);
                            Log.d("TaskObserver", "Task Observer name not in same user== " + taskObservers.split(",")[j]);
                        } else {
                            if (!toUserName.equalsIgnoreCase(ownerOfTask)) {
                                if (!listOfObservers.contains(ownerOfTask)) {
                                    listOfObservers.add(ownerOfTask);
                                }
                            }
                            if (!toUserName.equalsIgnoreCase(taskReceiver)) {
                                if (!listOfObservers.contains(taskReceiver)) {
                                    listOfObservers.add(taskReceiver);
                                }
                            }
                        }
                    }
                    if (taskReceiver != null && !taskReceiver.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                        boolean ch = false;
                        for (int i = 0; i < listOfObservers.size(); i++) {
                            String name = listOfObservers.get(i);
                            if (name.equalsIgnoreCase(taskReceiver)) {
                                ch = true;
                                break;
                            }
                        }
                        if (!ch)
                            if (!listOfObservers.contains(taskReceiver))
                                listOfObservers.add(taskReceiver);
                    }
                    if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername()) || taskReceiver != null && taskReceiver.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                        if (!ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                            Log.i("updaeicon", "recviver 0 ");
                            addObserver.setVisibility(View.GONE);
                            if (!chat)
                                update.setVisibility(View.VISIBLE);
                        } else {
                            Log.i("updaeicon", "owner 0 ");
                            if ((taskType != null && !taskType.equalsIgnoreCase("Group")) && !chat && !isProjectFromOracle) {
                                Log.d("chat", "visible 3");
                                addObserver.setVisibility(View.VISIBLE);
                            } else {
                                addObserver.setVisibility(View.GONE);
                            }
                            if (!chat)
                                update.setVisibility(View.VISIBLE);
                        }
                    } else {
                        Log.i("updaeicon", "observer 0 ");
                        if (taskType != null && taskType.equalsIgnoreCase("Group")) {
                            if (!chat)
                                update.setVisibility(View.VISIBLE);
                            addObserver.setVisibility(View.GONE);
                        } else {
                            update.setVisibility(View.GONE);
                            addObserver.setVisibility(View.GONE);
                        }
                    }

                    for (String ob : listOfObservers) {
                        Log.i("TaskObserver", "observer12" + ob);
                    }
                    if (check) {
                        icons.setVisibility(View.VISIBLE);
                        linear1.setVisibility(View.VISIBLE);
                        Log.i("observer", "list clear 14");
                        listOfObservers.clear();
                        listObservers.clear();
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "getTaskObservers Exception : " + e.getMessage(), "WARN", null);
        }
    }

    /**
     * Insert DB Check with signal Id,If signal id are same we are not insert in the DB
     */
    public void dbInsertCheckSignalId(TaskDetailsBean taskDetailsBean) {
        try {
            String query = "select * from taskDetailsInfo where  (loginuser='" + Appreference.loginuserdetails.getEmail() + "') and (taskId='" + taskDetailsBean.getTaskId() + "');";
            ArrayList<TaskDetailsBean> beanArrayList = VideoCallDataBase.getDB(context).getTaskHistory(query);
            for (TaskDetailsBean taskDetailsBean1 : beanArrayList) {
                if (taskDetailsBean1.getSignalid().equalsIgnoreCase(taskDetailsBean.getSignalid())) {
                    isSignalidSame = true;
                    break;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "dbInsertCheckSignalId Exception : " + e.getMessage(), "WARN", null);
        }
    }

    /**
     * This Method
     * Return GroupTaskListMember list
     */

    public void getGroupTaskMembers() {
        try {
            String query1 = "select * from taskHistoryInfo where loginuser ='" + Appreference.loginuserdetails.getEmail() + "' and taskId='" + webtaskId + "' and (taskType = 'group' or taskType = 'Group')";
            Log.d("GroupTask", "get GroupMember query  " + query1);
            ArrayList<TaskDetailsBean> arrayList;
            arrayList = VideoCallDataBase.getDB(context).getTaskHistoryInfo(query1);
            Log.d("GroupTask", "Task group Member list size is == " + arrayList.size());
            if (arrayList.size() > 0) {
                TaskDetailsBean taskDetailsBean = arrayList.get(0);
                String groupTaskMembers = taskDetailsBean.getGroupTaskMembers();
                Log.d("GroupTask", "Task Group Member names  == " + groupTaskMembers);
                Log.d("GroupTask", "Task Group Member description  == " + taskDetailsBean.getTaskDescription());
                if (groupTaskMembers != null) {
                    int counter = 0;
                    for (int i = 0; i < groupTaskMembers.length(); i++) {
                        if (groupTaskMembers.charAt(i) == ',') {
                            counter++;
                        }
                    }
                    Log.d("GroupTask", "Task GroupTask counter size is == " + counter);
                    for (int j = 0; j < counter + 1; j++) {
                        if (!Appreference.loginuserdetails.getUsername().equalsIgnoreCase(groupTaskMembers.split(",")[j])) {
                            if (!listOfObservers.contains(groupTaskMembers.split(",")[j]))
                                listOfObservers.add(groupTaskMembers.split(",")[j]);
                            Log.d("GroupTask", "Task GroupTask name not in same user== " + groupTaskMembers.split(",")[j]);
                        } else {
                            if (!toUserName.equalsIgnoreCase(ownerOfTask)) {
                                if (!listOfObservers.contains(ownerOfTask)) {
                                    listOfObservers.add(ownerOfTask);
                                }
                            }
                            if (!toUserName.equalsIgnoreCase(taskReceiver)) {
                                if (!listOfObservers.contains(taskReceiver)) {
                                    listOfObservers.add(taskReceiver);
                                }
                            }
                        }
                    }
                }
                for (String name : listOfObservers) {
                    Log.i("taskconversation", "listofabservers" + name);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "getGroupTaskMembers Exception : " + e.getMessage(), "WARN", null);
        }
    }
    /**
     * Insert DB Check with signal Id,If signal id are same we are not insert in the DB
     */
    /**
     * Template creation to new task conversation
     */
    public void TemplateSelect(int position) {
        try {
            TaskDetailsBean taskDetailsBean = taskList.get(position);
            Log.i("Template", "listposition" + position);
            if (tem && !taskDetailsBean.getMimeType().equalsIgnoreCase("date") && !taskDetailsBean.getTaskDescription().contains("Completed Percentage :")) {
                if (taskDetailsBean.isSelected()) {
                    taskDetailsBean.setSelect(false);
                    Log.i("Template", "description===>" + taskDetailsBean.getTaskDescription());
                    Log.d("Template", "selected======>" + taskDetailsBean.isSelected());
                } else {
                    taskDetailsBean.setSelect(true);
                    Log.i("Template", "description=>" + taskDetailsBean.getTaskDescription());
                    Log.d("Template", "selected====>" + taskDetailsBean.isSelected());
                }
            }
            refresh();
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "TemplateSelect Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void UnreadChatCountShow() {
        try {
            if (down_icon.getVisibility() == View.VISIBLE) {
                Log.i("scroll", "UnreadChatCountShow method dwon_icon visible && before  increment show_unreadCount-->" + show_unreadCount);
                ++show_unreadCount;
                Log.i("scroll", "UnreadChatCountShow method after  increment show_unreadCount-->" + show_unreadCount);
                if (show_unreadCount > 0) {
                    handler.post(new Runnable() {
                        @Override
                        public void run() {
                            Log.i("scroll", "UnreadChatCountShow method show_unreadCount>0");
                            tv_unreadCountScroll.setText(String.valueOf(show_unreadCount));
                            tv_unreadCountScroll.setVisibility(View.VISIBLE);
                        }
                    });
                }
            } else {
                show_unreadCount = 0;
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "UnreadChatCountShow Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void listLastposition() {
        try {
            handler.post(new Runnable() {
                @Override
                public void run() {
                    if (list_all != null)
                        list_all.setSelection(list_all.getAdapter().getCount() - 1);
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "listLastposition Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void ClosedWebService(TaskDetailsBean taskDetailsBean) {
        try {
            JSONObject jsonObject = new JSONObject();
            jsonObject.put("id", taskDetailsBean.getTaskId());
            JSONObject jsonObject1 = new JSONObject();
            jsonObject1.put("id", taskDetailsBean.getFromUserId());
            jsonObject.put("from", jsonObject1);
            jsonObject.put("to", taskDetailsBean.getToUserId());
            jsonObject.put("plannedEndDateTime", taskDetailsBean.getUtcplannedEndDateTime());
            jsonObject.put("isRemainderRequired", taskDetailsBean.getIsRemainderRequired());
            jsonObject.put("remainderDateTime", taskDetailsBean.getUtcPlannedStartDateTime());
            jsonObject.put("dateFrequency", null);
            jsonObject.put("timeFrequency", null);
            jsonObject.put("taskPriority", 1);
            jsonObject.put("status", "assigned");
            jsonObject.put("completedPercentage", taskDetailsBean.getCompletedPercentage());
            jsonObject.put("remark", "normal");
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "ClosedWebService Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public void TimeupAlert_Show() {
        String query = "select status from projectStatus where projectId='" + projectId + "' and userId='" + Appreference.loginuserdetails.getId() + "' and taskId= '" + webtaskId + "'";
        int timer_Alert_by_current_status = VideoCallDataBase.getDB(context).getCurrentStatus(query);
        String StatusTask;
        if (timer_Alert_by_current_status == 1 || timer_Alert_by_current_status == 3) {
            String alertQuery = "select taskPlannedLatestEndDate from taskDetailsInfo where (taskStatus='Hold' or taskStatus='Paused') and projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
            String isAlertShown = VideoCallDataBase.getDB(context).getAlertShownstatus(alertQuery, "taskPlannedLatestEndDate");
            if ((isAlertShown != null && !isAlertShown.equalsIgnoreCase("") && !isAlertShown.equalsIgnoreCase(null) && isAlertShown.equalsIgnoreCase("1"))) {
                if (timer_Alert_by_current_status == 1) {
                    StatusTask = "Hold";
                } else {
                    StatusTask = "Pause";
                }
                Log.i("tone123", "NewTaskConversation onFinish StatusTask===>" + StatusTask);
                String AlarmRingedUpdateQuery = "update taskDetailsInfo set taskPlannedLatestEndDate='0' where projectId='" + projectId + "'and taskId= '" + webtaskId + "'";
                Log.i("tone123", "updateSnoozeTime_query***********" + AlarmRingedUpdateQuery);
                VideoCallDataBase.getDB(context).updateaccept(AlarmRingedUpdateQuery);
                MainActivity.startAlarmRingTone();
                String get_OracleprojectId_query = "select oracleProjectId from projectDetails where loginuser = '" + Appreference.loginuserdetails.getEmail() + "'and projectId='" + projectId + "'";
                String OracleIdForProjectId = VideoCallDataBase.getDB(context).getprojectIdForOracleID(get_OracleprojectId_query);
                Intent intent = new Intent(NewTaskConversation.this, ShowTimeupAlert.class);
                intent.putExtra("projectId", projectId);
                intent.putExtra("taskId", webtaskId);
                intent.putExtra("OracleprojectId", OracleIdForProjectId);
                intent.putExtra("OracletaskId", getOracleTaskIdForProjectId());
                startActivity(intent);
            }
        }
    }

    public void submitClickEvent(TaskDetailsBean taskDetailsBean) {
        try {
            JSONObject jsonObject = new JSONObject();
            JSONObject id = new JSONObject();
            JSONObject from = new JSONObject();
            JSONObject to = new JSONObject();

            id.put("id", taskDetailsBean.getTaskId());
            jsonObject.put("task", id);
            from.put("id", Appreference.loginuserdetails.getId());
            jsonObject.put("from", from);
            to.put("id", dataBase.getUserid(taskDetailsBean.getTaskDescription()));
            jsonObject.put("to", to);
            jsonObject.put("requestType", "reassignTask");
            if (taskDetailsBean.getProjectId() != null && !taskDetailsBean.getProjectId().equalsIgnoreCase(null) && !taskDetailsBean.getProjectId().equalsIgnoreCase("null") && !taskDetailsBean.getProjectId().equalsIgnoreCase("")) {
                jsonObject.put("taskStatus", "inprogress");
            } else {
                jsonObject.put("taskStatus", "assigned");
            }
            jsonObject.put("parentId", taskDetailsBean.getParentId());
            taskDetailsBean.setSignalid(Utility.getSessionID());
            jsonObject.put("signalId", taskDetailsBean.getSignalid());
            JSONObject jsonObject4 = new JSONObject();
            JSONObject jsonObject5 = new JSONObject();
            jsonObject5.put("id", Appreference.loginuserdetails.getId());
            jsonObject4.put("user", jsonObject5);
            jsonObject4.put("user", jsonObject5);
            jsonObject4.put("fileType", "text");
            jsonObject4.put("description", "Task Reassigned to " + VideoCallDataBase.getDB(context).getname(taskDetailsBean.getTaskDescription()));

            JSONArray jsonArray = new JSONArray();
            jsonArray.put(0, jsonObject4);
            jsonObject.put("listTaskConversationFiles", jsonArray);
            Log.i("Taskconversation", "ScheduleReassign template" + jsonObject.toString());
            Appreference.jsonRequestSender.taskConversationEntry(EnumJsonWebservicename.taskConversationEntry, jsonObject, NewTaskConversation.this, null, null);

        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "submitClickEvent Exception : " + e.getMessage(), "WARN", null);
        }
    }

    @Override
    public void onDateChanged(Calendar c) {

    }

    public class DownloadCustomImage extends AsyncTask<String, Void, String> {
        String downloadImageurl;
        TaskDetailsBean detailsBean = null;
        String namevalue = "";

        public DownloadCustomImage(String url, String name) {
            this.downloadImageurl = url;
            namevalue = name;
        }

        public DownloadCustomImage(TaskDetailsBean name) {
            detailsBean = name;
            this.downloadImageurl = getResources().getString(R.string.task_reminder) + name.getPhotoPath();
            namevalue = name.getPhotoPath();
        }

        @Override
        protected String doInBackground(String... urls) {
            String response = "";
            try {
                Log.i("profiledownload", "downloadImageurl " + downloadImageurl);
                if (isNetworkAvailable()) {
//                    String url ="http://122.165.92.171:8080/uploads/highmessaging/user/";
                    Log.i("profiledownload", "profile download ");
                    String profile1 = null;
                    if (downloadImageurl != null) {
                        if (downloadImageurl.contains("task"))
                            profile1 = downloadImageurl.split("task/")[1];
                        else
                            profile1 = downloadImageurl.split("chat/")[1];
                        Log.i("profiledownload", "profile1  " + profile1);
                        File extStore = Environment.getExternalStorageDirectory();
                        File myFile = new File(extStore.getAbsolutePath() + "/High Message/downloads/" + profile1);
                        Log.i("profiledownload", "file " + myFile.toString());
                        if (!myFile.exists()) {
                            try {

                                URL bitmap = new URL(downloadImageurl);

                                Log.i("profiledownload", "profile bitmap " + bitmap);
                                HttpURLConnection connection =
                                        (HttpURLConnection) bitmap.openConnection();
//                                    connection.setHostnameVerifier(hostnameVerifier);
                                InputStream in = connection.getInputStream();
//                                    copyInputStreamToOutputStream(in, System.out);
                                connection.connect();
                                if (connection.getInputStream() != null) {
                                    InputStream inputStream = connection.getInputStream();
                                    String dir_path = Environment.getExternalStorageDirectory()
                                            + "/High Message/downloads";
                                    Log.i("profiledownload", "profile dir_path" + dir_path);
                                    File directory = new File(dir_path);
                                    if (!directory.exists())
                                        directory.mkdir();
                                    String filePath = Environment.getExternalStorageDirectory()
                                            .getAbsolutePath()
                                            + "/High Message/downloads/"
                                            + profile1;

                                    Log.d("profiledownload", "my file path is---->" + filePath);

                                    File file_name = new File(filePath);
                                    BufferedOutputStream bos = new BufferedOutputStream(
                                            new FileOutputStream(file_name));
                                    int inByte;
                                    while ((inByte = inputStream.read()) != -1) {
                                        bos.write(inByte);
                                    }
                                    bos.close();

                                    //** For  Avatar download
                                    //Start
                                    Log.d("profiledownload", "check ");
                                    Bitmap btmap = BitmapFactory.decodeStream(inputStream);
                                    if (connection.getContentLength() <= 0 && btmap == null) {
                                        Log.i("downavatar", "avatar download faild contact name-->");

                                    } else {
                                        Log.i("downavatar", "avatar download success contact name-->");
                                    }
                                    //End
//                                        Appreference.profile_image.put(profile, filePath);
                                }
                            } catch (FileNotFoundException e) {
                                e.printStackTrace();
                                Appreference.printLog("NewTaskConversation", "DownloadCustomImage Exception : " + e.getMessage(), "WARN", null);
                            } catch (Exception e) {
                                e.printStackTrace();
                                Appreference.printLog("NewTaskConversation", "DownloadCustomImage Exception : " + e.getMessage(), "WARN", null);
                            }
                        } else {
//                                Appreference.profile_image.put(profile, myFile.toString());
//                            Log.i("profiledownload", "file exit--->" + profile);
                        }
                    }

                }
            } catch (Exception e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "DownloadCustomImage Exception : " + e.getMessage(), "WARN", null);

            }
            return response;
        }

        @Override
        protected void onPostExecute(String result) {
            try {
                Log.i("Template creation", "mm1 ** " + namevalue);
                Log.i("Template creation", "TaskDescription1 ** ");
                Log.i("Template creation", "TaskDescription1 ** " + Appreference.taskMultimediaDownload.size());

                if (Appreference.taskMultimediaDownload != null && Appreference.taskMultimediaDownload.size() > 0) {
                    Iterator iterator1 = Appreference.taskMultimediaDownload.entrySet()
                            .iterator();
                    Log.i("Template creation", "mm11 " + namevalue);
                    //                Log.i("Template creation", "TaskDescription1 " + detailsBean.getTaskDescription());
                    while (iterator1.hasNext()) {
                        Map.Entry mapEntry = (Map.Entry) iterator1.next();
                        if (namevalue.equalsIgnoreCase(((TaskDetailsBean) mapEntry.getValue()).getCustomerSignature())) {
                            Log.i("Template creation", "mm " + namevalue);
                            detailsBean = (TaskDetailsBean) mapEntry.getValue();
                            File imageFile = new File(Environment.getExternalStorageDirectory()
                                    + "/High Message/downloads/" + detailsBean.getCustomerSignature());
                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "DownloadCustomImage Exception : " + e.getMessage(), "WARN", null);
            }
        }

        @Override
        protected void onPreExecute() {

            super.onPreExecute();
        }
    }

    public class CounterClass extends CountDownTimer {
        String from_userName, date_taskId;

        public CounterClass(long millisInFuture, long countDownInterval) {
            super(millisInFuture, countDownInterval);
            Log.i("task", "mills after " + millisInFuture);
            Log.i("task", "seconds after " + countDownInterval);
        }

        public void taskOverdue(TaskDetailsBean taskDetailsBean) {
            from_userName = taskDetailsBean.getOwnerOfTask();
            date_taskId = taskDetailsBean.getTaskId();
        }

        @Override
        public void onFinish() {
            Log.i("timer123", "onFinish Timer======>");
//            Log.i("estim123", "onFinish Timer isEstimTimer=====>"+Appreference.isEstimTimerStarted);
            if (Appreference.isEstimTimerStarted) {
                estimated_timer_tv.setVisibility(View.GONE);
                Estim_Timeup_Alert_Show();
            } else {
                reminingtime.setVisibility(View.GONE);
                TimeupAlert_Show();
            }
        }

        @Override
        protected void finalize() throws Throwable {
            super.finalize();
        }

        @Override
        public void onTick(long millisUntilFinished) {
            Log.i("ontick", "ontick");
//            Log.i("estim123", "onTick Timer isEstimTimer=====>"+Appreference.isEstimTimerStarted);

            try {
                if (Appreference.isEstimTimerStarted)
                    estimated_timer_tv.setVisibility(View.VISIBLE);
                else
                    reminingtime.setVisibility(View.VISIBLE);
                long millis = millisUntilFinished;
                isRem_time = true;
                String hms = String.format("%02d:%02d:%02d", TimeUnit.MILLISECONDS.toHours(millis), TimeUnit.MILLISECONDS.toMinutes(millis) - TimeUnit.HOURS.toMinutes(TimeUnit.MILLISECONDS.toHours(millis)), TimeUnit.MILLISECONDS.toSeconds(millis) - TimeUnit.MINUTES.toSeconds(TimeUnit.MILLISECONDS.toMinutes(millis)));

//                Log.i("estim123", "************************");
//                Log.i("estim123", "onTick Timer hms=====>"+hms);
                if (Appreference.isEstimTimerStarted)
                    estimated_timer_tv.setText(hms);
                else
                    reminingtime.setText(hms);

            } catch (Exception e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "CounterClass onTick Exception : " + e.getMessage(), "WARN", null);
            }
        }
    }

    private void showIntervals() {
        Log.i("interval123", "interval showIntervals");

        final String[] intervals = {"3 minutes", "5 minutes", "10 minutes", "15 minutes", "30 minutes"};

        AlertDialog.Builder builder =
                new AlertDialog.Builder(NewTaskConversation.this);
        builder.setTitle("Selección")
                .setSingleChoiceItems(intervals, -1,
                        new DialogInterface.OnClickListener() {
                            public void onClick(DialogInterface dialog, int item) {
                                Log.i("interval123", "interval options" + intervals[item]);
                            }
                        });
        builder.create();
    }

    /**
     * Insert DB Check with signal Id,If signal id are same we are not insert in the DB
     */
    public void sortTaskMessage() {
        try {
            Collections.sort(taskList, new Comparator<TaskDetailsBean>() {
                public int compare(TaskDetailsBean o1, TaskDetailsBean o2) {
                    if (o1.getDateTime() == null || o2.getDateTime() == null)
                        return 0;
                    Log.i("sortmessage", "TASK HISTORY List size  = " + taskList.size() + "  ==" + o2.getDateTime().compareTo(o1.getDateTime()));
                    Log.i("sortmessage", "TASK HISTORY List size  = " + taskList.size() + "  ==" + o1.getDateTime() + " ==1 " + " ==2 " + (o2.getDateTime()));
                    return o1.getDateTime().compareTo(o2.getDateTime());
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "sortTaskMessage Exception : " + e.getMessage(), "WARN", null);
            Log.d("Sorting", "Sorting problem");
        }
        refresh();
    }

    @Override
    public boolean onTouchEvent(MotionEvent event) {
        return gestureScanner.onTouchEvent(event);
    }

    GestureDetector.SimpleOnGestureListener simpleOnGestureListener =
            new GestureDetector.SimpleOnGestureListener() {
                int MAJOR_MOVE = 100;
                int MAJOR_MOVE_Y = 100;

                @Override
                public boolean onDown(MotionEvent event) {
                    return true;
                }

                @Override
                public boolean onFling(MotionEvent event1, MotionEvent event2, float velocityX, float velocityY) {
                    Log.i("onFling", "e1" + event1);
                    Log.i("onFling", "e2" + event2);
                    Log.i("onFling", "event1 x :" + event1.getX() + " y :" + event1.getY());
                    Log.i("onFling", "event2 x :" + event2.getX() + " y :" + event2.getY());
                    int dx = (int) (event2.getX() - event1.getX());
                    int dy = (int) (event2.getY() - event1.getY());
                    if (Math.abs(dx) > MAJOR_MOVE
                            && Math.abs(velocityX) > Math.abs(velocityY)) {
                        if (Math.abs(dy) < MAJOR_MOVE_Y) {
                            if (velocityX > 0) {
                                moveGraph("L");
                            } else {
                                moveGraph("R");
                            }
                            return true;

                        } else
                            return false;
                    } else {
                        return false;
                    }
                }
            };

    public void moveGraph(String swiped_direction) {
        Log.i("onFling", "side : " + swiped_direction);
        try {
            if (swiped_direction.equals("R")) {
                if (template && isNewTemplate) {
                    if (!Appreference.context_table.containsKey("assignedtemplates")) {
                        Intent intent = new Intent(NewTaskConversation.this, AssignedTemplates.class);
                        intent.putExtra("taskid", webtaskId);
                        startActivity(intent);
                    }
                } else if (taskType.equalsIgnoreCase("Group")) {
                    if (!Appreference.context_table.containsKey("grouppercentagestatus") && webtaskId != null) {
                        if (ownerOfTask.equalsIgnoreCase(Appreference.loginuserdetails.getUsername())) {
                            Intent intent = new Intent(NewTaskConversation.this, GroupPercentageStatus.class);
                            intent.putExtra("taskid", webtaskId);
                            Log.i("project_details", "Group toUserId " + toUserId);
                            intent.putExtra("groupId", String.valueOf(toUserId));
                            intent.putExtra("subtype", "normal");
                            if (project) {
                                intent.putExtra("isProject", "yes");
                                intent.putExtra("isreceiver", false);
                            } else {
                                intent.putExtra("isProject", "no");
                            }
                            Log.i("normal message", "chatusers for normal ");
                            startActivity(intent);
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "moveGraph Exception : " + e.getMessage(), "WARN", null);
        }
    }

    public static enum Action {
        LR, // Left to Right
        RL, // Right to Left
        TB, // Top to bottom
        BT, // Bottom to Top
        None // when no action was detected
    }


}

class ImageAdapter extends BaseAdapter {
    private Context mContext;
    private String[] grid_text; /*= {
            "Private", "Priority",
            "Escalation", "Scheduled",
            "Audio", "Photo", "Sketch", "Video",
            "File", "Dates", "Completion", "Call", "AddObserver", "Chat", "Description", "Forms", "Reassign Task", "Reminder Responses", "Remind Me"
//            , "moreFields"

    };*/
    // references to our images
    private Integer[] grid_thump; /*= {
            R.drawable.ic_private123, R.drawable.priority_grid,
            R.drawable.sketch_grid, R.drawable.missedcall_32,
            R.drawable.audiofilefilled_32, R.drawable.photo_grid,
            R.drawable.sketch_grid, R.drawable.video_grid,
            R.drawable.file_grid, R.drawable.date_grid,
            R.drawable.percent_grid, R.drawable.call_grid,
            R.drawable.observer_grid, R.drawable.chat_grid1,
            R.drawable.desceiption_grid, R.drawable.forms, R.drawable.reassign_task_new,
            R.mipmap.ic_reminder_icon, R.drawable.remind_me
//            , R.drawable.ic_rectangle_filled_100
    };*/

    public ImageAdapter(String[] txt, Integer[] thump, Context c) {
        mContext = c;
        grid_text = txt;
        grid_thump = thump;
    }

    public int getCount() {
        return grid_thump.length;
    }

    public Object getItem(int position) {
        return null;
    }

    public long getItemId(int position) {
        return 0;
    }

    // create a new ImageView for each item referenced by the Adapter
    public View getView(int position, View convertView, ViewGroup parent) {
        View grid;
        LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        grid = inflater.inflate(R.layout.gridviewsingle, null);
        Log.i("gridview", "view position " + position);
        if (position < grid_text.length) {
            Log.i("NewTaskConversation", "ImageAdapter If " + grid_text[position]);
            TextView textView = (TextView) grid.findViewById(R.id.grid_text);
            ImageView imageView = (ImageView) grid.findViewById(R.id.grid_image);
            Log.i("grid", "text value " + grid_text[position]);
            try {
                textView.setText(grid_text[position]);
                Log.i("grid", "text value " + grid_thump[position]);
                imageView.setImageResource(grid_thump[position]);
            } catch (Exception e) {
                e.printStackTrace();
                Appreference.printLog("NewTaskConversation", "ImageAdapter Exception : " + e.getMessage(), "WARN", null);
            }
        }
        return grid;
    }
}

class ImageTakerAdapter extends BaseAdapter {
    private Context mContext;
    private String[] gridtaker_texts;/* = {
            "Private", "Leave",
            "Scheduled", "Audio",
            "Photo", "Sketch", "Video",
            "File", "Completion", "Call", "Forms", "Reminder Responses"
            //            , "moreFields"
    };*/
    // references to our images
    private Integer[] gridtaker_mThumbIds; /*= {
            R.drawable.private_chat, R.drawable.leave,
            R.drawable.missedcall_32, R.drawable.audiofilefilled_32,
            R.drawable.photo_grid, R.drawable.sketch_grid,
            R.drawable.video_grid, R.drawable.file_grid,
            R.drawable.percent_grid, R.drawable.call_grid,
            R.drawable.forms, R.mipmap.ic_reminder_icon
            //            , R.drawable.ic_rectangle_filled_100
    };*/

    public ImageTakerAdapter(String[] txt, Integer[] thump, Context c) {
        gridtaker_texts = txt;
        gridtaker_mThumbIds = thump;
        mContext = c;
    }

    public int getCount() {
        return gridtaker_mThumbIds.length;
    }

    public Object getItem(int position) {
        return null;
    }

    public long getItemId(int position) {
        return 0;
    }

    // create a new ImageView for each item referenced by the Adapter
    public View getView(int position, View convertView, ViewGroup parent) {
        View grid;
        LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        Log.i("gridview", "view position " + position);
        grid = inflater.inflate(R.layout.gridviewsingle, null);
        TextView textView = (TextView) grid.findViewById(R.id.grid_text);
        ImageView imageView = (ImageView) grid.findViewById(R.id.grid_image);
        try {
            textView.setText(gridtaker_texts[position]);
            imageView.setImageResource(gridtaker_mThumbIds[position]);
        } catch (ArrayIndexOutOfBoundsException e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "ImageTakerAdapter Exception : " + e.getMessage(), "WARN", null);
        } catch (Exception e) {
            e.printStackTrace();
            Appreference.printLog("NewTaskConversation", "ImageTakerAdapter Exception : " + e.getMessage(), "WARN", null);
        }
        return grid;
    }

}
